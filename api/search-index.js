var searchIndex={};
searchIndex["clif_json"] = {"doc":"Utility for `cranelift_serde`.","i":[[5,"call_ser","clif_json","",null,[[["str"],["bool"]],[["result",["string"]],["string"]]]],[5,"call_de","","",null,[[["file"]],[["result",["string"]],["string"]]]],[5,"main","","",null,[[]]],[0,"serde_clif_json","","",null,null],[3,"SerInst","clif_json::serde_clif_json","Serializable version of Cranelift IR instructions.",null,null],[12,"inst_name","","",0,null],[12,"inst_data","","",0,null],[3,"SerBlock","","Serializable version of Cranelift IR Blocks.",null,null],[12,"block","","",1,null],[12,"params","","",1,null],[12,"insts","","",1,null],[3,"SerDataFlowGraph","","Serializable Data Flow Graph.",null,null],[12,"blocks","","",2,null],[3,"SerSignature","","Serializable signature including function parameters and…",null,null],[12,"func_params","","",3,null],[12,"func_returns","","",3,null],[3,"SerFunction","","Serializable Function type, including name, signature,…",null,null],[12,"name","","",4,null],[12,"signature","","",4,null],[12,"globals","","",4,null],[12,"dfg","","",4,null],[3,"SerObj","","Must have SerObj for deserialization, contains all of the…",null,null],[12,"functions","","",5,null],[4,"SerInstData","","Serializable version of the original Cranelift IR",null,null],[13,"Unary","","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",7,null],[12,"arg","","",7,null],[13,"UnaryImm","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",8,null],[12,"imm","","",8,null],[13,"UnaryIeee32","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",9,null],[12,"imm","","",9,null],[13,"UnaryIeee64","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",10,null],[12,"imm","","",10,null],[13,"UnaryBool","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",11,null],[12,"imm","","",11,null],[13,"UnaryGlobalValue","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",12,null],[12,"global_value","","",12,null],[13,"Binary","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",13,null],[12,"args","","",13,null],[13,"BinaryImm","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",14,null],[12,"arg","","",14,null],[12,"imm","","",14,null],[13,"Ternary","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",15,null],[12,"args","","",15,null],[13,"MultiAry","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",16,null],[12,"args","","",16,null],[13,"NullAry","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",17,null],[13,"InsertLane","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",18,null],[12,"args","","",18,null],[12,"lane","","",18,null],[13,"ExtractLane","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",19,null],[12,"arg","","",19,null],[12,"lane","","",19,null],[13,"Shuffle","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",20,null],[12,"args","","",20,null],[12,"mask","","",20,null],[13,"IntCompare","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",21,null],[12,"args","","",21,null],[12,"cond","","",21,null],[13,"IntCompareImm","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",22,null],[12,"arg","","",22,null],[12,"cond","","",22,null],[12,"imm","","",22,null],[13,"IntCond","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",23,null],[12,"arg","","",23,null],[12,"cond","","",23,null],[13,"FloatCompare","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",24,null],[12,"args","","",24,null],[12,"cond","","",24,null],[13,"FloatCond","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",25,null],[12,"arg","","",25,null],[12,"cond","","",25,null],[13,"IntSelect","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",26,null],[12,"args","","",26,null],[12,"cond","","",26,null],[13,"Jump","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",27,null],[12,"args","","",27,null],[12,"destination","","",27,null],[13,"Branch","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",28,null],[12,"args","","",28,null],[12,"destination","","",28,null],[13,"BranchInt","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",29,null],[12,"args","","",29,null],[12,"cond","","",29,null],[12,"destination","","",29,null],[13,"BranchFloat","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",30,null],[12,"args","","",30,null],[12,"cond","","",30,null],[12,"destination","","",30,null],[13,"BranchIcmp","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",31,null],[12,"args","","",31,null],[12,"cond","","",31,null],[12,"destination","","",31,null],[13,"BranchTable","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",32,null],[12,"arg","","",32,null],[12,"destination","","",32,null],[12,"table","","",32,null],[13,"BranchTableEntry","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",33,null],[12,"args","","",33,null],[12,"imm","","",33,null],[12,"table","","",33,null],[13,"BranchTableBase","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",34,null],[12,"table","","",34,null],[13,"IndirectJump","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",35,null],[12,"arg","","",35,null],[12,"table","","",35,null],[13,"Call","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",36,null],[12,"args","","",36,null],[12,"func_ref","","",36,null],[13,"CallIndirect","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",37,null],[12,"args","","",37,null],[12,"sig_ref","","",37,null],[13,"FuncAddr","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",38,null],[12,"func_ref","","",38,null],[13,"Load","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",39,null],[12,"arg","","",39,null],[12,"flags","","",39,null],[12,"offset","","",39,null],[13,"LoadComplex","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",40,null],[12,"args","","",40,null],[12,"flags","","",40,null],[12,"offset","","",40,null],[13,"Store","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",41,null],[12,"args","","",41,null],[12,"flags","","",41,null],[12,"offset","","",41,null],[13,"StoreComplex","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",42,null],[12,"args","","",42,null],[12,"flags","","",42,null],[12,"offset","","",42,null],[13,"StackLoad","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",43,null],[12,"stack_slot","","",43,null],[12,"offset","","",43,null],[13,"StackStore","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",44,null],[12,"arg","","",44,null],[12,"stack_slot","","",44,null],[12,"offset","","",44,null],[13,"HeapAddr","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",45,null],[12,"arg","","",45,null],[12,"heap","","",45,null],[12,"imm","","",45,null],[13,"TableAddr","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",46,null],[12,"arg","","",46,null],[12,"table","","",46,null],[12,"offset","","",46,null],[13,"RegMove","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",47,null],[12,"arg","","",47,null],[12,"src","","",47,null],[12,"dst","","",47,null],[13,"CopySpecial","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",48,null],[12,"src","","",48,null],[12,"dst","","",48,null],[13,"CopyToSsa","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",49,null],[12,"src","","",49,null],[13,"RegSpill","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",50,null],[12,"arg","","",50,null],[12,"src","","",50,null],[12,"dst","","",50,null],[13,"RegFill","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",51,null],[12,"arg","","",51,null],[12,"src","","",51,null],[12,"dst","","",51,null],[13,"Trap","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",52,null],[12,"code","","",52,null],[13,"CondTrap","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",53,null],[12,"arg","","",53,null],[12,"code","","",53,null],[13,"IntCondTrap","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",54,null],[12,"arg","","",54,null],[12,"cond","","",54,null],[12,"code","","",54,null],[13,"FloatCondTrap","clif_json::serde_clif_json","",6,null],[12,"opcode","clif_json::serde_clif_json::SerInstData","",55,null],[12,"arg","","",55,null],[12,"cond","","",55,null],[12,"code","","",55,null],[5,"get_inst_data","clif_json::serde_clif_json","Convert Cranelift IR instructions to JSON format.",null,[[["inst"],["function"]],["serinstdata"]]],[5,"populate_inst","","",null,[[["block"],["function"]],[["vec",["serinst"]],["serinst"]]]],[5,"populate_params","","Translating Block parameters into serializable parameters.",null,[[["block"],["function"]],[["vec",["string"]],["string"]]]],[5,"populate_blocks","","Serialize all parts of the Cranelift Block data structure,…",null,[[["function"]],[["serblock"],["vec",["serblock"]]]]],[17,"_IMPL_SERIALIZE_FOR_SerInstData","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_SerInstData","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_SerInst","","",null,null],[17,"_IMPL_SERIALIZE_FOR_SerInst","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_SerBlock","","",null,null],[17,"_IMPL_SERIALIZE_FOR_SerBlock","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_SerDataFlowGraph","","",null,null],[17,"_IMPL_SERIALIZE_FOR_SerDataFlowGraph","","",null,null],[17,"_IMPL_SERIALIZE_FOR_SerSignature","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_SerSignature","","",null,null],[17,"_IMPL_SERIALIZE_FOR_SerFunction","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_SerFunction","","",null,null],[17,"_IMPL_SERIALIZE_FOR_SerObj","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_SerObj","","",null,null],[11,"new","","",0,[[["inst"],["function"]],["self"]]],[11,"new","","",1,[[["string"]],["self"]]],[11,"create_new","","",2,[[["function"]],["self"]]],[11,"new","","",2,[[["function"]],["self"]]],[11,"create_new","","Creating serializable signature data structure from all…",3,[[["signature"]],["self"]]],[11,"new","","",3,[[["function"]],["self"]]],[11,"create_new","","Creates serializable global values, as well as the…",4,[[["function"]],["self"]]],[11,"new","","",4,[[["function"]],["self"]]],[11,"create_new","","",5,[[["vec",["serfunction"]],["serfunction"]],["self"]]],[11,"new","","",5,[[],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"equivalent","","",6,[[["k"],["self"]],["bool"]]],[11,"clone","","",6,[[["self"]],["serinstdata"]]],[11,"clone","","",0,[[["self"]],["serinst"]]],[11,"clone","","",1,[[["self"]],["serblock"]]],[11,"eq","","",6,[[["serinstdata"],["self"]],["bool"]]],[11,"ne","","",6,[[["serinstdata"],["self"]],["bool"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"deserialize","","",6,[[["__d"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]],[11,"deserialize","","",1,[[["__d"]],["result"]]],[11,"deserialize","","",2,[[["__d"]],["result"]]],[11,"deserialize","","",3,[[["__d"]],["result"]]],[11,"deserialize","","",4,[[["__d"]],["result"]]],[11,"deserialize","","",5,[[["__d"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","","",2,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]]],"p":[[3,"SerInst"],[3,"SerBlock"],[3,"SerDataFlowGraph"],[3,"SerSignature"],[3,"SerFunction"],[3,"SerObj"],[4,"SerInstData"],[13,"Unary"],[13,"UnaryImm"],[13,"UnaryIeee32"],[13,"UnaryIeee64"],[13,"UnaryBool"],[13,"UnaryGlobalValue"],[13,"Binary"],[13,"BinaryImm"],[13,"Ternary"],[13,"MultiAry"],[13,"NullAry"],[13,"InsertLane"],[13,"ExtractLane"],[13,"Shuffle"],[13,"IntCompare"],[13,"IntCompareImm"],[13,"IntCond"],[13,"FloatCompare"],[13,"FloatCond"],[13,"IntSelect"],[13,"Jump"],[13,"Branch"],[13,"BranchInt"],[13,"BranchFloat"],[13,"BranchIcmp"],[13,"BranchTable"],[13,"BranchTableEntry"],[13,"BranchTableBase"],[13,"IndirectJump"],[13,"Call"],[13,"CallIndirect"],[13,"FuncAddr"],[13,"Load"],[13,"LoadComplex"],[13,"Store"],[13,"StoreComplex"],[13,"StackLoad"],[13,"StackStore"],[13,"HeapAddr"],[13,"TableAddr"],[13,"RegMove"],[13,"CopySpecial"],[13,"CopyToSsa"],[13,"RegSpill"],[13,"RegFill"],[13,"Trap"],[13,"CondTrap"],[13,"IntCondTrap"],[13,"FloatCondTrap"]]};
searchIndex["clif_util"] = {"doc":"","i":[[5,"add_input_file_arg","clif_util","",null,[[],["arg"]]],[5,"add_single_input_file_arg","","",null,[[],["arg"]]],[5,"add_pass_arg","","",null,[[],["arg"]]],[5,"add_verbose_flag","","",null,[[],["arg"]]],[5,"add_time_flag","","",null,[[],["arg"]]],[5,"add_size_flag","","",null,[[],["arg"]]],[5,"add_disasm_flag","","",null,[[],["arg"]]],[5,"add_set_flag","","",null,[[],["arg"]]],[5,"add_target_flag","","",null,[[],["arg"]]],[5,"add_print_flag","","",null,[[],["arg"]]],[5,"add_debug_flag","","",null,[[],["arg"]]],[5,"add_just_decode_flag","","",null,[[],["arg"]]],[5,"add_check_translation_flag","","",null,[[],["arg"]]],[5,"get_vec","","Returns a vector of clap value options and changes these…",null,[[["option",["values"]],["values"]],[["vec",["string"]],["string"]]]],[5,"add_wasm_or_compile","","",null,[[["str"]],["app"]]],[5,"handle_debug_flag","","",null,[[["bool"]]]],[5,"main","","",null,[[]]],[0,"bugpoint","","CLI tool to reduce Cranelift IR files crashing during…",null,null],[3,"RemoveInst","clif_util::bugpoint","Try to remove instructions.",null,null],[12,"block","","",0,null],[12,"inst","","",0,null],[3,"ReplaceInstWithConst","","Try to replace instructions with `iconst` or `fconst`.",null,null],[12,"block","","",1,null],[12,"inst","","",1,null],[3,"ReplaceInstWithTrap","","Try to replace instructions with `trap`.",null,null],[12,"block","","",2,null],[12,"inst","","",2,null],[3,"RemoveBlock","","Try to remove a block.",null,null],[12,"block","","",3,null],[3,"RemoveUnusedEntities","","Try to remove unused entities.",null,null],[12,"kind","","",4,null],[3,"MergeBlocks","","",null,null],[12,"block","","",5,null],[12,"prev_block","","",5,null],[3,"CrashCheckContext","","",null,null],[12,"context","","Cached `Context`, to prevent repeated allocation.",6,null],[12,"code_memory","","Cached code memory, to prevent repeated allocation.",6,null],[12,"isa","","The target isa to compile for.",6,null],[4,"ProgressStatus","","",null,null],[13,"ExpandedOrShrinked","","The mutation raised or reduced the amount of instructions…",7,null],[13,"Changed","","The mutation only changed an instruction. Performing…",7,null],[13,"Skip","","No need to re-test if the program crashes, because the…",7,null],[4,"CheckResult","","",null,null],[13,"Succeed","","The function compiled fine, or the verifier noticed an…",8,null],[13,"Crash","","The compilation of the function panicked.",8,null],[5,"run","","",null,[[["str"],["bool"]],[["result",["string"]],["string"]]]],[5,"next_inst_ret_prev","","",null,[[["function"],["block"],["inst"]],["option"]]],[5,"block_count","","",null,[[["function"]],["usize"]]],[5,"inst_count","","",null,[[["function"]],["usize"]]],[5,"resolve_aliases","","",null,[[["function"]]]],[5,"reduce","","",null,[[["bool"],["targetisa"],["function"]],[["string"],["result",["string"]]]]],[5,"get_panic_string","","",null,[[["box",["any"]],["any"]],["string"]]],[8,"Mutator","","",null,null],[10,"name","","",9,[[["self"]],["str"]]],[10,"mutation_count","","",9,[[["function"],["self"]],["usize"]]],[10,"mutate","","",9,[[["self"],["function"]],["option"]]],[11,"did_crash","","Gets called when the returned mutated function kept on…",9,[[["self"]]]],[11,"new","","",0,[[["function"]],["self"]]],[11,"new","","",1,[[["function"]],["self"]]],[11,"const_for_type","","",1,[[["type"],["instbuilder"]],["str"]]],[11,"new","","",2,[[["function"]],["self"]]],[11,"new","","",3,[[["function"]],["self"]]],[11,"new","","",4,[[],["self"]]],[11,"new","","",5,[[["function"]],["self"]]],[11,"new","","",6,[[["targetisa"]],["self"]]],[11,"check_for_crash","","",6,[[["function"],["self"]],["checkresult"]]],[0,"cat","clif_util","The `cat` sub-command.",null,null],[5,"run","clif_util::cat","",null,[[],["commandresult"]]],[5,"cat_one","","",null,[[["str"]],["commandresult"]]],[0,"compile","clif_util","CLI tool to read Cranelift IR files and compile them into…",null,null],[5,"run","clif_util::compile","",null,[[["string"],["vec",["string"]],["str"],["bool"]],[["result",["string"]],["string"]]]],[5,"handle_module","","",null,[[["str"],["flagsorisa"],["pathbuf"],["bool"]],[["result",["string"]],["string"]]]],[0,"disasm","clif_util","",null,null],[3,"PrintRelocs","clif_util::disasm","",null,null],[12,"flag_print","","",10,null],[12,"text","","",10,null],[3,"PrintTraps","","",null,null],[12,"flag_print","","",11,null],[12,"text","","",11,null],[3,"PrintStackmaps","","",null,null],[12,"flag_print","","",12,null],[12,"text","","",12,null],[5,"get_disassembler","","",null,[[["targetisa"]],[["capstone"],["result",["capstone","string"]],["string"]]]],[5,"print_disassembly","","",null,[[["targetisa"]],[["result",["string"]],["string"]]]],[5,"print_all","","",null,[[["u32"],["targetisa"],["printtraps"],["printstackmaps"],["printrelocs"]],[["result",["string"]],["string"]]]],[5,"print_bytes","","",null,[[]]],[5,"print_readonly_data","","",null,[[]]],[11,"new","","",10,[[["bool"]],["self"]]],[11,"new","","",11,[[["bool"]],["self"]]],[11,"new","","",12,[[["bool"]],["self"]]],[0,"print_cfg","clif_util","The `print-cfg` sub-command.",null,null],[5,"run","clif_util::print_cfg","",null,[[],["commandresult"]]],[5,"print_cfg","","",null,[[["str"]],["commandresult"]]],[0,"run","clif_util","CLI tool to compile Cranelift IR files to native code in…",null,null],[5,"run","clif_util::run","",null,[[["bool"],["vec",["string"]],["string"]],[["result",["string"]],["string"]]]],[5,"iterate_files","","Iterate over all of the files passed as arguments,…",null,[[["vec",["string"]],["string"]]]],[5,"run_single_file","","Run all functions in a file that are succeeded by \"run:\"…",null,[[["pathbuf"]],[["result",["string"]],["string"]]]],[5,"run_file_contents","","Main body of `run_single_file` separated for testing",null,[[["string"]],[["result",["string"]],["string"]]]],[5,"create_target_isa","","Build an ISA based on the current machine running this…",null,[[["isaspec"]],[["result",["box","string"]],["box",["targetisa"]],["string"]]]],[0,"utils","clif_util","Utility functions.",null,null],[4,"OwnedFlagsOrIsa","clif_util::utils","Like `FlagsOrIsa`, but holds ownership.",null,null],[13,"Flags","","",13,null],[13,"Isa","","",13,null],[5,"read_to_string","","Read an entire file into a string.",null,[[["asref",["path"]],["path"]],[["result",["string"]],["string"]]]],[5,"parse_sets_and_triple","","Parse \"set\" and \"triple\" commands.",null,[[["str"]],[["result",["ownedflagsorisa","string"]],["ownedflagsorisa"],["string"]]]],[11,"as_fisa","","Produce a FlagsOrIsa reference.",13,[[["self"]],["flagsorisa"]]],[0,"wasm","clif_util","CLI tool to use the functions provided by the…",null,null],[5,"run","clif_util::wasm","",null,[[["string"],["vec",["string"]],["str"],["bool"]],[["result",["string"]],["string"]]]],[5,"handle_module","","",null,[[["str"],["flagsorisa"],["pathbuf"],["bool"]],[["result",["string"]],["string"]]]],[6,"CommandResult","clif_util","A command either succeeds or fails with an error message.",null,null],[11,"from","clif_util::bugpoint","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","clif_util::disasm","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","clif_util::utils","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"name","clif_util::bugpoint","",0,[[["self"]],["str"]]],[11,"mutation_count","","",0,[[["function"],["self"]],["usize"]]],[11,"mutate","","",0,[[["self"],["function"]],["option"]]],[11,"name","","",1,[[["self"]],["str"]]],[11,"mutation_count","","",1,[[["function"],["self"]],["usize"]]],[11,"mutate","","",1,[[["self"],["function"]],["option"]]],[11,"name","","",2,[[["self"]],["str"]]],[11,"mutation_count","","",2,[[["function"],["self"]],["usize"]]],[11,"mutate","","",2,[[["self"],["function"]],["option"]]],[11,"name","","",3,[[["self"]],["str"]]],[11,"mutation_count","","",3,[[["function"],["self"]],["usize"]]],[11,"mutate","","",3,[[["self"],["function"]],["option"]]],[11,"name","","",4,[[["self"]],["str"]]],[11,"mutation_count","","",4,[[["function"],["self"]],["usize"]]],[11,"mutate","","",4,[[["self"],["function"]],["option"]]],[11,"name","","",5,[[["self"]],["str"]]],[11,"mutation_count","","",5,[[["function"],["self"]],["usize"]]],[11,"mutate","","",5,[[["self"],["function"]],["option"]]],[11,"did_crash","","",5,[[["self"]]]],[11,"reloc_block","clif_util::disasm","",10,[[["reloc"],["codeoffset"],["self"]]]],[11,"reloc_external","","",10,[[["addend"],["reloc"],["codeoffset"],["self"],["externalname"]]]],[11,"reloc_jt","","",10,[[["reloc"],["codeoffset"],["jumptable"],["self"]]]],[11,"reloc_constant","","",10,[[["reloc"],["codeoffset"],["self"],["constantoffset"]]]],[11,"trap","","",11,[[["codeoffset"],["trapcode"],["sourceloc"],["self"]]]],[11,"add_stackmap","","",12,[[["self"],["codeoffset"],["stackmap"]]]]],"p":[[3,"RemoveInst"],[3,"ReplaceInstWithConst"],[3,"ReplaceInstWithTrap"],[3,"RemoveBlock"],[3,"RemoveUnusedEntities"],[3,"MergeBlocks"],[3,"CrashCheckContext"],[4,"ProgressStatus"],[4,"CheckResult"],[8,"Mutator"],[3,"PrintRelocs"],[3,"PrintTraps"],[3,"PrintStackmaps"],[4,"OwnedFlagsOrIsa"]]};
searchIndex["cranelift"] = {"doc":"Cranelift umbrella crate, providing a convenient one-line…","i":[[0,"prelude","cranelift","A prelude providing convenient access to commonly-used…",null,null],[8,"EntityRef","cranelift::prelude","A type wrapping a small integer index should implement…",null,null],[10,"new","","Create a new entity reference from a small integer. This…",0,[[["usize"]],["self"]]],[10,"index","","Get the index that was used to create this entity reference.",0,[[],["usize"]]],[4,"FloatCC","","Condition code for comparing floating point numbers.",null,null],[13,"Ordered","","EQ | LT | GT",1,null],[13,"Unordered","","UN",1,null],[13,"Equal","","EQ",1,null],[13,"NotEqual","","The C '!=' operator is the inverse of '==': `NotEqual`. UN…",1,null],[13,"OrderedNotEqual","","LT | GT",1,null],[13,"UnorderedOrEqual","","UN | EQ",1,null],[13,"LessThan","","LT",1,null],[13,"LessThanOrEqual","","LT | EQ",1,null],[13,"GreaterThan","","GT",1,null],[13,"GreaterThanOrEqual","","GT | EQ",1,null],[13,"UnorderedOrLessThan","","UN | LT",1,null],[13,"UnorderedOrLessThanOrEqual","","UN | LT | EQ",1,null],[13,"UnorderedOrGreaterThan","","UN | GT",1,null],[13,"UnorderedOrGreaterThanOrEqual","","UN | GT | EQ",1,null],[4,"IntCC","","Condition code for comparing integers.",null,null],[13,"Equal","","`==`.",2,null],[13,"NotEqual","","`!=`.",2,null],[13,"SignedLessThan","","Signed `<`.",2,null],[13,"SignedGreaterThanOrEqual","","Signed `>=`.",2,null],[13,"SignedGreaterThan","","Signed `>`.",2,null],[13,"SignedLessThanOrEqual","","Signed `<=`.",2,null],[13,"UnsignedLessThan","","Unsigned `<`.",2,null],[13,"UnsignedGreaterThanOrEqual","","Unsigned `>=`.",2,null],[13,"UnsignedGreaterThan","","Unsigned `>`.",2,null],[13,"UnsignedLessThanOrEqual","","Unsigned `<=`.",2,null],[13,"Overflow","","Signed Overflow.",2,null],[13,"NotOverflow","","Signed No Overflow.",2,null],[3,"Ieee32","","An IEEE binary32 immediate floating point value,…",null,null],[3,"Ieee64","","An IEEE binary64 immediate floating point value,…",null,null],[3,"Imm64","","64-bit immediate signed integer operand.",null,null],[3,"Uimm64","","64-bit immediate unsigned integer operand.",null,null],[0,"types","","Common types for the Cranelift code generator.",null,null],[3,"Type","cranelift::prelude::types","The type of an SSA value.",null,null],[17,"INVALID","","Not a valid type. Can't be loaded or stored. Can't be part…",null,null],[17,"IFLAGS","","CPU flags representing the result of an integer…",null,null],[17,"FFLAGS","","CPU flags representing the result of a floating point…",null,null],[17,"B1","","A boolean type with 1 bits.",null,null],[17,"B8","","A boolean type with 8 bits.",null,null],[17,"B16","","A boolean type with 16 bits.",null,null],[17,"B32","","A boolean type with 32 bits.",null,null],[17,"B64","","A boolean type with 64 bits.",null,null],[17,"B128","","A boolean type with 128 bits.",null,null],[17,"I8","","An integer type with 8 bits. WARNING: arithmetic on 8bit…",null,null],[17,"I16","","An integer type with 16 bits. WARNING: arithmetic on 16bit…",null,null],[17,"I32","","An integer type with 32 bits.",null,null],[17,"I64","","An integer type with 64 bits.",null,null],[17,"I128","","An integer type with 128 bits.",null,null],[17,"F32","","A 32-bit floating point type represented in the IEEE…",null,null],[17,"F64","","A 64-bit floating point type represented in the IEEE…",null,null],[17,"R32","","An opaque reference type with 32 bits.",null,null],[17,"R64","","An opaque reference type with 64 bits.",null,null],[17,"B8X8","","A SIMD vector with 8 lanes containing a `b8` each.",null,null],[17,"B16X4","","A SIMD vector with 4 lanes containing a `b16` each.",null,null],[17,"B32X2","","A SIMD vector with 2 lanes containing a `b32` each.",null,null],[17,"I8X8","","A SIMD vector with 8 lanes containing a `i8` each.",null,null],[17,"I16X4","","A SIMD vector with 4 lanes containing a `i16` each.",null,null],[17,"I32X2","","A SIMD vector with 2 lanes containing a `i32` each.",null,null],[17,"F32X2","","A SIMD vector with 2 lanes containing a `f32` each.",null,null],[17,"B8X16","","A SIMD vector with 16 lanes containing a `b8` each.",null,null],[17,"B16X8","","A SIMD vector with 8 lanes containing a `b16` each.",null,null],[17,"B32X4","","A SIMD vector with 4 lanes containing a `b32` each.",null,null],[17,"B64X2","","A SIMD vector with 2 lanes containing a `b64` each.",null,null],[17,"I8X16","","A SIMD vector with 16 lanes containing a `i8` each.",null,null],[17,"I16X8","","A SIMD vector with 8 lanes containing a `i16` each.",null,null],[17,"I32X4","","A SIMD vector with 4 lanes containing a `i32` each.",null,null],[17,"I64X2","","A SIMD vector with 2 lanes containing a `i64` each.",null,null],[17,"F32X4","","A SIMD vector with 4 lanes containing a `f32` each.",null,null],[17,"F64X2","","A SIMD vector with 2 lanes containing a `f64` each.",null,null],[17,"B8X32","","A SIMD vector with 32 lanes containing a `b8` each.",null,null],[17,"B16X16","","A SIMD vector with 16 lanes containing a `b16` each.",null,null],[17,"B32X8","","A SIMD vector with 8 lanes containing a `b32` each.",null,null],[17,"B64X4","","A SIMD vector with 4 lanes containing a `b64` each.",null,null],[17,"B128X2","","A SIMD vector with 2 lanes containing a `b128` each.",null,null],[17,"I8X32","","A SIMD vector with 32 lanes containing a `i8` each.",null,null],[17,"I16X16","","A SIMD vector with 16 lanes containing a `i16` each.",null,null],[17,"I32X8","","A SIMD vector with 8 lanes containing a `i32` each.",null,null],[17,"I64X4","","A SIMD vector with 4 lanes containing a `i64` each.",null,null],[17,"I128X2","","A SIMD vector with 2 lanes containing a `i128` each.",null,null],[17,"F32X8","","A SIMD vector with 8 lanes containing a `f32` each.",null,null],[17,"F64X4","","A SIMD vector with 4 lanes containing a `f64` each.",null,null],[17,"B8X64","","A SIMD vector with 64 lanes containing a `b8` each.",null,null],[17,"B16X32","","A SIMD vector with 32 lanes containing a `b16` each.",null,null],[17,"B32X16","","A SIMD vector with 16 lanes containing a `b32` each.",null,null],[17,"B64X8","","A SIMD vector with 8 lanes containing a `b64` each.",null,null],[17,"B128X4","","A SIMD vector with 4 lanes containing a `b128` each.",null,null],[17,"I8X64","","A SIMD vector with 64 lanes containing a `i8` each.",null,null],[17,"I16X32","","A SIMD vector with 32 lanes containing a `i16` each.",null,null],[17,"I32X16","","A SIMD vector with 16 lanes containing a `i32` each.",null,null],[17,"I64X8","","A SIMD vector with 8 lanes containing a `i64` each.",null,null],[17,"I128X4","","A SIMD vector with 4 lanes containing a `i128` each.",null,null],[17,"F32X16","","A SIMD vector with 16 lanes containing a `f32` each.",null,null],[17,"F64X8","","A SIMD vector with 8 lanes containing a `f64` each.",null,null],[3,"AbiParam","cranelift::prelude","Function parameter or return value descriptor.",null,null],[12,"value_type","","Type of the argument value.",3,null],[12,"purpose","","Special purpose of argument, or `Normal`.",3,null],[12,"extension","","Method for extending argument to a full register.",3,null],[12,"location","","ABI-specific location of this argument, or `Unassigned`…",3,null],[3,"Block","","An opaque reference to a basic block in a `Function`.",null,null],[3,"ExtFuncData","","An external function.",null,null],[12,"name","","Name of the external function.",4,null],[12,"signature","","Call signature of function.",4,null],[12,"colocated","","Will this function be defined nearby, such that it will…",4,null],[4,"ExternalName","","The name of an external is either a reference to a…",null,null],[13,"User","","A name in a user-defined symbol table. Cranelift does not…",5,null],[12,"namespace","cranelift::prelude::ExternalName","Arbitrary.",6,null],[12,"index","","Arbitrary.",6,null],[13,"TestCase","cranelift::prelude","A test case function name of up to a hardcoded amount of…",5,null],[12,"length","cranelift::prelude::ExternalName","How many of the bytes in `ascii` are valid?",7,null],[12,"ascii","","Ascii bytes of the name.",7,null],[13,"LibCall","cranelift::prelude","A well-known runtime library function.",5,null],[4,"GlobalValueData","","Information about a global value declaration.",null,null],[13,"VMContext","","Value is the address of the VM context struct.",8,null],[13,"Load","","Value is pointed to by another global value.",8,null],[12,"base","cranelift::prelude::GlobalValueData","The base pointer global value.",9,null],[12,"offset","","Offset added to the base pointer before doing the load.",9,null],[12,"global_type","","Type of the loaded value.",9,null],[12,"readonly","","Specifies whether the memory that this refers to is…",9,null],[13,"IAddImm","cranelift::prelude","Value is an offset from another global value.",8,null],[12,"base","cranelift::prelude::GlobalValueData","The base pointer global value.",10,null],[12,"offset","","Byte offset to be added to the value.",10,null],[12,"global_type","","Type of the iadd.",10,null],[13,"Symbol","cranelift::prelude","Value is symbolic, meaning it's a name which will be…",8,null],[12,"name","cranelift::prelude::GlobalValueData","The symbolic name.",11,null],[12,"offset","","Offset from the symbol. This can be used instead of…",11,null],[12,"colocated","","Will this symbol be defined nearby, such that it will…",11,null],[12,"tls","","Does this symbol refer to a thread local storage value?",11,null],[8,"InstBuilder","cranelift::prelude","Convenience methods for building instructions.",null,null],[11,"jump","","Jump.",12,[[["block"]],["inst"]]],[11,"fallthrough","","Fall through to the next block.",12,[[["block"]],["inst"]]],[11,"brz","","Branch when zero.",12,[[["block"],["value"]],["inst"]]],[11,"brnz","","Branch when non-zero.",12,[[["block"],["value"]],["inst"]]],[11,"br_icmp","","Compare scalar integers and branch.",12,[[["t1"],["value"],["block"]],["inst"]]],[11,"brif","","Branch when condition is true in integer CPU flags.",12,[[["t1"],["value"],["block"]],["inst"]]],[11,"brff","","Branch when condition is true in floating point CPU flags.",12,[[["t1"],["value"],["block"]],["inst"]]],[11,"br_table","","Indirect branch via jump table.",12,[[["block"],["jumptable"],["value"]],["inst"]]],[11,"jump_table_entry","","Get an entry from a jump table.",12,[[["t1"],["jumptable"],["value"]],["value"]]],[11,"jump_table_base","","Get the absolute base address of a jump table.",12,[[["type"],["jumptable"]],["value"]]],[11,"indirect_jump_table_br","","Branch indirectly via a jump table entry.",12,[[["jumptable"],["value"]],["inst"]]],[11,"debugtrap","","Encodes an assembly debug trap.",12,[[],["inst"]]],[11,"trap","","Terminate execution unconditionally.",12,[[["t1"]],["inst"]]],[11,"trapz","","Trap when zero.",12,[[["t1"],["value"]],["inst"]]],[11,"resumable_trap","","A resumable trap.",12,[[["t1"]],["inst"]]],[11,"trapnz","","Trap when non-zero.",12,[[["t1"],["value"]],["inst"]]],[11,"trapif","","Trap when condition is true in integer CPU flags.",12,[[["t2"],["t1"],["value"]],["inst"]]],[11,"trapff","","Trap when condition is true in floating point CPU flags.",12,[[["t2"],["t1"],["value"]],["inst"]]],[11,"return_","","Return from the function.",12,[[],["inst"]]],[11,"fallthrough_return","","Return from the function by fallthrough.",12,[[],["inst"]]],[11,"call","","Direct function call.",12,[[["funcref"]],["inst"]]],[11,"call_indirect","","Indirect function call.",12,[[["sigref"],["value"]],["inst"]]],[11,"func_addr","","Get the address of a function.",12,[[["type"],["funcref"]],["value"]]],[11,"splat","","Vector splat.",12,[[["type"],["value"]],["value"]]],[11,"swizzle","","Vector swizzle.",12,[[["type"],["value"]],["value"]]],[11,"insertlane","","Insert `y` as lane `Idx` in x.",12,[[["t1"],["value"]],["value"]]],[11,"extractlane","","Extract lane `Idx` from `x`.",12,[[["t1"],["value"]],["value"]]],[11,"imin","","Signed integer minimum.",12,[[["value"]],["value"]]],[11,"umin","","Unsigned integer minimum.",12,[[["value"]],["value"]]],[11,"imax","","Signed integer maximum.",12,[[["value"]],["value"]]],[11,"umax","","Unsigned integer maximum.",12,[[["value"]],["value"]]],[11,"avg_round","","Unsigned average with rounding: `a := (x + y + 1) // 2`",12,[[["value"]],["value"]]],[11,"load","","Load from memory at `p + Offset`.",12,[[["t1"],["value"],["t2"],["type"]],["value"]]],[11,"load_complex","","Load from memory at `sum(args) + Offset`.",12,[[["t1"],["t2"],["type"]],["value"]]],[11,"store","","Store `x` to memory at `p + Offset`.",12,[[["t2"],["t1"],["value"]],["inst"]]],[11,"store_complex","","Store `x` to memory at `sum(args) + Offset`.",12,[[["t1"],["value"],["t2"]],["inst"]]],[11,"uload8","","Load 8 bits from memory at `p + Offset` and zero-extend.",12,[[["t1"],["value"],["t2"],["type"]],["value"]]],[11,"uload8_complex","","Load 8 bits from memory at `sum(args) + Offset` and…",12,[[["t1"],["t2"],["type"]],["value"]]],[11,"sload8","","Load 8 bits from memory at `p + Offset` and sign-extend.",12,[[["t1"],["value"],["t2"],["type"]],["value"]]],[11,"sload8_complex","","Load 8 bits from memory at `sum(args) + Offset` and…",12,[[["t1"],["t2"],["type"]],["value"]]],[11,"istore8","","Store the low 8 bits of `x` to memory at `p + Offset`.",12,[[["t2"],["t1"],["value"]],["inst"]]],[11,"istore8_complex","","Store the low 8 bits of `x` to memory at `sum(args) +…",12,[[["t1"],["value"],["t2"]],["inst"]]],[11,"uload16","","Load 16 bits from memory at `p + Offset` and zero-extend.",12,[[["t1"],["value"],["t2"],["type"]],["value"]]],[11,"uload16_complex","","Load 16 bits from memory at `sum(args) + Offset` and…",12,[[["t1"],["t2"],["type"]],["value"]]],[11,"sload16","","Load 16 bits from memory at `p + Offset` and sign-extend.",12,[[["t1"],["value"],["t2"],["type"]],["value"]]],[11,"sload16_complex","","Load 16 bits from memory at `sum(args) + Offset` and…",12,[[["t1"],["t2"],["type"]],["value"]]],[11,"istore16","","Store the low 16 bits of `x` to memory at `p + Offset`.",12,[[["t2"],["t1"],["value"]],["inst"]]],[11,"istore16_complex","","Store the low 16 bits of `x` to memory at `sum(args) +…",12,[[["t1"],["value"],["t2"]],["inst"]]],[11,"uload32","","Load 32 bits from memory at `p + Offset` and zero-extend.",12,[[["t2"],["t1"],["value"]],["value"]]],[11,"uload32_complex","","Load 32 bits from memory at `sum(args) + Offset` and…",12,[[["t1"],["t2"]],["value"]]],[11,"sload32","","Load 32 bits from memory at `p + Offset` and sign-extend.",12,[[["t2"],["t1"],["value"]],["value"]]],[11,"sload32_complex","","Load 32 bits from memory at `sum(args) + Offset` and…",12,[[["t1"],["t2"]],["value"]]],[11,"istore32","","Store the low 32 bits of `x` to memory at `p + Offset`.",12,[[["t2"],["t1"],["value"]],["inst"]]],[11,"istore32_complex","","Store the low 32 bits of `x` to memory at `sum(args) +…",12,[[["t1"],["value"],["t2"]],["inst"]]],[11,"stack_load","","Load a value from a stack slot at the constant offset.",12,[[["t1"],["type"],["stackslot"]],["value"]]],[11,"stack_store","","Store a value to a stack slot at a constant offset.",12,[[["t1"],["stackslot"],["value"]],["inst"]]],[11,"stack_addr","","Get the address of a stack slot.",12,[[["t1"],["type"],["stackslot"]],["value"]]],[11,"global_value","","Compute the value of global GV.",12,[[["type"],["globalvalue"]],["value"]]],[11,"symbol_value","","Compute the value of global GV, which is a symbolic value.",12,[[["type"],["globalvalue"]],["value"]]],[11,"tls_value","","Compute the value of global GV, which is a TLS (thread…",12,[[["type"],["globalvalue"]],["value"]]],[11,"heap_addr","","Bounds check and compute absolute address of heap memory.",12,[[["t1"],["heap"],["value"],["type"]],["value"]]],[11,"get_pinned_reg","","Gets the content of the pinned register, when it's enabled.",12,[[["type"]],["value"]]],[11,"set_pinned_reg","","Sets the content of the pinned register, when it's enabled.",12,[[["value"]],["inst"]]],[11,"table_addr","","Bounds check and compute absolute address of a table entry.",12,[[["t1"],["value"],["table"],["type"]],["value"]]],[11,"iconst","","Integer constant.",12,[[["t1"],["type"]],["value"]]],[11,"f32const","","Floating point constant.",12,[[["t1"]],["value"]]],[11,"f64const","","Floating point constant.",12,[[["t1"]],["value"]]],[11,"bconst","","Boolean constant.",12,[[["t1"],["type"]],["value"]]],[11,"vconst","","SIMD vector constant.",12,[[["t1"],["type"]],["value"]]],[11,"shuffle","","SIMD vector shuffle.",12,[[["t1"],["value"]],["value"]]],[11,"null","","Null constant value for reference types.",12,[[["type"]],["value"]]],[11,"nop","","Just a dummy instruction.",12,[[],["inst"]]],[11,"select","","Conditional select.",12,[[["value"]],["value"]]],[11,"selectif","","Conditional select, dependent on integer condition codes.",12,[[["t1"],["value"],["type"]],["value"]]],[11,"bitselect","","Conditional select of bits.",12,[[["value"]],["value"]]],[11,"copy","","Register-register copy.",12,[[["value"]],["value"]]],[11,"spill","","Spill a register value to a stack slot.",12,[[["value"]],["value"]]],[11,"fill","","Load a register value from a stack slot.",12,[[["value"]],["value"]]],[11,"fill_nop","","This is identical to `fill`, except it has no encoding,…",12,[[["value"]],["value"]]],[11,"regmove","","Temporarily divert `x` from `src` to `dst`.",12,[[["t2"],["t1"],["value"]],["inst"]]],[11,"copy_special","","Copies the contents of ''src'' register to ''dst'' register.",12,[[["t2"],["t1"]],["inst"]]],[11,"copy_to_ssa","","Copies the contents of ''src'' register to ''a'' SSA name.",12,[[["t1"],["type"]],["value"]]],[11,"copy_nop","","Stack-slot-to-the-same-stack-slot copy, which is…",12,[[["value"]],["value"]]],[11,"adjust_sp_down","","Subtracts `delta` offset value from the stack pointer…",12,[[["value"]],["inst"]]],[11,"adjust_sp_up_imm","","Adds `Offset` immediate offset value to the stack pointer…",12,[[["t1"]],["inst"]]],[11,"adjust_sp_down_imm","","Subtracts `Offset` immediate offset value from the stack…",12,[[["t1"]],["inst"]]],[11,"ifcmp_sp","","Compare `addr` with the stack pointer and set the CPU flags.",12,[[["value"]],["value"]]],[11,"regspill","","Temporarily divert `x` from `src` to `SS`.",12,[[["t1"],["stackslot"],["value"]],["inst"]]],[11,"regfill","","Temporarily divert `x` from `SS` to `dst`.",12,[[["t1"],["stackslot"],["value"]],["inst"]]],[11,"safepoint","","This instruction will provide live reference values at a…",12,[[],["inst"]]],[11,"vsplit","","Split a vector into two halves.",12,[[["value"]]]],[11,"vconcat","","Vector concatenation.",12,[[["value"]],["value"]]],[11,"vselect","","Vector lane select.",12,[[["value"]],["value"]]],[11,"vany_true","","Reduce a vector to a scalar boolean.",12,[[["value"]],["value"]]],[11,"vall_true","","Reduce a vector to a scalar boolean.",12,[[["value"]],["value"]]],[11,"icmp","","Integer comparison.",12,[[["t1"],["value"]],["value"]]],[11,"icmp_imm","","Compare scalar integer to a constant.",12,[[["t2"],["t1"],["value"]],["value"]]],[11,"ifcmp","","Compare scalar integers and return flags.",12,[[["value"]],["value"]]],[11,"ifcmp_imm","","Compare scalar integer to a constant and return flags.",12,[[["t1"],["value"]],["value"]]],[11,"iadd","","Wrapping integer addition: `a := x + y \\pmod{2^B}`.",12,[[["value"]],["value"]]],[11,"uadd_sat","","Add with unsigned saturation.",12,[[["value"]],["value"]]],[11,"sadd_sat","","Add with signed saturation.",12,[[["value"]],["value"]]],[11,"isub","","Wrapping integer subtraction: `a := x - y \\pmod{2^B}`.",12,[[["value"]],["value"]]],[11,"usub_sat","","Subtract with unsigned saturation.",12,[[["value"]],["value"]]],[11,"ssub_sat","","Subtract with signed saturation.",12,[[["value"]],["value"]]],[11,"ineg","","Integer negation: `a := -x \\pmod{2^B}`.",12,[[["value"]],["value"]]],[11,"imul","","Wrapping integer multiplication: `a := x y \\pmod{2^B}`.",12,[[["value"]],["value"]]],[11,"umulhi","","Unsigned integer multiplication, producing the high half…",12,[[["value"]],["value"]]],[11,"smulhi","","Signed integer multiplication, producing the high half of…",12,[[["value"]],["value"]]],[11,"udiv","","Unsigned integer division: `a := \\lfloor {x \\over y}…",12,[[["value"]],["value"]]],[11,"sdiv","","Signed integer division rounded toward zero: `a :=…",12,[[["value"]],["value"]]],[11,"urem","","Unsigned integer remainder.",12,[[["value"]],["value"]]],[11,"srem","","Signed integer remainder. The result has the sign of the…",12,[[["value"]],["value"]]],[11,"iadd_imm","","Add immediate integer.",12,[[["t1"],["value"]],["value"]]],[11,"imul_imm","","Integer multiplication by immediate constant.",12,[[["t1"],["value"]],["value"]]],[11,"udiv_imm","","Unsigned integer division by an immediate constant.",12,[[["t1"],["value"]],["value"]]],[11,"sdiv_imm","","Signed integer division by an immediate constant.",12,[[["t1"],["value"]],["value"]]],[11,"urem_imm","","Unsigned integer remainder with immediate divisor.",12,[[["t1"],["value"]],["value"]]],[11,"srem_imm","","Signed integer remainder with immediate divisor.",12,[[["t1"],["value"]],["value"]]],[11,"irsub_imm","","Immediate reverse wrapping subtraction: `a := Y - x…",12,[[["t1"],["value"]],["value"]]],[11,"iadd_cin","","Add integers with carry in.",12,[[["value"]],["value"]]],[11,"iadd_ifcin","","Add integers with carry in.",12,[[["value"]],["value"]]],[11,"iadd_cout","","Add integers with carry out.",12,[[["value"]]]],[11,"iadd_ifcout","","Add integers with carry out.",12,[[["value"]]]],[11,"iadd_carry","","Add integers with carry in and out.",12,[[["value"]]]],[11,"iadd_ifcarry","","Add integers with carry in and out.",12,[[["value"]]]],[11,"isub_bin","","Subtract integers with borrow in.",12,[[["value"]],["value"]]],[11,"isub_ifbin","","Subtract integers with borrow in.",12,[[["value"]],["value"]]],[11,"isub_bout","","Subtract integers with borrow out.",12,[[["value"]]]],[11,"isub_ifbout","","Subtract integers with borrow out.",12,[[["value"]]]],[11,"isub_borrow","","Subtract integers with borrow in and out.",12,[[["value"]]]],[11,"isub_ifborrow","","Subtract integers with borrow in and out.",12,[[["value"]]]],[11,"band","","Bitwise and.",12,[[["value"]],["value"]]],[11,"bor","","Bitwise or.",12,[[["value"]],["value"]]],[11,"bxor","","Bitwise xor.",12,[[["value"]],["value"]]],[11,"bnot","","Bitwise not.",12,[[["value"]],["value"]]],[11,"band_not","","Bitwise and not.",12,[[["value"]],["value"]]],[11,"bor_not","","Bitwise or not.",12,[[["value"]],["value"]]],[11,"bxor_not","","Bitwise xor not.",12,[[["value"]],["value"]]],[11,"band_imm","","Bitwise and with immediate.",12,[[["t1"],["value"]],["value"]]],[11,"bor_imm","","Bitwise or with immediate.",12,[[["t1"],["value"]],["value"]]],[11,"bxor_imm","","Bitwise xor with immediate.",12,[[["t1"],["value"]],["value"]]],[11,"rotl","","Rotate left.",12,[[["value"]],["value"]]],[11,"rotr","","Rotate right.",12,[[["value"]],["value"]]],[11,"rotl_imm","","Rotate left by immediate.",12,[[["t1"],["value"]],["value"]]],[11,"rotr_imm","","Rotate right by immediate.",12,[[["t1"],["value"]],["value"]]],[11,"ishl","","Integer shift left. Shift the bits in `x` towards the MSB…",12,[[["value"]],["value"]]],[11,"ushr","","Unsigned shift right. Shift bits in `x` towards the LSB by…",12,[[["value"]],["value"]]],[11,"sshr","","Signed shift right. Shift bits in `x` towards the LSB by…",12,[[["value"]],["value"]]],[11,"ishl_imm","","Integer shift left by immediate.",12,[[["t1"],["value"]],["value"]]],[11,"ushr_imm","","Unsigned shift right by immediate.",12,[[["t1"],["value"]],["value"]]],[11,"sshr_imm","","Signed shift right by immediate.",12,[[["t1"],["value"]],["value"]]],[11,"bitrev","","Reverse the bits of a integer.",12,[[["value"]],["value"]]],[11,"clz","","Count leading zero bits.",12,[[["value"]],["value"]]],[11,"cls","","Count leading sign bits.",12,[[["value"]],["value"]]],[11,"ctz","","Count trailing zeros.",12,[[["value"]],["value"]]],[11,"popcnt","","Population count",12,[[["value"]],["value"]]],[11,"fcmp","","Floating point comparison.",12,[[["t1"],["value"]],["value"]]],[11,"ffcmp","","Floating point comparison returning flags.",12,[[["value"]],["value"]]],[11,"fadd","","Floating point addition.",12,[[["value"]],["value"]]],[11,"fsub","","Floating point subtraction.",12,[[["value"]],["value"]]],[11,"fmul","","Floating point multiplication.",12,[[["value"]],["value"]]],[11,"fdiv","","Floating point division.",12,[[["value"]],["value"]]],[11,"sqrt","","Floating point square root.",12,[[["value"]],["value"]]],[11,"fma","","Floating point fused multiply-and-add.",12,[[["value"]],["value"]]],[11,"fneg","","Floating point negation.",12,[[["value"]],["value"]]],[11,"fabs","","Floating point absolute value.",12,[[["value"]],["value"]]],[11,"fcopysign","","Floating point copy sign.",12,[[["value"]],["value"]]],[11,"fmin","","Floating point minimum, propagating NaNs.",12,[[["value"]],["value"]]],[11,"fmax","","Floating point maximum, propagating NaNs.",12,[[["value"]],["value"]]],[11,"ceil","","Round floating point round to integral, towards positive…",12,[[["value"]],["value"]]],[11,"floor","","Round floating point round to integral, towards negative…",12,[[["value"]],["value"]]],[11,"trunc","","Round floating point round to integral, towards zero.",12,[[["value"]],["value"]]],[11,"nearest","","Round floating point round to integral, towards nearest…",12,[[["value"]],["value"]]],[11,"is_null","","Reference verification.",12,[[["value"]],["value"]]],[11,"is_invalid","","Reference verification.",12,[[["value"]],["value"]]],[11,"trueif","","Test integer CPU flags for a specific condition.",12,[[["t1"],["value"]],["value"]]],[11,"trueff","","Test floating point CPU flags for a specific condition.",12,[[["t1"],["value"]],["value"]]],[11,"bitcast","","Reinterpret the bits in `x` as a different type.",12,[[["type"],["value"]],["value"]]],[11,"raw_bitcast","","Cast the bits in `x` as a different type of the same bit…",12,[[["type"],["value"]],["value"]]],[11,"scalar_to_vector","","Scalar To Vector -- move a value out of a scalar register…",12,[[["type"],["value"]],["value"]]],[11,"breduce","","Convert `x` to a smaller boolean type in the…",12,[[["type"],["value"]],["value"]]],[11,"bextend","","Convert `x` to a larger boolean type in the…",12,[[["type"],["value"]],["value"]]],[11,"bint","","Convert `x` to an integer.",12,[[["type"],["value"]],["value"]]],[11,"bmask","","Convert `x` to an integer mask.",12,[[["type"],["value"]],["value"]]],[11,"ireduce","","Convert `x` to a smaller integer type by dropping high bits.",12,[[["type"],["value"]],["value"]]],[11,"uextend","","Convert `x` to a larger integer type by zero-extending.",12,[[["type"],["value"]],["value"]]],[11,"sextend","","Convert `x` to a larger integer type by sign-extending.",12,[[["type"],["value"]],["value"]]],[11,"fpromote","","Convert `x` to a larger floating point format.",12,[[["type"],["value"]],["value"]]],[11,"fdemote","","Convert `x` to a smaller floating point format.",12,[[["type"],["value"]],["value"]]],[11,"fcvt_to_uint","","Convert floating point to unsigned integer.",12,[[["type"],["value"]],["value"]]],[11,"fcvt_to_uint_sat","","Convert floating point to unsigned integer as fcvt_to_uint…",12,[[["type"],["value"]],["value"]]],[11,"fcvt_to_sint","","Convert floating point to signed integer.",12,[[["type"],["value"]],["value"]]],[11,"fcvt_to_sint_sat","","Convert floating point to signed integer as fcvt_to_sint…",12,[[["type"],["value"]],["value"]]],[11,"fcvt_from_uint","","Convert unsigned integer to floating point.",12,[[["type"],["value"]],["value"]]],[11,"fcvt_from_sint","","Convert signed integer to floating point.",12,[[["type"],["value"]],["value"]]],[11,"isplit","","Split an integer into low and high parts.",12,[[["value"]]]],[11,"iconcat","","Concatenate low and high bits to form a larger integer type.",12,[[["value"]],["value"]]],[11,"x86_udivmodx","","Extended unsigned division.",12,[[["value"]]]],[11,"x86_sdivmodx","","Extended signed division.",12,[[["value"]]]],[11,"x86_umulx","","Unsigned integer multiplication, producing a double-length…",12,[[["value"]]]],[11,"x86_smulx","","Signed integer multiplication, producing a double-length…",12,[[["value"]]]],[11,"x86_cvtt2si","","Convert with truncation floating point to signed integer.",12,[[["type"],["value"]],["value"]]],[11,"x86_fmin","","Floating point minimum with x86 semantics.",12,[[["value"]],["value"]]],[11,"x86_fmax","","Floating point maximum with x86 semantics.",12,[[["value"]],["value"]]],[11,"x86_push","","Pushes a value onto the stack.",12,[[["value"]],["inst"]]],[11,"x86_pop","","Pops a value from the stack.",12,[[["type"]],["value"]]],[11,"x86_bsr","","Bit Scan Reverse -- returns the bit-index of the most…",12,[[["value"]]]],[11,"x86_bsf","","Bit Scan Forwards -- returns the bit-index of the least…",12,[[["value"]]]],[11,"x86_pshufd","","Packed Shuffle Doublewords -- copies data from either…",12,[[["t1"],["value"]],["value"]]],[11,"x86_pshufb","","Packed Shuffle Bytes -- re-orders data in an extended…",12,[[["value"]],["value"]]],[11,"x86_pextr","","Extract lane `Idx` from `x`. The lane index, `Idx`, is an…",12,[[["t1"],["value"]],["value"]]],[11,"x86_pinsr","","Insert `y` into `x` at lane `Idx`. The lane index, `Idx`,…",12,[[["t1"],["value"]],["value"]]],[11,"x86_insertps","","Insert a lane of `y` into `x` at using `Idx` to encode…",12,[[["t1"],["value"]],["value"]]],[11,"x86_movsd","","Move the low 64 bits of the float vector `y` to the low 64…",12,[[["value"]],["value"]]],[11,"x86_movlhps","","Move the low 64 bits of the float vector `y` to the high…",12,[[["value"]],["value"]]],[11,"x86_psll","","Shift Packed Data Left Logical -- This implements the…",12,[[["value"]],["value"]]],[11,"x86_psrl","","Shift Packed Data Right Logical -- This implements the…",12,[[["value"]],["value"]]],[11,"x86_psra","","Shift Packed Data Right Arithmetic -- This implements the…",12,[[["value"]],["value"]]],[11,"x86_ptest","","Logical Compare -- PTEST will set the ZF flag if all bits…",12,[[["value"]],["value"]]],[11,"x86_pmaxs","","Maximum of Packed Signed Integers -- Compare signed…",12,[[["value"]],["value"]]],[11,"x86_pmaxu","","Maximum of Packed Unsigned Integers -- Compare unsigned…",12,[[["value"]],["value"]]],[11,"x86_pmins","","Minimum of Packed Signed Integers -- Compare signed…",12,[[["value"]],["value"]]],[11,"x86_pminu","","Minimum of Packed Unsigned Integers -- Compare unsigned…",12,[[["value"]],["value"]]],[11,"x86_elf_tls_get_addr","","Elf tls get addr -- This implements the GD TLS model for…",12,[[["globalvalue"]],["value"]]],[11,"x86_macho_tls_get_addr","","Mach-O tls get addr -- This implements TLS access for…",12,[[["globalvalue"]],["value"]]],[11,"Binary","","Binary(imms=(), vals=2)",12,[[["opcode"],["value"],["type"]]]],[11,"BinaryImm","","BinaryImm(imms=(imm: ir::immediates::Imm64), vals=1)",12,[[["opcode"],["imm64"],["value"],["type"]]]],[11,"Branch","","Branch(imms=(destination: ir::Block), vals=1)",12,[[["opcode"],["value"],["entitylist",["value"]],["type"],["block"]]]],[11,"BranchFloat","","BranchFloat(imms=(cond: ir::condcodes::FloatCC,…",12,[[["opcode"],["floatcc"],["value"],["entitylist",["value"]],["type"],["block"]]]],[11,"BranchIcmp","","BranchIcmp(imms=(cond: ir::condcodes::IntCC, destination:…",12,[[["opcode"],["block"],["value"],["entitylist",["value"]],["type"],["intcc"]]]],[11,"BranchInt","","BranchInt(imms=(cond: ir::condcodes::IntCC, destination:…",12,[[["opcode"],["block"],["value"],["entitylist",["value"]],["type"],["intcc"]]]],[11,"BranchTable","","BranchTable(imms=(destination: ir::Block, table:…",12,[[["opcode"],["jumptable"],["value"],["type"],["block"]]]],[11,"BranchTableBase","","BranchTableBase(imms=(table: ir::JumpTable), vals=0)",12,[[["opcode"],["type"],["jumptable"]]]],[11,"BranchTableEntry","","BranchTableEntry(imms=(imm: ir::immediates::Uimm8, table:…",12,[[["opcode"],["jumptable"],["value"],["type"],["u8"]]]],[11,"Call","","Call(imms=(func_ref: ir::FuncRef), vals=0)",12,[[["opcode"],["funcref"],["value"],["entitylist",["value"]],["type"]]]],[11,"CallIndirect","","CallIndirect(imms=(sig_ref: ir::SigRef), vals=1)",12,[[["opcode"],["value"],["sigref"],["entitylist",["value"]],["type"]]]],[11,"CondTrap","","CondTrap(imms=(code: ir::TrapCode), vals=1)",12,[[["opcode"],["value"],["type"],["trapcode"]]]],[11,"CopySpecial","","CopySpecial(imms=(src: isa::RegUnit, dst: isa::RegUnit),…",12,[[["opcode"],["u16"],["type"]]]],[11,"CopyToSsa","","CopyToSsa(imms=(src: isa::RegUnit), vals=0)",12,[[["opcode"],["u16"],["type"]]]],[11,"ExtractLane","","ExtractLane(imms=(lane: ir::immediates::Uimm8), vals=1)",12,[[["opcode"],["value"],["type"],["u8"]]]],[11,"FloatCompare","","FloatCompare(imms=(cond: ir::condcodes::FloatCC), vals=2)",12,[[["opcode"],["floatcc"],["value"],["type"]]]],[11,"FloatCond","","FloatCond(imms=(cond: ir::condcodes::FloatCC), vals=1)",12,[[["opcode"],["floatcc"],["value"],["type"]]]],[11,"FloatCondTrap","","FloatCondTrap(imms=(cond: ir::condcodes::FloatCC, code:…",12,[[["opcode"],["floatcc"],["value"],["type"],["trapcode"]]]],[11,"FuncAddr","","FuncAddr(imms=(func_ref: ir::FuncRef), vals=0)",12,[[["opcode"],["type"],["funcref"]]]],[11,"HeapAddr","","HeapAddr(imms=(heap: ir::Heap, imm:…",12,[[["opcode"],["uimm32"],["heap"],["value"],["type"]]]],[11,"IndirectJump","","IndirectJump(imms=(table: ir::JumpTable), vals=1)",12,[[["opcode"],["value"],["type"],["jumptable"]]]],[11,"InsertLane","","InsertLane(imms=(lane: ir::immediates::Uimm8), vals=2)",12,[[["opcode"],["value"],["type"],["u8"]]]],[11,"IntCompare","","IntCompare(imms=(cond: ir::condcodes::IntCC), vals=2)",12,[[["opcode"],["value"],["type"],["intcc"]]]],[11,"IntCompareImm","","IntCompareImm(imms=(cond: ir::condcodes::IntCC, imm:…",12,[[["opcode"],["imm64"],["value"],["type"],["intcc"]]]],[11,"IntCond","","IntCond(imms=(cond: ir::condcodes::IntCC), vals=1)",12,[[["opcode"],["value"],["type"],["intcc"]]]],[11,"IntCondTrap","","IntCondTrap(imms=(cond: ir::condcodes::IntCC, code:…",12,[[["opcode"],["trapcode"],["value"],["type"],["intcc"]]]],[11,"IntSelect","","IntSelect(imms=(cond: ir::condcodes::IntCC), vals=3)",12,[[["opcode"],["value"],["type"],["intcc"]]]],[11,"Jump","","Jump(imms=(destination: ir::Block), vals=0)",12,[[["opcode"],["value"],["entitylist",["value"]],["type"],["block"]]]],[11,"Load","","Load(imms=(flags: ir::MemFlags, offset:…",12,[[["opcode"],["memflags"],["value"],["offset32"],["type"]]]],[11,"LoadComplex","","LoadComplex(imms=(flags: ir::MemFlags, offset:…",12,[[["opcode"],["memflags"],["value"],["offset32"],["entitylist",["value"]],["type"]]]],[11,"MultiAry","","MultiAry(imms=(), vals=0)",12,[[["opcode"],["value"],["entitylist",["value"]],["type"]]]],[11,"NullAry","","NullAry(imms=(), vals=0)",12,[[["opcode"],["type"]]]],[11,"RegFill","","RegFill(imms=(src: ir::StackSlot, dst: isa::RegUnit),…",12,[[["opcode"],["stackslot"],["value"],["u16"],["type"]]]],[11,"RegMove","","RegMove(imms=(src: isa::RegUnit, dst: isa::RegUnit), vals=1)",12,[[["opcode"],["value"],["u16"],["type"]]]],[11,"RegSpill","","RegSpill(imms=(src: isa::RegUnit, dst: ir::StackSlot),…",12,[[["opcode"],["stackslot"],["value"],["u16"],["type"]]]],[11,"Shuffle","","Shuffle(imms=(mask: ir::Immediate), vals=2)",12,[[["opcode"],["immediate"],["value"],["type"]]]],[11,"StackLoad","","StackLoad(imms=(stack_slot: ir::StackSlot, offset:…",12,[[["opcode"],["stackslot"],["offset32"],["type"]]]],[11,"StackStore","","StackStore(imms=(stack_slot: ir::StackSlot, offset:…",12,[[["opcode"],["stackslot"],["value"],["offset32"],["type"]]]],[11,"Store","","Store(imms=(flags: ir::MemFlags, offset:…",12,[[["opcode"],["memflags"],["value"],["offset32"],["type"]]]],[11,"StoreComplex","","StoreComplex(imms=(flags: ir::MemFlags, offset:…",12,[[["opcode"],["memflags"],["value"],["offset32"],["entitylist",["value"]],["type"]]]],[11,"TableAddr","","TableAddr(imms=(table: ir::Table, offset:…",12,[[["opcode"],["value"],["table"],["offset32"],["type"]]]],[11,"Ternary","","Ternary(imms=(), vals=3)",12,[[["opcode"],["value"],["type"]]]],[11,"Trap","","Trap(imms=(code: ir::TrapCode), vals=0)",12,[[["opcode"],["type"],["trapcode"]]]],[11,"Unary","","Unary(imms=(), vals=1)",12,[[["opcode"],["type"],["value"]]]],[11,"UnaryBool","","UnaryBool(imms=(imm: bool), vals=0)",12,[[["opcode"],["type"],["bool"]]]],[11,"UnaryConst","","UnaryConst(imms=(constant_handle: ir::Constant), vals=0)",12,[[["opcode"],["type"],["constant"]]]],[11,"UnaryGlobalValue","","UnaryGlobalValue(imms=(global_value: ir::GlobalValue),…",12,[[["opcode"],["type"],["globalvalue"]]]],[11,"UnaryIeee32","","UnaryIeee32(imms=(imm: ir::immediates::Ieee32), vals=0)",12,[[["opcode"],["ieee32"],["type"]]]],[11,"UnaryIeee64","","UnaryIeee64(imms=(imm: ir::immediates::Ieee64), vals=0)",12,[[["opcode"],["ieee64"],["type"]]]],[11,"UnaryImm","","UnaryImm(imms=(imm: ir::immediates::Imm64), vals=0)",12,[[["opcode"],["type"],["imm64"]]]],[3,"JumpTableData","","Contents of a jump table.",null,null],[3,"MemFlags","","Flags for memory operations like load/store.",null,null],[3,"Signature","","Function signature.",null,null],[12,"params","","The arguments passed to the function.",13,null],[12,"returns","","Values returned from the function.",13,null],[12,"call_conv","","Calling convention.",13,null],[3,"StackSlotData","","Contents of a stack slot.",null,null],[12,"kind","","The kind of stack slot.",14,null],[12,"size","","Size of stack slot in bytes.",14,null],[12,"offset","","Offset of stack slot relative to the stack pointer in the…",14,null],[4,"StackSlotKind","","The kind of a stack slot.",null,null],[13,"SpillSlot","","A spill slot. This is a stack slot created by the register…",15,null],[13,"ExplicitSlot","","An explicit stack slot. This is a chunk of stack memory…",15,null],[13,"IncomingArg","","An incoming function argument.",15,null],[13,"OutgoingArg","","An outgoing function argument.",15,null],[13,"StructReturnSlot","","Space allocated in the caller's frame for the callee's…",15,null],[13,"EmergencySlot","","An emergency spill slot.",15,null],[4,"TrapCode","","A trap code describing the reason for a trap.",null,null],[13,"StackOverflow","","The current stack space was exhausted.",16,null],[13,"HeapOutOfBounds","","A `heap_addr` instruction detected an out-of-bounds error.",16,null],[13,"TableOutOfBounds","","A `table_addr` instruction detected an out-of-bounds error.",16,null],[13,"OutOfBounds","","Other bounds checking error.",16,null],[13,"IndirectCallToNull","","Indirect call to a null table entry.",16,null],[13,"BadSignature","","Signature mismatch on indirect call.",16,null],[13,"IntegerOverflow","","An integer arithmetic operation caused an overflow.",16,null],[13,"IntegerDivisionByZero","","An integer division by zero.",16,null],[13,"BadConversionToInteger","","Failed float-to-int conversion.",16,null],[13,"UnreachableCodeReached","","Code that was supposed to have been unreachable was reached.",16,null],[13,"Interrupt","","Execution has potentially run too long and may be…",16,null],[13,"User","","A user-defined trap code.",16,null],[3,"Type","","The type of an SSA value.",null,null],[3,"Value","","An opaque reference to an SSA value.",null,null],[0,"isa","","Instruction Set Architectures.",null,null],[0,"registers","cranelift::prelude::isa","Data structures describing the registers in an ISA.",null,null],[6,"RegUnit","cranelift::prelude::isa::registers","Register units are the smallest units of register…",null,null],[6,"RegClassMask","","A bit mask indexed by register classes.",null,null],[6,"RegUnitMask","","A bit mask indexed by register units.",null,null],[3,"RegBank","","The register units in a target ISA are divided into…",null,null],[12,"name","","The name of this register bank as defined in the ISA's DSL…",17,null],[12,"first_unit","","The first register unit in this bank.",17,null],[12,"units","","The total number of register units in this bank.",17,null],[12,"names","","Array of specially named register units. This array can be…",17,null],[12,"prefix","","Name prefix to use for those register units in the bank…",17,null],[12,"first_toprc","","Index of the first top-level register class in this bank.",17,null],[12,"num_toprcs","","Number of top-level register classes in this bank.",17,null],[12,"pressure_tracking","","Is register pressure tracking enabled for this bank?",17,null],[6,"RegClass","","A register class reference.",null,null],[3,"RegClassData","","Data about a register class.",null,null],[12,"name","","The name of the register class.",18,null],[12,"index","","The index of this class in the ISA's RegInfo description.",18,null],[12,"width","","How many register units to allocate per register.",18,null],[12,"bank","","Index of the register bank this class belongs to.",18,null],[12,"toprc","","Index of the top-level register class contains this one.",18,null],[12,"first","","The first register unit in this class.",18,null],[12,"subclasses","","Bit-mask of sub-classes of this register class, including…",18,null],[12,"mask","","Mask of register units in the class. If `width > 1`, the…",18,null],[12,"info","","The global `RegInfo` instance containing this register…",18,null],[12,"pinned_reg","","The \"pinned\" register of the associated register bank.",18,null],[3,"RegClassIndex","","A small reference to a register class.",null,null],[5,"regs_overlap","","Test of two registers overlap.",null,[[["u16"],["regclassdata"]],["bool"]]],[3,"RegInfo","","Information about the registers in an ISA.",null,null],[12,"banks","","All register banks, ordered by their `first_unit`. The…",19,null],[12,"classes","","All register classes ordered topologically so a sub-class…",19,null],[3,"DisplayRegUnit","","Temporary object that holds enough information to print a…",null,null],[5,"lookup","cranelift::prelude::isa","Look for an ISA for the given `triple`. Return a builder…",null,[[["triple"]],[["lookuperror"],["result",["builder","lookuperror"]],["builder"]]]],[5,"lookup_by_name","","Look for a supported ISA with the given `name`. Return a…",null,[[["str"]],[["lookuperror"],["result",["builder","lookuperror"]],["builder"]]]],[4,"LookupError","","Describes reason for target lookup failure",null,null],[13,"SupportDisabled","","Support for this target was disabled in the current build.",20,null],[13,"Unsupported","","Support for this target has not yet been implemented.",20,null],[3,"Builder","","Builder for a `TargetIsa`. Modify the ISA-specific…",null,null],[6,"Legalize","","After determining that an instruction doesn't have an…",null,null],[3,"TargetFrontendConfig","","This struct provides information that a frontend may need…",null,null],[12,"default_call_conv","","The default calling convention of the target.",21,null],[12,"pointer_width","","The pointer width of the target.",21,null],[8,"TargetIsa","","Methods that are specialized to a target ISA. Implies a…",null,null],[10,"name","","Get the name of this ISA.",22,[[["self"]],["str"]]],[10,"triple","","Get the target triple that was used to make this trait…",22,[[["self"]],["triple"]]],[10,"flags","","Get the ISA-independent flags that were used to make this…",22,[[["self"]],["flags"]]],[11,"default_call_conv","","Get the default calling convention of this target.",22,[[["self"]],["callconv"]]],[11,"pointer_type","","Get the pointer type of this ISA.",22,[[["self"]],["type"]]],[11,"pointer_width","","Get the width of pointers on this ISA.",22,[[["self"]],["pointerwidth"]]],[11,"pointer_bits","","Get the width of pointers on this ISA, in units of bits.",22,[[["self"]],["u8"]]],[11,"pointer_bytes","","Get the width of pointers on this ISA, in units of bytes.",22,[[["self"]],["u8"]]],[11,"frontend_config","","Get the information needed by frontends producing…",22,[[["self"]],["targetfrontendconfig"]]],[11,"uses_cpu_flags","","Does the CPU implement scalar comparisons using a CPU…",22,[[["self"]],["bool"]]],[11,"uses_complex_addresses","","Does the CPU implement multi-register addressing?",22,[[["self"]],["bool"]]],[10,"register_info","","Get a data structure describing the registers in this ISA.",22,[[["self"]],["reginfo"]]],[10,"legal_encodings","","Returns an iterator over legal encodings for the…",22,[[["type"],["instructiondata"],["self"],["function"]],["encodings"]]],[11,"encode","","Encode an instruction after determining it is legal.",22,[[["function"],["instructiondata"],["self"],["type"]],[["result",["encoding"]],["encoding"]]]],[10,"encoding_info","","Get a data structure describing the instruction encodings…",22,[[["self"]],["encinfo"]]],[10,"legalize_signature","","Legalize a function signature.",22,[[["cow"],["self"],["bool"]]]],[10,"regclass_for_abi_type","","Get the register class that should be used to represent an…",22,[[["self"],["type"]],["regclassdata"]]],[10,"allocatable_registers","","Get the set of allocatable registers that can be used when…",22,[[["function"],["self"]],["registerset"]]],[11,"prologue_epilogue","","Compute the stack layout and insert prologue and epilogue…",22,[[["function"],["self"]],[["result",["codegenerror"]],["codegenerror"]]]],[10,"emit_inst","","Emit binary machine code for a single instruction into the…",22,[[["regdiversions"],["function"],["codesink"],["inst"],["self"]]]],[10,"emit_function_to_memory","","Emit a whole function into memory.",22,[[["function"],["self"],["memorycodesink"]]]],[10,"unsigned_add_overflow_condition","","IntCC condition for Unsigned Addition Overflow (Carry).",22,[[["self"]],["intcc"]]],[10,"unsigned_sub_overflow_condition","","IntCC condition for Unsigned Subtraction Overflow…",22,[[["self"]],["intcc"]]],[11,"emit_unwind_info","","Emit unwind information for the given function.",22,[[["function"],["frameunwindkind"],["frameunwindsink"],["self"]]]],[4,"CallConv","","Calling convention identifiers.",null,null],[13,"Fast","","Best performance, not ABI-stable",23,null],[13,"Cold","","Smallest caller code size, not ABI-stable",23,null],[13,"SystemV","","System V-style convention used on many platforms",23,null],[13,"WindowsFastcall","","Windows \"fastcall\" convention, also used for x64 and ARM",23,null],[13,"BaldrdashSystemV","","SpiderMonkey WebAssembly convention on systems using…",23,null],[13,"BaldrdashWindows","","SpiderMonkey WebAssembly convention on Windows",23,null],[13,"Probestack","","Specialized convention for the probestack function",23,null],[3,"BranchRange","","Constraints on the range of a branch instruction.",null,null],[12,"origin","","Offset in bytes from the address of the branch instruction…",24,null],[12,"bits","","Number of bits in the signed byte displacement encoded in…",24,null],[4,"ConstraintKind","","The different kinds of operand constraints.",null,null],[13,"Reg","","This operand or result must be a register from the given…",25,null],[13,"FixedReg","","This operand or result must be a fixed register.",25,null],[13,"Tied","","This result value must use the same register as an input…",25,null],[13,"FixedTied","","This operand must be a fixed register, and it has a tied…",25,null],[13,"Stack","","This operand must be a value in a stack slot.",25,null],[3,"OperandConstraint","","Register constraint for a single value operand or…",null,null],[12,"kind","","The kind of constraint.",26,null],[12,"regclass","","The register class of the operand.",26,null],[3,"RecipeConstraints","","Value operand constraints for an encoding recipe.",null,null],[12,"ins","","Constraints for the instruction's fixed value operands.",27,null],[12,"outs","","Constraints for the instruction's fixed results.",27,null],[12,"fixed_ins","","Are any of the input constraints `FixedReg` or `FixedTied`?",27,null],[12,"fixed_outs","","Are any of the output constraints `FixedReg` or `FixedTied`?",27,null],[12,"tied_ops","","Are any of the input/output constraints `Tied` (but not…",27,null],[12,"clobbers_flags","","Does this instruction clobber the CPU flags?",27,null],[5,"base_size","","Returns the base size of the Recipe, assuming it's fixed.…",null,[[["recipesizing"],["function"],["regdiversions"],["inst"],["encoding"]],["u8"]]],[3,"EncInfo","","Information about all the encodings in this ISA.",null,null],[12,"constraints","","Constraints on value operands per recipe.",28,null],[12,"sizing","","Code size information per recipe.",28,null],[12,"names","","Names of encoding recipes.",28,null],[3,"Encoding","","Bits needed to encode an instruction as binary machine code.",null,null],[5,"regs_overlap","","Test of two registers overlap.",null,[[["u16"],["regclassdata"]],["bool"]]],[6,"RegClass","","A register class reference.",null,null],[3,"RegClassIndex","","A small reference to a register class.",null,null],[3,"RegInfo","","Information about the registers in an ISA.",null,null],[12,"banks","","All register banks, ordered by their `first_unit`. The…",19,null],[12,"classes","","All register classes ordered topologically so a sub-class…",19,null],[6,"RegUnit","","Register units are the smallest units of register…",null,null],[4,"StackBase","","Generic base register for referencing stack slots.",null,null],[13,"SP","","Use the stack pointer.",29,null],[13,"FP","","Use the frame pointer (if one is present).",29,null],[13,"Zone","","Use an explicit zone pointer in a general-purpose register.",29,null],[3,"StackBaseMask","","Bit mask of supported stack bases.",null,null],[12,"0","","",30,null],[3,"StackRef","","A method for referencing a stack slot in the current stack…",null,null],[12,"base","","The base register to use for addressing.",31,null],[12,"offset","","Immediate offset from the base register to the first byte…",31,null],[0,"settings","cranelift::prelude","Shared settings module.",null,null],[8,"Configurable","cranelift::prelude::settings","A string-based configurator for settings groups.",null,null],[10,"set","","Set the string value of any setting by name.",32,[[["str"],["self"]],[["result",["seterror"]],["seterror"]]]],[10,"enable","","Enable a boolean setting or apply a preset.",32,[[["str"],["self"]],[["result",["seterror"]],["seterror"]]]],[3,"Builder","","Collect settings values based on a template.",null,null],[4,"SetError","","An error produced when changing a setting.",null,null],[13,"BadName","","No setting by this name exists.",33,null],[13,"BadType","","Type mismatch for setting (e.g., setting an enum setting…",33,null],[13,"BadValue","","This is not a valid value for this setting.",33,null],[6,"SetResult","","A result returned when changing a setting.",null,null],[3,"PredicateView","","A reference to just the boolean predicates of a settings…",null,null],[0,"detail","","Implementation details for generated code.",null,null],[3,"Template","cranelift::prelude::settings::detail","An instruction group template.",null,null],[12,"name","","Name of the instruction group.",34,null],[12,"descriptors","","List of setting descriptors.",34,null],[12,"enumerators","","Union of all enumerators.",34,null],[12,"hash_table","","Hash table of settings.",34,null],[12,"defaults","","Default values.",34,null],[12,"presets","","Pairs of (mask, value) for presets.",34,null],[3,"Descriptor","","A setting descriptor holds the information needed to…",null,null],[12,"name","","Lower snake-case name of setting as defined in meta.",35,null],[12,"offset","","Offset of byte containing this setting.",35,null],[12,"detail","","Additional details, depending on the kind of setting.",35,null],[4,"Detail","","The different kind of settings along with descriptor bits…",null,null],[13,"Bool","","A boolean setting only uses one bit, numbered from LSB.",36,null],[12,"bit","cranelift::prelude::settings::detail::Detail","0-7.",37,null],[13,"Num","cranelift::prelude::settings::detail","A numerical setting uses the whole byte.",36,null],[13,"Enum","","An Enum setting uses a range of enumerators.",36,null],[12,"last","cranelift::prelude::settings::detail::Detail","Numerical value of last enumerator, allowing for 1-256…",38,null],[12,"enumerators","","First enumerator in the ENUMERATORS table.",38,null],[13,"Preset","cranelift::prelude::settings::detail","A preset is not an individual setting, it is a collection…",36,null],[3,"Flags","cranelift::prelude::settings","Flags group `shared`.",null,null],[4,"OptLevel","","Values for `shared.opt_level`.",null,null],[13,"None","","`none`.",39,null],[13,"Speed","","`speed`.",39,null],[13,"SpeedAndSize","","`speed_and_size`.",39,null],[4,"TlsModel","","Values for `shared.tls_model`.",null,null],[13,"None","","`none`.",40,null],[13,"ElfGd","","`elf_gd`.",40,null],[13,"Macho","","`macho`.",40,null],[13,"Coff","","`coff`.",40,null],[4,"LibcallCallConv","","Values for `shared.libcall_call_conv`.",null,null],[13,"IsaDefault","","`isa_default`.",41,null],[13,"Fast","","`fast`.",41,null],[13,"Cold","","`cold`.",41,null],[13,"SystemV","","`system_v`.",41,null],[13,"WindowsFastcall","","`windows_fastcall`.",41,null],[13,"BaldrdashSystemV","","`baldrdash_system_v`.",41,null],[13,"BaldrdashWindows","","`baldrdash_windows`.",41,null],[13,"Probestack","","`probestack`.",41,null],[5,"builder","","Create a `settings::Builder` for the shared settings group.",null,[[],["builder"]]],[3,"FlagsOrIsa","","Wrapper containing flags and optionally a `TargetIsa`…",null,null],[12,"flags","","Flags are always present.",42,null],[12,"isa","","The ISA may not be present.",42,null],[8,"Configurable","cranelift::prelude","A string-based configurator for settings groups.",null,null],[10,"set","","Set the string value of any setting by name.",32,[[["str"],["self"]],[["result",["seterror"]],["seterror"]]]],[10,"enable","","Enable a boolean setting or apply a preset.",32,[[["str"],["self"]],[["result",["seterror"]],["seterror"]]]],[3,"FunctionBuilder","","Temporary object used to build a single Cranelift IR…",null,null],[12,"func","","The function currently being built. This field is public…",43,null],[3,"FunctionBuilderContext","","Structure used for translating a series of functions into…",null,null],[3,"Variable","","An opaque reference to a variable.",null,null],[17,"VERSION","cranelift","Version number of this crate.",null,null],[11,"from","cranelift::prelude","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"equivalent","","",1,[[["k"],["self"]],["bool"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"equivalent","","",2,[[["k"],["self"]],["bool"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"into","","",44,[[],["u"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"to_string","","",44,[[["self"]],["string"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"equivalent","","",44,[[["k"],["self"]],["bool"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"into","","",45,[[],["u"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"to_string","","",45,[[["self"]],["string"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"equivalent","","",45,[[["k"],["self"]],["bool"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"into","","",46,[[],["u"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"equivalent","","",46,[[["k"],["self"]],["bool"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"into","","",47,[[],["u"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"to_string","","",47,[[["self"]],["string"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"equivalent","","",47,[[["k"],["self"]],["bool"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"into","","",48,[[],["u"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"to_string","","",48,[[["self"]],["string"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"equivalent","","",48,[[["k"],["self"]],["bool"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"equivalent","","",3,[[["k"],["self"]],["bool"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"into","","",49,[[],["u"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"key","","",49,[[["self"]],["t"]]],[11,"equivalent","","",49,[[["k"],["self"]],["bool"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"equivalent","","",5,[[["k"],["self"]],["bool"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"into","","",50,[[],["u"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"to_string","","",50,[[["self"]],["string"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"into","","",51,[[],["u"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"to_string","","",51,[[["self"]],["string"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"equivalent","","",51,[[["k"],["self"]],["bool"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"equivalent","","",13,[[["k"],["self"]],["bool"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"equivalent","","",14,[[["k"],["self"]],["bool"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"equivalent","","",15,[[["k"],["self"]],["bool"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"equivalent","","",16,[[["k"],["self"]],["bool"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"into","","",52,[[],["u"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"to_string","","",52,[[["self"]],["string"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"key","","",52,[[["self"]],["t"]]],[11,"equivalent","","",52,[[["k"],["self"]],["bool"]]],[11,"from","cranelift::prelude::isa::registers","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into","","",18,[[],["u"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"from","cranelift::prelude::isa","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"into","","",53,[[],["u"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"to_string","","",53,[[["self"]],["string"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"key","","",53,[[["self"]],["t"]]],[11,"equivalent","","",53,[[["k"],["self"]],["bool"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"from","cranelift::prelude::isa::registers","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"into","","",54,[[],["u"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"to_string","","",54,[[["self"]],["string"]]],[11,"from","cranelift::prelude::isa","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"equivalent","","",20,[[["k"],["self"]],["bool"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"into","","",55,[[],["u"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into","","",21,[[],["u"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"equivalent","","",23,[[["k"],["self"]],["bool"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"into","","",25,[[],["u"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"equivalent","","",25,[[["k"],["self"]],["bool"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"into","","",56,[[],["u"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"to_string","","",56,[[["self"]],["string"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"equivalent","","",56,[[["k"],["self"]],["bool"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"equivalent","","",29,[[["k"],["self"]],["bool"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"equivalent","","",30,[[["k"],["self"]],["bool"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"into","","",31,[[],["u"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"from","cranelift::prelude::settings","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"into","","",57,[[],["u"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"into","","",33,[[],["u"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"to_string","","",33,[[["self"]],["string"]]],[11,"equivalent","","",33,[[["k"],["self"]],["bool"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"into","","",58,[[],["u"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,[[["self"],["t"]]]],[11,"from","cranelift::prelude::settings::detail","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"into","","",34,[[],["u"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"into","","",35,[[],["u"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"into","","",36,[[],["u"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"from","cranelift::prelude::settings","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"into","","",59,[[],["u"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"to_string","","",59,[[["self"]],["string"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"into","","",39,[[],["u"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"equivalent","","",39,[[["k"],["self"]],["bool"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"into","","",40,[[],["u"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"equivalent","","",40,[[["k"],["self"]],["bool"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"into","","",41,[[],["u"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"equivalent","","",41,[[["k"],["self"]],["bool"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"into","","",42,[[],["u"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"from","cranelift::prelude","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"into","","",43,[[],["u"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"into","","",60,[[],["u"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"into","","",61,[[],["u"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"key","","",61,[[["self"]],["t"]]],[11,"equivalent","","",61,[[["k"],["self"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::isa","",56,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",45,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::isa::registers","",54,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::isa","",53,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",49,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::settings","",39,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",16,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::settings","",59,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::isa","",23,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",47,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::settings","",41,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",48,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::isa::registers","",18,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",50,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::isa","",20,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",4,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"deserialize","cranelift::prelude::isa","",23,[[["__d"]],[["callconv"],["result",["callconv"]]]]],[11,"deserialize","cranelift::prelude","",16,[[["__d"]],[["trapcode"],["result",["trapcode"]]]]],[11,"deserialize","","",15,[[["__d"]],[["result",["stackslotkind"]],["stackslotkind"]]]],[11,"deserialize","","",14,[[["__d"]],[["result",["stackslotdata"]],["stackslotdata"]]]],[11,"new","cranelift::prelude::isa","",53,[[["usize"]],["regclassindex"]]],[11,"index","","",53,[[],["usize"]]],[11,"new","cranelift::prelude","",49,[[["usize"]],["block"]]],[11,"index","","",49,[[],["usize"]]],[11,"new","","",52,[[["usize"]],["value"]]],[11,"index","","",52,[[],["usize"]]],[11,"eq","cranelift::prelude::isa","",27,[[["recipeconstraints"],["self"]],["bool"]]],[11,"ne","","",27,[[["recipeconstraints"],["self"]],["bool"]]],[11,"eq","","",26,[[["operandconstraint"],["self"]],["bool"]]],[11,"ne","","",26,[[["operandconstraint"],["self"]],["bool"]]],[11,"eq","cranelift::prelude::settings","",41,[[["libcallcallconv"],["self"]],["bool"]]],[11,"eq","cranelift::prelude","",15,[[["self"],["stackslotkind"]],["bool"]]],[11,"eq","","",5,[[["externalname"],["self"]],["bool"]]],[11,"ne","","",5,[[["externalname"],["self"]],["bool"]]],[11,"eq","","",13,[[["signature"],["self"]],["bool"]]],[11,"ne","","",13,[[["signature"],["self"]],["bool"]]],[11,"eq","cranelift::prelude::settings","",39,[[["optlevel"],["self"]],["bool"]]],[11,"eq","cranelift::prelude::isa::registers","",18,[[["self"],["regclassdata"]],["bool"]]],[11,"eq","cranelift::prelude","",45,[[["ieee64"],["self"]],["bool"]]],[11,"ne","","",45,[[["ieee64"],["self"]],["bool"]]],[11,"eq","","",46,[[["imm64"],["self"]],["bool"]]],[11,"ne","","",46,[[["imm64"],["self"]],["bool"]]],[11,"eq","cranelift::prelude::isa","",23,[[["self"],["callconv"]],["bool"]]],[11,"eq","cranelift::prelude","",52,[[["value"],["self"]],["bool"]]],[11,"ne","","",52,[[["value"],["self"]],["bool"]]],[11,"eq","","",47,[[["self"],["uimm64"]],["bool"]]],[11,"ne","","",47,[[["self"],["uimm64"]],["bool"]]],[11,"eq","","",48,[[["self"],["type"]],["bool"]]],[11,"ne","","",48,[[["self"],["type"]],["bool"]]],[11,"eq","cranelift::prelude::isa","",53,[[["self"],["regclassindex"]],["bool"]]],[11,"ne","","",53,[[["self"],["regclassindex"]],["bool"]]],[11,"eq","","",25,[[["self"],["constraintkind"]],["bool"]]],[11,"ne","","",25,[[["self"],["constraintkind"]],["bool"]]],[11,"eq","cranelift::prelude","",3,[[["abiparam"],["self"]],["bool"]]],[11,"ne","","",3,[[["abiparam"],["self"]],["bool"]]],[11,"eq","cranelift::prelude::isa","",30,[[["stackbasemask"],["self"]],["bool"]]],[11,"ne","","",30,[[["stackbasemask"],["self"]],["bool"]]],[11,"eq","cranelift::prelude","",16,[[["self"],["trapcode"]],["bool"]]],[11,"ne","","",16,[[["self"],["trapcode"]],["bool"]]],[11,"eq","cranelift::prelude::isa","",56,[[["encoding"],["self"]],["bool"]]],[11,"ne","","",56,[[["encoding"],["self"]],["bool"]]],[11,"eq","cranelift::prelude::settings","",33,[[["seterror"],["self"]],["bool"]]],[11,"ne","","",33,[[["seterror"],["self"]],["bool"]]],[11,"eq","cranelift::prelude","",44,[[["ieee32"],["self"]],["bool"]]],[11,"ne","","",44,[[["ieee32"],["self"]],["bool"]]],[11,"eq","","",51,[[["self"],["memflags"]],["bool"]]],[11,"ne","","",51,[[["self"],["memflags"]],["bool"]]],[11,"eq","cranelift::prelude::settings","",40,[[["tlsmodel"],["self"]],["bool"]]],[11,"eq","cranelift::prelude::isa","",20,[[["lookuperror"],["self"]],["bool"]]],[11,"eq","cranelift::prelude","",49,[[["block"],["self"]],["bool"]]],[11,"ne","","",49,[[["block"],["self"]],["bool"]]],[11,"eq","cranelift::prelude::isa","",29,[[["stackbase"],["self"]],["bool"]]],[11,"eq","cranelift::prelude","",14,[[["stackslotdata"],["self"]],["bool"]]],[11,"ne","","",14,[[["stackslotdata"],["self"]],["bool"]]],[11,"default","cranelift::prelude::isa","",56,[[],["encoding"]]],[11,"default","cranelift::prelude","",48,[[],["type"]]],[11,"default","","",5,[[],["externalname"]]],[11,"hash","","",51,[[["self"],["__h"]]]],[11,"hash","","",49,[[["self"],["__h"]]]],[11,"hash","","",16,[[["self"],["__h"]]]],[11,"hash","","",48,[[["self"],["__h"]]]],[11,"hash","","",45,[[["self"],["__h"]]]],[11,"hash","cranelift::prelude::settings","",39,[[["self"],["__h"]]]],[11,"hash","","",41,[[["self"],["__h"]]]],[11,"hash","cranelift::prelude","",46,[[["self"],["__h"]]]],[11,"hash","","",47,[[["self"],["__h"]]]],[11,"hash","cranelift::prelude::isa","",23,[[["self"],["__h"]]]],[11,"hash","cranelift::prelude","",3,[[["self"],["__h"]]]],[11,"hash","","",52,[[["self"],["__h"]]]],[11,"hash","","",13,[[["self"],["__h"]]]],[11,"hash","cranelift::prelude::settings","",40,[[["self"],["__h"]]]],[11,"hash","cranelift::prelude","",44,[[["self"],["__h"]]]],[11,"enable","cranelift::prelude::settings","",57,[[["str"],["self"]],[["result",["seterror"]],["seterror"]]]],[11,"set","","",57,[[["str"],["self"]],[["result",["seterror"]],["seterror"]]]],[11,"set","cranelift::prelude::isa","",55,[[["str"],["self"]],[["result",["seterror"]],["seterror"]]]],[11,"enable","","",55,[[["str"],["self"]],[["result",["seterror"]],["seterror"]]]],[11,"from_str","cranelift::prelude","",15,[[["str"]],[["result",["stackslotkind"]],["stackslotkind"]]]],[11,"from_str","","",16,[[["str"]],[["result",["trapcode"]],["trapcode"]]]],[11,"from_str","","",45,[[["str"]],[["ieee64"],["str"],["result",["ieee64","str"]]]]],[11,"from_str","","",47,[[["str"]],[["result",["uimm64","str"]],["uimm64"],["str"]]]],[11,"from_str","","",46,[[["str"]],[["result",["imm64","str"]],["imm64"],["str"]]]],[11,"from_str","cranelift::prelude::isa","",23,[[["str"]],[["result",["callconv"]],["callconv"]]]],[11,"from_str","cranelift::prelude","",44,[[["str"]],[["ieee32"],["result",["ieee32","str"]],["str"]]]],[11,"from_str","cranelift::prelude::settings","",40,[[["str"]],[["tlsmodel"],["result",["tlsmodel"]]]]],[11,"from_str","","",41,[[["str"]],[["libcallcallconv"],["result",["libcallcallconv"]]]]],[11,"from_str","","",39,[[["str"]],[["optlevel"],["result",["optlevel"]]]]],[11,"from_str","cranelift::prelude","",5,[[["str"]],[["result",["externalname"]],["externalname"]]]],[11,"partial_cmp","","",49,[[["block"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",49,[[["block"],["self"]],["bool"]]],[11,"le","","",49,[[["block"],["self"]],["bool"]]],[11,"gt","","",49,[[["block"],["self"]],["bool"]]],[11,"ge","","",49,[[["block"],["self"]],["bool"]]],[11,"partial_cmp","","",52,[[["value"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",52,[[["value"],["self"]],["bool"]]],[11,"le","","",52,[[["value"],["self"]],["bool"]]],[11,"gt","","",52,[[["value"],["self"]],["bool"]]],[11,"ge","","",52,[[["value"],["self"]],["bool"]]],[11,"into_bytes","","",45,[[],[["u8"],["vec",["u8"]]]]],[11,"into_bytes","","",46,[[],[["u8"],["vec",["u8"]]]]],[11,"into_bytes","","",44,[[],[["u8"],["vec",["u8"]]]]],[11,"fmt","","",5,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::isa","",26,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",49,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::isa","",25,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",47,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::isa::registers","",18,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",45,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::isa","",30,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",52,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::isa","",23,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",15,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::isa","",56,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::settings","",40,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",51,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::isa","",53,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude::settings","",41,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","cranelift::prelude","",4,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"from","","",45,[[["u64"]],["ieee64"]]],[11,"from","","",45,[[["f64"]],["ieee64"]]],[11,"from","cranelift::prelude::settings","",42,[[["flags"]],["flagsorisa"]]],[11,"from","cranelift::prelude","",46,[[["i64"]],["imm64"]]],[11,"from","","",44,[[["f32"]],["ieee32"]]],[11,"from","cranelift::prelude::isa","",53,[[["regclassdata"]],["regclassindex"]]],[11,"from","cranelift::prelude::settings","",42,[[["targetisa"]],["flagsorisa"]]],[11,"from","cranelift::prelude","",47,[[["u64"]],["uimm64"]]],[11,"into","","",47,[[],["u64"]]],[11,"into","","",46,[[],["i64"]]],[11,"clone","","",52,[[["self"]],["value"]]],[11,"clone","","",49,[[["self"]],["block"]]],[11,"clone","","",50,[[["self"]],["jumptabledata"]]],[11,"clone","cranelift::prelude::isa","",31,[[["self"]],["stackref"]]],[11,"clone","","",20,[[["self"]],["lookuperror"]]],[11,"clone","cranelift::prelude::settings","",40,[[["self"]],["tlsmodel"]]],[11,"clone","cranelift::prelude","",46,[[["self"]],["imm64"]]],[11,"clone","","",44,[[["self"]],["ieee32"]]],[11,"clone","cranelift::prelude::isa","",21,[[["self"]],["targetfrontendconfig"]]],[11,"clone","cranelift::prelude","",3,[[["self"]],["abiparam"]]],[11,"clone","","",15,[[["self"]],["stackslotkind"]]],[11,"clone","cranelift::prelude::isa","",24,[[["self"]],["branchrange"]]],[11,"clone","","",53,[[["self"]],["regclassindex"]]],[11,"clone","cranelift::prelude","",8,[[["self"]],["globalvaluedata"]]],[11,"clone","cranelift::prelude::settings","",58,[[["self"]],["predicateview"]]],[11,"clone","cranelift::prelude::settings::detail","",36,[[["self"]],["detail"]]],[11,"clone","cranelift::prelude::isa","",28,[[["self"]],["encinfo"]]],[11,"clone","","",56,[[["self"]],["encoding"]]],[11,"clone","cranelift::prelude","",4,[[["self"]],["extfuncdata"]]],[11,"clone","","",51,[[["self"]],["memflags"]]],[11,"clone","cranelift::prelude::settings","",57,[[["self"]],["builder"]]],[11,"clone","cranelift::prelude","",47,[[["self"]],["uimm64"]]],[11,"clone","cranelift::prelude::settings","",59,[[["self"]],["flags"]]],[11,"clone","cranelift::prelude::isa","",27,[[["self"]],["recipeconstraints"]]],[11,"clone","cranelift::prelude","",16,[[["self"]],["trapcode"]]],[11,"clone","cranelift::prelude::isa","",29,[[["self"]],["stackbase"]]],[11,"clone","cranelift::prelude::settings","",41,[[["self"]],["libcallcallconv"]]],[11,"clone","","",42,[[["self"]],["flagsorisa"]]],[11,"clone","cranelift::prelude::isa","",30,[[["self"]],["stackbasemask"]]],[11,"clone","","",25,[[["self"]],["constraintkind"]]],[11,"clone","cranelift::prelude::settings","",39,[[["self"]],["optlevel"]]],[11,"clone","cranelift::prelude","",14,[[["self"]],["stackslotdata"]]],[11,"clone","","",48,[[["self"]],["type"]]],[11,"clone","","",5,[[["self"]],["externalname"]]],[11,"clone","","",13,[[["self"]],["signature"]]],[11,"clone","cranelift::prelude::isa","",23,[[["self"]],["callconv"]]],[11,"clone","cranelift::prelude","",45,[[["self"]],["ieee64"]]],[11,"clone","cranelift::prelude::isa","",19,[[["self"]],["reginfo"]]],[11,"reserved_value","cranelift::prelude","",49,[[],["block"]]],[11,"reserved_value","","",52,[[],["value"]]],[11,"cmp","","",49,[[["block"],["self"]],["ordering"]]],[11,"cmp","","",52,[[["value"],["self"]],["ordering"]]],[11,"serialize","","",15,[[["self"],["__s"]],["result"]]],[11,"serialize","","",16,[[["self"],["__s"]],["result"]]],[11,"serialize","","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","cranelift::prelude::isa","",23,[[["self"],["__s"]],["result"]]],[11,"from_str","cranelift::prelude","",1,[[["str"]],[["result",["floatcc"]],["floatcc"]]]],[11,"from_str","","",2,[[["str"]],[["intcc"],["result",["intcc"]]]]],[11,"fmt","","",2,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"clone","","",1,[[["self"]],["floatcc"]]],[11,"clone","","",2,[[["self"]],["intcc"]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"inverse","","",1,[[],["floatcc"]]],[11,"reverse","","",1,[[],["floatcc"]]],[11,"inverse","","",2,[[],["intcc"]]],[11,"reverse","","",2,[[],["intcc"]]],[11,"eq","","",2,[[["intcc"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["floatcc"]],["bool"]]],[11,"new","","",61,[[["usize"]],["variable"]]],[11,"index","","",61,[[],["usize"]]],[11,"eq","","",61,[[["variable"],["self"]],["bool"]]],[11,"ne","","",61,[[["variable"],["self"]],["bool"]]],[11,"clone","","",61,[[["self"]],["variable"]]],[11,"fmt","","",61,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"without_equal","","Get the corresponding IntCC with the equal component…",2,[[],["intcc"]]],[11,"unsigned","","Get the corresponding IntCC with the signed component…",2,[[],["intcc"]]],[11,"to_static_str","","Get the corresponding string condition code for the IntCC…",2,[[],["str"]]],[11,"with_bits","","Create a new `Ieee32` containing the bits of `x`.",44,[[["u32"]],["ieee32"]]],[11,"pow2","","Create an `Ieee32` number representing `2.0^n`.",44,[[["i"]],["ieee32"]]],[11,"fcvt_to_sint_negative_overflow","","Create an `Ieee32` number representing the greatest…",44,[[["i"]],["ieee32"]]],[11,"neg","","Return self negated.",44,[[],["ieee32"]]],[11,"with_float","","Create a new `Ieee32` representing the number `x`.",44,[[["f32"]],["ieee32"]]],[11,"bits","","Get the bitwise representation.",44,[[],["u32"]]],[11,"with_bits","","Create a new `Ieee64` containing the bits of `x`.",45,[[["u64"]],["ieee64"]]],[11,"pow2","","Create an `Ieee64` number representing `2.0^n`.",45,[[["i"]],["ieee64"]]],[11,"fcvt_to_sint_negative_overflow","","Create an `Ieee64` number representing the greatest…",45,[[["i"]],["ieee64"]]],[11,"neg","","Return self negated.",45,[[],["ieee64"]]],[11,"with_float","","Create a new `Ieee64` representing the number `x`.",45,[[["f64"]],["ieee64"]]],[11,"bits","","Get the bitwise representation.",45,[[],["u64"]]],[11,"new","","Create a new `Imm64` representing the signed number `x`.",46,[[["i64"]],["imm64"]]],[11,"wrapping_neg","","Return self negated.",46,[[],["imm64"]]],[11,"new","","Create a new `Uimm64` representing the unsigned number `x`.",47,[[["u64"]],["uimm64"]]],[11,"wrapping_neg","","Return self negated.",47,[[],["uimm64"]]],[11,"lane_type","","Get the lane type of this SIMD vector type.",48,[[],["type"]]],[11,"lane_of","","The type transformation that returns the lane type of a…",48,[[],["type"]]],[11,"log2_lane_bits","","Get log_2 of the number of bits in a lane.",48,[[],["u8"]]],[11,"lane_bits","","Get the number of bits in a lane.",48,[[],["u8"]]],[11,"int","","Get an integer type with the requested number of bits.",48,[[["u16"]],[["option",["type"]],["type"]]]],[11,"as_bool_pedantic","","Get a type with the same number of lanes as this type, but…",48,[[],["type"]]],[11,"as_bool","","Get a type with the same number of lanes as this type, but…",48,[[],["type"]]],[11,"half_width","","Get a type with the same number of lanes as this type, but…",48,[[],[["option",["type"]],["type"]]]],[11,"double_width","","Get a type with the same number of lanes as this type, but…",48,[[],[["option",["type"]],["type"]]]],[11,"is_invalid","","Is this the INVALID type?",48,[[],["bool"]]],[11,"is_special","","Is this a special type?",48,[[],["bool"]]],[11,"is_lane","","Is this a lane type?",48,[[],["bool"]]],[11,"is_vector","","Is this a SIMD vector type?",48,[[],["bool"]]],[11,"is_bool","","Is this a scalar boolean type?",48,[[],["bool"]]],[11,"is_int","","Is this a scalar integer type?",48,[[],["bool"]]],[11,"is_float","","Is this a scalar floating point type?",48,[[],["bool"]]],[11,"is_flags","","Is this a CPU flags type?",48,[[],["bool"]]],[11,"is_ref","","Is this a ref type?",48,[[],["bool"]]],[11,"log2_lane_count","","Get log_2 of the number of lanes in this SIMD vector type.",48,[[],["u8"]]],[11,"lane_count","","Get the number of lanes in this SIMD vector type.",48,[[],["u16"]]],[11,"bits","","Get the total number of bits used to represent this type.",48,[[],["u16"]]],[11,"bytes","","Get the number of bytes used to store this type in memory.",48,[[],["u32"]]],[11,"by","","Get a SIMD vector type with `n` times more lanes than this…",48,[[["u16"]],[["option",["type"]],["type"]]]],[11,"half_vector","","Get a SIMD vector with half the number of lanes.",48,[[],[["option",["type"]],["type"]]]],[11,"index","","Index of this type, for use with hash tables etc.",48,[[],["usize"]]],[11,"wider_or_equal","","True iff:",48,[[["type"]],["bool"]]],[11,"triple_pointer_type","","Return the pointer type for the given target triple.",48,[[["triple"]],["type"]]],[11,"new","","Create a parameter with default flags.",3,[[["type"]],["abiparam"]]],[11,"special","","Create a special-purpose parameter that is not (yet) bound…",3,[[["argumentpurpose"],["type"]],["abiparam"]]],[11,"special_reg","","Create a parameter for a special-purpose register.",3,[[["argumentpurpose"],["u16"],["type"]],["abiparam"]]],[11,"uext","","Convert `self` to a parameter with the `uext` flag set.",3,[[],["abiparam"]]],[11,"sext","","Convert `self` to a parameter type with the `sext` flag set.",3,[[],["abiparam"]]],[11,"display","","Return an object that can display `self` with correct…",3,[[["self"],["r"]],["displayabiparam"]]],[11,"with_number","","Create a new block reference from its number. This…",49,[[["u32"]],[["option",["block"]],["block"]]]],[11,"from_u32","","Return the underlying index value as a `u32`.",49,[[["u32"]],["block"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",49,[[],["u32"]]],[11,"testcase","","Creates a new external name from a sequence of bytes.…",5,[[["t"]],["externalname"]]],[11,"user","","Create a new external name from user-provided integer…",5,[[["u32"]],["externalname"]]],[11,"symbol_name","","Assume that `self` is an `GlobalValueData::Symbol` and…",8,[[["self"]],["externalname"]]],[11,"global_type","","Return the type of this global.",8,[[["self"],["targetisa"]],["type"]]],[11,"new","","Create a new empty jump table.",50,[[],["jumptabledata"]]],[11,"with_capacity","","Create a new empty jump table with the specified capacity.",50,[[["usize"]],["jumptabledata"]]],[11,"len","","Get the number of table entries.",50,[[["self"]],["usize"]]],[11,"push_entry","","Append a table entry.",50,[[["self"],["block"]]]],[11,"branches_to","","Checks if any of the entries branch to `block`.",50,[[["self"],["block"]],["bool"]]],[11,"as_slice","","Access the whole table as a slice.",50,[[["self"]]]],[11,"as_mut_slice","","Access the whole table as a mutable slice.",50,[[["self"]]]],[11,"iter","","Returns an iterator over the table.",50,[[["self"]],[["iter",["block"]],["block"]]]],[11,"iter_mut","","Returns an iterator that allows modifying each value.",50,[[["self"]],[["itermut",["block"]],["block"]]]],[11,"new","","Create a new empty set of flags.",51,[[],["memflags"]]],[11,"trusted","","Create a set of flags representing an access from a…",51,[[],["memflags"]]],[11,"set_by_name","","Set a flag bit by name.",51,[[["str"],["self"]],["bool"]]],[11,"notrap","","Test if the `notrap` flag is set.",51,[[],["bool"]]],[11,"set_notrap","","Set the `notrap` flag.",51,[[["self"]]]],[11,"aligned","","Test if the `aligned` flag is set.",51,[[],["bool"]]],[11,"set_aligned","","Set the `aligned` flag.",51,[[["self"]]]],[11,"readonly","","Test if the `readonly` flag is set.",51,[[],["bool"]]],[11,"set_readonly","","Set the `readonly` flag.",51,[[["self"]]]],[11,"new","","Create a new blank signature.",13,[[["callconv"]],["signature"]]],[11,"clear","","Clear the signature so it is identical to a fresh one…",13,[[["self"],["callconv"]]]],[11,"display","","Return an object that can display `self` with correct…",13,[[["self"],["r"]],["displaysignature"]]],[11,"special_param_index","","Find the index of a presumed unique special-purpose…",13,[[["argumentpurpose"],["self"]],[["option",["usize"]],["usize"]]]],[11,"special_return_index","","Find the index of a presumed unique special-purpose…",13,[[["argumentpurpose"],["self"]],[["option",["usize"]],["usize"]]]],[11,"uses_special_param","","Does this signature have a parameter whose…",13,[[["argumentpurpose"],["self"]],["bool"]]],[11,"uses_special_return","","Does this signature have a return whose `ArgumentPurpose`…",13,[[["argumentpurpose"],["self"]],["bool"]]],[11,"num_special_params","","How many special parameters does this function have?",13,[[["self"]],["usize"]]],[11,"num_special_returns","","How many special returns does this function have?",13,[[["self"]],["usize"]]],[11,"uses_struct_return_param","","Does this signature take an struct return pointer parameter?",13,[[["self"]],["bool"]]],[11,"is_multi_return","","Does this return more than one normal value? (Pre-struct…",13,[[["self"]],["bool"]]],[11,"new","","Create a stack slot with the specified byte size.",14,[[["u32"],["stackslotkind"]],["stackslotdata"]]],[11,"alignment","","Get the alignment in bytes of this stack slot given the…",14,[[["u32"],["self"]],["u32"]]],[11,"with_number","","Create a value from its number representation. This is the…",52,[[["u32"]],[["value"],["option",["value"]]]]],[11,"from_u32","","Return the underlying index value as a `u32`.",52,[[["u32"]],["value"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",52,[[],["u32"]]],[11,"intersect_index","cranelift::prelude::isa::registers","Get the register class index corresponding to the…",18,[[["self"],["regclassdata"]],[["option",["regclassindex"]],["regclassindex"]]]],[11,"intersect","","Get the intersection of `self` and `other`.",18,[[["self"],["regclassdata"]],[["option",["regclassdata"]],["regclassdata"]]]],[11,"has_subclass","","Returns true if `other` is a subclass of this register…",18,[[["rci"],["self"]],["bool"]]],[11,"toprc","","Get the top-level register class containing this class.",18,[[["self"]],["regclassdata"]]],[11,"unit","","Get a specific register unit in this class.",18,[[["self"],["usize"]],["u16"]]],[11,"contains","","Does this register class contain `regunit`?",18,[[["u16"],["self"]],["bool"]]],[11,"is_pinned_reg","","If the pinned register is used, is the given regunit the…",18,[[["u16"],["self"],["bool"]],["bool"]]],[11,"index_of","","Calculate the index of the register inside the class.",18,[[["u16"],["self"]],["u16"]]],[11,"bank_containing_regunit","cranelift::prelude::isa","Get the register bank holding `regunit`.",19,[[["u16"],["self"]],[["regbank"],["option",["regbank"]]]]],[11,"parse_regunit","","Try to parse a regunit name. The name is not expected to…",19,[[["str"],["self"]],[["u16"],["option",["u16"]]]]],[11,"display_regunit","","Make a temporary object that can display a register unit.",19,[[["u16"],["self"]],["displayregunit"]]],[11,"rc","","Get the register class corresponding to `idx`.",19,[[["self"],["regclassindex"]],["regclassdata"]]],[11,"toprc","","Get the top-level register class containing the `idx` class.",19,[[["self"],["regclassindex"]],["regclassdata"]]],[11,"finish","","Combine the ISA-specific settings with the provided…",55,[[["flags"]],[["targetisa"],["box",["targetisa"]]]]],[11,"pointer_type","","Get the pointer type of this target.",21,[[],["type"]]],[11,"pointer_bits","","Get the width of pointers on this target, in units of bits.",21,[[],["u8"]]],[11,"pointer_bytes","","Get the width of pointers on this target, in units of bytes.",21,[[],["u8"]]],[11,"triple_default","","Return the default calling convention for the given target…",23,[[["triple"]],["callconv"]]],[11,"for_libcall","","Returns the calling convention used for libcalls for the…",23,[[["targetisa"]],["callconv"]]],[11,"extends_windows_fastcall","","Is the calling convention extending the Windows Fastcall…",23,[[],["bool"]]],[11,"extends_baldrdash","","Is the calling convention extending the Baldrdash ABI?",23,[[],["bool"]]],[11,"contains","","Determine if this branch range can represent the range…",24,[[["u32"]],["bool"]]],[11,"satisfied","","Check if this operand constraint is satisfied by the given…",26,[[["valueloc"],["self"]],["bool"]]],[11,"satisfied","","Check that these constraints are satisfied by the operands…",27,[[["function"],["regdiversions"],["inst"],["self"]],["bool"]]],[11,"operand_constraints","","Get the value operand constraints for `enc` if it is a…",28,[[["self"],["encoding"]],[["option",["recipeconstraints"]],["recipeconstraints"]]]],[11,"display","","Create an object that can display an ISA-dependent…",28,[[["self"],["encoding"]],["displayencoding"]]],[11,"byte_size","","Get the size in bytes of `inst`, if it were encoded with…",28,[[["function"],["regdiversions"],["inst"],["encoding"],["self"]],["u32"]]],[11,"branch_range","","Get the branch range that is supported by `enc`, if any.",28,[[["self"],["encoding"]],[["option",["branchrange"]],["branchrange"]]]],[11,"new","","Create a new `Encoding` containing `(recipe, bits)`.",56,[[["u16"]],["encoding"]]],[11,"recipe","","Get the recipe number in this encoding.",56,[[],["usize"]]],[11,"bits","","Get the recipe-specific encoding bits.",56,[[],["u16"]]],[11,"is_legal","","Is this a legal encoding, or the default placeholder?",56,[[],["bool"]]],[11,"contains","","Check if this mask contains the `base` variant.",30,[[["stackbase"]],["bool"]]],[11,"masked","","Get a reference to the stack slot `ss` using one of the…",31,[[["stackslots"],["stackslot"],["stackbasemask"]],[["option",["stackref"]],["stackref"]]]],[11,"sp","","Get a reference to `ss` using the stack pointer as a base.",31,[[["stackslots"],["stackslot"]],["stackref"]]],[11,"new","cranelift::prelude::settings","Create a new builder with defaults and names from the…",57,[[["template"]],["builder"]]],[11,"state_for","","Extract contents of builder once everything is configured.",57,[[["str"]],["box"]]],[11,"new","","Create a new view of a precomputed predicate vector.",58,[[],["predicateview"]]],[11,"test","","Check a numbered predicate.",58,[[["usize"]],["bool"]]],[11,"enums","cranelift::prelude::settings::detail","Get enumerators corresponding to a `Details::Enum`.",34,[[["u16"],["self"],["u8"]]]],[11,"format_toml_value","","Format a setting value as a TOML string. This is mostly…",34,[[["detail"],["formatter"],["self"],["u8"]],[["result",["error"]],["error"]]]],[11,"is_preset","","Check if a detail is a Detail::Preset. Useful because the…",36,[[],["bool"]]],[11,"new","cranelift::prelude::settings","Create flags shared settings group.",59,[[["builder"]],["flags"]]],[11,"predicate_view","","Get a view of the boolean predicates.",59,[[["self"]],["predicateview"]]],[11,"opt_level","","Optimization level:",59,[[["self"]],["optlevel"]]],[11,"tls_model","","Defines the model used to perform TLS accesses.",59,[[["self"]],["tlsmodel"]]],[11,"libcall_call_conv","","Defines the calling convention to use for LibCalls call…",59,[[["self"]],["libcallcallconv"]]],[11,"baldrdash_prologue_words","","Number of pointer-sized words pushed by the baldrdash…",59,[[["self"]],["u8"]]],[11,"probestack_size_log2","","The log2 of the size of the stack guard region.",59,[[["self"]],["u8"]]],[11,"enable_verifier","","Run the Cranelift IR verifier at strategic times during…",59,[[["self"]],["bool"]]],[11,"is_pic","","Enable Position-Independent Code generation",59,[[["self"]],["bool"]]],[11,"use_colocated_libcalls","","Use colocated libcalls.",59,[[["self"]],["bool"]]],[11,"avoid_div_traps","","Generate explicit checks around native division…",59,[[["self"]],["bool"]]],[11,"enable_float","","Enable the use of floating-point instructions",59,[[["self"]],["bool"]]],[11,"enable_nan_canonicalization","","Enable NaN canonicalization",59,[[["self"]],["bool"]]],[11,"enable_pinned_reg","","Enable the use of the pinned register.",59,[[["self"]],["bool"]]],[11,"use_pinned_reg_as_heap_base","","Use the pinned register as the heap base.",59,[[["self"]],["bool"]]],[11,"enable_simd","","Enable the use of SIMD instructions.",59,[[["self"]],["bool"]]],[11,"enable_atomics","","Enable the use of atomic instructions",59,[[["self"]],["bool"]]],[11,"enable_safepoints","","Enable safepoint instruction insertions.",59,[[["self"]],["bool"]]],[11,"emit_all_ones_funcaddrs","","Emit not-yet-relocated function addresses as all-ones bit…",59,[[["self"]],["bool"]]],[11,"enable_probestack","","Enable the use of stack probes, for calling conventions…",59,[[["self"]],["bool"]]],[11,"probestack_func_adjusts_sp","","Set this to true of the stack probe function modifies the…",59,[[["self"]],["bool"]]],[11,"enable_jump_tables","","Enable the use of jump tables in generated machine code.",59,[[["self"]],["bool"]]],[11,"new","cranelift::prelude","Creates a new FunctionBuilder structure that will operate…",43,[[["functionbuildercontext"],["function"]],["functionbuilder"]]],[11,"set_srcloc","","Set the source location that should be assigned to all new…",43,[[["self"],["sourceloc"]]]],[11,"create_block","","Creates a new `Block` and returns its reference.",43,[[["self"]],["block"]]],[11,"switch_to_block","","After the call to this function, new instructions will be…",43,[[["self"],["block"]]]],[11,"seal_block","","Declares that all the predecessors of this block are known.",43,[[["self"],["block"]]]],[11,"seal_all_blocks","","Effectively calls seal_block on all blocks in the function.",43,[[["self"]]]],[11,"declare_var","","In order to use a variable in a `use_var`, you need to…",43,[[["self"],["type"],["variable"]]]],[11,"use_var","","Returns the Cranelift IR value corresponding to the…",43,[[["self"],["variable"]],["value"]]],[11,"def_var","","Register a new definition of a user variable. The type of…",43,[[["value"],["self"],["variable"]]]],[11,"set_val_label","","Set label for Value",43,[[["self"],["valuelabel"],["value"]]]],[11,"create_jump_table","","Creates a jump table in the function, to be used by…",43,[[["jumptabledata"],["self"]],["jumptable"]]],[11,"create_stack_slot","","Creates a stack slot in the function, to be used by…",43,[[["stackslotdata"],["self"]],["stackslot"]]],[11,"import_signature","","Adds a signature which can later be used to declare an…",43,[[["self"],["signature"]],["sigref"]]],[11,"import_function","","Declare an external function import.",43,[[["self"],["extfuncdata"]],["funcref"]]],[11,"create_global_value","","Declares a global value accessible to the function.",43,[[["self"],["globalvaluedata"]],["globalvalue"]]],[11,"create_heap","","Declares a heap accessible to the function.",43,[[["self"],["heapdata"]],["heap"]]],[11,"ins","","Returns an object with the `InstBuilder` trait that allows…",43,[[["self"]],["funcinstbuilder"]]],[11,"ensure_inserted_block","","Make sure that the current block is inserted in the layout.",43,[[["self"]]]],[11,"cursor","","Returns a `FuncCursor` pointed at the current position…",43,[[["self"]],["funccursor"]]],[11,"append_block_params_for_function_params","","Append parameters to the given `Block` corresponding to…",43,[[["self"],["block"]]]],[11,"append_block_params_for_function_returns","","Append parameters to the given `Block` corresponding to…",43,[[["self"],["block"]]]],[11,"finalize","","Declare that translation of the current function is…",43,[[["self"]]]],[11,"block_params","","Retrieves all the parameters for a `Block` currently…",43,[[["self"],["block"]]]],[11,"signature","","Retrieves the signature with reference `sigref` previously…",43,[[["sigref"],["self"]],[["signature"],["option",["signature"]]]]],[11,"append_block_param","","Creates a parameter for a specific `Block` by appending it…",43,[[["self"],["type"],["block"]],["value"]]],[11,"inst_results","","Returns the result values of an instruction.",43,[[["self"],["inst"]]]],[11,"change_jump_destination","","Changes the destination of a jump instruction after…",43,[[["block"],["self"],["inst"]]]],[11,"is_unreachable","","Returns `true` if and only if the current `Block` is…",43,[[["self"]],["bool"]]],[11,"is_pristine","","Returns `true` if and only if no instructions have been…",43,[[["self"]],["bool"]]],[11,"is_filled","","Returns `true` if and only if a terminator instruction has…",43,[[["self"]],["bool"]]],[11,"display","","Returns a displayable object for the function as it is.",43,[[["self"],["i"]],["displayfunction"]]],[11,"call_memcpy","","Calls libc.memcpy",43,[[["value"],["targetfrontendconfig"],["self"]]]],[11,"emit_small_memory_copy","","Optimised memcpy or memmove for small copies.",43,[[["bool"],["value"],["targetfrontendconfig"],["self"],["u64"],["u8"]]]],[11,"call_memset","","Calls libc.memset",43,[[["value"],["targetfrontendconfig"],["self"]]]],[11,"emit_small_memset","","Calls libc.memset",43,[[["value"],["targetfrontendconfig"],["self"],["u64"],["u8"]]]],[11,"call_memmove","","Calls libc.memmove",43,[[["value"],["targetfrontendconfig"],["self"]]]],[11,"new","","Creates a FunctionBuilderContext structure. The structure…",60,[[],["functionbuildercontext"]]],[11,"with_u32","","Create a new Variable with the given index.",61,[[["u32"]],["variable"]]]],"p":[[8,"EntityRef"],[4,"FloatCC"],[4,"IntCC"],[3,"AbiParam"],[3,"ExtFuncData"],[4,"ExternalName"],[13,"User"],[13,"TestCase"],[4,"GlobalValueData"],[13,"Load"],[13,"IAddImm"],[13,"Symbol"],[8,"InstBuilder"],[3,"Signature"],[3,"StackSlotData"],[4,"StackSlotKind"],[4,"TrapCode"],[3,"RegBank"],[3,"RegClassData"],[3,"RegInfo"],[4,"LookupError"],[3,"TargetFrontendConfig"],[8,"TargetIsa"],[4,"CallConv"],[3,"BranchRange"],[4,"ConstraintKind"],[3,"OperandConstraint"],[3,"RecipeConstraints"],[3,"EncInfo"],[4,"StackBase"],[3,"StackBaseMask"],[3,"StackRef"],[8,"Configurable"],[4,"SetError"],[3,"Template"],[3,"Descriptor"],[4,"Detail"],[13,"Bool"],[13,"Enum"],[4,"OptLevel"],[4,"TlsModel"],[4,"LibcallCallConv"],[3,"FlagsOrIsa"],[3,"FunctionBuilder"],[3,"Ieee32"],[3,"Ieee64"],[3,"Imm64"],[3,"Uimm64"],[3,"Type"],[3,"Block"],[3,"JumpTableData"],[3,"MemFlags"],[3,"Value"],[3,"RegClassIndex"],[3,"DisplayRegUnit"],[3,"Builder"],[3,"Encoding"],[3,"Builder"],[3,"PredicateView"],[3,"Flags"],[3,"FunctionBuilderContext"],[3,"Variable"]]};
searchIndex["cranelift_bforest"] = {"doc":"A forest of B+-trees.","i":[[3,"Map","cranelift_bforest","B-tree mapping from `K` to `V`.",null,null],[3,"MapCursor","","A position in a `Map` used to navigate and modify the…",null,null],[3,"MapForest","","Memory pool for a forest of `Map` instances.",null,null],[3,"MapIter","","An iterator visiting the key-value pairs of a `Map`.",null,null],[3,"Set","","B-tree representing an ordered set of `K`s using `C` for…",null,null],[3,"SetCursor","","A position in a `Set` used to navigate and modify the…",null,null],[3,"SetForest","","Memory pool for a forest of `Set` instances.",null,null],[3,"SetIter","","An iterator visiting the elements of a `Set`.",null,null],[11,"new","","Create a new empty forest.",0,[[],["self"]]],[11,"clear","","Clear all maps in the forest.",0,[[["self"]]]],[11,"new","","Make an empty map.",1,[[],["self"]]],[11,"is_empty","","Is this an empty map?",1,[[["self"]],["bool"]]],[11,"get","","Get the value stored for `key`.",1,[[["c"],["mapforest"],["self"],["k"]],["option"]]],[11,"get_or_less","","Look up the value stored for `key`.",1,[[["c"],["mapforest"],["self"],["k"]],["option"]]],[11,"insert","","Insert `key, value` into the map and return the old value…",1,[[["c"],["mapforest"],["self"],["k"],["v"]],["option"]]],[11,"remove","","Remove `key` from the map and return the removed value for…",1,[[["mapforest"],["self"],["k"],["c"]],["option"]]],[11,"clear","","Remove all entries.",1,[[["self"],["mapforest"]]]],[11,"retain","","Retains only the elements specified by the predicate.",1,[[["self"],["f"],["mapforest"]]]],[11,"cursor","","Create a cursor for navigating this map. The cursor is…",1,[[["mapforest"],["self"],["c"]],[["mapcursor"],["comparator"]]]],[11,"iter","","Create an iterator traversing this map. The iterator type…",1,[[["self"],["mapforest"]],["mapiter"]]],[11,"is_empty","","Is this cursor pointing to an empty map?",2,[[["self"]],["bool"]]],[11,"next","","Move cursor to the next key-value pair and return it.",2,[[["self"]],["option"]]],[11,"prev","","Move cursor to the previous key-value pair and return it.",2,[[["self"]],["option"]]],[11,"key","","Get the current key, or `None` if the cursor is at the end.",2,[[["self"]],["option"]]],[11,"value","","Get the current value, or `None` if the cursor is at the…",2,[[["self"]],["option"]]],[11,"value_mut","","Get a mutable reference to the current value, or `None` if…",2,[[["self"]],[["option"],["v"]]]],[11,"goto","","Move this cursor to `key`.",2,[[["self"],["k"]],["option"]]],[11,"goto_first","","Move this cursor to the first element.",2,[[["self"]],["option"]]],[11,"insert","","Insert `(key, value))` into the map and leave the cursor…",2,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Remove the current entry (if any) and return the mapped…",2,[[["self"]],["option"]]],[11,"new","","Create a new empty forest.",3,[[],["self"]]],[11,"clear","","Clear all sets in the forest.",3,[[["self"]]]],[11,"new","","Make an empty set.",4,[[],["self"]]],[11,"is_empty","","Is this an empty set?",4,[[["self"]],["bool"]]],[11,"contains","","Does the set contain `key`?.",4,[[["setforest"],["c"],["self"],["k"]],["bool"]]],[11,"insert","","Try to insert `key` into the set.",4,[[["setforest"],["self"],["k"],["c"]],["bool"]]],[11,"remove","","Remove `key` from the set and return true.",4,[[["setforest"],["self"],["k"],["c"]],["bool"]]],[11,"clear","","Remove all entries.",4,[[["self"],["setforest"]]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"],["setforest"]]]],[11,"cursor","","Create a cursor for navigating this set. The cursor is…",4,[[["self"],["setforest"],["c"]],[["comparator"],["setcursor"]]]],[11,"iter","","Create an iterator traversing this set. The iterator type…",4,[[["self"],["setforest"]],["setiter"]]],[11,"is_empty","","Is this cursor pointing to an empty set?",5,[[["self"]],["bool"]]],[11,"next","","Move cursor to the next element and return it.",5,[[["self"]],["option"]]],[11,"prev","","Move cursor to the previous element and return it.",5,[[["self"]],["option"]]],[11,"elem","","Get the current element, or `None` if the cursor is at the…",5,[[["self"]],["option"]]],[11,"goto","","Move this cursor to `elem`.",5,[[["self"],["k"]],["bool"]]],[11,"goto_first","","Move this cursor to the first element.",5,[[["self"]],["option"]]],[11,"insert","","Try to insert `elem` into the set and leave the cursor at…",5,[[["self"],["k"]],["bool"]]],[11,"remove","","Remove the current element (if any) and return it. This…",5,[[["self"]],["option"]]],[8,"Comparator","","Key comparator.",null,null],[10,"cmp","","Compare keys `a` and `b`.",6,[[["self"],["k"]],["ordering"]]],[11,"search","","Binary search for `k` in an ordered slice.",6,[[["self"],["k"]],[["result",["usize","usize"]],["usize"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into_iter","","",8,[[],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"clone","","",1,[[["self"]],["map"]]],[11,"clone","","",4,[[["self"]],["set"]]],[11,"default","","",1,[[],["self"]]],[11,"default","","",4,[[],["self"]]]],"p":[[3,"MapForest"],[3,"Map"],[3,"MapCursor"],[3,"SetForest"],[3,"Set"],[3,"SetCursor"],[8,"Comparator"],[3,"MapIter"],[3,"SetIter"]]};
searchIndex["cranelift_codegen"] = {"doc":"Cranelift code generation library.","i":[[0,"packed_option","cranelift_codegen","Compact representation of `Option<T>` for types with a…",null,null],[8,"ReservedValue","cranelift_codegen::packed_option","Types that have a reserved value which can't be created…",null,null],[10,"reserved_value","","Create an instance of the reserved value.",0,[[],["self"]]],[3,"PackedOption","","Packed representation of `Option<T>`.",null,null],[3,"Context","cranelift_codegen","Persistent data structures and compilation pipeline.",null,null],[12,"func","","The function we're compiling.",1,null],[12,"cfg","","The control flow graph of `func`.",1,null],[12,"domtree","","Dominator tree for `func`.",1,null],[12,"regalloc","","Register allocation context.",1,null],[12,"loop_analysis","","Loop analysis of `func`.",1,null],[12,"redundant_reload_remover","","Redundant-reload remover context.",1,null],[3,"ValueLocRange","","Value location range.",null,null],[12,"loc","","The ValueLoc containing a ValueLabel during this range.",2,null],[12,"start","","The start of the range.",2,null],[12,"end","","The end of the range.",2,null],[4,"CodegenError","","A compilation error.",null,null],[13,"Verifier","","A list of IR verifier errors.",3,null],[13,"ImplLimitExceeded","","An implementation limit was exceeded.",3,null],[13,"CodeTooLarge","","The code size for the function is too large.",3,null],[5,"legalize_function","","Legalize `func` for `isa`.",null,[[["targetisa"],["function"],["controlflowgraph"]]]],[0,"binemit","","Binary machine code emission.",null,null],[3,"MemoryCodeSink","cranelift_codegen::binemit","A `CodeSink` that writes binary machine code directly into…",null,null],[12,"info","","Information about the generated code and read-only data.",4,null],[3,"NullRelocSink","","A `RelocSink` implementation that does nothing, which is…",null,null],[3,"NullStackmapSink","","Placeholder StackmapSink that does nothing.",null,null],[3,"NullTrapSink","","A `TrapSink` implementation that does nothing, which is…",null,null],[3,"Stackmap","","A stack map is a bitmap with one bit per machine word on…",null,null],[3,"RegDiversions","","Keep track of diversions in a block.",null,null],[3,"CodeInfo","","Container for information about a vector of compiled code…",null,null],[12,"code_size","","Number of bytes of machine code (the code starts at offset…",5,null],[12,"jumptables_size","","Number of bytes of jumptables.",5,null],[12,"rodata_size","","Number of bytes of rodata.",5,null],[12,"total_size","","Number of bytes in total.",5,null],[4,"Reloc","","Relocation kinds for every ISA",null,null],[13,"Abs4","","absolute 4-byte",6,null],[13,"Abs8","","absolute 8-byte",6,null],[13,"X86PCRel4","","x86 PC-relative 4-byte",6,null],[13,"X86PCRelRodata4","","x86 PC-relative 4-byte offset to trailing rodata",6,null],[13,"X86CallPCRel4","","x86 call to PC-relative 4-byte",6,null],[13,"X86CallPLTRel4","","x86 call to PLT-relative 4-byte",6,null],[13,"X86GOTPCRel4","","x86 GOT PC-relative 4-byte",6,null],[13,"Arm32Call","","Arm32 call target",6,null],[13,"Arm64Call","","Arm64 call target",6,null],[13,"RiscvCall","","RISC-V call target",6,null],[13,"ElfX86_64TlsGd","","Elf x86_64 32 bit signed PC relative offset to two GOT…",6,null],[13,"MachOX86_64Tlv","","Mach-O x86_64 32 bit signed PC relative offset to a…",6,null],[4,"FrameUnwindKind","","Type of the frame unwind information.",null,null],[13,"Fastcall","","Windows fastcall unwinding (as in .pdata).",7,null],[13,"Libunwind","","FDE entry for libunwind (similar to .eh_frame format).",7,null],[5,"relax_branches","","Relax branches and compute the final layout of block…",null,[[["function"],["targetisa"],["dominatortree"],["controlflowgraph"]],[["codeinfo"],["codegenresult",["codeinfo"]]]]],[5,"shrink_instructions","","Pick the smallest valid encodings for instructions.",null,[[["function"],["targetisa"]]]],[5,"bad_encoding","","Report a bad encoding error.",null,[[["function"],["inst"]]]],[5,"emit_function","","Emit a function to `sink`, given an instruction emitter…",null,[[["cs"],["targetisa"],["ei"],["function"]]]],[11,"new","","Create a new memory code sink that writes a function to…",4,[[["stackmapsink"],["trapsink"],["relocsink"]],["self"]]],[11,"from_values","","Create a stackmap based on where references are located on…",8,[[["targetisa"],["function"]],["self"]]],[11,"from_slice","","Create a vec of Bitsets from a slice of bools.",8,[[],["self"]]],[11,"get_bit","","Returns a specified bit.",8,[[["self"],["usize"]],["bool"]]],[11,"as_slice","","Returns the raw bitmap that represents this stack map.",8,[[["self"]]]],[11,"mapped_words","","Returns the number of words represented by this stack map.",8,[[["self"]],["u32"]]],[6,"CodeOffset","","Offset in bytes from the beginning of the function.",null,null],[6,"Addend","","Addend to add to the symbol value.",null,null],[6,"FrameUnwindOffset","","Offset in frame unwind information buffer.",null,null],[8,"RelocSink","","A trait for receiving relocations for code that is emitted…",null,null],[10,"reloc_block","","Add a relocation referencing a block at the current offset.",9,[[["reloc"],["codeoffset"],["self"]]]],[10,"reloc_external","","Add a relocation referencing an external symbol at the…",9,[[["reloc"],["codeoffset"],["externalname"],["self"],["addend"]]]],[10,"reloc_constant","","Add a relocation referencing a constant.",9,[[["reloc"],["codeoffset"],["self"],["constantoffset"]]]],[10,"reloc_jt","","Add a relocation referencing a jump table.",9,[[["reloc"],["codeoffset"],["jumptable"],["self"]]]],[8,"StackmapSink","","A trait for emitting stackmaps.",null,null],[10,"add_stackmap","","Output a bitmap of the stack representing the live…",10,[[["self"],["codeoffset"],["stackmap"]]]],[8,"TrapSink","","A trait for receiving trap codes and offsets.",null,null],[10,"trap","","Add trap information for a specific offset.",11,[[["sourceloc"],["codeoffset"],["trapcode"],["self"]]]],[8,"CodeSink","","Abstract interface for adding bytes to the code segment.",null,null],[10,"offset","","Get the current position.",12,[[["self"]],["codeoffset"]]],[10,"put1","","Add 1 byte to the code section.",12,[[["self"],["u8"]]]],[10,"put2","","Add 2 bytes to the code section.",12,[[["u16"],["self"]]]],[10,"put4","","Add 4 bytes to the code section.",12,[[["self"],["u32"]]]],[10,"put8","","Add 8 bytes to the code section.",12,[[["self"],["u64"]]]],[10,"reloc_block","","Add a relocation referencing a block at the current offset.",12,[[["self"],["reloc"],["codeoffset"]]]],[10,"reloc_external","","Add a relocation referencing an external symbol plus the…",12,[[["reloc"],["externalname"],["self"],["addend"]]]],[10,"reloc_constant","","Add a relocation referencing a constant.",12,[[["self"],["reloc"],["constantoffset"]]]],[10,"reloc_jt","","Add a relocation referencing a jump table.",12,[[["jumptable"],["self"],["reloc"]]]],[10,"trap","","Add trap information for the current offset.",12,[[["self"],["trapcode"],["sourceloc"]]]],[10,"begin_jumptables","","Machine code output is complete, jump table data may follow.",12,[[["self"]]]],[10,"begin_rodata","","Jump table output is complete, raw read-only data may…",12,[[["self"]]]],[10,"end_codegen","","Read-only data output is complete, we're done.",12,[[["self"]]]],[10,"add_stackmap","","Add a stackmap at the current code offset.",12,[[["targetisa"],["self"],["function"]]]],[8,"FrameUnwindSink","","Sink for frame unwind information.",null,null],[10,"len","","Get the current position.",13,[[["self"]],["frameunwindoffset"]]],[10,"bytes","","Add bytes to the code section.",13,[[["self"]]]],[11,"reserve","","Reserves bytes in the buffer.",13,[[["self"],["usize"]]]],[10,"reloc","","Add a relocation entry.",13,[[["self"],["reloc"],["frameunwindoffset"]]]],[10,"set_entry_offset","","Specified offset to main structure.",13,[[["self"],["frameunwindoffset"]]]],[11,"jumptables","","Offset of any relocatable jump tables, or equal to rodata…",5,[[["self"]],["codeoffset"]]],[11,"rodata","","Offset of any copyable read-only data, or equal to…",5,[[["self"]],["codeoffset"]]],[0,"cfg_printer","cranelift_codegen","The `CFGPrinter` utility.",null,null],[3,"CFGPrinter","cranelift_codegen::cfg_printer","A utility for pretty-printing the CFG of a `Function`.",null,null],[11,"new","","Create a new CFGPrinter.",14,[[["function"]],["self"]]],[11,"write","","Write the CFG for this function to `w`.",14,[[["self"],["write"]],["result"]]],[0,"cursor","cranelift_codegen","Cursor library.",null,null],[3,"FuncCursor","cranelift_codegen::cursor","Function cursor.",null,null],[12,"func","","The referenced function.",15,null],[3,"EncCursor","","Encoding cursor.",null,null],[12,"func","","The referenced function.",16,null],[12,"isa","","The target ISA that will be used to encode instructions.",16,null],[4,"CursorPosition","","The possible positions of a cursor.",null,null],[13,"Nowhere","","Cursor is not pointing anywhere. No instructions can be…",17,null],[13,"At","","Cursor is pointing at an existing instruction. New…",17,null],[13,"Before","","Cursor is before the beginning of a block. No instructions…",17,null],[13,"After","","Cursor is pointing after the end of a block. New…",17,null],[8,"Cursor","","All cursor types implement the `Cursor` which provides…",null,null],[10,"position","","Get the current cursor position.",18,[[["self"]],["cursorposition"]]],[10,"set_position","","Set the current position.",18,[[["self"],["cursorposition"]]]],[10,"srcloc","","Get the source location that should be assigned to new…",18,[[["self"]],["sourceloc"]]],[10,"set_srcloc","","Set the source location that should be assigned to new…",18,[[["sourceloc"],["self"]]]],[10,"layout","","Borrow a reference to the function layout that this cursor…",18,[[["self"]],["layout"]]],[10,"layout_mut","","Borrow a mutable reference to the function layout that…",18,[[["self"]],["layout"]]],[11,"with_srcloc","","Exchange this cursor for one with a set source location.",18,[[["sourceloc"]],["self"]]],[11,"at_position","","Rebuild this cursor positioned at `pos`.",18,[[["cursorposition"]],["self"]]],[11,"at_inst","","Rebuild this cursor positioned at `inst`.",18,[[["inst"]],["self"]]],[11,"at_first_insertion_point","","Rebuild this cursor positioned at the first insertion…",18,[[["block"]],["self"]]],[11,"at_first_inst","","Rebuild this cursor positioned at the first instruction in…",18,[[["block"]],["self"]]],[11,"at_last_inst","","Rebuild this cursor positioned at the last instruction in…",18,[[["block"]],["self"]]],[11,"after_inst","","Rebuild this cursor positioned after `inst`.",18,[[["inst"]],["self"]]],[11,"at_top","","Rebuild this cursor positioned at the top of `block`.",18,[[["block"]],["self"]]],[11,"at_bottom","","Rebuild this cursor positioned at the bottom of `block`.",18,[[["block"]],["self"]]],[11,"current_block","","Get the block corresponding to the current position.",18,[[["self"]],[["option",["block"]],["block"]]]],[11,"current_inst","","Get the instruction corresponding to the current position,…",18,[[["self"]],[["inst"],["option",["inst"]]]]],[11,"goto_after_inst","","Go to the position after a specific instruction, which…",18,[[["inst"],["self"]]]],[11,"goto_inst","","Go to a specific instruction which must be inserted in the…",18,[[["inst"],["self"]]]],[11,"goto_first_insertion_point","","Go to the position for inserting instructions at the…",18,[[["self"],["block"]]]],[11,"goto_first_inst","","Go to the first instruction in `block`.",18,[[["self"],["block"]]]],[11,"goto_last_inst","","Go to the last instruction in `block`.",18,[[["self"],["block"]]]],[11,"goto_top","","Go to the top of `block` which must be inserted into the…",18,[[["self"],["block"]]]],[11,"goto_bottom","","Go to the bottom of `block` which must be inserted into…",18,[[["self"],["block"]]]],[11,"next_block","","Go to the top of the next block in layout order and return…",18,[[["self"]],[["option",["block"]],["block"]]]],[11,"prev_block","","Go to the bottom of the previous block in layout order and…",18,[[["self"]],[["option",["block"]],["block"]]]],[11,"next_inst","","Move to the next instruction in the same block and return…",18,[[["self"]],[["inst"],["option",["inst"]]]]],[11,"prev_inst","","Move to the previous instruction in the same block and…",18,[[["self"]],[["inst"],["option",["inst"]]]]],[11,"insert_inst","","Insert an instruction at the current position.",18,[[["inst"],["self"]]]],[11,"remove_inst","","Remove the instruction under the cursor.",18,[[["self"]],["inst"]]],[11,"remove_inst_and_step_back","","Remove the instruction under the cursor.",18,[[["self"]],["inst"]]],[11,"insert_block","","Insert a block at the current position and switch to it.",18,[[["self"],["block"]]]],[11,"new","","Create a new `FuncCursor` pointing nowhere.",15,[[["function"]],["self"]]],[11,"use_srcloc","","Use the source location of `inst` for future instructions.",15,[[["inst"],["self"]]]],[11,"ins","","Create an instruction builder that inserts an instruction…",15,[[["self"]],[["funccursor"],["insertbuilder",["funccursor"]]]]],[11,"new","","Create a new `EncCursor` pointing nowhere.",16,[[["targetisa"],["function"]],["self"]]],[11,"use_srcloc","","Use the source location of `inst` for future instructions.",16,[[["inst"],["self"]]]],[11,"ins","","Create an instruction builder that will insert an encoded…",16,[[["self"]],[["enccursor"],["insertbuilder",["enccursor"]]]]],[11,"built_inst","","Get the last built instruction.",16,[[["self"]],["inst"]]],[11,"display_inst","","Return an object that can display `inst`.",16,[[["inst"],["self"]],["displayinst"]]],[0,"dbg","cranelift_codegen","Debug tracing helpers.",null,null],[3,"DisplayList","cranelift_codegen::dbg","Helper for printing lists.",null,null],[12,"0","","",19,null],[7,"LOG_FILENAME_PREFIX","","Prefix added to the log file names, just before the thread…",null,null],[0,"dominator_tree","cranelift_codegen","A Dominator Tree represented as mappings of Blocks to…",null,null],[3,"DominatorTree","cranelift_codegen::dominator_tree","The dominator tree for a single function.",null,null],[3,"DominatorTreePreorder","","Optional pre-order information that can be computed for a…",null,null],[3,"ChildIter","","An iterator that enumerates the direct children of a block…",null,null],[11,"is_reachable","","Is `block` reachable from the entry block?",20,[[["self"],["block"]],["bool"]]],[11,"cfg_postorder","","Get the CFG post-order of blocks that was used to compute…",20,[[["self"]]]],[11,"idom","","Returns the immediate dominator of `block`.",20,[[["self"],["block"]],[["option",["inst"]],["inst"]]]],[11,"rpo_cmp","","Compare two program points relative to a reverse…",20,[[["a"],["layout"],["self"],["b"]],["ordering"]]],[11,"dominates","","Returns `true` if `a` dominates `b`.",20,[[["a"],["layout"],["self"],["b"]],["bool"]]],[11,"last_dominator","","Find the last instruction in `a` that dominates `b`. If no…",20,[[["block"],["layout"],["b"],["self"]],[["option",["inst"]],["inst"]]]],[11,"common_dominator","","Compute the common dominator of two basic blocks.",20,[[["layout"],["self"],["blockpredecessor"]],["blockpredecessor"]]],[11,"new","","Allocate a new blank dominator tree. Use `compute` to…",20,[[],["self"]]],[11,"with_function","","Allocate and compute a dominator tree.",20,[[["function"],["controlflowgraph"]],["self"]]],[11,"compute","","Reset and compute a CFG post-order and dominator tree.",20,[[["self"],["function"],["controlflowgraph"]]]],[11,"clear","","Clear the data structures used to represent the dominator…",20,[[["self"]]]],[11,"is_valid","","Check if the dominator tree is in a valid state.",20,[[["self"]],["bool"]]],[11,"new","","Create a new blank `DominatorTreePreorder`.",21,[[],["self"]]],[11,"compute","","Recompute this data structure to match `domtree`.",21,[[["layout"],["self"],["dominatortree"]]]],[11,"children","","Get an iterator over the direct children of `block` in the…",21,[[["self"],["block"]],["childiter"]]],[11,"dominates","","Fast, constant time dominance check with block granularity.",21,[[["self"],["block"]],["bool"]]],[11,"pre_cmp_block","","Compare two blocks according to the dominator pre-order.",21,[[["self"],["block"]],["ordering"]]],[11,"pre_cmp","","Compare two program points according to the dominator tree…",21,[[["a"],["layout"],["self"],["b"]],["ordering"]]],[11,"pre_cmp_def","","Compare two value defs according to the dominator tree…",21,[[["function"],["self"],["value"]],["ordering"]]],[0,"flowgraph","cranelift_codegen","A control flow graph represented as mappings of basic…",null,null],[3,"BlockPredecessor","cranelift_codegen::flowgraph","A basic block denoted by its enclosing Block and last…",null,null],[12,"block","","Enclosing Block key.",22,null],[12,"inst","","Last instruction in the basic block.",22,null],[3,"ControlFlowGraph","","The Control Flow Graph maintains a mapping of blocks to…",null,null],[3,"PredIter","","An iterator over block predecessors. The iterator type is…",null,null],[6,"SuccIter","","An iterator over block successors. The iterator type is…",null,null],[11,"new","","Convenient method to construct new BlockPredecessor.",22,[[["inst"],["block"]],["self"]]],[11,"new","","Allocate a new blank control flow graph.",23,[[],["self"]]],[11,"clear","","Clear all data structures in this control flow graph.",23,[[["self"]]]],[11,"with_function","","Allocate and compute the control flow graph for `func`.",23,[[["function"]],["self"]]],[11,"compute","","Compute the control flow graph of `func`.",23,[[["self"],["function"]]]],[11,"recompute_block","","Recompute the control flow graph of `block`.",23,[[["self"],["function"],["block"]]]],[11,"pred_iter","","Get an iterator over the CFG predecessors to `block`.",23,[[["self"],["block"]],["prediter"]]],[11,"succ_iter","","Get an iterator over the CFG successors to `block`.",23,[[["self"],["block"]],["succiter"]]],[11,"is_valid","","Check if the CFG is in a valid state.",23,[[["self"]],["bool"]]],[0,"ir","cranelift_codegen","Representation of Cranelift IR functions.",null,null],[0,"condcodes","cranelift_codegen::ir","Condition codes for the Cranelift code generator.",null,null],[8,"CondCode","cranelift_codegen::ir::condcodes","Common traits of condition codes.",null,null],[10,"inverse","","Get the inverse condition code of `self`.",24,[[],["self"]]],[10,"reverse","","Get the reversed condition code for `self`.",24,[[],["self"]]],[4,"IntCC","","Condition code for comparing integers.",null,null],[13,"Equal","","`==`.",25,null],[13,"NotEqual","","`!=`.",25,null],[13,"SignedLessThan","","Signed `<`.",25,null],[13,"SignedGreaterThanOrEqual","","Signed `>=`.",25,null],[13,"SignedGreaterThan","","Signed `>`.",25,null],[13,"SignedLessThanOrEqual","","Signed `<=`.",25,null],[13,"UnsignedLessThan","","Unsigned `<`.",25,null],[13,"UnsignedGreaterThanOrEqual","","Unsigned `>=`.",25,null],[13,"UnsignedGreaterThan","","Unsigned `>`.",25,null],[13,"UnsignedLessThanOrEqual","","Unsigned `<=`.",25,null],[13,"Overflow","","Signed Overflow.",25,null],[13,"NotOverflow","","Signed No Overflow.",25,null],[4,"FloatCC","","Condition code for comparing floating point numbers.",null,null],[13,"Ordered","","EQ | LT | GT",26,null],[13,"Unordered","","UN",26,null],[13,"Equal","","EQ",26,null],[13,"NotEqual","","The C '!=' operator is the inverse of '==': `NotEqual`. UN…",26,null],[13,"OrderedNotEqual","","LT | GT",26,null],[13,"UnorderedOrEqual","","UN | EQ",26,null],[13,"LessThan","","LT",26,null],[13,"LessThanOrEqual","","LT | EQ",26,null],[13,"GreaterThan","","GT",26,null],[13,"GreaterThanOrEqual","","GT | EQ",26,null],[13,"UnorderedOrLessThan","","UN | LT",26,null],[13,"UnorderedOrLessThanOrEqual","","UN | LT | EQ",26,null],[13,"UnorderedOrGreaterThan","","UN | GT",26,null],[13,"UnorderedOrGreaterThanOrEqual","","UN | GT | EQ",26,null],[3,"InsertBuilder","cranelift_codegen::ir","Builder that inserts an instruction at the current position.",null,null],[3,"ReplaceBuilder","","Instruction builder that replaces an existing instruction.",null,null],[3,"AbiParam","","Function parameter or return value descriptor.",null,null],[12,"value_type","","Type of the argument value.",27,null],[12,"purpose","","Special purpose of argument, or `Normal`.",27,null],[12,"extension","","Method for extending argument to a full register.",27,null],[12,"location","","ABI-specific location of this argument, or `Unassigned`…",27,null],[3,"ExtFuncData","","An external function.",null,null],[12,"name","","Name of the external function.",28,null],[12,"signature","","Call signature of function.",28,null],[12,"colocated","","Will this function be defined nearby, such that it will…",28,null],[3,"Signature","","Function signature.",null,null],[12,"params","","The arguments passed to the function.",29,null],[12,"returns","","Values returned from the function.",29,null],[12,"call_conv","","Calling convention.",29,null],[3,"FrameLayout","","Frame items layout for (prologue/epilogue) instructions.",null,null],[12,"initial","","Initial frame layout.",30,null],[12,"instructions","","Instruction frame layout (changes). Because the map will…",30,null],[3,"HeapData","","Information about a heap declaration.",null,null],[12,"base","","The address of the start of the heap's storage.",31,null],[12,"min_size","","Guaranteed minimum heap size in bytes. Heap accesses…",31,null],[12,"offset_guard_size","","Size in bytes of the offset-guard pages following the heap.",31,null],[12,"style","","Heap style, with additional style-specific info.",31,null],[12,"index_type","","The index type for the heap.",31,null],[3,"MemFlags","","Flags for memory operations like load/store.",null,null],[3,"ProgramPoint","","A `ProgramPoint` represents a position in a function where…",null,null],[3,"SourceLoc","","A source location.",null,null],[3,"TableData","","Information about a table declaration.",null,null],[12,"base_gv","","Global value giving the address of the start of the table.",32,null],[12,"min_size","","Guaranteed minimum table size in elements. Table accesses…",32,null],[12,"bound_gv","","Global value giving the current bound of the table, in…",32,null],[12,"element_size","","The size of a table element, in bytes.",32,null],[12,"index_type","","The index type for the table.",32,null],[3,"ValueLabel","","Marked with a label value.",null,null],[3,"ValueLabelStart","","A label of a Value.",null,null],[12,"from","","Source location when it is in effect",33,null],[12,"label","","The label index.",33,null],[4,"ArgumentExtension","","Function argument extension options.",null,null],[13,"None","","No extension, high bits are indeterminate.",34,null],[13,"Uext","","Unsigned extension: high bits in register are 0.",34,null],[13,"Sext","","Signed extension: high bits in register replicate sign bit.",34,null],[4,"ArgumentPurpose","","The special purpose of a function argument.",null,null],[13,"Normal","","A normal user program value passed to or from a function.",35,null],[13,"StructReturn","","Struct return pointer.",35,null],[13,"Link","","The link register.",35,null],[13,"FramePointer","","The frame pointer.",35,null],[13,"CalleeSaved","","A callee-saved register.",35,null],[13,"VMContext","","A VM context pointer.",35,null],[13,"SignatureId","","A signature identifier.",35,null],[13,"StackLimit","","A stack limit pointer.",35,null],[4,"ExternalName","","The name of an external is either a reference to a…",null,null],[13,"User","","A name in a user-defined symbol table. Cranelift does not…",36,null],[12,"namespace","cranelift_codegen::ir::ExternalName","Arbitrary.",37,null],[12,"index","","Arbitrary.",37,null],[13,"TestCase","cranelift_codegen::ir","A test case function name of up to a hardcoded amount of…",36,null],[12,"length","cranelift_codegen::ir::ExternalName","How many of the bytes in `ascii` are valid?",38,null],[12,"ascii","","Ascii bytes of the name.",38,null],[13,"LibCall","cranelift_codegen::ir","A well-known runtime library function.",36,null],[4,"FrameLayoutChange","","Change in the frame layout information.",null,null],[13,"CallFrameAddressAt","","Base CallFrameAddress (CFA) pointer moved to different…",39,null],[12,"reg","cranelift_codegen::ir::FrameLayoutChange","CFA register.",40,null],[12,"offset","","CFA offset.",40,null],[13,"RegAt","cranelift_codegen::ir","Register saved at.",39,null],[12,"reg","cranelift_codegen::ir::FrameLayoutChange","Saved register.",41,null],[12,"cfa_offset","","Offset in the frame (offset from CFA).",41,null],[13,"ReturnAddressAt","cranelift_codegen::ir","Return address saved at.",39,null],[12,"cfa_offset","cranelift_codegen::ir::FrameLayoutChange","Offset in the frame (offset from CFA).",42,null],[13,"Preserve","cranelift_codegen::ir","The entire frame layout must be preserved somewhere to be…",39,null],[13,"Restore","","Restore the entire frame layout from a corresponding prior…",39,null],[4,"GlobalValueData","","Information about a global value declaration.",null,null],[13,"VMContext","","Value is the address of the VM context struct.",43,null],[13,"Load","","Value is pointed to by another global value.",43,null],[12,"base","cranelift_codegen::ir::GlobalValueData","The base pointer global value.",44,null],[12,"offset","","Offset added to the base pointer before doing the load.",44,null],[12,"global_type","","Type of the loaded value.",44,null],[12,"readonly","","Specifies whether the memory that this refers to is…",44,null],[13,"IAddImm","cranelift_codegen::ir","Value is an offset from another global value.",43,null],[12,"base","cranelift_codegen::ir::GlobalValueData","The base pointer global value.",45,null],[12,"offset","","Byte offset to be added to the value.",45,null],[12,"global_type","","Type of the iadd.",45,null],[13,"Symbol","cranelift_codegen::ir","Value is symbolic, meaning it's a name which will be…",43,null],[12,"name","cranelift_codegen::ir::GlobalValueData","The symbolic name.",46,null],[12,"offset","","Offset from the symbol. This can be used instead of…",46,null],[12,"colocated","","Will this symbol be defined nearby, such that it will…",46,null],[12,"tls","","Does this symbol refer to a thread local storage value?",46,null],[4,"HeapStyle","cranelift_codegen::ir","Style of heap including style-specific information.",null,null],[13,"Dynamic","","A dynamic heap can be relocated to a different base…",47,null],[12,"bound_gv","cranelift_codegen::ir::HeapStyle","Global value providing the current bound of the heap in…",48,null],[13,"Static","cranelift_codegen::ir","A static heap has a fixed base address and a number of…",47,null],[12,"bound","cranelift_codegen::ir::HeapStyle","Heap bound in bytes. The offset-guard pages are allocated…",49,null],[4,"LibCall","cranelift_codegen::ir","The name of a runtime library routine.",null,null],[13,"Probestack","","probe for stack overflow. These are emitted for functions…",50,null],[13,"CeilF32","","ceil.f32",50,null],[13,"CeilF64","","ceil.f64",50,null],[13,"FloorF32","","floor.f32",50,null],[13,"FloorF64","","floor.f64",50,null],[13,"TruncF32","","trunc.f32",50,null],[13,"TruncF64","","frunc.f64",50,null],[13,"NearestF32","","nearest.f32",50,null],[13,"NearestF64","","nearest.f64",50,null],[13,"Memcpy","","libc.memcpy",50,null],[13,"Memset","","libc.memset",50,null],[13,"Memmove","","libc.memmove",50,null],[13,"ElfTlsGetAddr","","Elf __tls_get_addr",50,null],[4,"ExpandedProgramPoint","","An expanded program point directly exposes the variants,…",null,null],[13,"Inst","","An instruction in the function.",51,null],[13,"Block","","A block header.",51,null],[4,"TrapCode","","A trap code describing the reason for a trap.",null,null],[13,"StackOverflow","","The current stack space was exhausted.",52,null],[13,"HeapOutOfBounds","","A `heap_addr` instruction detected an out-of-bounds error.",52,null],[13,"TableOutOfBounds","","A `table_addr` instruction detected an out-of-bounds error.",52,null],[13,"OutOfBounds","","Other bounds checking error.",52,null],[13,"IndirectCallToNull","","Indirect call to a null table entry.",52,null],[13,"BadSignature","","Signature mismatch on indirect call.",52,null],[13,"IntegerOverflow","","An integer arithmetic operation caused an overflow.",52,null],[13,"IntegerDivisionByZero","","An integer division by zero.",52,null],[13,"BadConversionToInteger","","Failed float-to-int conversion.",52,null],[13,"UnreachableCodeReached","","Code that was supposed to have been unreachable was reached.",52,null],[13,"Interrupt","","Execution has potentially run too long and may be…",52,null],[13,"User","","A user-defined trap code.",52,null],[4,"ArgumentLoc","","Function argument location.",null,null],[13,"Unassigned","","This argument has not been assigned to a location yet.",53,null],[13,"Reg","","Argument is passed in a register.",53,null],[13,"Stack","","Argument is passed on the stack, at the given byte offset…",53,null],[4,"ValueLoc","","Value location.",null,null],[13,"Unassigned","","This value has not been assigned to a location yet.",54,null],[13,"Reg","","Value is assigned to a register.",54,null],[13,"Stack","","Value is assigned to a stack slot.",54,null],[4,"ValueLabelAssignments","","Value label assignements: label starts or value aliases.",null,null],[13,"Starts","","Original value labels assigned at transform.",55,null],[13,"Alias","","A value alias to original value.",55,null],[12,"from","cranelift_codegen::ir::ValueLabelAssignments","Source location when it is in effect",56,null],[12,"value","","The label index.",56,null],[5,"get_probestack_funcref","cranelift_codegen::ir","Get a function reference for the probestack function in…",null,[[["regunit"],["function"],["type"],["targetisa"]],["funcref"]]],[11,"new","","Create a new builder which inserts instructions at `pos`.…",57,[[["iib"]],["self"]]],[11,"with_results","","Reuse result values in `reuse`.",57,[[["array"]],["insertreusebuilder"]]],[11,"with_result","","Reuse a single result value.",57,[[["value"]],["insertreusebuilder"]]],[11,"new","","Create a `ReplaceBuilder` that will overwrite `inst`.",58,[[["dataflowgraph"],["inst"]],["self"]]],[0,"constant","","Constants",null,null],[3,"ConstantData","cranelift_codegen::ir::constant","This type describes the actual constant data. Note that…",null,null],[3,"ConstantPoolEntry","","Inner type for storing data and offset together in the…",null,null],[3,"ConstantPool","","Maintains the mapping between a constant handle (i.e.…",null,null],[6,"ConstantOffset","","This type describes an offset in bytes within a constant…",null,null],[11,"len","","Return the number of bytes in the constant.",59,[[["self"]],["usize"]]],[11,"into_vec","","Convert the data to a vector.",59,[[],[["u8"],["vec",["u8"]]]]],[11,"iter","","Iterate over the constant's bytes.",59,[[["self"]],[["iter",["u8"]],["u8"]]]],[11,"append","","Add new bytes to the constant data.",59,[[],["self"]]],[11,"expand_to","","Expand the size of the constant data to `expected_size`…",59,[[["usize"]],["self"]]],[11,"len","","Return the size of the constant at this entry.",60,[[["self"]],["usize"]]],[11,"set_offset","","Assign a new offset to the constant at this entry.",60,[[["self"],["constantoffset"]]]],[11,"new","","Create a new constant pool instance.",61,[[],["self"]]],[11,"clear","","Empty the constant pool of all data.",61,[[["self"]]]],[11,"insert","","Insert constant data into the pool, returning a handle for…",61,[[["self"],["constantdata"]],["constant"]]],[11,"get","","Retrieve the constant data given a handle.",61,[[["self"],["constant"]],["constantdata"]]],[11,"set_offset","","Assign an offset to a given constant, where the offset is…",61,[[["self"],["constant"],["constantoffset"]]]],[11,"get_offset","","Retrieve the offset of a given constant, where the offset…",61,[[["self"],["constant"]],["constantoffset"]]],[11,"iter","","Iterate over the constants in insertion order.",61,[[["self"]]]],[11,"entries_mut","","Iterate over mutable entries in the constant pool in…",61,[[["self"]]]],[11,"len","","Return the number of constants in the pool.",61,[[["self"]],["usize"]]],[11,"byte_size","","Return the combined size of all of the constant values in…",61,[[["self"]],["usize"]]],[0,"dfg","cranelift_codegen::ir","Data flow graph tracking Instructions, Values, and blocks.",null,null],[3,"DataFlowGraph","cranelift_codegen::ir::dfg","A data flow graph defines all instructions and basic…",null,null],[12,"value_lists","","Memory pool of value lists.",62,null],[12,"signatures","","Function signature table. These signatures are referenced…",62,null],[12,"old_signatures","","The pre-legalization signature for each entry in…",62,null],[12,"ext_funcs","","External function references. These are functions that can…",62,null],[12,"values_labels","","Saves Value labels.",62,null],[12,"constants","","Constants used within the function",62,null],[12,"immediates","","Stores large immediates that otherwise will not fit on…",62,null],[3,"Values","","Iterator over all Values in a DFG",null,null],[3,"DisplayInst","","Object that can display an instruction.",null,null],[4,"ValueDef","","Where did a value come from?",null,null],[13,"Result","","Value is the n'th result of an instruction.",63,null],[13,"Param","","Value is the n'th parameter to a block.",63,null],[11,"new","","Create a new empty `DataFlowGraph`.",62,[[],["self"]]],[11,"clear","","Clear everything.",62,[[["self"]]]],[11,"num_insts","","Get the total number of instructions created in this…",62,[[["self"]],["usize"]]],[11,"inst_is_valid","","Returns `true` if the given instruction reference is valid.",62,[[["self"],["inst"]],["bool"]]],[11,"num_blocks","","Get the total number of basic blocks created in this…",62,[[["self"]],["usize"]]],[11,"block_is_valid","","Returns `true` if the given block reference is valid.",62,[[["self"],["block"]],["bool"]]],[11,"num_values","","Get the total number of values.",62,[[["self"]],["usize"]]],[11,"collect_debug_info","","Starts collection of debug information.",62,[[["self"]]]],[11,"values","","Get an iterator over all values.",62,[[["self"]],["values"]]],[11,"value_is_valid","","Check if a value reference is valid.",62,[[["self"],["value"]],["bool"]]],[11,"value_type","","Get the type of a value.",62,[[["self"],["value"]],["type"]]],[11,"value_def","","Get the definition of a value.",62,[[["self"],["value"]],["valuedef"]]],[11,"value_is_attached","","Determine if `v` is an attached instruction result / block…",62,[[["self"],["value"]],["bool"]]],[11,"resolve_aliases","","Resolve value aliases.",62,[[["self"],["value"]],["value"]]],[11,"resolve_aliases_in_arguments","","Resolve all aliases among inst's arguments.",62,[[["self"],["inst"]]]],[11,"change_to_alias","","Turn a value into an alias of another.",62,[[["self"],["value"]]]],[11,"replace_with_aliases","","Replace the results of one instruction with aliases to the…",62,[[["self"],["inst"]]]],[11,"unwrap_inst","","Unwrap the instruction where the value was defined, or…",63,[[["self"]],["inst"]]],[11,"unwrap_block","","Unwrap the block there the parameter is defined, or panic.",63,[[["self"]],["block"]]],[11,"pp","","Get the program point where the value was defined.",63,[[],["expandedprogrampoint"]]],[11,"num","","Get the number component of this definition.",63,[[],["usize"]]],[11,"make_inst","","Create a new instruction.",62,[[["self"],["instructiondata"]],["inst"]]],[11,"display_inst","","Returns an object that displays `inst`.",62,[[["into",["option"]],["option",["targetisa"]],["self"],["inst"]],["displayinst"]]],[11,"inst_args","","Get all value arguments on `inst` as a slice.",62,[[["self"],["inst"]]]],[11,"inst_args_mut","","Get all value arguments on `inst` as a mutable slice.",62,[[["self"],["inst"]]]],[11,"inst_fixed_args","","Get the fixed value arguments on `inst` as a slice.",62,[[["self"],["inst"]]]],[11,"inst_fixed_args_mut","","Get the fixed value arguments on `inst` as a mutable slice.",62,[[["self"],["inst"]]]],[11,"inst_variable_args","","Get the variable value arguments on `inst` as a slice.",62,[[["self"],["inst"]]]],[11,"inst_variable_args_mut","","Get the variable value arguments on `inst` as a mutable…",62,[[["self"],["inst"]]]],[11,"make_inst_results","","Create result values for an instruction that produces…",62,[[["self"],["type"],["inst"]],["usize"]]],[11,"make_inst_results_reusing","","Create result values for `inst`, reusing the provided…",62,[[["type"],["self"],["i"],["inst"]],["usize"]]],[11,"replace","","Create a `ReplaceBuilder` that will replace `inst` with a…",62,[[["self"],["inst"]],["replacebuilder"]]],[11,"detach_results","","Detach the list of result values from `inst` and return it.",62,[[["self"],["inst"]],["valuelist"]]],[11,"clear_results","","Clear the list of result values from `inst`.",62,[[["self"],["inst"]]]],[11,"attach_result","","Attach an existing value to the result value list for…",62,[[["value"],["self"],["inst"]]]],[11,"replace_result","","Replace an instruction result with a new value of type…",62,[[["self"],["type"],["value"]],["value"]]],[11,"append_result","","Append a new instruction result value to `inst`.",62,[[["self"],["type"],["inst"]],["value"]]],[11,"append_inst_arg","","Append a new value argument to an instruction.",62,[[["value"],["self"],["inst"]]]],[11,"first_result","","Get the first result of an instruction.",62,[[["self"],["inst"]],["value"]]],[11,"has_results","","Test if `inst` has any result values currently.",62,[[["self"],["inst"]],["bool"]]],[11,"inst_results","","Return all the results of an instruction.",62,[[["self"],["inst"]]]],[11,"call_signature","","Get the call signature of a direct or indirect call…",62,[[["self"],["inst"]],[["sigref"],["option",["sigref"]]]]],[11,"analyze_branch","","Check if `inst` is a branch.",62,[[["self"],["inst"]],["branchinfo"]]],[11,"compute_result_type","","Compute the type of an instruction result from opcode…",62,[[["type"],["usize"],["self"],["inst"]],[["option",["type"]],["type"]]]],[11,"ctrl_typevar","","Get the controlling type variable, or `INVALID` if `inst`…",62,[[["self"],["inst"]],["type"]]],[11,"make_block","","Create a new basic block.",62,[[["self"]],["block"]]],[11,"num_block_params","","Get the number of parameters on `block`.",62,[[["self"],["block"]],["usize"]]],[11,"block_params","","Get the parameters on `block`.",62,[[["self"],["block"]]]],[11,"block_param_types","","Get the types of the parameters on `block`.",62,[[["self"],["block"]],[["vec",["type"]],["type"]]]],[11,"append_block_param","","Append a parameter with type `ty` to `block`.",62,[[["self"],["type"],["block"]],["value"]]],[11,"swap_remove_block_param","","Removes `val` from `block`'s parameters by swapping it…",62,[[["self"],["value"]],["usize"]]],[11,"remove_block_param","","Removes `val` from `block`'s parameters by a standard…",62,[[["self"],["value"]]]],[11,"attach_block_param","","Append an existing value to `block`'s parameters.",62,[[["value"],["self"],["block"]]]],[11,"replace_block_param","","Replace a block parameter with a new value of type `ty`.",62,[[["self"],["type"],["value"]],["value"]]],[11,"detach_block_params","","Detach all the parameters from `block` and return them as…",62,[[["self"],["block"]],["valuelist"]]],[11,"make_inst_results_for_parser","","Create result values for `inst`, reusing the provided…",62,[[["type"],["self"],["inst"]],["usize"]]],[11,"append_block_param_for_parser","","Similar to `append_block_param`, append a parameter with…",62,[[["type"],["block"],["value"],["self"]]]],[11,"make_value_alias_for_serialization","","Create a new value alias. This is only for use by the…",62,[[["self"],["value"]]]],[11,"value_alias_dest_for_serialization","","If `v` is already defined as an alias, return its…",62,[[["self"],["value"]],[["option",["value"]],["value"]]]],[11,"set_alias_type_for_parser","","Compute the type of an alias. This is only for use in the…",62,[[["self"],["value"]],["bool"]]],[11,"make_invalid_value_for_parser","","Create an invalid value, to pad the index space. This is…",62,[[["self"]]]],[11,"value_is_valid_for_parser","","Check if a value reference is valid, while being aware of…",62,[[["self"],["value"]],["bool"]]],[0,"entities","cranelift_codegen::ir","Cranelift IR entity references.",null,null],[3,"Block","cranelift_codegen::ir::entities","An opaque reference to a basic block in a `Function`.",null,null],[3,"Value","","An opaque reference to an SSA value.",null,null],[3,"Inst","","An opaque reference to an instruction in a `Function`.",null,null],[3,"StackSlot","","An opaque reference to a stack slot.",null,null],[3,"GlobalValue","","An opaque reference to a global value.",null,null],[3,"Constant","","An opaque reference to a constant.",null,null],[3,"Immediate","","An opaque reference to an immediate.",null,null],[3,"JumpTable","","An opaque reference to a jump table.",null,null],[3,"FuncRef","","An opaque reference to another `Function`.",null,null],[3,"SigRef","","An opaque reference to a function `Signature`.",null,null],[3,"Heap","","An opaque reference to a heap.",null,null],[3,"Table","","An opaque reference to a WebAssembly table.",null,null],[4,"AnyEntity","","An opaque reference to any of the entities defined in this…",null,null],[13,"Function","","The whole function.",64,null],[13,"Block","","a basic block.",64,null],[13,"Inst","","An instruction.",64,null],[13,"Value","","An SSA value.",64,null],[13,"StackSlot","","A stack slot.",64,null],[13,"GlobalValue","","A Global value.",64,null],[13,"JumpTable","","A jump table.",64,null],[13,"FuncRef","","An external function.",64,null],[13,"SigRef","","A function call signature.",64,null],[13,"Heap","","A heap.",64,null],[13,"Table","","A table.",64,null],[11,"from_u32","","Return the underlying index value as a `u32`.",65,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",65,[[],["u32"]]],[11,"with_number","","Create a new block reference from its number. This…",65,[[["u32"]],["option"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",66,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",66,[[],["u32"]]],[11,"with_number","","Create a value from its number representation. This is the…",66,[[["u32"]],["option"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",67,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",67,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",68,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",68,[[],["u32"]]],[11,"with_number","","Create a new stack slot reference from its number.",68,[[["u32"]],["option"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",69,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",69,[[],["u32"]]],[11,"with_number","","Create a new global value reference from its number.",69,[[["u32"]],["option"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",70,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",70,[[],["u32"]]],[11,"with_number","","Create a const reference from its number.",70,[[["u32"]],["option"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",71,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",71,[[],["u32"]]],[11,"with_number","","Create an immediate reference from its number.",71,[[["u32"]],["option"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",72,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",72,[[],["u32"]]],[11,"with_number","","Create a new jump table reference from its number.",72,[[["u32"]],["option"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",73,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",73,[[],["u32"]]],[11,"with_number","","Create a new external function reference from its number.",73,[[["u32"]],["option"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",74,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",74,[[],["u32"]]],[11,"with_number","","Create a new function signature reference from its number.",74,[[["u32"]],["option"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",75,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",75,[[],["u32"]]],[11,"with_number","","Create a new heap reference from its number.",75,[[["u32"]],["option"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",76,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",76,[[],["u32"]]],[11,"with_number","","Create a new table reference from its number.",76,[[["u32"]],["option"]]],[11,"new","cranelift_codegen::ir","Create a new blank signature.",29,[[["callconv"]],["self"]]],[11,"clear","","Clear the signature so it is identical to a fresh one…",29,[[["self"],["callconv"]]]],[11,"display","","Return an object that can display `self` with correct…",29,[[["option",["reginfo"]],["self"],["into",["option"]]],["displaysignature"]]],[11,"special_param_index","","Find the index of a presumed unique special-purpose…",29,[[["argumentpurpose"],["self"]],[["usize"],["option",["usize"]]]]],[11,"special_return_index","","Find the index of a presumed unique special-purpose…",29,[[["argumentpurpose"],["self"]],[["usize"],["option",["usize"]]]]],[11,"uses_special_param","","Does this signature have a parameter whose…",29,[[["argumentpurpose"],["self"]],["bool"]]],[11,"uses_special_return","","Does this signature have a return whose `ArgumentPurpose`…",29,[[["argumentpurpose"],["self"]],["bool"]]],[11,"num_special_params","","How many special parameters does this function have?",29,[[["self"]],["usize"]]],[11,"num_special_returns","","How many special returns does this function have?",29,[[["self"]],["usize"]]],[11,"uses_struct_return_param","","Does this signature take an struct return pointer parameter?",29,[[["self"]],["bool"]]],[11,"is_multi_return","","Does this return more than one normal value? (Pre-struct…",29,[[["self"]],["bool"]]],[11,"new","","Create a parameter with default flags.",27,[[["type"]],["self"]]],[11,"special","","Create a special-purpose parameter that is not (yet) bound…",27,[[["type"],["argumentpurpose"]],["self"]]],[11,"special_reg","","Create a parameter for a special-purpose register.",27,[[["regunit"],["type"],["argumentpurpose"]],["self"]]],[11,"uext","","Convert `self` to a parameter with the `uext` flag set.",27,[[],["self"]]],[11,"sext","","Convert `self` to a parameter type with the `sext` flag set.",27,[[],["self"]]],[11,"display","","Return an object that can display `self` with correct…",27,[[["option",["reginfo"]],["self"],["into",["option"]]],["displayabiparam"]]],[11,"testcase","","Creates a new external name from a sequence of bytes.…",36,[[["asref"]],["self"]]],[11,"user","","Create a new external name from user-provided integer…",36,[[["u32"]],["self"]]],[11,"new","","Create instance of FrameLayout.",30,[[],["self"]]],[11,"clear","","Clear the structure.",30,[[["self"]]]],[0,"function","","Intermediate representation of a function.",null,null],[3,"Function","cranelift_codegen::ir::function","A function.",null,null],[12,"name","","Name of this function. Mostly used by `.clif` files.",77,null],[12,"signature","","Signature of this function.",77,null],[12,"old_signature","","The old signature of this function, before the most recent…",77,null],[12,"stack_slots","","Stack slots allocated in this function.",77,null],[12,"global_values","","Global values referenced.",77,null],[12,"heaps","","Heaps referenced.",77,null],[12,"tables","","Tables referenced.",77,null],[12,"jump_tables","","Jump tables used in this function.",77,null],[12,"dfg","","Data flow graph containing the primary definition of all…",77,null],[12,"layout","","Layout of blocks and instructions in the function body.",77,null],[12,"encodings","","Encoding recipe and bits for the legal instructions.…",77,null],[12,"locations","","Location assigned to every value.",77,null],[12,"entry_diversions","","Non-default locations assigned to value at the entry of…",77,null],[12,"offsets","","Code offsets of the block headers.",77,null],[12,"jt_offsets","","Code offsets of Jump Table headers.",77,null],[12,"srclocs","","Source locations.",77,null],[12,"prologue_end","","Instruction that marks the end (inclusive) of the…",77,null],[12,"frame_layout","","Frame layout for the instructions.",77,null],[3,"DisplayFunctionAnnotations","","Additional annotations for function display.",null,null],[12,"isa","","Enable ISA annotations.",78,null],[12,"value_ranges","","Enable value labels annotations.",78,null],[3,"DisplayFunction","","Wrapper type capable of displaying a `Function` with…",null,null],[3,"InstOffsetIter","","Iterator returning instruction offsets and sizes:…",null,null],[11,"with_name_signature","","Create a function with the given name and signature.",77,[[["externalname"],["signature"]],["self"]]],[11,"clear","","Clear all data structures in this function.",77,[[["self"]]]],[11,"new","","Create a new empty, anonymous function with a Fast calling…",77,[[],["self"]]],[11,"create_jump_table","","Creates a jump table in the function, to be used by…",77,[[["self"],["jumptabledata"]],["jumptable"]]],[11,"create_stack_slot","","Creates a stack slot in the function, to be used by…",77,[[["self"],["stackslotdata"]],["stackslot"]]],[11,"import_signature","","Adds a signature which can later be used to declare an…",77,[[["self"],["signature"]],["sigref"]]],[11,"import_function","","Declare an external function import.",77,[[["self"],["extfuncdata"]],["funcref"]]],[11,"create_global_value","","Declares a global value accessible to the function.",77,[[["self"],["globalvaluedata"]],["globalvalue"]]],[11,"create_heap","","Declares a heap accessible to the function.",77,[[["self"],["heapdata"]],["heap"]]],[11,"create_table","","Declares a table accessible to the function.",77,[[["self"],["tabledata"]],["table"]]],[11,"display","","Return an object that can display this function with…",77,[[["into",["option"]],["self"],["option",["targetisa"]]],["displayfunction"]]],[11,"display_with","","Return an object that can display this function with…",77,[[["self"],["displayfunctionannotations"]],["displayfunction"]]],[11,"special_param","","Find a presumed unique special-purpose function parameter…",77,[[["argumentpurpose"],["self"]],[["value"],["option",["value"]]]]],[11,"inst_offsets","","Get an iterator over the instructions in `block`,…",77,[[["encinfo"],["self"],["block"]],["instoffsetiter"]]],[11,"update_encoding","","Wrapper around `encode` which assigns `inst` the resulting…",77,[[["inst"],["self"],["targetisa"]],[["result",["legalize"]],["legalize"]]]],[11,"encode","","Wrapper around `TargetIsa::encode` for encoding an…",77,[[["inst"],["self"],["targetisa"]],[["legalize"],["result",["encoding","legalize"]],["encoding"]]]],[11,"collect_debug_info","","Starts collection of debug information.",77,[[["self"]]]],[11,"collect_frame_layout_info","","Starts collection of frame layout information.",77,[[["self"]]]],[11,"change_branch_destination","","Changes the destination of a jump or branch instruction.…",77,[[["block"],["self"],["inst"]]]],[11,"is_block_basic","","Checks that the specified block can be encoded as a basic…",77,[[["self"],["block"]],["result"]]],[11,"is_leaf","","Returns true if the function is function that doesn't call…",77,[[["self"]],["bool"]]],[11,"symbol_name","cranelift_codegen::ir","Assume that `self` is an `GlobalValueData::Symbol` and…",43,[[["self"]],["externalname"]]],[11,"global_type","","Return the type of this global.",43,[[["self"],["targetisa"]],["type"]]],[0,"immediates","","Immediate operands for Cranelift instructions",null,null],[3,"Imm64","cranelift_codegen::ir::immediates","64-bit immediate signed integer operand.",null,null],[3,"Uimm64","","64-bit immediate unsigned integer operand.",null,null],[3,"Uimm32","","A 32-bit unsigned integer immediate operand.",null,null],[3,"V128Imm","","A 128-bit immediate operand.",null,null],[12,"0","","",79,null],[3,"Offset32","","32-bit signed immediate offset.",null,null],[3,"Ieee32","","An IEEE binary32 immediate floating point value,…",null,null],[3,"Ieee64","","An IEEE binary64 immediate floating point value,…",null,null],[6,"Uimm8","","8-bit unsigned integer immediate operand.",null,null],[8,"IntoBytes","","Convert a type into a vector of bytes; all implementors in…",null,null],[10,"into_bytes","","Return the little-endian byte representation of the…",80,[[],[["u8"],["vec",["u8"]]]]],[11,"new","","Create a new `Imm64` representing the signed number `x`.",81,[[["i64"]],["self"]]],[11,"wrapping_neg","","Return self negated.",81,[[],["self"]]],[11,"new","","Create a new `Uimm64` representing the unsigned number `x`.",82,[[["u64"]],["self"]]],[11,"wrapping_neg","","Return self negated.",82,[[],["self"]]],[11,"bytes","","Iterate over the bytes in the constant.",79,[[["self"]]]],[11,"to_vec","","Convert the immediate into a vector.",79,[[],[["u8"],["vec",["u8"]]]]],[11,"as_slice","","Convert the immediate into a slice.",79,[[["self"]]]],[11,"new","","Create a new `Offset32` representing the signed number `x`.",83,[[["i32"]],["self"]]],[11,"try_from_i64","","Create a new `Offset32` representing the signed number `x`…",83,[[["i64"]],["option"]]],[11,"try_add_i64","","Add in the signed number `x` if possible.",83,[[["i64"]],["option"]]],[11,"with_bits","","Create a new `Ieee32` containing the bits of `x`.",84,[[["u32"]],["self"]]],[11,"pow2","","Create an `Ieee32` number representing `2.0^n`.",84,[[["into",["i32"]],["i32"]],["self"]]],[11,"fcvt_to_sint_negative_overflow","","Create an `Ieee32` number representing the greatest…",84,[[["into",["i32"]],["i32"]],["self"]]],[11,"neg","","Return self negated.",84,[[],["self"]]],[11,"with_float","","Create a new `Ieee32` representing the number `x`.",84,[[["f32"]],["self"]]],[11,"bits","","Get the bitwise representation.",84,[[],["u32"]]],[11,"with_bits","","Create a new `Ieee64` containing the bits of `x`.",85,[[["u64"]],["self"]]],[11,"pow2","","Create an `Ieee64` number representing `2.0^n`.",85,[[["into",["i64"]],["i64"]],["self"]]],[11,"fcvt_to_sint_negative_overflow","","Create an `Ieee64` number representing the greatest…",85,[[["into",["i64"]],["i64"]],["self"]]],[11,"neg","","Return self negated.",85,[[],["self"]]],[11,"with_float","","Create a new `Ieee64` representing the number `x`.",85,[[["f64"]],["self"]]],[11,"bits","","Get the bitwise representation.",85,[[],["u64"]]],[0,"instructions","cranelift_codegen::ir","Instruction formats and opcodes.",null,null],[3,"VariableArgs","cranelift_codegen::ir::instructions","A variable list of `Value` operands used for function call…",null,null],[3,"OpcodeConstraints","","Value type constraints for a given opcode.",null,null],[3,"ValueTypeSet","","A value type set describes the permitted set of types for…",null,null],[12,"lanes","","Allowed lane sizes",86,null],[12,"ints","","Allowed int widths",86,null],[12,"floats","","Allowed float widths",86,null],[12,"bools","","Allowed bool widths",86,null],[12,"refs","","Allowed ref widths",86,null],[4,"InstructionFormat","","An instruction format",null,null],[13,"Binary","","Binary(imms=(), vals=2)",87,null],[13,"BinaryImm","","BinaryImm(imms=(imm: ir::immediates::Imm64), vals=1)",87,null],[13,"Branch","","Branch(imms=(destination: ir::Block), vals=1)",87,null],[13,"BranchFloat","","BranchFloat(imms=(cond: ir::condcodes::FloatCC,…",87,null],[13,"BranchIcmp","","BranchIcmp(imms=(cond: ir::condcodes::IntCC, destination:…",87,null],[13,"BranchInt","","BranchInt(imms=(cond: ir::condcodes::IntCC, destination:…",87,null],[13,"BranchTable","","BranchTable(imms=(destination: ir::Block, table:…",87,null],[13,"BranchTableBase","","BranchTableBase(imms=(table: ir::JumpTable), vals=0)",87,null],[13,"BranchTableEntry","","BranchTableEntry(imms=(imm: ir::immediates::Uimm8, table:…",87,null],[13,"Call","","Call(imms=(func_ref: ir::FuncRef), vals=0)",87,null],[13,"CallIndirect","","CallIndirect(imms=(sig_ref: ir::SigRef), vals=1)",87,null],[13,"CondTrap","","CondTrap(imms=(code: ir::TrapCode), vals=1)",87,null],[13,"CopySpecial","","CopySpecial(imms=(src: isa::RegUnit, dst: isa::RegUnit),…",87,null],[13,"CopyToSsa","","CopyToSsa(imms=(src: isa::RegUnit), vals=0)",87,null],[13,"ExtractLane","","ExtractLane(imms=(lane: ir::immediates::Uimm8), vals=1)",87,null],[13,"FloatCompare","","FloatCompare(imms=(cond: ir::condcodes::FloatCC), vals=2)",87,null],[13,"FloatCond","","FloatCond(imms=(cond: ir::condcodes::FloatCC), vals=1)",87,null],[13,"FloatCondTrap","","FloatCondTrap(imms=(cond: ir::condcodes::FloatCC, code:…",87,null],[13,"FuncAddr","","FuncAddr(imms=(func_ref: ir::FuncRef), vals=0)",87,null],[13,"HeapAddr","","HeapAddr(imms=(heap: ir::Heap, imm:…",87,null],[13,"IndirectJump","","IndirectJump(imms=(table: ir::JumpTable), vals=1)",87,null],[13,"InsertLane","","InsertLane(imms=(lane: ir::immediates::Uimm8), vals=2)",87,null],[13,"IntCompare","","IntCompare(imms=(cond: ir::condcodes::IntCC), vals=2)",87,null],[13,"IntCompareImm","","IntCompareImm(imms=(cond: ir::condcodes::IntCC, imm:…",87,null],[13,"IntCond","","IntCond(imms=(cond: ir::condcodes::IntCC), vals=1)",87,null],[13,"IntCondTrap","","IntCondTrap(imms=(cond: ir::condcodes::IntCC, code:…",87,null],[13,"IntSelect","","IntSelect(imms=(cond: ir::condcodes::IntCC), vals=3)",87,null],[13,"Jump","","Jump(imms=(destination: ir::Block), vals=0)",87,null],[13,"Load","","Load(imms=(flags: ir::MemFlags, offset:…",87,null],[13,"LoadComplex","","LoadComplex(imms=(flags: ir::MemFlags, offset:…",87,null],[13,"MultiAry","","MultiAry(imms=(), vals=0)",87,null],[13,"NullAry","","NullAry(imms=(), vals=0)",87,null],[13,"RegFill","","RegFill(imms=(src: ir::StackSlot, dst: isa::RegUnit),…",87,null],[13,"RegMove","","RegMove(imms=(src: isa::RegUnit, dst: isa::RegUnit), vals=1)",87,null],[13,"RegSpill","","RegSpill(imms=(src: isa::RegUnit, dst: ir::StackSlot),…",87,null],[13,"Shuffle","","Shuffle(imms=(mask: ir::Immediate), vals=2)",87,null],[13,"StackLoad","","StackLoad(imms=(stack_slot: ir::StackSlot, offset:…",87,null],[13,"StackStore","","StackStore(imms=(stack_slot: ir::StackSlot, offset:…",87,null],[13,"Store","","Store(imms=(flags: ir::MemFlags, offset:…",87,null],[13,"StoreComplex","","StoreComplex(imms=(flags: ir::MemFlags, offset:…",87,null],[13,"TableAddr","","TableAddr(imms=(table: ir::Table, offset:…",87,null],[13,"Ternary","","Ternary(imms=(), vals=3)",87,null],[13,"Trap","","Trap(imms=(code: ir::TrapCode), vals=0)",87,null],[13,"Unary","","Unary(imms=(), vals=1)",87,null],[13,"UnaryBool","","UnaryBool(imms=(imm: bool), vals=0)",87,null],[13,"UnaryConst","","UnaryConst(imms=(constant_handle: ir::Constant), vals=0)",87,null],[13,"UnaryGlobalValue","","UnaryGlobalValue(imms=(global_value: ir::GlobalValue),…",87,null],[13,"UnaryIeee32","","UnaryIeee32(imms=(imm: ir::immediates::Ieee32), vals=0)",87,null],[13,"UnaryIeee64","","UnaryIeee64(imms=(imm: ir::immediates::Ieee64), vals=0)",87,null],[13,"UnaryImm","","UnaryImm(imms=(imm: ir::immediates::Imm64), vals=0)",87,null],[4,"InstructionData","","",null,null],[13,"Binary","","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",89,null],[12,"args","","",89,null],[13,"BinaryImm","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",90,null],[12,"arg","","",90,null],[12,"imm","","",90,null],[13,"Branch","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",91,null],[12,"args","","",91,null],[12,"destination","","",91,null],[13,"BranchFloat","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",92,null],[12,"args","","",92,null],[12,"cond","","",92,null],[12,"destination","","",92,null],[13,"BranchIcmp","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",93,null],[12,"args","","",93,null],[12,"cond","","",93,null],[12,"destination","","",93,null],[13,"BranchInt","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",94,null],[12,"args","","",94,null],[12,"cond","","",94,null],[12,"destination","","",94,null],[13,"BranchTable","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",95,null],[12,"arg","","",95,null],[12,"destination","","",95,null],[12,"table","","",95,null],[13,"BranchTableBase","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",96,null],[12,"table","","",96,null],[13,"BranchTableEntry","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",97,null],[12,"args","","",97,null],[12,"imm","","",97,null],[12,"table","","",97,null],[13,"Call","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",98,null],[12,"args","","",98,null],[12,"func_ref","","",98,null],[13,"CallIndirect","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",99,null],[12,"args","","",99,null],[12,"sig_ref","","",99,null],[13,"CondTrap","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",100,null],[12,"arg","","",100,null],[12,"code","","",100,null],[13,"CopySpecial","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",101,null],[12,"src","","",101,null],[12,"dst","","",101,null],[13,"CopyToSsa","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",102,null],[12,"src","","",102,null],[13,"ExtractLane","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",103,null],[12,"arg","","",103,null],[12,"lane","","",103,null],[13,"FloatCompare","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",104,null],[12,"args","","",104,null],[12,"cond","","",104,null],[13,"FloatCond","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",105,null],[12,"arg","","",105,null],[12,"cond","","",105,null],[13,"FloatCondTrap","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",106,null],[12,"arg","","",106,null],[12,"cond","","",106,null],[12,"code","","",106,null],[13,"FuncAddr","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",107,null],[12,"func_ref","","",107,null],[13,"HeapAddr","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",108,null],[12,"arg","","",108,null],[12,"heap","","",108,null],[12,"imm","","",108,null],[13,"IndirectJump","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",109,null],[12,"arg","","",109,null],[12,"table","","",109,null],[13,"InsertLane","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",110,null],[12,"args","","",110,null],[12,"lane","","",110,null],[13,"IntCompare","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",111,null],[12,"args","","",111,null],[12,"cond","","",111,null],[13,"IntCompareImm","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",112,null],[12,"arg","","",112,null],[12,"cond","","",112,null],[12,"imm","","",112,null],[13,"IntCond","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",113,null],[12,"arg","","",113,null],[12,"cond","","",113,null],[13,"IntCondTrap","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",114,null],[12,"arg","","",114,null],[12,"cond","","",114,null],[12,"code","","",114,null],[13,"IntSelect","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",115,null],[12,"args","","",115,null],[12,"cond","","",115,null],[13,"Jump","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",116,null],[12,"args","","",116,null],[12,"destination","","",116,null],[13,"Load","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",117,null],[12,"arg","","",117,null],[12,"flags","","",117,null],[12,"offset","","",117,null],[13,"LoadComplex","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",118,null],[12,"args","","",118,null],[12,"flags","","",118,null],[12,"offset","","",118,null],[13,"MultiAry","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",119,null],[12,"args","","",119,null],[13,"NullAry","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",120,null],[13,"RegFill","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",121,null],[12,"arg","","",121,null],[12,"src","","",121,null],[12,"dst","","",121,null],[13,"RegMove","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",122,null],[12,"arg","","",122,null],[12,"src","","",122,null],[12,"dst","","",122,null],[13,"RegSpill","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",123,null],[12,"arg","","",123,null],[12,"src","","",123,null],[12,"dst","","",123,null],[13,"Shuffle","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",124,null],[12,"args","","",124,null],[12,"mask","","",124,null],[13,"StackLoad","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",125,null],[12,"stack_slot","","",125,null],[12,"offset","","",125,null],[13,"StackStore","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",126,null],[12,"arg","","",126,null],[12,"stack_slot","","",126,null],[12,"offset","","",126,null],[13,"Store","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",127,null],[12,"args","","",127,null],[12,"flags","","",127,null],[12,"offset","","",127,null],[13,"StoreComplex","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",128,null],[12,"args","","",128,null],[12,"flags","","",128,null],[12,"offset","","",128,null],[13,"TableAddr","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",129,null],[12,"arg","","",129,null],[12,"table","","",129,null],[12,"offset","","",129,null],[13,"Ternary","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",130,null],[12,"args","","",130,null],[13,"Trap","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",131,null],[12,"code","","",131,null],[13,"Unary","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",132,null],[12,"arg","","",132,null],[13,"UnaryBool","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",133,null],[12,"imm","","",133,null],[13,"UnaryConst","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",134,null],[12,"constant_handle","","",134,null],[13,"UnaryGlobalValue","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",135,null],[12,"global_value","","",135,null],[13,"UnaryIeee32","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",136,null],[12,"imm","","",136,null],[13,"UnaryIeee64","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",137,null],[12,"imm","","",137,null],[13,"UnaryImm","cranelift_codegen::ir::instructions","",88,null],[12,"opcode","cranelift_codegen::ir::instructions::InstructionData","",138,null],[12,"imm","","",138,null],[4,"Opcode","cranelift_codegen::ir::instructions","An instruction opcode.",null,null],[13,"Jump","","`jump block, args`. (Jump)",139,null],[13,"Fallthrough","","`fallthrough block, args`. (Jump)",139,null],[13,"Brz","","`brz c, block, args`. (Branch) Type inferred from `c`.",139,null],[13,"Brnz","","`brnz c, block, args`. (Branch) Type inferred from `c`.",139,null],[13,"BrIcmp","","`br_icmp Cond, x, y, block, args`. (BranchIcmp) Type…",139,null],[13,"Brif","","`brif Cond, f, block, args`. (BranchInt)",139,null],[13,"Brff","","`brff Cond, f, block, args`. (BranchFloat)",139,null],[13,"BrTable","","`br_table x, block, JT`. (BranchTable) Type inferred from…",139,null],[13,"JumpTableEntry","","`entry = jump_table_entry x, addr, Size, JT`.…",139,null],[13,"JumpTableBase","","`addr = jump_table_base JT`. (BranchTableBase)",139,null],[13,"IndirectJumpTableBr","","`indirect_jump_table_br addr, JT`. (IndirectJump) Type…",139,null],[13,"Debugtrap","","`debugtrap`. (NullAry)",139,null],[13,"Trap","","`trap code`. (Trap)",139,null],[13,"Trapz","","`trapz c, code`. (CondTrap) Type inferred from `c`.",139,null],[13,"ResumableTrap","","`resumable_trap code`. (Trap)",139,null],[13,"Trapnz","","`trapnz c, code`. (CondTrap) Type inferred from `c`.",139,null],[13,"Trapif","","`trapif Cond, f, code`. (IntCondTrap)",139,null],[13,"Trapff","","`trapff Cond, f, code`. (FloatCondTrap)",139,null],[13,"Return","","`return rvals`. (MultiAry)",139,null],[13,"FallthroughReturn","","`fallthrough_return rvals`. (MultiAry)",139,null],[13,"Call","","`rvals = call FN, args`. (Call)",139,null],[13,"CallIndirect","","`rvals = call_indirect SIG, callee, args`. (CallIndirect)…",139,null],[13,"FuncAddr","","`addr = func_addr FN`. (FuncAddr)",139,null],[13,"Splat","","`a = splat x`. (Unary)",139,null],[13,"Swizzle","","`a = swizzle x, y`. (Binary)",139,null],[13,"Insertlane","","`a = insertlane x, Idx, y`. (InsertLane) Type inferred…",139,null],[13,"Extractlane","","`a = extractlane x, Idx`. (ExtractLane) Type inferred from…",139,null],[13,"Imin","","`a = imin x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Umin","","`a = umin x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Imax","","`a = imax x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Umax","","`a = umax x, y`. (Binary) Type inferred from `x`.",139,null],[13,"AvgRound","","`a = avg_round x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Load","","`a = load MemFlags, p, Offset`. (Load)",139,null],[13,"LoadComplex","","`a = load_complex MemFlags, args, Offset`. (LoadComplex)",139,null],[13,"Store","","`store MemFlags, x, p, Offset`. (Store) Type inferred from…",139,null],[13,"StoreComplex","","`store_complex MemFlags, x, args, Offset`. (StoreComplex)…",139,null],[13,"Uload8","","`a = uload8 MemFlags, p, Offset`. (Load)",139,null],[13,"Uload8Complex","","`a = uload8_complex MemFlags, args, Offset`. (LoadComplex)",139,null],[13,"Sload8","","`a = sload8 MemFlags, p, Offset`. (Load)",139,null],[13,"Sload8Complex","","`a = sload8_complex MemFlags, args, Offset`. (LoadComplex)",139,null],[13,"Istore8","","`istore8 MemFlags, x, p, Offset`. (Store) Type inferred…",139,null],[13,"Istore8Complex","","`istore8_complex MemFlags, x, args, Offset`.…",139,null],[13,"Uload16","","`a = uload16 MemFlags, p, Offset`. (Load)",139,null],[13,"Uload16Complex","","`a = uload16_complex MemFlags, args, Offset`. (LoadComplex)",139,null],[13,"Sload16","","`a = sload16 MemFlags, p, Offset`. (Load)",139,null],[13,"Sload16Complex","","`a = sload16_complex MemFlags, args, Offset`. (LoadComplex)",139,null],[13,"Istore16","","`istore16 MemFlags, x, p, Offset`. (Store) Type inferred…",139,null],[13,"Istore16Complex","","`istore16_complex MemFlags, x, args, Offset`.…",139,null],[13,"Uload32","","`a = uload32 MemFlags, p, Offset`. (Load) Type inferred…",139,null],[13,"Uload32Complex","","`a = uload32_complex MemFlags, args, Offset`. (LoadComplex)",139,null],[13,"Sload32","","`a = sload32 MemFlags, p, Offset`. (Load) Type inferred…",139,null],[13,"Sload32Complex","","`a = sload32_complex MemFlags, args, Offset`. (LoadComplex)",139,null],[13,"Istore32","","`istore32 MemFlags, x, p, Offset`. (Store) Type inferred…",139,null],[13,"Istore32Complex","","`istore32_complex MemFlags, x, args, Offset`. (StoreComplex)",139,null],[13,"StackLoad","","`a = stack_load SS, Offset`. (StackLoad)",139,null],[13,"StackStore","","`stack_store x, SS, Offset`. (StackStore) Type inferred…",139,null],[13,"StackAddr","","`addr = stack_addr SS, Offset`. (StackLoad)",139,null],[13,"GlobalValue","","`a = global_value GV`. (UnaryGlobalValue)",139,null],[13,"SymbolValue","","`a = symbol_value GV`. (UnaryGlobalValue)",139,null],[13,"TlsValue","","`a = tls_value GV`. (UnaryGlobalValue)",139,null],[13,"HeapAddr","","`addr = heap_addr H, p, Size`. (HeapAddr)",139,null],[13,"GetPinnedReg","","`addr = get_pinned_reg`. (NullAry)",139,null],[13,"SetPinnedReg","","`set_pinned_reg addr`. (Unary) Type inferred from `addr`.",139,null],[13,"TableAddr","","`addr = table_addr T, p, Offset`. (TableAddr)",139,null],[13,"Iconst","","`a = iconst N`. (UnaryImm)",139,null],[13,"F32const","","`a = f32const N`. (UnaryIeee32)",139,null],[13,"F64const","","`a = f64const N`. (UnaryIeee64)",139,null],[13,"Bconst","","`a = bconst N`. (UnaryBool)",139,null],[13,"Vconst","","`a = vconst N`. (UnaryConst)",139,null],[13,"Shuffle","","`a = shuffle a, b, mask`. (Shuffle) Type inferred from `a`.",139,null],[13,"Null","","`a = null`. (NullAry)",139,null],[13,"Nop","","`nop`. (NullAry)",139,null],[13,"Select","","`a = select c, x, y`. (Ternary) Type inferred from `x`.",139,null],[13,"Selectif","","`a = selectif cc, flags, x, y`. (IntSelect)",139,null],[13,"Bitselect","","`a = bitselect c, x, y`. (Ternary) Type inferred from `x`.",139,null],[13,"Copy","","`a = copy x`. (Unary) Type inferred from `x`.",139,null],[13,"Spill","","`a = spill x`. (Unary) Type inferred from `x`.",139,null],[13,"Fill","","`a = fill x`. (Unary) Type inferred from `x`.",139,null],[13,"FillNop","","`a = fill_nop x`. (Unary) Type inferred from `x`.",139,null],[13,"Regmove","","`regmove x, src, dst`. (RegMove) Type inferred from `x`.",139,null],[13,"CopySpecial","","`copy_special src, dst`. (CopySpecial)",139,null],[13,"CopyToSsa","","`a = copy_to_ssa src`. (CopyToSsa)",139,null],[13,"CopyNop","","`a = copy_nop x`. (Unary) Type inferred from `x`.",139,null],[13,"AdjustSpDown","","`adjust_sp_down delta`. (Unary) Type inferred from `delta`.",139,null],[13,"AdjustSpUpImm","","`adjust_sp_up_imm Offset`. (UnaryImm)",139,null],[13,"AdjustSpDownImm","","`adjust_sp_down_imm Offset`. (UnaryImm)",139,null],[13,"IfcmpSp","","`f = ifcmp_sp addr`. (Unary) Type inferred from `addr`.",139,null],[13,"Regspill","","`regspill x, src, SS`. (RegSpill) Type inferred from `x`.",139,null],[13,"Regfill","","`regfill x, SS, dst`. (RegFill) Type inferred from `x`.",139,null],[13,"Safepoint","","`safepoint args`. (MultiAry)",139,null],[13,"Vsplit","","`lo, hi = vsplit x`. (Unary) Type inferred from `x`.",139,null],[13,"Vconcat","","`a = vconcat x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Vselect","","`a = vselect c, x, y`. (Ternary) Type inferred from `x`.",139,null],[13,"VanyTrue","","`s = vany_true a`. (Unary) Type inferred from `a`.",139,null],[13,"VallTrue","","`s = vall_true a`. (Unary) Type inferred from `a`.",139,null],[13,"Icmp","","`a = icmp Cond, x, y`. (IntCompare) Type inferred from `x`.",139,null],[13,"IcmpImm","","`a = icmp_imm Cond, x, Y`. (IntCompareImm) Type inferred…",139,null],[13,"Ifcmp","","`f = ifcmp x, y`. (Binary) Type inferred from `x`.",139,null],[13,"IfcmpImm","","`f = ifcmp_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"Iadd","","`a = iadd x, y`. (Binary) Type inferred from `x`.",139,null],[13,"UaddSat","","`a = uadd_sat x, y`. (Binary) Type inferred from `x`.",139,null],[13,"SaddSat","","`a = sadd_sat x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Isub","","`a = isub x, y`. (Binary) Type inferred from `x`.",139,null],[13,"UsubSat","","`a = usub_sat x, y`. (Binary) Type inferred from `x`.",139,null],[13,"SsubSat","","`a = ssub_sat x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Ineg","","`a = ineg x`. (Unary) Type inferred from `x`.",139,null],[13,"Imul","","`a = imul x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Umulhi","","`a = umulhi x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Smulhi","","`a = smulhi x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Udiv","","`a = udiv x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Sdiv","","`a = sdiv x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Urem","","`a = urem x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Srem","","`a = srem x, y`. (Binary) Type inferred from `x`.",139,null],[13,"IaddImm","","`a = iadd_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"ImulImm","","`a = imul_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"UdivImm","","`a = udiv_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"SdivImm","","`a = sdiv_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"UremImm","","`a = urem_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"SremImm","","`a = srem_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"IrsubImm","","`a = irsub_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"IaddCin","","`a = iadd_cin x, y, c_in`. (Ternary) Type inferred from `y`.",139,null],[13,"IaddIfcin","","`a = iadd_ifcin x, y, c_in`. (Ternary) Type inferred from…",139,null],[13,"IaddCout","","`a, c_out = iadd_cout x, y`. (Binary) Type inferred from…",139,null],[13,"IaddIfcout","","`a, c_out = iadd_ifcout x, y`. (Binary) Type inferred from…",139,null],[13,"IaddCarry","","`a, c_out = iadd_carry x, y, c_in`. (Ternary) Type…",139,null],[13,"IaddIfcarry","","`a, c_out = iadd_ifcarry x, y, c_in`. (Ternary) Type…",139,null],[13,"IsubBin","","`a = isub_bin x, y, b_in`. (Ternary) Type inferred from `y`.",139,null],[13,"IsubIfbin","","`a = isub_ifbin x, y, b_in`. (Ternary) Type inferred from…",139,null],[13,"IsubBout","","`a, b_out = isub_bout x, y`. (Binary) Type inferred from…",139,null],[13,"IsubIfbout","","`a, b_out = isub_ifbout x, y`. (Binary) Type inferred from…",139,null],[13,"IsubBorrow","","`a, b_out = isub_borrow x, y, b_in`. (Ternary) Type…",139,null],[13,"IsubIfborrow","","`a, b_out = isub_ifborrow x, y, b_in`. (Ternary) Type…",139,null],[13,"Band","","`a = band x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Bor","","`a = bor x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Bxor","","`a = bxor x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Bnot","","`a = bnot x`. (Unary) Type inferred from `x`.",139,null],[13,"BandNot","","`a = band_not x, y`. (Binary) Type inferred from `x`.",139,null],[13,"BorNot","","`a = bor_not x, y`. (Binary) Type inferred from `x`.",139,null],[13,"BxorNot","","`a = bxor_not x, y`. (Binary) Type inferred from `x`.",139,null],[13,"BandImm","","`a = band_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"BorImm","","`a = bor_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"BxorImm","","`a = bxor_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"Rotl","","`a = rotl x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Rotr","","`a = rotr x, y`. (Binary) Type inferred from `x`.",139,null],[13,"RotlImm","","`a = rotl_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"RotrImm","","`a = rotr_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"Ishl","","`a = ishl x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Ushr","","`a = ushr x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Sshr","","`a = sshr x, y`. (Binary) Type inferred from `x`.",139,null],[13,"IshlImm","","`a = ishl_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"UshrImm","","`a = ushr_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"SshrImm","","`a = sshr_imm x, Y`. (BinaryImm) Type inferred from `x`.",139,null],[13,"Bitrev","","`a = bitrev x`. (Unary) Type inferred from `x`.",139,null],[13,"Clz","","`a = clz x`. (Unary) Type inferred from `x`.",139,null],[13,"Cls","","`a = cls x`. (Unary) Type inferred from `x`.",139,null],[13,"Ctz","","`a = ctz x`. (Unary) Type inferred from `x`.",139,null],[13,"Popcnt","","`a = popcnt x`. (Unary) Type inferred from `x`.",139,null],[13,"Fcmp","","`a = fcmp Cond, x, y`. (FloatCompare) Type inferred from…",139,null],[13,"Ffcmp","","`f = ffcmp x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Fadd","","`a = fadd x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Fsub","","`a = fsub x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Fmul","","`a = fmul x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Fdiv","","`a = fdiv x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Sqrt","","`a = sqrt x`. (Unary) Type inferred from `x`.",139,null],[13,"Fma","","`a = fma x, y, z`. (Ternary) Type inferred from `y`.",139,null],[13,"Fneg","","`a = fneg x`. (Unary) Type inferred from `x`.",139,null],[13,"Fabs","","`a = fabs x`. (Unary) Type inferred from `x`.",139,null],[13,"Fcopysign","","`a = fcopysign x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Fmin","","`a = fmin x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Fmax","","`a = fmax x, y`. (Binary) Type inferred from `x`.",139,null],[13,"Ceil","","`a = ceil x`. (Unary) Type inferred from `x`.",139,null],[13,"Floor","","`a = floor x`. (Unary) Type inferred from `x`.",139,null],[13,"Trunc","","`a = trunc x`. (Unary) Type inferred from `x`.",139,null],[13,"Nearest","","`a = nearest x`. (Unary) Type inferred from `x`.",139,null],[13,"IsNull","","`a = is_null x`. (Unary) Type inferred from `x`.",139,null],[13,"IsInvalid","","`a = is_invalid x`. (Unary) Type inferred from `x`.",139,null],[13,"Trueif","","`a = trueif Cond, f`. (IntCond)",139,null],[13,"Trueff","","`a = trueff Cond, f`. (FloatCond)",139,null],[13,"Bitcast","","`a = bitcast x`. (Unary)",139,null],[13,"RawBitcast","","`a = raw_bitcast x`. (Unary)",139,null],[13,"ScalarToVector","","`a = scalar_to_vector s`. (Unary)",139,null],[13,"Breduce","","`a = breduce x`. (Unary)",139,null],[13,"Bextend","","`a = bextend x`. (Unary)",139,null],[13,"Bint","","`a = bint x`. (Unary)",139,null],[13,"Bmask","","`a = bmask x`. (Unary)",139,null],[13,"Ireduce","","`a = ireduce x`. (Unary)",139,null],[13,"Uextend","","`a = uextend x`. (Unary)",139,null],[13,"Sextend","","`a = sextend x`. (Unary)",139,null],[13,"Fpromote","","`a = fpromote x`. (Unary)",139,null],[13,"Fdemote","","`a = fdemote x`. (Unary)",139,null],[13,"FcvtToUint","","`a = fcvt_to_uint x`. (Unary)",139,null],[13,"FcvtToUintSat","","`a = fcvt_to_uint_sat x`. (Unary)",139,null],[13,"FcvtToSint","","`a = fcvt_to_sint x`. (Unary)",139,null],[13,"FcvtToSintSat","","`a = fcvt_to_sint_sat x`. (Unary)",139,null],[13,"FcvtFromUint","","`a = fcvt_from_uint x`. (Unary)",139,null],[13,"FcvtFromSint","","`a = fcvt_from_sint x`. (Unary)",139,null],[13,"Isplit","","`lo, hi = isplit x`. (Unary) Type inferred from `x`.",139,null],[13,"Iconcat","","`a = iconcat lo, hi`. (Binary) Type inferred from `lo`.",139,null],[13,"X86Udivmodx","","`q, r = x86_udivmodx nlo, nhi, d`. (Ternary) Type inferred…",139,null],[13,"X86Sdivmodx","","`q, r = x86_sdivmodx nlo, nhi, d`. (Ternary) Type inferred…",139,null],[13,"X86Umulx","","`resLo, resHi = x86_umulx argL, argR`. (Binary) Type…",139,null],[13,"X86Smulx","","`resLo, resHi = x86_smulx argL, argR`. (Binary) Type…",139,null],[13,"X86Cvtt2si","","`a = x86_cvtt2si x`. (Unary)",139,null],[13,"X86Fmin","","`a = x86_fmin x, y`. (Binary) Type inferred from `x`.",139,null],[13,"X86Fmax","","`a = x86_fmax x, y`. (Binary) Type inferred from `x`.",139,null],[13,"X86Push","","`x86_push x`. (Unary) Type inferred from `x`.",139,null],[13,"X86Pop","","`x = x86_pop`. (NullAry)",139,null],[13,"X86Bsr","","`y, rflags = x86_bsr x`. (Unary) Type inferred from `x`.",139,null],[13,"X86Bsf","","`y, rflags = x86_bsf x`. (Unary) Type inferred from `x`.",139,null],[13,"X86Pshufd","","`a = x86_pshufd a, i`. (ExtractLane) Type inferred from `a`.",139,null],[13,"X86Pshufb","","`a = x86_pshufb a, b`. (Binary) Type inferred from `a`.",139,null],[13,"X86Pextr","","`a = x86_pextr x, Idx`. (ExtractLane) Type inferred from…",139,null],[13,"X86Pinsr","","`a = x86_pinsr x, Idx, y`. (InsertLane) Type inferred from…",139,null],[13,"X86Insertps","","`a = x86_insertps x, Idx, y`. (InsertLane) Type inferred…",139,null],[13,"X86Movsd","","`a = x86_movsd x, y`. (Binary) Type inferred from `x`.",139,null],[13,"X86Movlhps","","`a = x86_movlhps x, y`. (Binary) Type inferred from `x`.",139,null],[13,"X86Psll","","`a = x86_psll x, y`. (Binary) Type inferred from `x`.",139,null],[13,"X86Psrl","","`a = x86_psrl x, y`. (Binary) Type inferred from `x`.",139,null],[13,"X86Psra","","`a = x86_psra x, y`. (Binary) Type inferred from `x`.",139,null],[13,"X86Ptest","","`f = x86_ptest x, y`. (Binary) Type inferred from `x`.",139,null],[13,"X86Pmaxs","","`a = x86_pmaxs x, y`. (Binary) Type inferred from `x`.",139,null],[13,"X86Pmaxu","","`a = x86_pmaxu x, y`. (Binary) Type inferred from `x`.",139,null],[13,"X86Pmins","","`a = x86_pmins x, y`. (Binary) Type inferred from `x`.",139,null],[13,"X86Pminu","","`a = x86_pminu x, y`. (Binary) Type inferred from `x`.",139,null],[13,"X86ElfTlsGetAddr","","`addr = x86_elf_tls_get_addr GV`. (UnaryGlobalValue)",139,null],[13,"X86MachoTlsGetAddr","","`addr = x86_macho_tls_get_addr GV`. (UnaryGlobalValue)",139,null],[4,"BranchInfo","","Information about branch and jump instructions.",null,null],[13,"NotABranch","","This is not a branch or jump instruction. This instruction…",140,null],[13,"SingleDest","","This is a branch or jump to a single destination block,…",140,null],[13,"Table","","This is a jump table branch which can have many…",140,null],[4,"CallInfo","","Information about call instructions.",null,null],[13,"NotACall","","This is not a call instruction.",141,null],[13,"Direct","","This is a direct call to an external function declared in…",141,null],[13,"Indirect","","This is an indirect call with the specified signature. See…",141,null],[4,"ResolvedConstraint","","The type constraint on a value argument once the…",null,null],[13,"Bound","","The operand is bound to a known type.",142,null],[13,"Free","","The operand type can vary freely within the given set.",142,null],[6,"ValueList","","Some instructions use an external list of argument values…",null,null],[6,"ValueListPool","","Memory pool for holding value lists. See `ValueList`.",null,null],[11,"opcode","","Get the opcode of this instruction.",88,[[["self"]],["opcode"]]],[11,"typevar_operand","","Get the controlling type variable operand.",88,[[["self"],["valuelistpool"]],[["option",["value"]],["value"]]]],[11,"arguments","","Get the value arguments to this instruction.",88,[[["valuelistpool"],["self"]]]],[11,"arguments_mut","","Get mutable references to the value arguments to this…",88,[[["valuelistpool"],["self"]]]],[11,"take_value_list","","Take out the value list with all the value arguments and…",88,[[["self"]],[["option",["valuelist"]],["valuelist"]]]],[11,"put_value_list","","Put back a value list.",88,[[["self"],["valuelist"]]]],[11,"eq","","Compare two `InstructionData` for equality.",88,[[["self"],["valuelistpool"]],["bool"]]],[11,"hash","","Hash an `InstructionData`.",88,[[["valuelistpool"],["self"],["h"]]]],[11,"is_terminator","","True for instructions that terminate the block",139,[[],["bool"]]],[11,"is_branch","","True for all branch or jump instructions.",139,[[],["bool"]]],[11,"is_indirect_branch","","True for all indirect branch or jump instructions.",139,[[],["bool"]]],[11,"is_call","","Is this a call instruction?",139,[[],["bool"]]],[11,"is_return","","Is this a return instruction?",139,[[],["bool"]]],[11,"is_ghost","","Is this a ghost instruction?",139,[[],["bool"]]],[11,"can_load","","Can this instruction read from memory?",139,[[],["bool"]]],[11,"can_store","","Can this instruction write to memory?",139,[[],["bool"]]],[11,"can_trap","","Can this instruction cause a trap?",139,[[],["bool"]]],[11,"other_side_effects","","Does this instruction have other side effects besides…",139,[[],["bool"]]],[11,"writes_cpu_flags","","Does this instruction write to CPU flags?",139,[[],["bool"]]],[11,"format","","Get the instruction format for this opcode.",139,[[],["instructionformat"]]],[11,"constraints","","Get the constraint descriptor for this opcode. Panic if…",139,[[],["opcodeconstraints"]]],[11,"new","","Create an empty argument list.",143,[[],["self"]]],[11,"push","","Add an argument to the end.",143,[[["self"],["value"]]]],[11,"is_empty","","Check if the list is empty.",143,[[["self"]],["bool"]]],[11,"into_value_list","","Convert this to a value list in `pool` with `fixed`…",143,[[["valuelistpool"]],["valuelist"]]],[11,"analyze_branch","","Return information about the destination of a branch or…",88,[[["valuelistpool"],["self"]],["branchinfo"]]],[11,"branch_destination","","Get the single destination of this branch instruction, if…",88,[[["self"]],[["option",["block"]],["block"]]]],[11,"branch_destination_mut","","Get a mutable reference to the single destination of this…",88,[[["self"]],[["block"],["option",["block"]]]]],[11,"analyze_call","","Return information about a call instruction.",88,[[["valuelistpool"],["self"]],["callinfo"]]],[11,"use_typevar_operand","","Can the controlling type variable for this opcode be…",144,[[],["bool"]]],[11,"requires_typevar_operand","","Is it necessary to look at the designated value input…",144,[[],["bool"]]],[11,"num_fixed_results","","Get the number of fixed result values produced by this…",144,[[],["usize"]]],[11,"num_fixed_value_arguments","","Get the number of fixed input values required by this…",144,[[],["usize"]]],[11,"result_type","","Get the value type of result number `n`, having resolved…",144,[[["type"],["usize"]],["type"]]],[11,"value_argument_constraint","","Get the value type of input value number `n`, having…",144,[[["type"],["usize"]],["resolvedconstraint"]]],[11,"ctrl_typeset","","Get the typeset of allowed types for the controlling type…",144,[[],[["valuetypeset"],["option",["valuetypeset"]]]]],[11,"is_polymorphic","","Is this instruction polymorphic?",144,[[],["bool"]]],[11,"contains","","Does `typ` belong to this set?",86,[[["type"]],["bool"]]],[11,"example","","Get an example member of this type set.",86,[[],["type"]]],[0,"jumptable","cranelift_codegen::ir","Jump table representation.",null,null],[3,"JumpTableData","cranelift_codegen::ir::jumptable","Contents of a jump table.",null,null],[11,"new","","Create a new empty jump table.",145,[[],["self"]]],[11,"with_capacity","","Create a new empty jump table with the specified capacity.",145,[[["usize"]],["self"]]],[11,"len","","Get the number of table entries.",145,[[["self"]],["usize"]]],[11,"push_entry","","Append a table entry.",145,[[["self"],["block"]]]],[11,"branches_to","","Checks if any of the entries branch to `block`.",145,[[["self"],["block"]],["bool"]]],[11,"as_slice","","Access the whole table as a slice.",145,[[["self"]]]],[11,"as_mut_slice","","Access the whole table as a mutable slice.",145,[[["self"]]]],[11,"iter","","Returns an iterator over the table.",145,[[["self"]],[["iter",["block"]],["block"]]]],[11,"iter_mut","","Returns an iterator that allows modifying each value.",145,[[["self"]],[["block"],["itermut",["block"]]]]],[0,"layout","cranelift_codegen::ir","Function layout.",null,null],[3,"Layout","cranelift_codegen::ir::layout","The `Layout` struct determines the layout of blocks and…",null,null],[3,"Blocks","","Iterate over blocks in layout order. See `Layout::blocks()`.",null,null],[3,"Insts","","Iterate over instructions in a block in layout order. See…",null,null],[11,"new","","Create a new empty `Layout`.",146,[[],["self"]]],[11,"clear","","Clear the layout.",146,[[["self"]]]],[11,"block_capacity","","Returns the capacity of the `BlockData` map.",146,[[["self"]],["usize"]]],[11,"is_block_inserted","","Is `block` currently part of the layout?",146,[[["self"],["block"]],["bool"]]],[11,"append_block","","Insert `block` as the last block in the layout.",146,[[["self"],["block"]]]],[11,"insert_block","","Insert `block` in the layout before the existing block…",146,[[["self"],["block"]]]],[11,"insert_block_after","","Insert `block` in the layout after the existing block…",146,[[["self"],["block"]]]],[11,"remove_block","","Remove `block` from the layout.",146,[[["self"],["block"]]]],[11,"blocks","","Return an iterator over all blocks in layout order.",146,[[["self"]],["blocks"]]],[11,"entry_block","","Get the function's entry block. This is simply the first…",146,[[["self"]],[["option",["block"]],["block"]]]],[11,"last_block","","Get the last block in the layout.",146,[[["self"]],[["option",["block"]],["block"]]]],[11,"prev_block","","Get the block preceding `block` in the layout order.",146,[[["self"],["block"]],[["option",["block"]],["block"]]]],[11,"next_block","","Get the block following `block` in the layout order.",146,[[["self"],["block"]],[["option",["block"]],["block"]]]],[11,"inst_block","","Get the block containing `inst`, or `None` if `inst` is…",146,[[["self"],["inst"]],[["option",["block"]],["block"]]]],[11,"pp_block","","Get the block containing the program point `pp`. Panic if…",146,[[["self"],["pp"]],["block"]]],[11,"append_inst","","Append `inst` to the end of `block`.",146,[[["block"],["self"],["inst"]]]],[11,"first_inst","","Fetch a block's first instruction.",146,[[["self"],["block"]],[["option",["inst"]],["inst"]]]],[11,"last_inst","","Fetch a block's last instruction.",146,[[["self"],["block"]],[["option",["inst"]],["inst"]]]],[11,"next_inst","","Fetch the instruction following `inst`.",146,[[["self"],["inst"]],[["option",["inst"]],["inst"]]]],[11,"prev_inst","","Fetch the instruction preceding `inst`.",146,[[["self"],["inst"]],[["option",["inst"]],["inst"]]]],[11,"canonical_branch_inst","","Fetch the first instruction in a block's terminal branch…",146,[[["block"],["self"],["dataflowgraph"]],[["option",["inst"]],["inst"]]]],[11,"insert_inst","","Insert `inst` before the instruction `before` in the same…",146,[[["self"],["inst"]]]],[11,"remove_inst","","Remove `inst` from the layout.",146,[[["self"],["inst"]]]],[11,"block_insts","","Iterate over the instructions in `block` in layout order.",146,[[["self"],["block"]],["insts"]]],[11,"block_likely_branches","","Iterate over a limited set of instruction which are likely…",146,[[["self"],["block"]],["insts"]]],[11,"split_block","","Split the block containing `before` in two.",146,[[["inst"],["self"],["block"]]]],[11,"for_inst","cranelift_codegen::ir","Get the well-known library call name to use as a…",50,[[["opcode"],["type"]],["option"]]],[11,"new","","Create a new empty set of flags.",147,[[],["self"]]],[11,"trusted","","Create a set of flags representing an access from a…",147,[[],["self"]]],[11,"set_by_name","","Set a flag bit by name.",147,[[["str"],["self"]],["bool"]]],[11,"notrap","","Test if the `notrap` flag is set.",147,[[],["bool"]]],[11,"set_notrap","","Set the `notrap` flag.",147,[[["self"]]]],[11,"aligned","","Test if the `aligned` flag is set.",147,[[],["bool"]]],[11,"set_aligned","","Set the `aligned` flag.",147,[[["self"]]]],[11,"readonly","","Test if the `readonly` flag is set.",147,[[],["bool"]]],[11,"set_readonly","","Set the `readonly` flag.",147,[[["self"]]]],[11,"unwrap_inst","","Get the instruction we know is inside.",51,[[],["inst"]]],[11,"new","","Create a new source location with the given bits.",148,[[["u32"]],["self"]]],[11,"is_default","","Is this the default source location?",148,[[],["bool"]]],[11,"bits","","Read the bits of this source location.",148,[[],["u32"]]],[0,"stackslot","","Stack slots.",null,null],[3,"StackSlotData","cranelift_codegen::ir::stackslot","Contents of a stack slot.",null,null],[12,"kind","","The kind of stack slot.",149,null],[12,"size","","Size of stack slot in bytes.",149,null],[12,"offset","","Offset of stack slot relative to the stack pointer in the…",149,null],[3,"StackLayoutInfo","","Stack frame layout information.",null,null],[12,"frame_size","","The total size of the stack frame.",150,null],[12,"inbound_args_size","","The total size of the stack frame for inbound arguments…",150,null],[3,"StackSlots","","Stack frame manager.",null,null],[12,"layout_info","","Layout information computed from `layout_stack`.",151,null],[4,"StackSlotKind","","The kind of a stack slot.",null,null],[13,"SpillSlot","","A spill slot. This is a stack slot created by the register…",152,null],[13,"ExplicitSlot","","An explicit stack slot. This is a chunk of stack memory…",152,null],[13,"IncomingArg","","An incoming function argument.",152,null],[13,"OutgoingArg","","An outgoing function argument.",152,null],[13,"StructReturnSlot","","Space allocated in the caller's frame for the callee's…",152,null],[13,"EmergencySlot","","An emergency spill slot.",152,null],[6,"StackSize","","The size of an object on the stack, or the size of a stack…",null,null],[6,"StackOffset","","A stack offset.",null,null],[11,"new","","Create a stack slot with the specified byte size.",149,[[["stackslotkind"],["stacksize"]],["self"]]],[11,"alignment","","Get the alignment in bytes of this stack slot given the…",149,[[["stacksize"],["self"]],["stacksize"]]],[11,"new","","Create an empty stack slot manager.",151,[[],["self"]]],[11,"clear","","Clear out everything.",151,[[["self"]]]],[11,"push","","Allocate a new stack slot.",151,[[["self"],["stackslotdata"]],["stackslot"]]],[11,"is_valid","","Check if `ss` is a valid stack slot reference.",151,[[["self"],["stackslot"]],["bool"]]],[11,"iter","","Get an iterator over all the stack slot keys.",151,[[["self"]],[["stackslotdata"],["iter",["stackslot","stackslotdata"]],["stackslot"]]]],[11,"iter_mut","","Get an iterator over all the stack slot keys, mutable…",151,[[["self"]],[["itermut",["stackslot","stackslotdata"]],["stackslot"],["stackslotdata"]]]],[11,"values","","Get an iterator over all the stack slot records.",151,[[["self"]],[["stackslotdata"],["iter",["stackslotdata"]]]]],[11,"values_mut","","Get an iterator over all the stack slot records, mutable…",151,[[["self"]],[["itermut",["stackslotdata"]],["stackslotdata"]]]],[11,"keys","","Get an iterator over all the stack slot keys.",151,[[["self"]],[["stackslot"],["keys",["stackslot"]]]]],[11,"next_key","","Get a reference to the next stack slot that would be…",151,[[["self"]],["stackslot"]]],[11,"make_spill_slot","","Create a new spill slot for spilling values of type `ty`.",151,[[["self"],["type"]],["stackslot"]]],[11,"make_incoming_arg","","Create a stack slot representing an incoming function…",151,[[["self"],["type"],["stackoffset"]],["stackslot"]]],[11,"get_outgoing_arg","","Get a stack slot representing an outgoing argument.",151,[[["self"],["type"],["stackoffset"]],["stackslot"]]],[11,"get_emergency_slot","","Get an emergency spill slot that can be used to store a…",151,[[["self"],["type"]],["stackslot"]]],[0,"types","cranelift_codegen::ir","Common types for the Cranelift code generator.",null,null],[3,"Type","cranelift_codegen::ir::types","The type of an SSA value.",null,null],[17,"INVALID","","Not a valid type. Can't be loaded or stored. Can't be part…",null,null],[17,"IFLAGS","","CPU flags representing the result of an integer…",null,null],[17,"FFLAGS","","CPU flags representing the result of a floating point…",null,null],[17,"B1","","A boolean type with 1 bits.",null,null],[17,"B8","","A boolean type with 8 bits.",null,null],[17,"B16","","A boolean type with 16 bits.",null,null],[17,"B32","","A boolean type with 32 bits.",null,null],[17,"B64","","A boolean type with 64 bits.",null,null],[17,"B128","","A boolean type with 128 bits.",null,null],[17,"I8","","An integer type with 8 bits. WARNING: arithmetic on 8bit…",null,null],[17,"I16","","An integer type with 16 bits. WARNING: arithmetic on 16bit…",null,null],[17,"I32","","An integer type with 32 bits.",null,null],[17,"I64","","An integer type with 64 bits.",null,null],[17,"I128","","An integer type with 128 bits.",null,null],[17,"F32","","A 32-bit floating point type represented in the IEEE…",null,null],[17,"F64","","A 64-bit floating point type represented in the IEEE…",null,null],[17,"R32","","An opaque reference type with 32 bits.",null,null],[17,"R64","","An opaque reference type with 64 bits.",null,null],[17,"B8X8","","A SIMD vector with 8 lanes containing a `b8` each.",null,null],[17,"B16X4","","A SIMD vector with 4 lanes containing a `b16` each.",null,null],[17,"B32X2","","A SIMD vector with 2 lanes containing a `b32` each.",null,null],[17,"I8X8","","A SIMD vector with 8 lanes containing a `i8` each.",null,null],[17,"I16X4","","A SIMD vector with 4 lanes containing a `i16` each.",null,null],[17,"I32X2","","A SIMD vector with 2 lanes containing a `i32` each.",null,null],[17,"F32X2","","A SIMD vector with 2 lanes containing a `f32` each.",null,null],[17,"B8X16","","A SIMD vector with 16 lanes containing a `b8` each.",null,null],[17,"B16X8","","A SIMD vector with 8 lanes containing a `b16` each.",null,null],[17,"B32X4","","A SIMD vector with 4 lanes containing a `b32` each.",null,null],[17,"B64X2","","A SIMD vector with 2 lanes containing a `b64` each.",null,null],[17,"I8X16","","A SIMD vector with 16 lanes containing a `i8` each.",null,null],[17,"I16X8","","A SIMD vector with 8 lanes containing a `i16` each.",null,null],[17,"I32X4","","A SIMD vector with 4 lanes containing a `i32` each.",null,null],[17,"I64X2","","A SIMD vector with 2 lanes containing a `i64` each.",null,null],[17,"F32X4","","A SIMD vector with 4 lanes containing a `f32` each.",null,null],[17,"F64X2","","A SIMD vector with 2 lanes containing a `f64` each.",null,null],[17,"B8X32","","A SIMD vector with 32 lanes containing a `b8` each.",null,null],[17,"B16X16","","A SIMD vector with 16 lanes containing a `b16` each.",null,null],[17,"B32X8","","A SIMD vector with 8 lanes containing a `b32` each.",null,null],[17,"B64X4","","A SIMD vector with 4 lanes containing a `b64` each.",null,null],[17,"B128X2","","A SIMD vector with 2 lanes containing a `b128` each.",null,null],[17,"I8X32","","A SIMD vector with 32 lanes containing a `i8` each.",null,null],[17,"I16X16","","A SIMD vector with 16 lanes containing a `i16` each.",null,null],[17,"I32X8","","A SIMD vector with 8 lanes containing a `i32` each.",null,null],[17,"I64X4","","A SIMD vector with 4 lanes containing a `i64` each.",null,null],[17,"I128X2","","A SIMD vector with 2 lanes containing a `i128` each.",null,null],[17,"F32X8","","A SIMD vector with 8 lanes containing a `f32` each.",null,null],[17,"F64X4","","A SIMD vector with 4 lanes containing a `f64` each.",null,null],[17,"B8X64","","A SIMD vector with 64 lanes containing a `b8` each.",null,null],[17,"B16X32","","A SIMD vector with 32 lanes containing a `b16` each.",null,null],[17,"B32X16","","A SIMD vector with 16 lanes containing a `b32` each.",null,null],[17,"B64X8","","A SIMD vector with 8 lanes containing a `b64` each.",null,null],[17,"B128X4","","A SIMD vector with 4 lanes containing a `b128` each.",null,null],[17,"I8X64","","A SIMD vector with 64 lanes containing a `i8` each.",null,null],[17,"I16X32","","A SIMD vector with 32 lanes containing a `i16` each.",null,null],[17,"I32X16","","A SIMD vector with 16 lanes containing a `i32` each.",null,null],[17,"I64X8","","A SIMD vector with 8 lanes containing a `i64` each.",null,null],[17,"I128X4","","A SIMD vector with 4 lanes containing a `i128` each.",null,null],[17,"F32X16","","A SIMD vector with 16 lanes containing a `f32` each.",null,null],[17,"F64X8","","A SIMD vector with 8 lanes containing a `f64` each.",null,null],[11,"lane_type","","Get the lane type of this SIMD vector type.",153,[[],["self"]]],[11,"lane_of","","The type transformation that returns the lane type of a…",153,[[],["self"]]],[11,"log2_lane_bits","","Get log_2 of the number of bits in a lane.",153,[[],["u8"]]],[11,"lane_bits","","Get the number of bits in a lane.",153,[[],["u8"]]],[11,"int","","Get an integer type with the requested number of bits.",153,[[["u16"]],["option"]]],[11,"as_bool_pedantic","","Get a type with the same number of lanes as this type, but…",153,[[],["self"]]],[11,"as_bool","","Get a type with the same number of lanes as this type, but…",153,[[],["self"]]],[11,"half_width","","Get a type with the same number of lanes as this type, but…",153,[[],["option"]]],[11,"double_width","","Get a type with the same number of lanes as this type, but…",153,[[],["option"]]],[11,"is_invalid","","Is this the INVALID type?",153,[[],["bool"]]],[11,"is_special","","Is this a special type?",153,[[],["bool"]]],[11,"is_lane","","Is this a lane type?",153,[[],["bool"]]],[11,"is_vector","","Is this a SIMD vector type?",153,[[],["bool"]]],[11,"is_bool","","Is this a scalar boolean type?",153,[[],["bool"]]],[11,"is_int","","Is this a scalar integer type?",153,[[],["bool"]]],[11,"is_float","","Is this a scalar floating point type?",153,[[],["bool"]]],[11,"is_flags","","Is this a CPU flags type?",153,[[],["bool"]]],[11,"is_ref","","Is this a ref type?",153,[[],["bool"]]],[11,"log2_lane_count","","Get log_2 of the number of lanes in this SIMD vector type.",153,[[],["u8"]]],[11,"lane_count","","Get the number of lanes in this SIMD vector type.",153,[[],["u16"]]],[11,"bits","","Get the total number of bits used to represent this type.",153,[[],["u16"]]],[11,"bytes","","Get the number of bytes used to store this type in memory.",153,[[],["u32"]]],[11,"by","","Get a SIMD vector type with `n` times more lanes than this…",153,[[["u16"]],["option"]]],[11,"half_vector","","Get a SIMD vector with half the number of lanes.",153,[[],["option"]]],[11,"index","","Index of this type, for use with hash tables etc.",153,[[],["usize"]]],[11,"wider_or_equal","","True iff:",153,[[],["bool"]]],[11,"triple_pointer_type","","Return the pointer type for the given target triple.",153,[[["triple"]],["self"]]],[11,"is_assigned","cranelift_codegen::ir","Is this an assigned location? (That is, not `Unassigned`).",54,[[],["bool"]]],[11,"unwrap_reg","","Get the register unit of this location, or panic.",54,[[],["regunit"]]],[11,"unwrap_stack","","Get the stack slot of this location, or panic.",54,[[],["stackslot"]]],[11,"display","","Return an object that can display this value location,…",54,[[["option",["reginfo"]],["into",["option"]]],["displayvalueloc"]]],[11,"is_assigned","","Is this an assigned location? (That is, not `Unassigned`).",53,[[],["bool"]]],[11,"is_reg","","Is this a register location?",53,[[],["bool"]]],[11,"is_stack","","Is this a stack location?",53,[[],["bool"]]],[11,"display","","Return an object that can display this argument location,…",53,[[["option",["reginfo"]],["into",["option"]]],["displayargumentloc"]]],[6,"FrameLayoutChanges","","Set of frame layout changes.",null,null],[6,"ValueLocations","","Map of value locations.",null,null],[6,"JumpTables","","Map of jump tables.",null,null],[6,"InstEncodings","","Map of instruction encodings.",null,null],[6,"BlockOffsets","","Code offsets for blocks.",null,null],[6,"JumpTableOffsets","","Code offsets for Jump Tables.",null,null],[6,"SourceLocs","","Source locations for instructions.",null,null],[8,"InstBuilder","","Convenience methods for building instructions.",null,null],[11,"jump","","Jump.",154,[[["block"]],["inst"]]],[11,"fallthrough","","Fall through to the next block.",154,[[["block"]],["inst"]]],[11,"brz","","Branch when zero.",154,[[["value"],["block"]],["inst"]]],[11,"brnz","","Branch when non-zero.",154,[[["value"],["block"]],["inst"]]],[11,"br_icmp","","Compare scalar integers and branch.",154,[[["intcc"],["value"],["into",["intcc"]],["block"]],["inst"]]],[11,"brif","","Branch when condition is true in integer CPU flags.",154,[[["intcc"],["value"],["into",["intcc"]],["block"]],["inst"]]],[11,"brff","","Branch when condition is true in floating point CPU flags.",154,[[["floatcc"],["value"],["into",["floatcc"]],["block"]],["inst"]]],[11,"br_table","","Indirect branch via jump table.",154,[[["value"],["jumptable"],["block"]],["inst"]]],[11,"jump_table_entry","","Get an entry from a jump table.",154,[[["into",["uimm8"]],["jumptable"],["value"],["uimm8"]],["value"]]],[11,"jump_table_base","","Get the absolute base address of a jump table.",154,[[["type"],["jumptable"]],["value"]]],[11,"indirect_jump_table_br","","Branch indirectly via a jump table entry.",154,[[["value"],["jumptable"]],["inst"]]],[11,"debugtrap","","Encodes an assembly debug trap.",154,[[],["inst"]]],[11,"trap","","Terminate execution unconditionally.",154,[[["into",["trapcode"]],["trapcode"]],["inst"]]],[11,"trapz","","Trap when zero.",154,[[["value"],["into",["trapcode"]],["trapcode"]],["inst"]]],[11,"resumable_trap","","A resumable trap.",154,[[["into",["trapcode"]],["trapcode"]],["inst"]]],[11,"trapnz","","Trap when non-zero.",154,[[["value"],["into",["trapcode"]],["trapcode"]],["inst"]]],[11,"trapif","","Trap when condition is true in integer CPU flags.",154,[[["intcc"],["trapcode"],["value"],["into",["intcc"]],["into",["trapcode"]]],["inst"]]],[11,"trapff","","Trap when condition is true in floating point CPU flags.",154,[[["trapcode"],["floatcc"],["value"],["into",["floatcc"]],["into",["trapcode"]]],["inst"]]],[11,"return_","","Return from the function.",154,[[],["inst"]]],[11,"fallthrough_return","","Return from the function by fallthrough.",154,[[],["inst"]]],[11,"call","","Direct function call.",154,[[["funcref"]],["inst"]]],[11,"call_indirect","","Indirect function call.",154,[[["value"],["sigref"]],["inst"]]],[11,"func_addr","","Get the address of a function.",154,[[["type"],["funcref"]],["value"]]],[11,"splat","","Vector splat.",154,[[["value"],["type"]],["value"]]],[11,"swizzle","","Vector swizzle.",154,[[["value"],["type"]],["value"]]],[11,"insertlane","","Insert `y` as lane `Idx` in x.",154,[[["into",["uimm8"]],["value"],["uimm8"]],["value"]]],[11,"extractlane","","Extract lane `Idx` from `x`.",154,[[["value"],["into",["uimm8"]],["uimm8"]],["value"]]],[11,"imin","","Signed integer minimum.",154,[[["value"]],["value"]]],[11,"umin","","Unsigned integer minimum.",154,[[["value"]],["value"]]],[11,"imax","","Signed integer maximum.",154,[[["value"]],["value"]]],[11,"umax","","Unsigned integer maximum.",154,[[["value"]],["value"]]],[11,"avg_round","","Unsigned average with rounding: `a := (x + y + 1) // 2`",154,[[["value"]],["value"]]],[11,"load","","Load from memory at `p + Offset`.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["type"],["offset32"]],["value"]]],[11,"load_complex","","Load from memory at `sum(args) + Offset`.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["type"],["offset32"]],["value"]]],[11,"store","","Store `x` to memory at `p + Offset`.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["offset32"]],["inst"]]],[11,"store_complex","","Store `x` to memory at `sum(args) + Offset`.",154,[[["memflags"],["into",["memflags"]],["value"],["into",["offset32"]],["offset32"]],["inst"]]],[11,"uload8","","Load 8 bits from memory at `p + Offset` and zero-extend.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["type"],["offset32"]],["value"]]],[11,"uload8_complex","","Load 8 bits from memory at `sum(args) + Offset` and…",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["type"],["offset32"]],["value"]]],[11,"sload8","","Load 8 bits from memory at `p + Offset` and sign-extend.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["type"],["offset32"]],["value"]]],[11,"sload8_complex","","Load 8 bits from memory at `sum(args) + Offset` and…",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["type"],["offset32"]],["value"]]],[11,"istore8","","Store the low 8 bits of `x` to memory at `p + Offset`.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["offset32"]],["inst"]]],[11,"istore8_complex","","Store the low 8 bits of `x` to memory at `sum(args) +…",154,[[["memflags"],["into",["memflags"]],["value"],["into",["offset32"]],["offset32"]],["inst"]]],[11,"uload16","","Load 16 bits from memory at `p + Offset` and zero-extend.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["type"],["offset32"]],["value"]]],[11,"uload16_complex","","Load 16 bits from memory at `sum(args) + Offset` and…",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["type"],["offset32"]],["value"]]],[11,"sload16","","Load 16 bits from memory at `p + Offset` and sign-extend.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["type"],["offset32"]],["value"]]],[11,"sload16_complex","","Load 16 bits from memory at `sum(args) + Offset` and…",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["type"],["offset32"]],["value"]]],[11,"istore16","","Store the low 16 bits of `x` to memory at `p + Offset`.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["offset32"]],["inst"]]],[11,"istore16_complex","","Store the low 16 bits of `x` to memory at `sum(args) +…",154,[[["memflags"],["into",["memflags"]],["value"],["into",["offset32"]],["offset32"]],["inst"]]],[11,"uload32","","Load 32 bits from memory at `p + Offset` and zero-extend.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["offset32"]],["value"]]],[11,"uload32_complex","","Load 32 bits from memory at `sum(args) + Offset` and…",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["offset32"]],["value"]]],[11,"sload32","","Load 32 bits from memory at `p + Offset` and sign-extend.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["offset32"]],["value"]]],[11,"sload32_complex","","Load 32 bits from memory at `sum(args) + Offset` and…",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["offset32"]],["value"]]],[11,"istore32","","Store the low 32 bits of `x` to memory at `p + Offset`.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["offset32"]],["inst"]]],[11,"istore32_complex","","Store the low 32 bits of `x` to memory at `sum(args) +…",154,[[["memflags"],["into",["memflags"]],["value"],["into",["offset32"]],["offset32"]],["inst"]]],[11,"stack_load","","Load a value from a stack slot at the constant offset.",154,[[["into",["offset32"]],["type"],["stackslot"],["offset32"]],["value"]]],[11,"stack_store","","Store a value to a stack slot at a constant offset.",154,[[["into",["offset32"]],["value"],["stackslot"],["offset32"]],["inst"]]],[11,"stack_addr","","Get the address of a stack slot.",154,[[["into",["offset32"]],["type"],["stackslot"],["offset32"]],["value"]]],[11,"global_value","","Compute the value of global GV.",154,[[["type"],["globalvalue"]],["value"]]],[11,"symbol_value","","Compute the value of global GV, which is a symbolic value.",154,[[["type"],["globalvalue"]],["value"]]],[11,"tls_value","","Compute the value of global GV, which is a TLS (thread…",154,[[["type"],["globalvalue"]],["value"]]],[11,"heap_addr","","Bounds check and compute absolute address of heap memory.",154,[[["into",["uimm32"]],["value"],["type"],["heap"],["uimm32"]],["value"]]],[11,"get_pinned_reg","","Gets the content of the pinned register, when it's enabled.",154,[[["type"]],["value"]]],[11,"set_pinned_reg","","Sets the content of the pinned register, when it's enabled.",154,[[["value"]],["inst"]]],[11,"table_addr","","Bounds check and compute absolute address of a table entry.",154,[[["into",["offset32"]],["table"],["type"],["value"],["offset32"]],["value"]]],[11,"iconst","","Integer constant.",154,[[["type"],["into",["imm64"]],["imm64"]],["value"]]],[11,"f32const","","Floating point constant.",154,[[["into",["ieee32"]],["ieee32"]],["value"]]],[11,"f64const","","Floating point constant.",154,[[["into",["ieee64"]],["ieee64"]],["value"]]],[11,"bconst","","Boolean constant.",154,[[["bool"],["type"],["into",["bool"]]],["value"]]],[11,"vconst","","SIMD vector constant.",154,[[["type"],["into",["constant"]],["constant"]],["value"]]],[11,"shuffle","","SIMD vector shuffle.",154,[[["value"],["immediate"],["into",["immediate"]]],["value"]]],[11,"null","","Null constant value for reference types.",154,[[["type"]],["value"]]],[11,"nop","","Just a dummy instruction.",154,[[],["inst"]]],[11,"select","","Conditional select.",154,[[["value"]],["value"]]],[11,"selectif","","Conditional select, dependent on integer condition codes.",154,[[["intcc"],["value"],["type"],["into",["intcc"]]],["value"]]],[11,"bitselect","","Conditional select of bits.",154,[[["value"]],["value"]]],[11,"copy","","Register-register copy.",154,[[["value"]],["value"]]],[11,"spill","","Spill a register value to a stack slot.",154,[[["value"]],["value"]]],[11,"fill","","Load a register value from a stack slot.",154,[[["value"]],["value"]]],[11,"fill_nop","","This is identical to `fill`, except it has no encoding,…",154,[[["value"]],["value"]]],[11,"regmove","","Temporarily divert `x` from `src` to `dst`.",154,[[["into",["regunit"]],["value"],["regunit"]],["inst"]]],[11,"copy_special","","Copies the contents of ''src'' register to ''dst'' register.",154,[[["into",["regunit"]],["regunit"]],["inst"]]],[11,"copy_to_ssa","","Copies the contents of ''src'' register to ''a'' SSA name.",154,[[["into",["regunit"]],["type"],["regunit"]],["value"]]],[11,"copy_nop","","Stack-slot-to-the-same-stack-slot copy, which is…",154,[[["value"]],["value"]]],[11,"adjust_sp_down","","Subtracts `delta` offset value from the stack pointer…",154,[[["value"]],["inst"]]],[11,"adjust_sp_up_imm","","Adds `Offset` immediate offset value to the stack pointer…",154,[[["into",["imm64"]],["imm64"]],["inst"]]],[11,"adjust_sp_down_imm","","Subtracts `Offset` immediate offset value from the stack…",154,[[["into",["imm64"]],["imm64"]],["inst"]]],[11,"ifcmp_sp","","Compare `addr` with the stack pointer and set the CPU flags.",154,[[["value"]],["value"]]],[11,"regspill","","Temporarily divert `x` from `src` to `SS`.",154,[[["into",["regunit"]],["value"],["stackslot"],["regunit"]],["inst"]]],[11,"regfill","","Temporarily divert `x` from `SS` to `dst`.",154,[[["into",["regunit"]],["value"],["stackslot"],["regunit"]],["inst"]]],[11,"safepoint","","This instruction will provide live reference values at a…",154,[[],["inst"]]],[11,"vsplit","","Split a vector into two halves.",154,[[["value"]]]],[11,"vconcat","","Vector concatenation.",154,[[["value"]],["value"]]],[11,"vselect","","Vector lane select.",154,[[["value"]],["value"]]],[11,"vany_true","","Reduce a vector to a scalar boolean.",154,[[["value"]],["value"]]],[11,"vall_true","","Reduce a vector to a scalar boolean.",154,[[["value"]],["value"]]],[11,"icmp","","Integer comparison.",154,[[["intcc"],["value"],["into",["intcc"]]],["value"]]],[11,"icmp_imm","","Compare scalar integer to a constant.",154,[[["into",["imm64"]],["intcc"],["imm64"],["value"],["into",["intcc"]]],["value"]]],[11,"ifcmp","","Compare scalar integers and return flags.",154,[[["value"]],["value"]]],[11,"ifcmp_imm","","Compare scalar integer to a constant and return flags.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"iadd","","Wrapping integer addition: `a := x + y \\pmod{2^B}`.",154,[[["value"]],["value"]]],[11,"uadd_sat","","Add with unsigned saturation.",154,[[["value"]],["value"]]],[11,"sadd_sat","","Add with signed saturation.",154,[[["value"]],["value"]]],[11,"isub","","Wrapping integer subtraction: `a := x - y \\pmod{2^B}`.",154,[[["value"]],["value"]]],[11,"usub_sat","","Subtract with unsigned saturation.",154,[[["value"]],["value"]]],[11,"ssub_sat","","Subtract with signed saturation.",154,[[["value"]],["value"]]],[11,"ineg","","Integer negation: `a := -x \\pmod{2^B}`.",154,[[["value"]],["value"]]],[11,"imul","","Wrapping integer multiplication: `a := x y \\pmod{2^B}`.",154,[[["value"]],["value"]]],[11,"umulhi","","Unsigned integer multiplication, producing the high half…",154,[[["value"]],["value"]]],[11,"smulhi","","Signed integer multiplication, producing the high half of…",154,[[["value"]],["value"]]],[11,"udiv","","Unsigned integer division: `a := \\lfloor {x \\over y}…",154,[[["value"]],["value"]]],[11,"sdiv","","Signed integer division rounded toward zero: `a :=…",154,[[["value"]],["value"]]],[11,"urem","","Unsigned integer remainder.",154,[[["value"]],["value"]]],[11,"srem","","Signed integer remainder. The result has the sign of the…",154,[[["value"]],["value"]]],[11,"iadd_imm","","Add immediate integer.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"imul_imm","","Integer multiplication by immediate constant.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"udiv_imm","","Unsigned integer division by an immediate constant.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"sdiv_imm","","Signed integer division by an immediate constant.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"urem_imm","","Unsigned integer remainder with immediate divisor.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"srem_imm","","Signed integer remainder with immediate divisor.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"irsub_imm","","Immediate reverse wrapping subtraction: `a := Y - x…",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"iadd_cin","","Add integers with carry in.",154,[[["value"]],["value"]]],[11,"iadd_ifcin","","Add integers with carry in.",154,[[["value"]],["value"]]],[11,"iadd_cout","","Add integers with carry out.",154,[[["value"]]]],[11,"iadd_ifcout","","Add integers with carry out.",154,[[["value"]]]],[11,"iadd_carry","","Add integers with carry in and out.",154,[[["value"]]]],[11,"iadd_ifcarry","","Add integers with carry in and out.",154,[[["value"]]]],[11,"isub_bin","","Subtract integers with borrow in.",154,[[["value"]],["value"]]],[11,"isub_ifbin","","Subtract integers with borrow in.",154,[[["value"]],["value"]]],[11,"isub_bout","","Subtract integers with borrow out.",154,[[["value"]]]],[11,"isub_ifbout","","Subtract integers with borrow out.",154,[[["value"]]]],[11,"isub_borrow","","Subtract integers with borrow in and out.",154,[[["value"]]]],[11,"isub_ifborrow","","Subtract integers with borrow in and out.",154,[[["value"]]]],[11,"band","","Bitwise and.",154,[[["value"]],["value"]]],[11,"bor","","Bitwise or.",154,[[["value"]],["value"]]],[11,"bxor","","Bitwise xor.",154,[[["value"]],["value"]]],[11,"bnot","","Bitwise not.",154,[[["value"]],["value"]]],[11,"band_not","","Bitwise and not.",154,[[["value"]],["value"]]],[11,"bor_not","","Bitwise or not.",154,[[["value"]],["value"]]],[11,"bxor_not","","Bitwise xor not.",154,[[["value"]],["value"]]],[11,"band_imm","","Bitwise and with immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"bor_imm","","Bitwise or with immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"bxor_imm","","Bitwise xor with immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"rotl","","Rotate left.",154,[[["value"]],["value"]]],[11,"rotr","","Rotate right.",154,[[["value"]],["value"]]],[11,"rotl_imm","","Rotate left by immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"rotr_imm","","Rotate right by immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"ishl","","Integer shift left. Shift the bits in `x` towards the MSB…",154,[[["value"]],["value"]]],[11,"ushr","","Unsigned shift right. Shift bits in `x` towards the LSB by…",154,[[["value"]],["value"]]],[11,"sshr","","Signed shift right. Shift bits in `x` towards the LSB by…",154,[[["value"]],["value"]]],[11,"ishl_imm","","Integer shift left by immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"ushr_imm","","Unsigned shift right by immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"sshr_imm","","Signed shift right by immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"bitrev","","Reverse the bits of a integer.",154,[[["value"]],["value"]]],[11,"clz","","Count leading zero bits.",154,[[["value"]],["value"]]],[11,"cls","","Count leading sign bits.",154,[[["value"]],["value"]]],[11,"ctz","","Count trailing zeros.",154,[[["value"]],["value"]]],[11,"popcnt","","Population count",154,[[["value"]],["value"]]],[11,"fcmp","","Floating point comparison.",154,[[["floatcc"],["value"],["into",["floatcc"]]],["value"]]],[11,"ffcmp","","Floating point comparison returning flags.",154,[[["value"]],["value"]]],[11,"fadd","","Floating point addition.",154,[[["value"]],["value"]]],[11,"fsub","","Floating point subtraction.",154,[[["value"]],["value"]]],[11,"fmul","","Floating point multiplication.",154,[[["value"]],["value"]]],[11,"fdiv","","Floating point division.",154,[[["value"]],["value"]]],[11,"sqrt","","Floating point square root.",154,[[["value"]],["value"]]],[11,"fma","","Floating point fused multiply-and-add.",154,[[["value"]],["value"]]],[11,"fneg","","Floating point negation.",154,[[["value"]],["value"]]],[11,"fabs","","Floating point absolute value.",154,[[["value"]],["value"]]],[11,"fcopysign","","Floating point copy sign.",154,[[["value"]],["value"]]],[11,"fmin","","Floating point minimum, propagating NaNs.",154,[[["value"]],["value"]]],[11,"fmax","","Floating point maximum, propagating NaNs.",154,[[["value"]],["value"]]],[11,"ceil","","Round floating point round to integral, towards positive…",154,[[["value"]],["value"]]],[11,"floor","","Round floating point round to integral, towards negative…",154,[[["value"]],["value"]]],[11,"trunc","","Round floating point round to integral, towards zero.",154,[[["value"]],["value"]]],[11,"nearest","","Round floating point round to integral, towards nearest…",154,[[["value"]],["value"]]],[11,"is_null","","Reference verification.",154,[[["value"]],["value"]]],[11,"is_invalid","","Reference verification.",154,[[["value"]],["value"]]],[11,"trueif","","Test integer CPU flags for a specific condition.",154,[[["value"],["into",["intcc"]],["intcc"]],["value"]]],[11,"trueff","","Test floating point CPU flags for a specific condition.",154,[[["floatcc"],["value"],["into",["floatcc"]]],["value"]]],[11,"bitcast","","Reinterpret the bits in `x` as a different type.",154,[[["value"],["type"]],["value"]]],[11,"raw_bitcast","","Cast the bits in `x` as a different type of the same bit…",154,[[["value"],["type"]],["value"]]],[11,"scalar_to_vector","","Scalar To Vector -- move a value out of a scalar register…",154,[[["value"],["type"]],["value"]]],[11,"breduce","","Convert `x` to a smaller boolean type in the…",154,[[["value"],["type"]],["value"]]],[11,"bextend","","Convert `x` to a larger boolean type in the…",154,[[["value"],["type"]],["value"]]],[11,"bint","","Convert `x` to an integer.",154,[[["value"],["type"]],["value"]]],[11,"bmask","","Convert `x` to an integer mask.",154,[[["value"],["type"]],["value"]]],[11,"ireduce","","Convert `x` to a smaller integer type by dropping high bits.",154,[[["value"],["type"]],["value"]]],[11,"uextend","","Convert `x` to a larger integer type by zero-extending.",154,[[["value"],["type"]],["value"]]],[11,"sextend","","Convert `x` to a larger integer type by sign-extending.",154,[[["value"],["type"]],["value"]]],[11,"fpromote","","Convert `x` to a larger floating point format.",154,[[["value"],["type"]],["value"]]],[11,"fdemote","","Convert `x` to a smaller floating point format.",154,[[["value"],["type"]],["value"]]],[11,"fcvt_to_uint","","Convert floating point to unsigned integer.",154,[[["value"],["type"]],["value"]]],[11,"fcvt_to_uint_sat","","Convert floating point to unsigned integer as fcvt_to_uint…",154,[[["value"],["type"]],["value"]]],[11,"fcvt_to_sint","","Convert floating point to signed integer.",154,[[["value"],["type"]],["value"]]],[11,"fcvt_to_sint_sat","","Convert floating point to signed integer as fcvt_to_sint…",154,[[["value"],["type"]],["value"]]],[11,"fcvt_from_uint","","Convert unsigned integer to floating point.",154,[[["value"],["type"]],["value"]]],[11,"fcvt_from_sint","","Convert signed integer to floating point.",154,[[["value"],["type"]],["value"]]],[11,"isplit","","Split an integer into low and high parts.",154,[[["value"]]]],[11,"iconcat","","Concatenate low and high bits to form a larger integer type.",154,[[["value"]],["value"]]],[11,"x86_udivmodx","","Extended unsigned division.",154,[[["value"]]]],[11,"x86_sdivmodx","","Extended signed division.",154,[[["value"]]]],[11,"x86_umulx","","Unsigned integer multiplication, producing a double-length…",154,[[["value"]]]],[11,"x86_smulx","","Signed integer multiplication, producing a double-length…",154,[[["value"]]]],[11,"x86_cvtt2si","","Convert with truncation floating point to signed integer.",154,[[["value"],["type"]],["value"]]],[11,"x86_fmin","","Floating point minimum with x86 semantics.",154,[[["value"]],["value"]]],[11,"x86_fmax","","Floating point maximum with x86 semantics.",154,[[["value"]],["value"]]],[11,"x86_push","","Pushes a value onto the stack.",154,[[["value"]],["inst"]]],[11,"x86_pop","","Pops a value from the stack.",154,[[["type"]],["value"]]],[11,"x86_bsr","","Bit Scan Reverse -- returns the bit-index of the most…",154,[[["value"]]]],[11,"x86_bsf","","Bit Scan Forwards -- returns the bit-index of the least…",154,[[["value"]]]],[11,"x86_pshufd","","Packed Shuffle Doublewords -- copies data from either…",154,[[["value"],["into",["uimm8"]],["uimm8"]],["value"]]],[11,"x86_pshufb","","Packed Shuffle Bytes -- re-orders data in an extended…",154,[[["value"]],["value"]]],[11,"x86_pextr","","Extract lane `Idx` from `x`. The lane index, `Idx`, is an…",154,[[["value"],["into",["uimm8"]],["uimm8"]],["value"]]],[11,"x86_pinsr","","Insert `y` into `x` at lane `Idx`. The lane index, `Idx`,…",154,[[["into",["uimm8"]],["value"],["uimm8"]],["value"]]],[11,"x86_insertps","","Insert a lane of `y` into `x` at using `Idx` to encode…",154,[[["into",["uimm8"]],["value"],["uimm8"]],["value"]]],[11,"x86_movsd","","Move the low 64 bits of the float vector `y` to the low 64…",154,[[["value"]],["value"]]],[11,"x86_movlhps","","Move the low 64 bits of the float vector `y` to the high…",154,[[["value"]],["value"]]],[11,"x86_psll","","Shift Packed Data Left Logical -- This implements the…",154,[[["value"]],["value"]]],[11,"x86_psrl","","Shift Packed Data Right Logical -- This implements the…",154,[[["value"]],["value"]]],[11,"x86_psra","","Shift Packed Data Right Arithmetic -- This implements the…",154,[[["value"]],["value"]]],[11,"x86_ptest","","Logical Compare -- PTEST will set the ZF flag if all bits…",154,[[["value"]],["value"]]],[11,"x86_pmaxs","","Maximum of Packed Signed Integers -- Compare signed…",154,[[["value"]],["value"]]],[11,"x86_pmaxu","","Maximum of Packed Unsigned Integers -- Compare unsigned…",154,[[["value"]],["value"]]],[11,"x86_pmins","","Minimum of Packed Signed Integers -- Compare signed…",154,[[["value"]],["value"]]],[11,"x86_pminu","","Minimum of Packed Unsigned Integers -- Compare unsigned…",154,[[["value"]],["value"]]],[11,"x86_elf_tls_get_addr","","Elf tls get addr -- This implements the GD TLS model for…",154,[[["globalvalue"]],["value"]]],[11,"x86_macho_tls_get_addr","","Mach-O tls get addr -- This implements TLS access for…",154,[[["globalvalue"]],["value"]]],[11,"Binary","","Binary(imms=(), vals=2)",154,[[["opcode"],["type"],["value"]]]],[11,"BinaryImm","","BinaryImm(imms=(imm: ir::immediates::Imm64), vals=1)",154,[[["opcode"],["type"],["imm64"],["value"]]]],[11,"Branch","","Branch(imms=(destination: ir::Block), vals=1)",154,[[["opcode"],["type"],["valuelist"],["block"]]]],[11,"BranchFloat","","BranchFloat(imms=(cond: ir::condcodes::FloatCC,…",154,[[["opcode"],["type"],["floatcc"],["valuelist"],["block"]]]],[11,"BranchIcmp","","BranchIcmp(imms=(cond: ir::condcodes::IntCC, destination:…",154,[[["opcode"],["type"],["intcc"],["valuelist"],["block"]]]],[11,"BranchInt","","BranchInt(imms=(cond: ir::condcodes::IntCC, destination:…",154,[[["opcode"],["type"],["intcc"],["valuelist"],["block"]]]],[11,"BranchTable","","BranchTable(imms=(destination: ir::Block, table:…",154,[[["opcode"],["type"],["jumptable"],["value"],["block"]]]],[11,"BranchTableBase","","BranchTableBase(imms=(table: ir::JumpTable), vals=0)",154,[[["opcode"],["type"],["jumptable"]]]],[11,"BranchTableEntry","","BranchTableEntry(imms=(imm: ir::immediates::Uimm8, table:…",154,[[["opcode"],["type"],["jumptable"],["value"],["uimm8"]]]],[11,"Call","","Call(imms=(func_ref: ir::FuncRef), vals=0)",154,[[["opcode"],["type"],["valuelist"],["funcref"]]]],[11,"CallIndirect","","CallIndirect(imms=(sig_ref: ir::SigRef), vals=1)",154,[[["opcode"],["type"],["sigref"],["valuelist"]]]],[11,"CondTrap","","CondTrap(imms=(code: ir::TrapCode), vals=1)",154,[[["opcode"],["type"],["trapcode"],["value"]]]],[11,"CopySpecial","","CopySpecial(imms=(src: isa::RegUnit, dst: isa::RegUnit),…",154,[[["opcode"],["type"],["regunit"]]]],[11,"CopyToSsa","","CopyToSsa(imms=(src: isa::RegUnit), vals=0)",154,[[["opcode"],["type"],["regunit"]]]],[11,"ExtractLane","","ExtractLane(imms=(lane: ir::immediates::Uimm8), vals=1)",154,[[["opcode"],["type"],["value"],["uimm8"]]]],[11,"FloatCompare","","FloatCompare(imms=(cond: ir::condcodes::FloatCC), vals=2)",154,[[["opcode"],["type"],["value"],["floatcc"]]]],[11,"FloatCond","","FloatCond(imms=(cond: ir::condcodes::FloatCC), vals=1)",154,[[["opcode"],["type"],["value"],["floatcc"]]]],[11,"FloatCondTrap","","FloatCondTrap(imms=(cond: ir::condcodes::FloatCC, code:…",154,[[["opcode"],["type"],["trapcode"],["floatcc"],["value"]]]],[11,"FuncAddr","","FuncAddr(imms=(func_ref: ir::FuncRef), vals=0)",154,[[["opcode"],["type"],["funcref"]]]],[11,"HeapAddr","","HeapAddr(imms=(heap: ir::Heap, imm:…",154,[[["opcode"],["type"],["value"],["uimm32"],["heap"]]]],[11,"IndirectJump","","IndirectJump(imms=(table: ir::JumpTable), vals=1)",154,[[["opcode"],["type"],["jumptable"],["value"]]]],[11,"InsertLane","","InsertLane(imms=(lane: ir::immediates::Uimm8), vals=2)",154,[[["opcode"],["type"],["value"],["uimm8"]]]],[11,"IntCompare","","IntCompare(imms=(cond: ir::condcodes::IntCC), vals=2)",154,[[["opcode"],["type"],["intcc"],["value"]]]],[11,"IntCompareImm","","IntCompareImm(imms=(cond: ir::condcodes::IntCC, imm:…",154,[[["opcode"],["type"],["intcc"],["imm64"],["value"]]]],[11,"IntCond","","IntCond(imms=(cond: ir::condcodes::IntCC), vals=1)",154,[[["opcode"],["type"],["intcc"],["value"]]]],[11,"IntCondTrap","","IntCondTrap(imms=(cond: ir::condcodes::IntCC, code:…",154,[[["opcode"],["type"],["intcc"],["trapcode"],["value"]]]],[11,"IntSelect","","IntSelect(imms=(cond: ir::condcodes::IntCC), vals=3)",154,[[["opcode"],["type"],["intcc"],["value"]]]],[11,"Jump","","Jump(imms=(destination: ir::Block), vals=0)",154,[[["opcode"],["type"],["valuelist"],["block"]]]],[11,"Load","","Load(imms=(flags: ir::MemFlags, offset:…",154,[[["memflags"],["opcode"],["type"],["value"],["offset32"]]]],[11,"LoadComplex","","LoadComplex(imms=(flags: ir::MemFlags, offset:…",154,[[["memflags"],["opcode"],["type"],["valuelist"],["offset32"]]]],[11,"MultiAry","","MultiAry(imms=(), vals=0)",154,[[["opcode"],["type"],["valuelist"]]]],[11,"NullAry","","NullAry(imms=(), vals=0)",154,[[["opcode"],["type"]]]],[11,"RegFill","","RegFill(imms=(src: ir::StackSlot, dst: isa::RegUnit),…",154,[[["opcode"],["type"],["value"],["stackslot"],["regunit"]]]],[11,"RegMove","","RegMove(imms=(src: isa::RegUnit, dst: isa::RegUnit), vals=1)",154,[[["opcode"],["type"],["value"],["regunit"]]]],[11,"RegSpill","","RegSpill(imms=(src: isa::RegUnit, dst: ir::StackSlot),…",154,[[["opcode"],["type"],["value"],["stackslot"],["regunit"]]]],[11,"Shuffle","","Shuffle(imms=(mask: ir::Immediate), vals=2)",154,[[["opcode"],["type"],["value"],["immediate"]]]],[11,"StackLoad","","StackLoad(imms=(stack_slot: ir::StackSlot, offset:…",154,[[["opcode"],["type"],["stackslot"],["offset32"]]]],[11,"StackStore","","StackStore(imms=(stack_slot: ir::StackSlot, offset:…",154,[[["opcode"],["type"],["value"],["stackslot"],["offset32"]]]],[11,"Store","","Store(imms=(flags: ir::MemFlags, offset:…",154,[[["memflags"],["opcode"],["type"],["value"],["offset32"]]]],[11,"StoreComplex","","StoreComplex(imms=(flags: ir::MemFlags, offset:…",154,[[["memflags"],["opcode"],["type"],["valuelist"],["offset32"]]]],[11,"TableAddr","","TableAddr(imms=(table: ir::Table, offset:…",154,[[["opcode"],["type"],["value"],["table"],["offset32"]]]],[11,"Ternary","","Ternary(imms=(), vals=3)",154,[[["opcode"],["type"],["value"]]]],[11,"Trap","","Trap(imms=(code: ir::TrapCode), vals=0)",154,[[["opcode"],["type"],["trapcode"]]]],[11,"Unary","","Unary(imms=(), vals=1)",154,[[["opcode"],["type"],["value"]]]],[11,"UnaryBool","","UnaryBool(imms=(imm: bool), vals=0)",154,[[["opcode"],["type"],["bool"]]]],[11,"UnaryConst","","UnaryConst(imms=(constant_handle: ir::Constant), vals=0)",154,[[["opcode"],["type"],["constant"]]]],[11,"UnaryGlobalValue","","UnaryGlobalValue(imms=(global_value: ir::GlobalValue),…",154,[[["opcode"],["type"],["globalvalue"]]]],[11,"UnaryIeee32","","UnaryIeee32(imms=(imm: ir::immediates::Ieee32), vals=0)",154,[[["opcode"],["type"],["ieee32"]]]],[11,"UnaryIeee64","","UnaryIeee64(imms=(imm: ir::immediates::Ieee64), vals=0)",154,[[["opcode"],["type"],["ieee64"]]]],[11,"UnaryImm","","UnaryImm(imms=(imm: ir::immediates::Imm64), vals=0)",154,[[["opcode"],["type"],["imm64"]]]],[8,"InstBuilderBase","","Base trait for instruction builders.",null,null],[10,"data_flow_graph","","Get an immutable reference to the data flow graph that…",155,[[["self"]],["dataflowgraph"]]],[10,"data_flow_graph_mut","","Get a mutable reference to the data flow graph that will…",155,[[["self"]],["dataflowgraph"]]],[10,"build","","Insert an instruction and return a reference to it,…",155,[[["type"],["instructiondata"]]]],[8,"InstInserterBase","","Base trait for instruction inserters.",null,null],[10,"data_flow_graph","","Get an immutable reference to the data flow graph.",156,[[["self"]],["dataflowgraph"]]],[10,"data_flow_graph_mut","","Get a mutable reference to the data flow graph.",156,[[["self"]],["dataflowgraph"]]],[10,"insert_built_inst","","Insert a new instruction which belongs to the DFG.",156,[[["type"],["inst"]],["dataflowgraph"]]],[8,"ProgramOrder","","Context for ordering program points.",null,null],[10,"cmp","","Compare the program points `a` and `b` relative to this…",157,[[["a"],["self"],["b"]],["ordering"]]],[10,"is_block_gap","","Is the range from `inst` to `block` just the gap between…",157,[[["block"],["self"],["inst"]],["bool"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",158,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",158,[[],["u32"]]],[0,"isa","cranelift_codegen","Instruction Set Architectures.",null,null],[3,"BranchRange","cranelift_codegen::isa","Constraints on the range of a branch instruction.",null,null],[12,"origin","","Offset in bytes from the address of the branch instruction…",159,null],[12,"bits","","Number of bits in the signed byte displacement encoded in…",159,null],[3,"OperandConstraint","","Register constraint for a single value operand or…",null,null],[12,"kind","","The kind of constraint.",160,null],[12,"regclass","","The register class of the operand.",160,null],[3,"RecipeConstraints","","Value operand constraints for an encoding recipe.",null,null],[12,"ins","","Constraints for the instruction's fixed value operands.",161,null],[12,"outs","","Constraints for the instruction's fixed results.",161,null],[12,"fixed_ins","","Are any of the input constraints `FixedReg` or `FixedTied`?",161,null],[12,"fixed_outs","","Are any of the output constraints `FixedReg` or `FixedTied`?",161,null],[12,"tied_ops","","Are any of the input/output constraints `Tied` (but not…",161,null],[12,"clobbers_flags","","Does this instruction clobber the CPU flags?",161,null],[3,"EncInfo","","Information about all the encodings in this ISA.",null,null],[12,"constraints","","Constraints on value operands per recipe.",162,null],[12,"sizing","","Code size information per recipe.",162,null],[12,"names","","Names of encoding recipes.",162,null],[3,"Encoding","","Bits needed to encode an instruction as binary machine code.",null,null],[3,"StackBaseMask","","Bit mask of supported stack bases.",null,null],[12,"0","","",163,null],[3,"StackRef","","A method for referencing a stack slot in the current stack…",null,null],[12,"base","","The base register to use for addressing.",164,null],[12,"offset","","Immediate offset from the base register to the first byte…",164,null],[3,"Builder","","Builder for a `TargetIsa`. Modify the ISA-specific…",null,null],[3,"TargetFrontendConfig","","This struct provides information that a frontend may need…",null,null],[12,"default_call_conv","","The default calling convention of the target.",165,null],[12,"pointer_width","","The pointer width of the target.",165,null],[4,"CallConv","","Calling convention identifiers.",null,null],[13,"Fast","","Best performance, not ABI-stable",166,null],[13,"Cold","","Smallest caller code size, not ABI-stable",166,null],[13,"SystemV","","System V-style convention used on many platforms",166,null],[13,"WindowsFastcall","","Windows \"fastcall\" convention, also used for x64 and ARM",166,null],[13,"BaldrdashSystemV","","SpiderMonkey WebAssembly convention on systems using…",166,null],[13,"BaldrdashWindows","","SpiderMonkey WebAssembly convention on Windows",166,null],[13,"Probestack","","Specialized convention for the probestack function",166,null],[4,"ConstraintKind","","The different kinds of operand constraints.",null,null],[13,"Reg","","This operand or result must be a register from the given…",167,null],[13,"FixedReg","","This operand or result must be a fixed register.",167,null],[13,"Tied","","This result value must use the same register as an input…",167,null],[13,"FixedTied","","This operand must be a fixed register, and it has a tied…",167,null],[13,"Stack","","This operand must be a value in a stack slot.",167,null],[4,"StackBase","","Generic base register for referencing stack slots.",null,null],[13,"SP","","Use the stack pointer.",168,null],[13,"FP","","Use the frame pointer (if one is present).",168,null],[13,"Zone","","Use an explicit zone pointer in a general-purpose register.",168,null],[4,"LookupError","","Describes reason for target lookup failure",null,null],[13,"SupportDisabled","","Support for this target was disabled in the current build.",169,null],[13,"Unsupported","","Support for this target has not yet been implemented.",169,null],[5,"base_size","","Returns the base size of the Recipe, assuming it's fixed.…",null,[[["encoding"],["function"],["regdiversions"],["recipesizing"],["inst"]],["u8"]]],[5,"lookup","","Look for an ISA for the given `triple`. Return a builder…",null,[[["triple"]],[["lookuperror"],["result",["builder","lookuperror"]],["builder"]]]],[5,"lookup_by_name","","Look for a supported ISA with the given `name`. Return a…",null,[[["str"]],[["lookuperror"],["result",["builder","lookuperror"]],["builder"]]]],[11,"triple_default","","Return the default calling convention for the given target…",166,[[["triple"]],["self"]]],[11,"for_libcall","","Returns the calling convention used for libcalls for the…",166,[[["targetisa"]],["self"]]],[11,"extends_windows_fastcall","","Is the calling convention extending the Windows Fastcall…",166,[[],["bool"]]],[11,"extends_baldrdash","","Is the calling convention extending the Baldrdash ABI?",166,[[],["bool"]]],[11,"satisfied","","Check if this operand constraint is satisfied by the given…",160,[[["valueloc"],["self"]],["bool"]]],[11,"satisfied","","Check that these constraints are satisfied by the operands…",161,[[["function"],["regdiversions"],["self"],["inst"]],["bool"]]],[11,"contains","","Determine if this branch range can represent the range…",159,[[["codeoffset"]],["bool"]]],[11,"new","","Create a new `Encoding` containing `(recipe, bits)`.",170,[[["u16"]],["self"]]],[11,"recipe","","Get the recipe number in this encoding.",170,[[],["usize"]]],[11,"bits","","Get the recipe-specific encoding bits.",170,[[],["u16"]]],[11,"is_legal","","Is this a legal encoding, or the default placeholder?",170,[[],["bool"]]],[11,"operand_constraints","","Get the value operand constraints for `enc` if it is a…",162,[[["self"],["encoding"]],[["option",["recipeconstraints"]],["recipeconstraints"]]]],[11,"display","","Create an object that can display an ISA-dependent…",162,[[["self"],["encoding"]],["displayencoding"]]],[11,"byte_size","","Get the size in bytes of `inst`, if it were encoded with…",162,[[["encoding"],["function"],["regdiversions"],["self"],["inst"]],["codeoffset"]]],[11,"branch_range","","Get the branch range that is supported by `enc`, if any.",162,[[["self"],["encoding"]],[["option",["branchrange"]],["branchrange"]]]],[0,"registers","","Data structures describing the registers in an ISA.",null,null],[3,"RegBank","cranelift_codegen::isa::registers","The register units in a target ISA are divided into…",null,null],[12,"name","","The name of this register bank as defined in the ISA's DSL…",171,null],[12,"first_unit","","The first register unit in this bank.",171,null],[12,"units","","The total number of register units in this bank.",171,null],[12,"names","","Array of specially named register units. This array can be…",171,null],[12,"prefix","","Name prefix to use for those register units in the bank…",171,null],[12,"first_toprc","","Index of the first top-level register class in this bank.",171,null],[12,"num_toprcs","","Number of top-level register classes in this bank.",171,null],[12,"pressure_tracking","","Is register pressure tracking enabled for this bank?",171,null],[3,"RegClassData","","Data about a register class.",null,null],[12,"name","","The name of the register class.",172,null],[12,"index","","The index of this class in the ISA's RegInfo description.",172,null],[12,"width","","How many register units to allocate per register.",172,null],[12,"bank","","Index of the register bank this class belongs to.",172,null],[12,"toprc","","Index of the top-level register class contains this one.",172,null],[12,"first","","The first register unit in this class.",172,null],[12,"subclasses","","Bit-mask of sub-classes of this register class, including…",172,null],[12,"mask","","Mask of register units in the class. If `width > 1`, the…",172,null],[12,"info","","The global `RegInfo` instance containing this register…",172,null],[12,"pinned_reg","","The \"pinned\" register of the associated register bank.",172,null],[3,"RegClassIndex","","A small reference to a register class.",null,null],[3,"RegInfo","","Information about the registers in an ISA.",null,null],[12,"banks","","All register banks, ordered by their `first_unit`. The…",173,null],[12,"classes","","All register classes ordered topologically so a sub-class…",173,null],[3,"DisplayRegUnit","","Temporary object that holds enough information to print a…",null,null],[5,"regs_overlap","","Test of two registers overlap.",null,[[["regclass"],["regunit"]],["bool"]]],[6,"RegUnit","","Register units are the smallest units of register…",null,null],[6,"RegClassMask","","A bit mask indexed by register classes.",null,null],[6,"RegUnitMask","","A bit mask indexed by register units.",null,null],[6,"RegClass","","A register class reference.",null,null],[11,"intersect_index","","Get the register class index corresponding to the…",172,[[["regclass"],["self"]],[["regclassindex"],["option",["regclassindex"]]]]],[11,"intersect","","Get the intersection of `self` and `other`.",172,[[["regclass"],["self"]],[["regclass"],["option",["regclass"]]]]],[11,"has_subclass","","Returns true if `other` is a subclass of this register…",172,[[["into",["regclassindex"]],["regclassindex"],["self"]],["bool"]]],[11,"toprc","","Get the top-level register class containing this class.",172,[[["self"]],["regclass"]]],[11,"unit","","Get a specific register unit in this class.",172,[[["self"],["usize"]],["regunit"]]],[11,"contains","","Does this register class contain `regunit`?",172,[[["regunit"],["self"]],["bool"]]],[11,"is_pinned_reg","","If the pinned register is used, is the given regunit the…",172,[[["regunit"],["self"],["bool"]],["bool"]]],[11,"index_of","","Calculate the index of the register inside the class.",172,[[["regunit"],["self"]],["u16"]]],[11,"bank_containing_regunit","","Get the register bank holding `regunit`.",173,[[["regunit"],["self"]],[["option",["regbank"]],["regbank"]]]],[11,"parse_regunit","","Try to parse a regunit name. The name is not expected to…",173,[[["str"],["self"]],[["regunit"],["option",["regunit"]]]]],[11,"display_regunit","","Make a temporary object that can display a register unit.",173,[[["regunit"],["self"]],["displayregunit"]]],[11,"rc","","Get the register class corresponding to `idx`.",173,[[["regclassindex"],["self"]],["regclass"]]],[11,"toprc","","Get the top-level register class containing the `idx` class.",173,[[["regclassindex"],["self"]],["regclass"]]],[11,"masked","cranelift_codegen::isa","Get a reference to the stack slot `ss` using one of the…",164,[[["stackslots"],["stackslot"],["stackbasemask"]],["option"]]],[11,"sp","","Get a reference to `ss` using the stack pointer as a base.",164,[[["stackslots"],["stackslot"]],["self"]]],[11,"contains","","Check if this mask contains the `base` variant.",163,[[["stackbase"]],["bool"]]],[6,"Legalize","","After determining that an instruction doesn't have an…",null,null],[8,"TargetIsa","","Methods that are specialized to a target ISA. Implies a…",null,null],[10,"name","","Get the name of this ISA.",174,[[["self"]],["str"]]],[10,"triple","","Get the target triple that was used to make this trait…",174,[[["self"]],["triple"]]],[10,"flags","","Get the ISA-independent flags that were used to make this…",174,[[["self"]],["flags"]]],[11,"default_call_conv","","Get the default calling convention of this target.",174,[[["self"]],["callconv"]]],[11,"pointer_type","","Get the pointer type of this ISA.",174,[[["self"]],["type"]]],[11,"pointer_width","","Get the width of pointers on this ISA.",174,[[["self"]],["pointerwidth"]]],[11,"pointer_bits","","Get the width of pointers on this ISA, in units of bits.",174,[[["self"]],["u8"]]],[11,"pointer_bytes","","Get the width of pointers on this ISA, in units of bytes.",174,[[["self"]],["u8"]]],[11,"frontend_config","","Get the information needed by frontends producing…",174,[[["self"]],["targetfrontendconfig"]]],[11,"uses_cpu_flags","","Does the CPU implement scalar comparisons using a CPU…",174,[[["self"]],["bool"]]],[11,"uses_complex_addresses","","Does the CPU implement multi-register addressing?",174,[[["self"]],["bool"]]],[10,"register_info","","Get a data structure describing the registers in this ISA.",174,[[["self"]],["reginfo"]]],[10,"legal_encodings","","Returns an iterator over legal encodings for the…",174,[[["instructiondata"],["function"],["self"],["type"]],["encodings"]]],[11,"encode","","Encode an instruction after determining it is legal.",174,[[["function"],["instructiondata"],["self"],["type"]],[["legalize"],["result",["encoding","legalize"]],["encoding"]]]],[10,"encoding_info","","Get a data structure describing the instruction encodings…",174,[[["self"]],["encinfo"]]],[10,"legalize_signature","","Legalize a function signature.",174,[[["cow"],["self"],["bool"]]]],[10,"regclass_for_abi_type","","Get the register class that should be used to represent an…",174,[[["self"],["type"]],["regclass"]]],[10,"allocatable_registers","","Get the set of allocatable registers that can be used when…",174,[[["function"],["self"]],["registerset"]]],[11,"prologue_epilogue","","Compute the stack layout and insert prologue and epilogue…",174,[[["self"],["function"]],["codegenresult"]]],[10,"emit_inst","","Emit binary machine code for a single instruction into the…",174,[[["function"],["regdiversions"],["inst"],["codesink"],["self"]]]],[10,"emit_function_to_memory","","Emit a whole function into memory.",174,[[["memorycodesink"],["function"],["self"]]]],[10,"unsigned_add_overflow_condition","","IntCC condition for Unsigned Addition Overflow (Carry).",174,[[["self"]],["intcc"]]],[10,"unsigned_sub_overflow_condition","","IntCC condition for Unsigned Subtraction Overflow…",174,[[["self"]],["intcc"]]],[11,"emit_unwind_info","","Emit unwind information for the given function.",174,[[["function"],["frameunwindkind"],["self"],["frameunwindsink"]]]],[11,"finish","","Combine the ISA-specific settings with the provided…",175,[[["flags"]],[["box",["targetisa"]],["targetisa"]]]],[11,"pointer_type","","Get the pointer type of this target.",165,[[],["type"]]],[11,"pointer_bits","","Get the width of pointers on this target, in units of bits.",165,[[],["u8"]]],[11,"pointer_bytes","","Get the width of pointers on this target, in units of bytes.",165,[[],["u8"]]],[0,"loop_analysis","cranelift_codegen","A loop analysis represented as mappings of loops to their…",null,null],[3,"Loop","cranelift_codegen::loop_analysis","A opaque reference to a code loop.",null,null],[3,"LoopAnalysis","","Loop tree information for a single function.",null,null],[11,"from_u32","","Return the underlying index value as a `u32`.",176,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",176,[[],["u32"]]],[11,"new","","Allocate a new blank loop analysis struct. Use `compute`…",177,[[],["self"]]],[11,"loops","","Returns all the loops contained in a function.",177,[[["self"]],[["loop"],["keys",["loop"]]]]],[11,"loop_header","","Returns the header block of a particular loop.",177,[[["loop"],["self"]],["block"]]],[11,"loop_parent","","Return the eventual parent of a loop in the loop tree.",177,[[["loop"],["self"]],[["loop"],["option",["loop"]]]]],[11,"is_in_loop","","Determine if a Block belongs to a loop by running a finger…",177,[[["loop"],["self"],["block"]],["bool"]]],[11,"is_child_loop","","Determines if a loop is contained in another loop.",177,[[["loop"],["self"]],["bool"]]],[11,"compute","","Detects the loops in a function. Needs the control flow…",177,[[["dominatortree"],["controlflowgraph"],["self"],["function"]]]],[11,"is_valid","","Check if the loop analysis is in a valid state.",177,[[["self"]],["bool"]]],[11,"clear","","Clear all the data structures contained in the loop…",177,[[["self"]]]],[0,"print_errors","cranelift_codegen","Utility routines for pretty-printing error messages.",null,null],[5,"pretty_verifier_error","cranelift_codegen::print_errors","Pretty-print a verifier error.",null,[[["function"],["option",["targetisa"]],["targetisa"],["box",["funcwriter"]],["option",["box"]],["verifiererrors"]],["string"]]],[5,"pretty_error","","Pretty-print a Cranelift error.",null,[[["function"],["option",["targetisa"]],["targetisa"],["codegenerror"]],["string"]]],[0,"settings","cranelift_codegen","Shared settings module.",null,null],[3,"Builder","cranelift_codegen::settings","Collect settings values based on a template.",null,null],[3,"PredicateView","","A reference to just the boolean predicates of a settings…",null,null],[3,"Flags","","Flags group `shared`.",null,null],[3,"FlagsOrIsa","","Wrapper containing flags and optionally a `TargetIsa`…",null,null],[12,"flags","","Flags are always present.",178,null],[12,"isa","","The ISA may not be present.",178,null],[4,"SetError","","An error produced when changing a setting.",null,null],[13,"BadName","","No setting by this name exists.",179,null],[13,"BadType","","Type mismatch for setting (e.g., setting an enum setting…",179,null],[13,"BadValue","","This is not a valid value for this setting.",179,null],[4,"OptLevel","","Values for `shared.opt_level`.",null,null],[13,"None","","`none`.",180,null],[13,"Speed","","`speed`.",180,null],[13,"SpeedAndSize","","`speed_and_size`.",180,null],[4,"TlsModel","","Values for `shared.tls_model`.",null,null],[13,"None","","`none`.",181,null],[13,"ElfGd","","`elf_gd`.",181,null],[13,"Macho","","`macho`.",181,null],[13,"Coff","","`coff`.",181,null],[4,"LibcallCallConv","","Values for `shared.libcall_call_conv`.",null,null],[13,"IsaDefault","","`isa_default`.",182,null],[13,"Fast","","`fast`.",182,null],[13,"Cold","","`cold`.",182,null],[13,"SystemV","","`system_v`.",182,null],[13,"WindowsFastcall","","`windows_fastcall`.",182,null],[13,"BaldrdashSystemV","","`baldrdash_system_v`.",182,null],[13,"BaldrdashWindows","","`baldrdash_windows`.",182,null],[13,"Probestack","","`probestack`.",182,null],[5,"builder","","Create a `settings::Builder` for the shared settings group.",null,[[],["builder"]]],[0,"detail","","Implementation details for generated code.",null,null],[3,"Template","cranelift_codegen::settings::detail","An instruction group template.",null,null],[12,"name","","Name of the instruction group.",183,null],[12,"descriptors","","List of setting descriptors.",183,null],[12,"enumerators","","Union of all enumerators.",183,null],[12,"hash_table","","Hash table of settings.",183,null],[12,"defaults","","Default values.",183,null],[12,"presets","","Pairs of (mask, value) for presets.",183,null],[3,"Descriptor","","A setting descriptor holds the information needed to…",null,null],[12,"name","","Lower snake-case name of setting as defined in meta.",184,null],[12,"offset","","Offset of byte containing this setting.",184,null],[12,"detail","","Additional details, depending on the kind of setting.",184,null],[4,"Detail","","The different kind of settings along with descriptor bits…",null,null],[13,"Bool","","A boolean setting only uses one bit, numbered from LSB.",185,null],[12,"bit","cranelift_codegen::settings::detail::Detail","0-7.",186,null],[13,"Num","cranelift_codegen::settings::detail","A numerical setting uses the whole byte.",185,null],[13,"Enum","","An Enum setting uses a range of enumerators.",185,null],[12,"last","cranelift_codegen::settings::detail::Detail","Numerical value of last enumerator, allowing for 1-256…",187,null],[12,"enumerators","","First enumerator in the ENUMERATORS table.",187,null],[13,"Preset","cranelift_codegen::settings::detail","A preset is not an individual setting, it is a collection…",185,null],[11,"enums","","Get enumerators corresponding to a `Details::Enum`.",183,[[["u16"],["self"],["u8"]]]],[11,"format_toml_value","","Format a setting value as a TOML string. This is mostly…",183,[[["formatter"],["detail"],["self"],["u8"]],["result"]]],[11,"is_preset","","Check if a detail is a Detail::Preset. Useful because the…",185,[[],["bool"]]],[6,"SetResult","cranelift_codegen::settings","A result returned when changing a setting.",null,null],[8,"Configurable","","A string-based configurator for settings groups.",null,null],[10,"set","","Set the string value of any setting by name.",188,[[["str"],["self"]],["setresult"]]],[10,"enable","","Enable a boolean setting or apply a preset.",188,[[["str"],["self"]],["setresult"]]],[11,"new","","Create a new builder with defaults and names from the…",189,[[["template"]],["self"]]],[11,"state_for","","Extract contents of builder once everything is configured.",189,[[["str"]],["box"]]],[11,"new","","Create a new view of a precomputed predicate vector.",190,[[],["self"]]],[11,"test","","Check a numbered predicate.",190,[[["usize"]],["bool"]]],[11,"new","","Create flags shared settings group.",191,[[["builder"]],["self"]]],[11,"predicate_view","","Get a view of the boolean predicates.",191,[[["self"]],["predicateview"]]],[11,"opt_level","","Optimization level:",191,[[["self"]],["optlevel"]]],[11,"tls_model","","Defines the model used to perform TLS accesses.",191,[[["self"]],["tlsmodel"]]],[11,"libcall_call_conv","","Defines the calling convention to use for LibCalls call…",191,[[["self"]],["libcallcallconv"]]],[11,"baldrdash_prologue_words","","Number of pointer-sized words pushed by the baldrdash…",191,[[["self"]],["u8"]]],[11,"probestack_size_log2","","The log2 of the size of the stack guard region.",191,[[["self"]],["u8"]]],[11,"enable_verifier","","Run the Cranelift IR verifier at strategic times during…",191,[[["self"]],["bool"]]],[11,"is_pic","","Enable Position-Independent Code generation",191,[[["self"]],["bool"]]],[11,"use_colocated_libcalls","","Use colocated libcalls.",191,[[["self"]],["bool"]]],[11,"avoid_div_traps","","Generate explicit checks around native division…",191,[[["self"]],["bool"]]],[11,"enable_float","","Enable the use of floating-point instructions",191,[[["self"]],["bool"]]],[11,"enable_nan_canonicalization","","Enable NaN canonicalization",191,[[["self"]],["bool"]]],[11,"enable_pinned_reg","","Enable the use of the pinned register.",191,[[["self"]],["bool"]]],[11,"use_pinned_reg_as_heap_base","","Use the pinned register as the heap base.",191,[[["self"]],["bool"]]],[11,"enable_simd","","Enable the use of SIMD instructions.",191,[[["self"]],["bool"]]],[11,"enable_atomics","","Enable the use of atomic instructions",191,[[["self"]],["bool"]]],[11,"enable_safepoints","","Enable safepoint instruction insertions.",191,[[["self"]],["bool"]]],[11,"emit_all_ones_funcaddrs","","Emit not-yet-relocated function addresses as all-ones bit…",191,[[["self"]],["bool"]]],[11,"enable_probestack","","Enable the use of stack probes, for calling conventions…",191,[[["self"]],["bool"]]],[11,"probestack_func_adjusts_sp","","Set this to true of the stack probe function modifies the…",191,[[["self"]],["bool"]]],[11,"enable_jump_tables","","Enable the use of jump tables in generated machine code.",191,[[["self"]],["bool"]]],[0,"timing","cranelift_codegen","Pass timing.",null,null],[3,"PassTimes","cranelift_codegen::timing","Accumulated timing for all passes.",null,null],[3,"TimingToken","","A timing token is responsible for timing the currently…",null,null],[5,"add_to_current","","Add `timings` to the accumulated timings for the current…",null,[[["passtimes"]]]],[5,"take_current","","Take the current accumulated pass timings and reset the…",null,[[],["passtimes"]]],[5,"process_file","","Processing test file",null,[[],["timingtoken"]]],[5,"parse_text","","Parsing textual Cranelift IR",null,[[],["timingtoken"]]],[5,"wasm_translate_module","","Translate WASM module",null,[[],["timingtoken"]]],[5,"wasm_translate_function","","Translate WASM function",null,[[],["timingtoken"]]],[5,"verifier","","Verify Cranelift IR",null,[[],["timingtoken"]]],[5,"verify_cssa","","Verify CSSA",null,[[],["timingtoken"]]],[5,"verify_liveness","","Verify live ranges",null,[[],["timingtoken"]]],[5,"verify_locations","","Verify value locations",null,[[],["timingtoken"]]],[5,"verify_flags","","Verify CPU flags",null,[[],["timingtoken"]]],[5,"compile","","Compilation passes",null,[[],["timingtoken"]]],[5,"flowgraph","","Control flow graph",null,[[],["timingtoken"]]],[5,"domtree","","Dominator tree",null,[[],["timingtoken"]]],[5,"loop_analysis","","Loop analysis",null,[[],["timingtoken"]]],[5,"postopt","","Post-legalization rewriting",null,[[],["timingtoken"]]],[5,"preopt","","Pre-legalization rewriting",null,[[],["timingtoken"]]],[5,"dce","","Dead code elimination",null,[[],["timingtoken"]]],[5,"legalize","","Legalization",null,[[],["timingtoken"]]],[5,"gvn","","Global value numbering",null,[[],["timingtoken"]]],[5,"licm","","Loop invariant code motion",null,[[],["timingtoken"]]],[5,"unreachable_code","","Remove unreachable blocks",null,[[],["timingtoken"]]],[5,"regalloc","","Register allocation",null,[[],["timingtoken"]]],[5,"ra_liveness","","RA liveness analysis",null,[[],["timingtoken"]]],[5,"ra_cssa","","RA coalescing CSSA",null,[[],["timingtoken"]]],[5,"ra_spilling","","RA spilling",null,[[],["timingtoken"]]],[5,"ra_reload","","RA reloading",null,[[],["timingtoken"]]],[5,"ra_coloring","","RA coloring",null,[[],["timingtoken"]]],[5,"prologue_epilogue","","Prologue/epilogue insertion",null,[[],["timingtoken"]]],[5,"shrink_instructions","","Instruction encoding shrinking",null,[[],["timingtoken"]]],[5,"relax_branches","","Branch relaxation",null,[[],["timingtoken"]]],[5,"binemit","","Binary machine code emission",null,[[],["timingtoken"]]],[5,"layout_renumber","","Layout full renumbering",null,[[],["timingtoken"]]],[5,"canonicalize_nans","","Canonicalization of NaNs",null,[[],["timingtoken"]]],[0,"verifier","cranelift_codegen","A verifier for ensuring that functions are well formed. It…",null,null],[3,"VerifierError","cranelift_codegen::verifier","A verifier error.",null,null],[12,"location","","The entity causing the verifier error.",192,null],[12,"context","","Optionally provide some context for the given location;…",192,null],[12,"message","","The error message.",192,null],[3,"VerifierErrors","","List of verifier errors.",null,null],[12,"0","","",193,null],[5,"verify_cssa","","Verify conventional SSA form for `func`.",null,[[["liveness"],["dominatortree"],["controlflowgraph"],["virtregs"],["verifiererrors"],["function"]],["verifierstepresult"]]],[5,"verify_liveness","","Verify liveness information for `func`.",null,[[["liveness"],["controlflowgraph"],["targetisa"],["verifiererrors"],["function"]],["verifierstepresult"]]],[5,"verify_locations","","Verify value locations for `func`.",null,[[["function"],["targetisa"],["controlflowgraph"],["option",["liveness"]],["liveness"],["verifiererrors"]],["verifierstepresult"]]],[5,"verify_function","","Verify `func`.",null,[[["into",["flagsorisa"]],["function"],["flagsorisa"]],["verifierresult"]]],[5,"verify_context","","Verify `func` after checking the integrity of associated…",null,[[["into",["flagsorisa"]],["dominatortree"],["controlflowgraph"],["verifiererrors"],["flagsorisa"],["function"]],["verifierstepresult"]]],[6,"VerifierStepResult","","Result of a step in the verification process.",null,null],[6,"VerifierResult","","Result of a verification operation.",null,null],[11,"new","","Return a new `VerifierErrors` struct.",193,[[],["self"]]],[11,"is_empty","","Return whether no errors were reported.",193,[[["self"]],["bool"]]],[11,"has_error","","Return whether one or more errors were reported.",193,[[["self"]],["bool"]]],[11,"as_result","","Return a `VerifierStepResult` that is fatal if at least…",193,[[["self"]],["verifierstepresult"]]],[11,"report","","Report an error, adding it to the list of errors.",193,[[["self"]]]],[11,"fatal","","Report a fatal error and return `Err`.",193,[[["self"]],["verifierstepresult"]]],[11,"nonfatal","","Report a non-fatal error and return `Ok`.",193,[[["self"]],["verifierstepresult"]]],[0,"write","cranelift_codegen","Converting Cranelift IR to text.",null,null],[3,"PlainWriter","cranelift_codegen::write","A `PlainWriter` that doesn't decorate the function.",null,null],[5,"write_function","","Write `func` to `w` as equivalent text. Use `isa` to emit…",null,[[["displayfunctionannotations"],["write"],["function"]],["result"]]],[5,"decorate_function","","Writes `func` to `w` as text. write_function_plain is…",null,[[["fw"],["displayfunctionannotations"],["function"],["write"]],["result"]]],[5,"write_block_header","","Write out the basic block header, outdented:",null,[[["option",["targetisa"]],["targetisa"],["block"],["usize"],["write"],["function"]],["result"]]],[5,"write_operands","","Write the operands of `inst` to `w` with a prepended space.",null,[[["option",["targetisa"]],["dataflowgraph"],["targetisa"],["write"],["inst"]],["result"]]],[8,"FuncWriter","","A `FuncWriter` used to decorate functions during printing.",null,null],[10,"write_block_header","","Write the basic block header for the current function.",194,[[["usize"],["option",["targetisa"]],["targetisa"],["block"],["self"],["write"],["function"]],["result"]]],[10,"write_instruction","","Write the given `inst` to `w`.",194,[[["secondarymap"],["inst"],["option",["targetisa"]],["targetisa"],["usize"],["self"],["write"],["function"]],["result"]]],[11,"write_preamble","","Write the preamble to `w`. By default, this uses…",194,[[["reginfo"],["option",["reginfo"]],["self"],["write"],["function"]],[["result",["bool","error"]],["error"],["bool"]]]],[11,"super_preamble","","Default impl of `write_preamble`",194,[[["reginfo"],["option",["reginfo"]],["self"],["write"],["function"]],[["result",["bool","error"]],["error"],["bool"]]]],[11,"write_entity_definition","","Write an entity definition defined in the preamble to `w`.",194,[[["display"],["anyentity"],["self"],["write"],["function"]],["result"]]],[11,"super_entity_definition","","Default impl of `write_entity_definition`",194,[[["display"],["anyentity"],["self"],["write"],["function"]],["result"]]],[11,"new","cranelift_codegen","Allocate a new compilation context.",1,[[],["self"]]],[11,"for_function","","Allocate a new compilation context with an existing…",1,[[["function"]],["self"]]],[11,"clear","","Clear all data structures in this context.",1,[[["self"]]]],[11,"compile_and_emit","","Compile the function, and emit machine code into a…",1,[[["trapsink"],["stackmapsink"],["relocsink"],["targetisa"],["self"],["vec"]],[["codeinfo"],["codegenresult",["codeinfo"]]]]],[11,"compile","","Compile the function.",1,[[["self"],["targetisa"]],[["codeinfo"],["codegenresult",["codeinfo"]]]]],[11,"emit_to_memory","","Emit machine code directly into raw memory.",1,[[["trapsink"],["relocsink"],["targetisa"],["stackmapsink"],["self"]],["codeinfo"]]],[11,"emit_unwind_info","","Emit unwind information.",1,[[["targetisa"],["frameunwindkind"],["frameunwindsink"],["self"]]]],[11,"verify","","Run the verifier on the function.",1,[[["into",["flagsorisa"]],["self"],["flagsorisa"]],["verifierresult"]]],[11,"verify_if","","Run the verifier only if the `enable_verifier` setting is…",1,[[["into",["flagsorisa"]],["self"],["flagsorisa"]],["codegenresult"]]],[11,"verify_locations","","Run the locations verifier on the function.",1,[[["self"],["targetisa"]],["verifierresult"]]],[11,"verify_locations_if","","Run the locations verifier only if the `enable_verifier`…",1,[[["self"],["targetisa"]],["codegenresult"]]],[11,"dce","","Perform dead-code elimination on the function.",1,[[["self"],["into",["flagsorisa"]],["flagsorisa"]],["codegenresult"]]],[11,"preopt","","Perform pre-legalization rewrites on the function.",1,[[["self"],["targetisa"]],["codegenresult"]]],[11,"canonicalize_nans","","Perform NaN canonicalizing rewrites on the function.",1,[[["self"],["targetisa"]],["codegenresult"]]],[11,"legalize","","Run the legalizer for `isa` on the function.",1,[[["self"],["targetisa"]],["codegenresult"]]],[11,"postopt","","Perform post-legalization rewrites on the function.",1,[[["self"],["targetisa"]],["codegenresult"]]],[11,"compute_cfg","","Compute the control flow graph.",1,[[["self"]]]],[11,"compute_domtree","","Compute dominator tree.",1,[[["self"]]]],[11,"compute_loop_analysis","","Compute the loop analysis.",1,[[["self"]]]],[11,"flowgraph","","Compute the control flow graph and dominator tree.",1,[[["self"]]]],[11,"simple_gvn","","Perform simple GVN on the function.",1,[[["self"],["into",["flagsorisa"]],["flagsorisa"]],["codegenresult"]]],[11,"licm","","Perform LICM on the function.",1,[[["self"],["targetisa"]],["codegenresult"]]],[11,"eliminate_unreachable_code","","Perform unreachable code elimination.",1,[[["foi"],["self"]],["codegenresult"]]],[11,"regalloc","","Run the register allocator.",1,[[["self"],["targetisa"]],["codegenresult"]]],[11,"prologue_epilogue","","Insert prologue and epilogues after computing the stack…",1,[[["self"],["targetisa"]],["codegenresult"]]],[11,"redundant_reload_remover","","Do redundant-reload removal after allocation of both…",1,[[["self"],["targetisa"]],["codegenresult"]]],[11,"shrink_instructions","","Run the instruction shrinking pass.",1,[[["self"],["targetisa"]],["codegenresult"]]],[11,"relax_branches","","Run the branch relaxation pass and return information…",1,[[["self"],["targetisa"]],[["codeinfo"],["codegenresult",["codeinfo"]]]]],[11,"build_value_labels_ranges","","Builds ranges and location for specified value labels.",1,[[["self"],["targetisa"]],[["valuelabelsranges"],["codegenresult",["valuelabelsranges"]]]]],[11,"new","cranelift_codegen::binemit","Create a new empty diversion tracker.",195,[[],["self"]]],[11,"clear","","Clear the content of the diversions, to reset the state of…",195,[[["self"]]]],[11,"is_empty","","Are there any diversions?",195,[[["self"]],["bool"]]],[11,"diversion","","Get the current diversion of `value`, if any.",195,[[["self"],["value"]],[["option",["diversion"]],["diversion"]]]],[11,"iter","","Get all current diversions.",195,[[["self"]],[["diversion"],["iter",["value","diversion"]],["value"]]]],[11,"get","","Get the current location for `value`. Fall back to the…",195,[[["valuelocations"],["self"],["value"]],["valueloc"]]],[11,"reg","","Get the current register location for `value`, or panic if…",195,[[["valuelocations"],["self"],["value"]],["regunit"]]],[11,"stack","","Get the current stack location for `value`, or panic if…",195,[[["valuelocations"],["self"],["value"]],["stackslot"]]],[11,"regmove","","Record a register -> register move.",195,[[["regunit"],["value"],["self"]]]],[11,"regspill","","Record a register -> stack move.",195,[[["regunit"],["stackslot"],["value"],["self"]]]],[11,"regfill","","Record a stack -> register move.",195,[[["regunit"],["stackslot"],["value"],["self"]]]],[11,"apply","","Apply the effect of `inst`.",195,[[["self"],["instructiondata"]]]],[11,"remove","","Drop any recorded move for `value`.",195,[[["self"],["value"]],[["valueloc"],["option",["valueloc"]]]]],[11,"at_block","","Resets the state of the current diversions to the recorded…",195,[[["entryregdiversions"],["self"],["block"]]]],[11,"save_for_block","","Copy the current state of the diversions, and save it for…",195,[[["entryregdiversions"],["self"],["block"]]]],[11,"check_block_entry","","Check that the recorded entry for a given `block` matches…",195,[[["entryregdiversions"],["self"],["block"]],["bool"]]],[11,"display","","Return an object that can display the diversions.",195,[[["option",["reginfo"]],["self"],["into",["option"]]],["displaydiversions"]]],[6,"ValueLabelsRanges","cranelift_codegen","Resulting map of Value labels and their ranges/locations.",null,null],[6,"CodegenResult","","A convenient alias for a `Result` that uses `CodegenError`…",null,null],[17,"VERSION","","Version number of this crate.",null,null],[11,"from","cranelift_codegen::packed_option","",196,[[],["t"]]],[11,"from","","",196,[[["t"]],["t"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"into","","",196,[[],["u"]]],[11,"try_into","","",196,[[],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"type_id","","",196,[[["self"]],["typeid"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,[[["self"],["t"]]]],[11,"equivalent","","",196,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"equivalent","","",2,[[["k"],["self"]],["bool"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"equivalent","","",3,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen::binemit","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",197,[[["t"]],["t"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"into","","",197,[[],["u"]]],[11,"try_into","","",197,[[],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"type_id","","",197,[[["self"]],["typeid"]]],[11,"from","","",198,[[["t"]],["t"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"into","","",198,[[],["u"]]],[11,"try_into","","",198,[[],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"type_id","","",198,[[["self"]],["typeid"]]],[11,"from","","",199,[[["t"]],["t"]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"into","","",199,[[],["u"]]],[11,"try_into","","",199,[[],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"type_id","","",199,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"from","","",195,[[["t"]],["t"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"into","","",195,[[],["u"]]],[11,"try_into","","",195,[[],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"type_id","","",195,[[["self"]],["typeid"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,[[["self"],["t"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"equivalent","","",6,[[["k"],["self"]],["bool"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"equivalent","","",7,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen::cfg_printer","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"from","cranelift_codegen::cursor","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"equivalent","","",17,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen::dbg","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"from","cranelift_codegen::dominator_tree","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into","","",21,[[],["u"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"into_iter","","",200,[[],["i"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"into","","",200,[[],["u"]]],[11,"try_into","","",200,[[],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"type_id","","",200,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen::flowgraph","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into","","",22,[[],["u"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"equivalent","","",22,[[["k"],["self"]],["bool"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",201,[[["t"]],["t"]]],[11,"into_iter","","",201,[[],["i"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"into","","",201,[[],["u"]]],[11,"try_into","","",201,[[],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"type_id","","",201,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen::ir::condcodes","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"into","","",25,[[],["u"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"to_string","","",25,[[["self"]],["string"]]],[11,"equivalent","","",25,[[["k"],["self"]],["bool"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"equivalent","","",26,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen::ir","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"into","","",57,[[],["u"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"into","","",58,[[],["u"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"equivalent","","",27,[[["k"],["self"]],["bool"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"to_string","","",28,[[["self"]],["string"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"equivalent","","",29,[[["k"],["self"]],["bool"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"into","","",31,[[],["u"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"to_string","","",31,[[["self"]],["string"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"into","","",147,[[],["u"]]],[11,"try_into","","",147,[[],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"type_id","","",147,[[["self"]],["typeid"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,[[["self"],["t"]]]],[11,"to_string","","",147,[[["self"]],["string"]]],[11,"equivalent","","",147,[[["k"],["self"]],["bool"]]],[11,"from","","",202,[[["t"]],["t"]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"into","","",202,[[],["u"]]],[11,"try_into","","",202,[[],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"type_id","","",202,[[["self"]],["typeid"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,[[["self"],["t"]]]],[11,"to_string","","",202,[[["self"]],["string"]]],[11,"equivalent","","",202,[[["k"],["self"]],["bool"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"into","","",148,[[],["u"]]],[11,"try_into","","",148,[[],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"type_id","","",148,[[["self"]],["typeid"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,[[["self"],["t"]]]],[11,"to_string","","",148,[[["self"]],["string"]]],[11,"equivalent","","",148,[[["k"],["self"]],["bool"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"into","","",32,[[],["u"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"to_string","","",32,[[["self"]],["string"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"into","","",158,[[],["u"]]],[11,"try_into","","",158,[[],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"type_id","","",158,[[["self"]],["typeid"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,[[["self"],["t"]]]],[11,"to_string","","",158,[[["self"]],["string"]]],[11,"key","","",158,[[["self"]],["t"]]],[11,"equivalent","","",158,[[["k"],["self"]],["bool"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"into","","",33,[[],["u"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"into","","",34,[[],["u"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"equivalent","","",34,[[["k"],["self"]],["bool"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"into","","",35,[[],["u"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"to_string","","",35,[[["self"]],["string"]]],[11,"equivalent","","",35,[[["k"],["self"]],["bool"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"into","","",36,[[],["u"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"to_string","","",36,[[["self"]],["string"]]],[11,"equivalent","","",36,[[["k"],["self"]],["bool"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"into","","",39,[[],["u"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"equivalent","","",39,[[["k"],["self"]],["bool"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"into","","",43,[[],["u"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"to_string","","",43,[[["self"]],["string"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"into","","",47,[[],["u"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"into","","",50,[[],["u"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"to_string","","",50,[[["self"]],["string"]]],[11,"equivalent","","",50,[[["k"],["self"]],["bool"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"into","","",51,[[],["u"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"to_string","","",51,[[["self"]],["string"]]],[11,"equivalent","","",51,[[["k"],["self"]],["bool"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"into","","",52,[[],["u"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"to_string","","",52,[[["self"]],["string"]]],[11,"equivalent","","",52,[[["k"],["self"]],["bool"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"into","","",53,[[],["u"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"equivalent","","",53,[[["k"],["self"]],["bool"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"into","","",54,[[],["u"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"equivalent","","",54,[[["k"],["self"]],["bool"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"into","","",55,[[],["u"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,[[["self"],["t"]]]],[11,"from","cranelift_codegen::ir::constant","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"into","","",59,[[],["u"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"to_string","","",59,[[["self"]],["string"]]],[11,"equivalent","","",59,[[["k"],["self"]],["bool"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"into","","",60,[[],["u"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"into","","",61,[[],["u"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"from","cranelift_codegen::ir::dfg","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"into","","",62,[[],["u"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,[[["self"],["t"]]]],[11,"from","","",203,[[["t"]],["t"]]],[11,"into_iter","","",203,[[],["i"]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"into","","",203,[[],["u"]]],[11,"try_into","","",203,[[],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"type_id","","",203,[[["self"]],["typeid"]]],[11,"from","","",204,[[["t"]],["t"]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"into","","",204,[[],["u"]]],[11,"try_into","","",204,[[],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"type_id","","",204,[[["self"]],["typeid"]]],[11,"to_string","","",204,[[["self"]],["string"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"into","","",63,[[],["u"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,[[["self"],["t"]]]],[11,"equivalent","","",63,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen::ir::entities","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"into","","",65,[[],["u"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"key","","",65,[[["self"]],["t"]]],[11,"equivalent","","",65,[[["k"],["self"]],["bool"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"into","","",66,[[],["u"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"to_string","","",66,[[["self"]],["string"]]],[11,"key","","",66,[[["self"]],["t"]]],[11,"equivalent","","",66,[[["k"],["self"]],["bool"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"into","","",67,[[],["u"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"to_string","","",67,[[["self"]],["string"]]],[11,"key","","",67,[[["self"]],["t"]]],[11,"equivalent","","",67,[[["k"],["self"]],["bool"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"into","","",68,[[],["u"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"to_string","","",68,[[["self"]],["string"]]],[11,"key","","",68,[[["self"]],["t"]]],[11,"equivalent","","",68,[[["k"],["self"]],["bool"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"into","","",69,[[],["u"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"to_string","","",69,[[["self"]],["string"]]],[11,"key","","",69,[[["self"]],["t"]]],[11,"equivalent","","",69,[[["k"],["self"]],["bool"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"into","","",70,[[],["u"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"to_string","","",70,[[["self"]],["string"]]],[11,"key","","",70,[[["self"]],["t"]]],[11,"equivalent","","",70,[[["k"],["self"]],["bool"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"into","","",71,[[],["u"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"to_string","","",71,[[["self"]],["string"]]],[11,"key","","",71,[[["self"]],["t"]]],[11,"equivalent","","",71,[[["k"],["self"]],["bool"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"into","","",72,[[],["u"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"to_string","","",72,[[["self"]],["string"]]],[11,"key","","",72,[[["self"]],["t"]]],[11,"equivalent","","",72,[[["k"],["self"]],["bool"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"into","","",73,[[],["u"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"to_string","","",73,[[["self"]],["string"]]],[11,"key","","",73,[[["self"]],["t"]]],[11,"equivalent","","",73,[[["k"],["self"]],["bool"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"into","","",74,[[],["u"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,[[["self"],["t"]]]],[11,"to_string","","",74,[[["self"]],["string"]]],[11,"key","","",74,[[["self"]],["t"]]],[11,"equivalent","","",74,[[["k"],["self"]],["bool"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"into","","",75,[[],["u"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,[[["self"],["t"]]]],[11,"to_string","","",75,[[["self"]],["string"]]],[11,"key","","",75,[[["self"]],["t"]]],[11,"equivalent","","",75,[[["k"],["self"]],["bool"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"into","","",76,[[],["u"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,[[["self"],["t"]]]],[11,"to_string","","",76,[[["self"]],["string"]]],[11,"key","","",76,[[["self"]],["t"]]],[11,"equivalent","","",76,[[["k"],["self"]],["bool"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"into","","",64,[[],["u"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,[[["self"],["t"]]]],[11,"to_string","","",64,[[["self"]],["string"]]],[11,"equivalent","","",64,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen::ir::function","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"into","","",77,[[],["u"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,[[["self"],["t"]]]],[11,"to_string","","",77,[[["self"]],["string"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"into","","",78,[[],["u"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",205,[[["t"]],["t"]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"into","","",205,[[],["u"]]],[11,"try_into","","",205,[[],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"type_id","","",205,[[["self"]],["typeid"]]],[11,"to_string","","",205,[[["self"]],["string"]]],[11,"from","","",206,[[["t"]],["t"]]],[11,"into_iter","","",206,[[],["i"]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"into","","",206,[[],["u"]]],[11,"try_into","","",206,[[],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"type_id","","",206,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen::ir::immediates","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"into","","",81,[[],["u"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,[[["self"],["t"]]]],[11,"to_string","","",81,[[["self"]],["string"]]],[11,"equivalent","","",81,[[["k"],["self"]],["bool"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"into","","",82,[[],["u"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,[[["self"],["t"]]]],[11,"to_string","","",82,[[["self"]],["string"]]],[11,"equivalent","","",82,[[["k"],["self"]],["bool"]]],[11,"from","","",207,[[["t"]],["t"]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"into","","",207,[[],["u"]]],[11,"try_into","","",207,[[],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"type_id","","",207,[[["self"]],["typeid"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,[[["self"],["t"]]]],[11,"to_string","","",207,[[["self"]],["string"]]],[11,"equivalent","","",207,[[["k"],["self"]],["bool"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"into","","",79,[[],["u"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,[[["self"],["t"]]]],[11,"equivalent","","",79,[[["k"],["self"]],["bool"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"into","","",83,[[],["u"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,[[["self"],["t"]]]],[11,"to_string","","",83,[[["self"]],["string"]]],[11,"equivalent","","",83,[[["k"],["self"]],["bool"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"into","","",84,[[],["u"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,[[["self"],["t"]]]],[11,"to_string","","",84,[[["self"]],["string"]]],[11,"equivalent","","",84,[[["k"],["self"]],["bool"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"into","","",85,[[],["u"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,[[["self"],["t"]]]],[11,"to_string","","",85,[[["self"]],["string"]]],[11,"equivalent","","",85,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen::ir::instructions","",143,[[["t"]],["t"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"into","","",143,[[],["u"]]],[11,"try_into","","",143,[[],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"type_id","","",143,[[["self"]],["typeid"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,[[["self"],["t"]]]],[11,"to_string","","",143,[[["self"]],["string"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"into","","",144,[[],["u"]]],[11,"try_into","","",144,[[],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"type_id","","",144,[[["self"]],["typeid"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,[[["self"],["t"]]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"into","","",86,[[],["u"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,[[["self"],["t"]]]],[11,"equivalent","","",86,[[["k"],["self"]],["bool"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"into","","",87,[[],["u"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,[[["self"],["t"]]]],[11,"equivalent","","",87,[[["k"],["self"]],["bool"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"into","","",88,[[],["u"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,[[["self"],["t"]]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"into","","",139,[[],["u"]]],[11,"try_into","","",139,[[],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"type_id","","",139,[[["self"]],["typeid"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,[[["self"],["t"]]]],[11,"to_string","","",139,[[["self"]],["string"]]],[11,"equivalent","","",139,[[["k"],["self"]],["bool"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"into","","",140,[[],["u"]]],[11,"try_into","","",140,[[],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"type_id","","",140,[[["self"]],["typeid"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"into","","",141,[[],["u"]]],[11,"try_into","","",141,[[],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"type_id","","",141,[[["self"]],["typeid"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"into","","",142,[[],["u"]]],[11,"try_into","","",142,[[],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"type_id","","",142,[[["self"]],["typeid"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,[[["self"],["t"]]]],[11,"equivalent","","",142,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen::ir::jumptable","",145,[[["t"]],["t"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"into","","",145,[[],["u"]]],[11,"try_into","","",145,[[],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"type_id","","",145,[[["self"]],["typeid"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,[[["self"],["t"]]]],[11,"to_string","","",145,[[["self"]],["string"]]],[11,"from","cranelift_codegen::ir::layout","",146,[[["t"]],["t"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"into","","",146,[[],["u"]]],[11,"try_into","","",146,[[],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"type_id","","",146,[[["self"]],["typeid"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,[[["self"],["t"]]]],[11,"from","","",208,[[["t"]],["t"]]],[11,"into_iter","","",208,[[],["i"]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"into","","",208,[[],["u"]]],[11,"try_into","","",208,[[],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"type_id","","",208,[[["self"]],["typeid"]]],[11,"from","","",209,[[["t"]],["t"]]],[11,"into_iter","","",209,[[],["i"]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"into","","",209,[[],["u"]]],[11,"try_into","","",209,[[],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"type_id","","",209,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen::ir::stackslot","",149,[[["t"]],["t"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"into","","",149,[[],["u"]]],[11,"try_into","","",149,[[],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"type_id","","",149,[[["self"]],["typeid"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,[[["self"],["t"]]]],[11,"to_string","","",149,[[["self"]],["string"]]],[11,"equivalent","","",149,[[["k"],["self"]],["bool"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"into","","",150,[[],["u"]]],[11,"try_into","","",150,[[],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"type_id","","",150,[[["self"]],["typeid"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,[[["self"],["t"]]]],[11,"equivalent","","",150,[[["k"],["self"]],["bool"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"into","","",151,[[],["u"]]],[11,"try_into","","",151,[[],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"type_id","","",151,[[["self"]],["typeid"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,[[["self"],["t"]]]],[11,"equivalent","","",151,[[["k"],["self"]],["bool"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"into","","",152,[[],["u"]]],[11,"try_into","","",152,[[],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"type_id","","",152,[[["self"]],["typeid"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,[[["self"],["t"]]]],[11,"to_string","","",152,[[["self"]],["string"]]],[11,"equivalent","","",152,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen::ir::types","",153,[[["t"]],["t"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"into","","",153,[[],["u"]]],[11,"try_into","","",153,[[],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"type_id","","",153,[[["self"]],["typeid"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,[[["self"],["t"]]]],[11,"to_string","","",153,[[["self"]],["string"]]],[11,"equivalent","","",153,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen::isa","",159,[[["t"]],["t"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"into","","",159,[[],["u"]]],[11,"try_into","","",159,[[],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"type_id","","",159,[[["self"]],["typeid"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,[[["self"],["t"]]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"into","","",160,[[],["u"]]],[11,"try_into","","",160,[[],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"type_id","","",160,[[["self"]],["typeid"]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"into","","",161,[[],["u"]]],[11,"try_into","","",161,[[],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"type_id","","",161,[[["self"]],["typeid"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,[[["self"],["t"]]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"into","","",162,[[],["u"]]],[11,"try_into","","",162,[[],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"type_id","","",162,[[["self"]],["typeid"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,[[["self"],["t"]]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"into","","",170,[[],["u"]]],[11,"try_into","","",170,[[],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"type_id","","",170,[[["self"]],["typeid"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,[[["self"],["t"]]]],[11,"to_string","","",170,[[["self"]],["string"]]],[11,"equivalent","","",170,[[["k"],["self"]],["bool"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"into","","",163,[[],["u"]]],[11,"try_into","","",163,[[],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"type_id","","",163,[[["self"]],["typeid"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,[[["self"],["t"]]]],[11,"equivalent","","",163,[[["k"],["self"]],["bool"]]],[11,"from","","",164,[[["t"]],["t"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"into","","",164,[[],["u"]]],[11,"try_into","","",164,[[],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"type_id","","",164,[[["self"]],["typeid"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,[[["self"],["t"]]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"into","","",175,[[],["u"]]],[11,"try_into","","",175,[[],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"type_id","","",175,[[["self"]],["typeid"]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"into","","",165,[[],["u"]]],[11,"try_into","","",165,[[],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"type_id","","",165,[[["self"]],["typeid"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,[[["self"],["t"]]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"into","","",166,[[],["u"]]],[11,"try_into","","",166,[[],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"type_id","","",166,[[["self"]],["typeid"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,[[["self"],["t"]]]],[11,"to_string","","",166,[[["self"]],["string"]]],[11,"equivalent","","",166,[[["k"],["self"]],["bool"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"into","","",167,[[],["u"]]],[11,"try_into","","",167,[[],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"type_id","","",167,[[["self"]],["typeid"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,[[["self"],["t"]]]],[11,"equivalent","","",167,[[["k"],["self"]],["bool"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"into","","",168,[[],["u"]]],[11,"try_into","","",168,[[],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"type_id","","",168,[[["self"]],["typeid"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,[[["self"],["t"]]]],[11,"equivalent","","",168,[[["k"],["self"]],["bool"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"into","","",169,[[],["u"]]],[11,"try_into","","",169,[[],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"type_id","","",169,[[["self"]],["typeid"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,[[["self"],["t"]]]],[11,"to_string","","",169,[[["self"]],["string"]]],[11,"equivalent","","",169,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen::isa::registers","",171,[[["t"]],["t"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"into","","",171,[[],["u"]]],[11,"try_into","","",171,[[],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"type_id","","",171,[[["self"]],["typeid"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"into","","",172,[[],["u"]]],[11,"try_into","","",172,[[],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"type_id","","",172,[[["self"]],["typeid"]]],[11,"to_string","","",172,[[["self"]],["string"]]],[11,"from","","",210,[[["t"]],["t"]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"into","","",210,[[],["u"]]],[11,"try_into","","",210,[[],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"type_id","","",210,[[["self"]],["typeid"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,[[["self"],["t"]]]],[11,"to_string","","",210,[[["self"]],["string"]]],[11,"key","","",210,[[["self"]],["t"]]],[11,"equivalent","","",210,[[["k"],["self"]],["bool"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"into","","",173,[[],["u"]]],[11,"try_into","","",173,[[],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"type_id","","",173,[[["self"]],["typeid"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,[[["self"],["t"]]]],[11,"from","","",211,[[["t"]],["t"]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"into","","",211,[[],["u"]]],[11,"try_into","","",211,[[],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"type_id","","",211,[[["self"]],["typeid"]]],[11,"to_string","","",211,[[["self"]],["string"]]],[11,"from","cranelift_codegen::loop_analysis","",176,[[["t"]],["t"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"into","","",176,[[],["u"]]],[11,"try_into","","",176,[[],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"type_id","","",176,[[["self"]],["typeid"]]],[11,"to_owned","","",176,[[["self"]],["t"]]],[11,"clone_into","","",176,[[["self"],["t"]]]],[11,"to_string","","",176,[[["self"]],["string"]]],[11,"key","","",176,[[["self"]],["t"]]],[11,"equivalent","","",176,[[["k"],["self"]],["bool"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"into","","",177,[[],["u"]]],[11,"try_into","","",177,[[],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"type_id","","",177,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen::settings","",189,[[["t"]],["t"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"into","","",189,[[],["u"]]],[11,"try_into","","",189,[[],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"type_id","","",189,[[["self"]],["typeid"]]],[11,"to_owned","","",189,[[["self"]],["t"]]],[11,"clone_into","","",189,[[["self"],["t"]]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"into","","",190,[[],["u"]]],[11,"try_into","","",190,[[],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"type_id","","",190,[[["self"]],["typeid"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,[[["self"],["t"]]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"into","","",191,[[],["u"]]],[11,"try_into","","",191,[[],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"type_id","","",191,[[["self"]],["typeid"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,[[["self"],["t"]]]],[11,"to_string","","",191,[[["self"]],["string"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"into","","",178,[[],["u"]]],[11,"try_into","","",178,[[],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"type_id","","",178,[[["self"]],["typeid"]]],[11,"to_owned","","",178,[[["self"]],["t"]]],[11,"clone_into","","",178,[[["self"],["t"]]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"into","","",179,[[],["u"]]],[11,"try_into","","",179,[[],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"type_id","","",179,[[["self"]],["typeid"]]],[11,"to_string","","",179,[[["self"]],["string"]]],[11,"equivalent","","",179,[[["k"],["self"]],["bool"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"into","","",180,[[],["u"]]],[11,"try_into","","",180,[[],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"type_id","","",180,[[["self"]],["typeid"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,[[["self"],["t"]]]],[11,"to_string","","",180,[[["self"]],["string"]]],[11,"equivalent","","",180,[[["k"],["self"]],["bool"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"into","","",181,[[],["u"]]],[11,"try_into","","",181,[[],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"type_id","","",181,[[["self"]],["typeid"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,[[["self"],["t"]]]],[11,"to_string","","",181,[[["self"]],["string"]]],[11,"equivalent","","",181,[[["k"],["self"]],["bool"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"into","","",182,[[],["u"]]],[11,"try_into","","",182,[[],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"type_id","","",182,[[["self"]],["typeid"]]],[11,"to_owned","","",182,[[["self"]],["t"]]],[11,"clone_into","","",182,[[["self"],["t"]]]],[11,"to_string","","",182,[[["self"]],["string"]]],[11,"equivalent","","",182,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen::settings::detail","",183,[[["t"]],["t"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"into","","",183,[[],["u"]]],[11,"try_into","","",183,[[],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"type_id","","",183,[[["self"]],["typeid"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"into","","",184,[[],["u"]]],[11,"try_into","","",184,[[],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"type_id","","",184,[[["self"]],["typeid"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"into","","",185,[[],["u"]]],[11,"try_into","","",185,[[],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"type_id","","",185,[[["self"]],["typeid"]]],[11,"to_owned","","",185,[[["self"]],["t"]]],[11,"clone_into","","",185,[[["self"],["t"]]]],[11,"from","cranelift_codegen::timing","",212,[[["t"]],["t"]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"into","","",212,[[],["u"]]],[11,"try_into","","",212,[[],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"type_id","","",212,[[["self"]],["typeid"]]],[11,"to_string","","",212,[[["self"]],["string"]]],[11,"from","","",213,[[["t"]],["t"]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"into","","",213,[[],["u"]]],[11,"try_into","","",213,[[],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"type_id","","",213,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen::verifier","",192,[[["t"]],["t"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"into","","",192,[[],["u"]]],[11,"try_into","","",192,[[],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"type_id","","",192,[[["self"]],["typeid"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,[[["self"],["t"]]]],[11,"to_string","","",192,[[["self"]],["string"]]],[11,"equivalent","","",192,[[["k"],["self"]],["bool"]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"into","","",193,[[],["u"]]],[11,"try_into","","",193,[[],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"type_id","","",193,[[["self"]],["typeid"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,[[["self"],["t"]]]],[11,"to_string","","",193,[[["self"]],["string"]]],[11,"equivalent","","",193,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_codegen::write","",214,[[["t"]],["t"]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"into","","",214,[[],["u"]]],[11,"try_into","","",214,[[],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"type_id","","",214,[[["self"]],["typeid"]]],[11,"partial_cmp","cranelift_codegen::packed_option","",196,[[["self"],["packedoption"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",196,[[["self"],["packedoption"]],["bool"]]],[11,"le","","",196,[[["self"],["packedoption"]],["bool"]]],[11,"gt","","",196,[[["self"],["packedoption"]],["bool"]]],[11,"ge","","",196,[[["self"],["packedoption"]],["bool"]]],[11,"clone","","",196,[[["self"]],["packedoption"]]],[11,"fmt","","",196,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"from","","Convert an option into its packed equivalent.",196,[[["option"]],["packedoption"]]],[11,"from","","Convert `t` into a packed `Some(x)`.",196,[[["t"]],["packedoption"]]],[11,"into","","",196,[[],["option"]]],[11,"default","","Create a default packed option representing `None`.",196,[[],["packedoption"]]],[11,"eq","","",196,[[["self"],["packedoption"]],["bool"]]],[11,"ne","","",196,[[["self"],["packedoption"]],["bool"]]],[11,"hash","","",196,[[["self"],["__h"]]]],[11,"cmp","","",196,[[["self"],["packedoption"]],["ordering"]]],[11,"from_str","cranelift_codegen::ir::condcodes","",26,[[["str"]],[["result",["floatcc"]],["floatcc"]]]],[11,"from_str","","",25,[[["str"]],[["intcc"],["result",["intcc"]]]]],[11,"fmt","","",25,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"clone","","",26,[[["self"]],["floatcc"]]],[11,"clone","","",25,[[["self"]],["intcc"]]],[11,"hash","","",25,[[["self"],["__h"]]]],[11,"hash","","",26,[[["self"],["__h"]]]],[11,"inverse","","",26,[[],["floatcc"]]],[11,"reverse","","",26,[[],["floatcc"]]],[11,"inverse","","",25,[[],["intcc"]]],[11,"reverse","","",25,[[],["intcc"]]],[11,"eq","","",25,[[["self"],["intcc"]],["bool"]]],[11,"eq","","",26,[[["self"],["floatcc"]],["bool"]]],[11,"reloc_block","cranelift_codegen::binemit","",197,[[["u32"],["reloc"],["self"]]]],[11,"reloc_external","","",197,[[["i64"],["u32"],["reloc"],["externalname"],["self"]]]],[11,"reloc_constant","","",197,[[["reloc"],["codeoffset"],["self"],["constantoffset"]]]],[11,"reloc_jt","","",197,[[["u32"],["reloc"],["jumptable"],["self"]]]],[11,"trap","","",199,[[["sourceloc"],["codeoffset"],["trapcode"],["self"]]]],[11,"add_stackmap","","",198,[[["self"],["codeoffset"],["stackmap"]]]],[11,"offset","","",4,[[["self"]],["codeoffset"]]],[11,"put1","","",4,[[["self"],["u8"]]]],[11,"put2","","",4,[[["u16"],["self"]]]],[11,"put4","","",4,[[["self"],["u32"]]]],[11,"put8","","",4,[[["self"],["u64"]]]],[11,"reloc_block","","",4,[[["self"],["reloc"],["codeoffset"]]]],[11,"reloc_external","","",4,[[["reloc"],["externalname"],["self"],["addend"]]]],[11,"reloc_constant","","",4,[[["self"],["reloc"],["constantoffset"]]]],[11,"reloc_jt","","",4,[[["jumptable"],["self"],["reloc"]]]],[11,"trap","","",4,[[["self"],["trapcode"],["sourceloc"]]]],[11,"begin_jumptables","","",4,[[["self"]]]],[11,"begin_rodata","","",4,[[["self"]]]],[11,"end_codegen","","",4,[[["self"]]]],[11,"add_stackmap","","",4,[[["targetisa"],["self"],["function"]]]],[11,"position","cranelift_codegen::cursor","",15,[[["self"]],["cursorposition"]]],[11,"set_position","","",15,[[["self"],["cursorposition"]]]],[11,"srcloc","","",15,[[["self"]],["sourceloc"]]],[11,"set_srcloc","","",15,[[["sourceloc"],["self"]]]],[11,"layout","","",15,[[["self"]],["layout"]]],[11,"layout_mut","","",15,[[["self"]],["layout"]]],[11,"position","","",16,[[["self"]],["cursorposition"]]],[11,"set_position","","",16,[[["self"],["cursorposition"]]]],[11,"srcloc","","",16,[[["self"]],["sourceloc"]]],[11,"set_srcloc","","",16,[[["sourceloc"],["self"]]]],[11,"layout","","",16,[[["self"]],["layout"]]],[11,"layout_mut","","",16,[[["self"]],["layout"]]],[11,"data_flow_graph","cranelift_codegen::ir","",57,[[["self"]],["dataflowgraph"]]],[11,"data_flow_graph_mut","","",57,[[["self"]],["dataflowgraph"]]],[11,"build","","",57,[[["type"],["instructiondata"]]]],[11,"data_flow_graph","","",58,[[["self"]],["dataflowgraph"]]],[11,"data_flow_graph_mut","","",58,[[["self"]],["dataflowgraph"]]],[11,"build","","",58,[[["type"],["instructiondata"]]]],[11,"into_bytes","cranelift_codegen::ir::immediates","",81,[[],[["u8"],["vec",["u8"]]]]],[11,"into_bytes","","",84,[[],[["u8"],["vec",["u8"]]]]],[11,"into_bytes","","",85,[[],[["u8"],["vec",["u8"]]]]],[11,"cmp","cranelift_codegen::ir::layout","",146,[[["a"],["self"],["b"]],["ordering"]]],[11,"is_block_gap","","",146,[[["block"],["self"],["inst"]],["bool"]]],[11,"set","cranelift_codegen::isa","",175,[[["str"],["self"]],["setresult"]]],[11,"enable","","",175,[[["str"],["self"]],["setresult"]]],[11,"enable","cranelift_codegen::settings","",189,[[["str"],["self"]],["setresult"]]],[11,"set","","",189,[[["str"],["self"]],["setresult"]]],[11,"write_instruction","cranelift_codegen::write","",214,[[["secondarymap"],["inst"],["option",["targetisa"]],["targetisa"],["usize"],["self"],["write"],["function"]],["result"]]],[11,"write_block_header","","",214,[[["usize"],["option",["targetisa"]],["targetisa"],["block"],["self"],["write"],["function"]],["result"]]],[11,"deref","cranelift_codegen::ir::instructions","",143,[[["self"]]]],[11,"deref_mut","","",143,[[["self"]]]],[11,"from","cranelift_codegen::ir::constant","",59,[[["vec",["u8"]],["u8"]],["self"]]],[11,"from","","",59,[[],["self"]]],[11,"from","","",59,[[["v128imm"]],["self"]]],[11,"from","cranelift_codegen::ir::entities","",64,[[["block"]],["self"]]],[11,"from","","",64,[[["inst"]],["self"]]],[11,"from","","",64,[[["value"]],["self"]]],[11,"from","","",64,[[["stackslot"]],["self"]]],[11,"from","","",64,[[["globalvalue"]],["self"]]],[11,"from","","",64,[[["jumptable"]],["self"]]],[11,"from","","",64,[[["funcref"]],["self"]]],[11,"from","","",64,[[["sigref"]],["self"]]],[11,"from","","",64,[[["heap"]],["self"]]],[11,"from","","",64,[[["table"]],["self"]]],[11,"from","cranelift_codegen::ir::function","",78,[[["targetisa"],["option",["targetisa"]]],["displayfunctionannotations"]]],[11,"from","cranelift_codegen::ir::immediates","",81,[[["i64"]],["self"]]],[11,"from","","",82,[[["u64"]],["self"]]],[11,"from","","",207,[[["u32"]],["self"]]],[11,"from","","",79,[[],["self"]]],[11,"from","","",83,[[["i32"]],["self"]]],[11,"from","","",84,[[["f32"]],["self"]]],[11,"from","","",85,[[["f64"]],["self"]]],[11,"from","","",85,[[["u64"]],["self"]]],[11,"from","cranelift_codegen::ir::instructions","",87,[[["instructiondata"]],["self"]]],[11,"from","cranelift_codegen::ir","",202,[[["inst"]],["self"]]],[11,"from","","",202,[[["block"]],["self"]]],[11,"from","","",202,[[["valuedef"]],["self"]]],[11,"from","","",51,[[["inst"]],["self"]]],[11,"from","","",51,[[["block"]],["self"]]],[11,"from","","",51,[[["valuedef"]],["self"]]],[11,"from","","",51,[[["programpoint"]],["self"]]],[11,"from","cranelift_codegen::isa::registers","",210,[[["regclass"]],["self"]]],[11,"from","cranelift_codegen::settings","",178,[[["flags"]],["flagsorisa"]]],[11,"from","","",178,[[["targetisa"]],["flagsorisa"]]],[11,"from","cranelift_codegen::verifier","",192,[[],["self"]]],[11,"from","","",192,[[],["self"]]],[11,"from","","",193,[[["vec",["verifiererror"]],["verifiererror"]],["self"]]],[11,"from","cranelift_codegen","",3,[[["verifiererrors"]],["self"]]],[11,"fmt","cranelift_codegen::binemit","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::cursor","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::flowgraph","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::constant","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::dfg","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::entities","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::function","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::immediates","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",207,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::instructions","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",202,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::stackslot","",152,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::types","",153,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::isa","",166,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",167,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",170,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::isa::registers","",172,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::isa","",164,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::loop_analysis","",176,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::settings","",179,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::verifier","",192,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::binemit","Display trait implementation drops the arch, since its…",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::cfg_printer","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::dbg","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::constant","Print the constant data in hexadecimal format, e.g.…",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::dfg","",204,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::entities","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::function","",205,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::immediates","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",207,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::instructions","",139,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::jumptable","",145,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",202,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::stackslot","",152,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir::types","",153,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::ir","",158,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::isa","",166,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",170,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::isa::registers","",172,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",211,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::isa","",169,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen::loop_analysis","",176,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::settings","",179,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",191,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::timing","",212,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen::verifier","",192,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_codegen","",3,[[["formatter"],["self"]],["result"]]],[11,"eq","cranelift_codegen::binemit","",6,[[["reloc"],["self"]],["bool"]]],[11,"eq","","",5,[[["codeinfo"],["self"]],["bool"]]],[11,"ne","","",5,[[["codeinfo"],["self"]],["bool"]]],[11,"eq","","",7,[[["self"],["frameunwindkind"]],["bool"]]],[11,"eq","cranelift_codegen::cursor","",17,[[["self"],["cursorposition"]],["bool"]]],[11,"ne","","",17,[[["self"],["cursorposition"]],["bool"]]],[11,"eq","cranelift_codegen::flowgraph","",22,[[["blockpredecessor"],["self"]],["bool"]]],[11,"ne","","",22,[[["blockpredecessor"],["self"]],["bool"]]],[11,"eq","cranelift_codegen::ir::constant","",59,[[["constantdata"],["self"]],["bool"]]],[11,"ne","","",59,[[["constantdata"],["self"]],["bool"]]],[11,"eq","cranelift_codegen::ir::dfg","",63,[[["valuedef"],["self"]],["bool"]]],[11,"ne","","",63,[[["valuedef"],["self"]],["bool"]]],[11,"eq","cranelift_codegen::ir::entities","",65,[[["self"],["block"]],["bool"]]],[11,"ne","","",65,[[["self"],["block"]],["bool"]]],[11,"eq","","",66,[[["self"],["value"]],["bool"]]],[11,"ne","","",66,[[["self"],["value"]],["bool"]]],[11,"eq","","",67,[[["inst"],["self"]],["bool"]]],[11,"ne","","",67,[[["inst"],["self"]],["bool"]]],[11,"eq","","",68,[[["stackslot"],["self"]],["bool"]]],[11,"ne","","",68,[[["stackslot"],["self"]],["bool"]]],[11,"eq","","",69,[[["self"],["globalvalue"]],["bool"]]],[11,"ne","","",69,[[["self"],["globalvalue"]],["bool"]]],[11,"eq","","",70,[[["constant"],["self"]],["bool"]]],[11,"ne","","",70,[[["constant"],["self"]],["bool"]]],[11,"eq","","",71,[[["immediate"],["self"]],["bool"]]],[11,"ne","","",71,[[["immediate"],["self"]],["bool"]]],[11,"eq","","",72,[[["jumptable"],["self"]],["bool"]]],[11,"ne","","",72,[[["jumptable"],["self"]],["bool"]]],[11,"eq","","",73,[[["self"],["funcref"]],["bool"]]],[11,"ne","","",73,[[["self"],["funcref"]],["bool"]]],[11,"eq","","",74,[[["self"],["sigref"]],["bool"]]],[11,"ne","","",74,[[["self"],["sigref"]],["bool"]]],[11,"eq","","",75,[[["heap"],["self"]],["bool"]]],[11,"ne","","",75,[[["heap"],["self"]],["bool"]]],[11,"eq","","",76,[[["self"],["table"]],["bool"]]],[11,"ne","","",76,[[["self"],["table"]],["bool"]]],[11,"eq","","",64,[[["anyentity"],["self"]],["bool"]]],[11,"ne","","",64,[[["anyentity"],["self"]],["bool"]]],[11,"eq","cranelift_codegen::ir","",29,[[["self"],["signature"]],["bool"]]],[11,"ne","","",29,[[["self"],["signature"]],["bool"]]],[11,"eq","","",27,[[["abiparam"],["self"]],["bool"]]],[11,"ne","","",27,[[["abiparam"],["self"]],["bool"]]],[11,"eq","","",34,[[["self"],["argumentextension"]],["bool"]]],[11,"eq","","",35,[[["argumentpurpose"],["self"]],["bool"]]],[11,"eq","","",36,[[["externalname"],["self"]],["bool"]]],[11,"ne","","",36,[[["externalname"],["self"]],["bool"]]],[11,"eq","","",39,[[["framelayoutchange"],["self"]],["bool"]]],[11,"ne","","",39,[[["framelayoutchange"],["self"]],["bool"]]],[11,"eq","cranelift_codegen::ir::immediates","",81,[[["self"],["imm64"]],["bool"]]],[11,"ne","","",81,[[["self"],["imm64"]],["bool"]]],[11,"eq","","",82,[[["self"],["uimm64"]],["bool"]]],[11,"ne","","",82,[[["self"],["uimm64"]],["bool"]]],[11,"eq","","",207,[[["self"],["uimm32"]],["bool"]]],[11,"ne","","",207,[[["self"],["uimm32"]],["bool"]]],[11,"eq","","",79,[[["self"],["v128imm"]],["bool"]]],[11,"ne","","",79,[[["self"],["v128imm"]],["bool"]]],[11,"eq","","",83,[[["offset32"],["self"]],["bool"]]],[11,"ne","","",83,[[["offset32"],["self"]],["bool"]]],[11,"eq","","",84,[[["self"],["ieee32"]],["bool"]]],[11,"ne","","",84,[[["self"],["ieee32"]],["bool"]]],[11,"eq","","",85,[[["ieee64"],["self"]],["bool"]]],[11,"ne","","",85,[[["ieee64"],["self"]],["bool"]]],[11,"eq","cranelift_codegen::ir::instructions","",87,[[["instructionformat"],["self"]],["bool"]]],[11,"eq","","",139,[[["self"],["opcode"]],["bool"]]],[11,"eq","","",86,[[["self"],["valuetypeset"]],["bool"]]],[11,"ne","","",86,[[["self"],["valuetypeset"]],["bool"]]],[11,"eq","","",142,[[["self"],["resolvedconstraint"]],["bool"]]],[11,"ne","","",142,[[["self"],["resolvedconstraint"]],["bool"]]],[11,"eq","cranelift_codegen::ir","",50,[[["self"],["libcall"]],["bool"]]],[11,"eq","","",147,[[["memflags"],["self"]],["bool"]]],[11,"ne","","",147,[[["memflags"],["self"]],["bool"]]],[11,"eq","","",202,[[["self"],["programpoint"]],["bool"]]],[11,"ne","","",202,[[["self"],["programpoint"]],["bool"]]],[11,"eq","","",51,[[["expandedprogrampoint"],["self"]],["bool"]]],[11,"ne","","",51,[[["expandedprogrampoint"],["self"]],["bool"]]],[11,"eq","","",148,[[["self"],["sourceloc"]],["bool"]]],[11,"ne","","",148,[[["self"],["sourceloc"]],["bool"]]],[11,"eq","cranelift_codegen::ir::stackslot","",152,[[["stackslotkind"],["self"]],["bool"]]],[11,"eq","","",149,[[["self"],["stackslotdata"]],["bool"]]],[11,"ne","","",149,[[["self"],["stackslotdata"]],["bool"]]],[11,"eq","","",150,[[["stacklayoutinfo"],["self"]],["bool"]]],[11,"ne","","",150,[[["stacklayoutinfo"],["self"]],["bool"]]],[11,"eq","","",151,[[["stackslots"],["self"]],["bool"]]],[11,"ne","","",151,[[["stackslots"],["self"]],["bool"]]],[11,"eq","cranelift_codegen::ir","",52,[[["trapcode"],["self"]],["bool"]]],[11,"ne","","",52,[[["trapcode"],["self"]],["bool"]]],[11,"eq","cranelift_codegen::ir::types","",153,[[["self"],["type"]],["bool"]]],[11,"ne","","",153,[[["self"],["type"]],["bool"]]],[11,"eq","cranelift_codegen::ir","",54,[[["self"],["valueloc"]],["bool"]]],[11,"ne","","",54,[[["self"],["valueloc"]],["bool"]]],[11,"eq","","",53,[[["self"],["argumentloc"]],["bool"]]],[11,"ne","","",53,[[["self"],["argumentloc"]],["bool"]]],[11,"eq","","",158,[[["valuelabel"],["self"]],["bool"]]],[11,"ne","","",158,[[["valuelabel"],["self"]],["bool"]]],[11,"eq","cranelift_codegen::isa","",166,[[["self"],["callconv"]],["bool"]]],[11,"eq","","",160,[[["operandconstraint"],["self"]],["bool"]]],[11,"ne","","",160,[[["operandconstraint"],["self"]],["bool"]]],[11,"eq","","",167,[[["constraintkind"],["self"]],["bool"]]],[11,"ne","","",167,[[["constraintkind"],["self"]],["bool"]]],[11,"eq","","",161,[[["recipeconstraints"],["self"]],["bool"]]],[11,"ne","","",161,[[["recipeconstraints"],["self"]],["bool"]]],[11,"eq","","",170,[[["encoding"],["self"]],["bool"]]],[11,"ne","","",170,[[["encoding"],["self"]],["bool"]]],[11,"eq","cranelift_codegen::isa::registers","",172,[[["self"]],["bool"]]],[11,"eq","","",210,[[["self"],["regclassindex"]],["bool"]]],[11,"ne","","",210,[[["self"],["regclassindex"]],["bool"]]],[11,"eq","cranelift_codegen::isa","",168,[[["self"],["stackbase"]],["bool"]]],[11,"eq","","",163,[[["self"],["stackbasemask"]],["bool"]]],[11,"ne","","",163,[[["self"],["stackbasemask"]],["bool"]]],[11,"eq","","",169,[[["lookuperror"],["self"]],["bool"]]],[11,"eq","cranelift_codegen::loop_analysis","",176,[[["self"],["loop"]],["bool"]]],[11,"ne","","",176,[[["self"],["loop"]],["bool"]]],[11,"eq","cranelift_codegen::settings","",179,[[["seterror"],["self"]],["bool"]]],[11,"ne","","",179,[[["seterror"],["self"]],["bool"]]],[11,"eq","","",180,[[["optlevel"],["self"]],["bool"]]],[11,"eq","","",181,[[["self"],["tlsmodel"]],["bool"]]],[11,"eq","","",182,[[["self"],["libcallcallconv"]],["bool"]]],[11,"eq","cranelift_codegen::verifier","",192,[[["self"],["verifiererror"]],["bool"]]],[11,"ne","","",192,[[["self"],["verifiererror"]],["bool"]]],[11,"eq","","",193,[[["self"],["verifiererrors"]],["bool"]]],[11,"ne","","",193,[[["self"],["verifiererrors"]],["bool"]]],[11,"eq","cranelift_codegen","",3,[[["self"],["codegenerror"]],["bool"]]],[11,"ne","","",3,[[["self"],["codegenerror"]],["bool"]]],[11,"eq","","",2,[[["self"],["valuelocrange"]],["bool"]]],[11,"ne","","",2,[[["self"],["valuelocrange"]],["bool"]]],[11,"cmp","cranelift_codegen::ir::entities","",65,[[["self"],["block"]],["ordering"]]],[11,"cmp","","",66,[[["self"],["value"]],["ordering"]]],[11,"cmp","","",67,[[["inst"],["self"]],["ordering"]]],[11,"cmp","","",68,[[["stackslot"],["self"]],["ordering"]]],[11,"cmp","","",69,[[["self"],["globalvalue"]],["ordering"]]],[11,"cmp","","",70,[[["constant"],["self"]],["ordering"]]],[11,"cmp","","",71,[[["immediate"],["self"]],["ordering"]]],[11,"cmp","","",72,[[["jumptable"],["self"]],["ordering"]]],[11,"cmp","","",73,[[["self"],["funcref"]],["ordering"]]],[11,"cmp","","",74,[[["self"],["sigref"]],["ordering"]]],[11,"cmp","","",75,[[["heap"],["self"]],["ordering"]]],[11,"cmp","","",76,[[["self"],["table"]],["ordering"]]],[11,"cmp","","",64,[[["anyentity"],["self"]],["ordering"]]],[11,"partial_cmp","","",65,[[["self"],["block"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",65,[[["self"],["block"]],["bool"]]],[11,"le","","",65,[[["self"],["block"]],["bool"]]],[11,"gt","","",65,[[["self"],["block"]],["bool"]]],[11,"ge","","",65,[[["self"],["block"]],["bool"]]],[11,"partial_cmp","","",66,[[["self"],["value"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",66,[[["self"],["value"]],["bool"]]],[11,"le","","",66,[[["self"],["value"]],["bool"]]],[11,"gt","","",66,[[["self"],["value"]],["bool"]]],[11,"ge","","",66,[[["self"],["value"]],["bool"]]],[11,"partial_cmp","","",67,[[["inst"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",67,[[["inst"],["self"]],["bool"]]],[11,"le","","",67,[[["inst"],["self"]],["bool"]]],[11,"gt","","",67,[[["inst"],["self"]],["bool"]]],[11,"ge","","",67,[[["inst"],["self"]],["bool"]]],[11,"partial_cmp","","",68,[[["stackslot"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",68,[[["stackslot"],["self"]],["bool"]]],[11,"le","","",68,[[["stackslot"],["self"]],["bool"]]],[11,"gt","","",68,[[["stackslot"],["self"]],["bool"]]],[11,"ge","","",68,[[["stackslot"],["self"]],["bool"]]],[11,"partial_cmp","","",69,[[["self"],["globalvalue"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",69,[[["self"],["globalvalue"]],["bool"]]],[11,"le","","",69,[[["self"],["globalvalue"]],["bool"]]],[11,"gt","","",69,[[["self"],["globalvalue"]],["bool"]]],[11,"ge","","",69,[[["self"],["globalvalue"]],["bool"]]],[11,"partial_cmp","","",70,[[["constant"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",70,[[["constant"],["self"]],["bool"]]],[11,"le","","",70,[[["constant"],["self"]],["bool"]]],[11,"gt","","",70,[[["constant"],["self"]],["bool"]]],[11,"ge","","",70,[[["constant"],["self"]],["bool"]]],[11,"partial_cmp","","",71,[[["immediate"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",71,[[["immediate"],["self"]],["bool"]]],[11,"le","","",71,[[["immediate"],["self"]],["bool"]]],[11,"gt","","",71,[[["immediate"],["self"]],["bool"]]],[11,"ge","","",71,[[["immediate"],["self"]],["bool"]]],[11,"partial_cmp","","",72,[[["jumptable"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",72,[[["jumptable"],["self"]],["bool"]]],[11,"le","","",72,[[["jumptable"],["self"]],["bool"]]],[11,"gt","","",72,[[["jumptable"],["self"]],["bool"]]],[11,"ge","","",72,[[["jumptable"],["self"]],["bool"]]],[11,"partial_cmp","","",73,[[["self"],["funcref"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",73,[[["self"],["funcref"]],["bool"]]],[11,"le","","",73,[[["self"],["funcref"]],["bool"]]],[11,"gt","","",73,[[["self"],["funcref"]],["bool"]]],[11,"ge","","",73,[[["self"],["funcref"]],["bool"]]],[11,"partial_cmp","","",74,[[["self"],["sigref"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",74,[[["self"],["sigref"]],["bool"]]],[11,"le","","",74,[[["self"],["sigref"]],["bool"]]],[11,"gt","","",74,[[["self"],["sigref"]],["bool"]]],[11,"ge","","",74,[[["self"],["sigref"]],["bool"]]],[11,"partial_cmp","","",75,[[["heap"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",75,[[["heap"],["self"]],["bool"]]],[11,"le","","",75,[[["heap"],["self"]],["bool"]]],[11,"gt","","",75,[[["heap"],["self"]],["bool"]]],[11,"ge","","",75,[[["heap"],["self"]],["bool"]]],[11,"partial_cmp","","",76,[[["self"],["table"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",76,[[["self"],["table"]],["bool"]]],[11,"le","","",76,[[["self"],["table"]],["bool"]]],[11,"gt","","",76,[[["self"],["table"]],["bool"]]],[11,"ge","","",76,[[["self"],["table"]],["bool"]]],[11,"partial_cmp","","",64,[[["anyentity"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",64,[[["anyentity"],["self"]],["bool"]]],[11,"le","","",64,[[["anyentity"],["self"]],["bool"]]],[11,"gt","","",64,[[["anyentity"],["self"]],["bool"]]],[11,"ge","","",64,[[["anyentity"],["self"]],["bool"]]],[11,"drop","cranelift_codegen::timing","",213,[[["self"]]]],[11,"index","cranelift_codegen::ir::dfg","",62,[[["self"],["inst"]],["instructiondata"]]],[11,"index","cranelift_codegen::ir::stackslot","",151,[[["self"],["stackslot"]],["stackslotdata"]]],[11,"index_mut","cranelift_codegen::ir::dfg","",62,[[["self"],["inst"]],["instructiondata"]]],[11,"index_mut","cranelift_codegen::ir::stackslot","",151,[[["self"],["stackslot"]],["stackslotdata"]]],[11,"hash","cranelift_codegen::ir::constant","",59,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen::ir::entities","",65,[[["self"],["__h"]]]],[11,"hash","","",66,[[["self"],["__h"]]]],[11,"hash","","",67,[[["self"],["__h"]]]],[11,"hash","","",68,[[["self"],["__h"]]]],[11,"hash","","",69,[[["self"],["__h"]]]],[11,"hash","","",70,[[["self"],["__h"]]]],[11,"hash","","",71,[[["self"],["__h"]]]],[11,"hash","","",72,[[["self"],["__h"]]]],[11,"hash","","",73,[[["self"],["__h"]]]],[11,"hash","","",74,[[["self"],["__h"]]]],[11,"hash","","",75,[[["self"],["__h"]]]],[11,"hash","","",76,[[["self"],["__h"]]]],[11,"hash","","",64,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen::ir","",29,[[["self"],["__h"]]]],[11,"hash","","",27,[[["self"],["__h"]]]],[11,"hash","","",34,[[["self"],["__h"]]]],[11,"hash","","",35,[[["self"],["__h"]]]],[11,"hash","","",39,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen::ir::immediates","",81,[[["self"],["__h"]]]],[11,"hash","","",82,[[["self"],["__h"]]]],[11,"hash","","",207,[[["self"],["__h"]]]],[11,"hash","","",79,[[["self"],["__h"]]]],[11,"hash","","",83,[[["self"],["__h"]]]],[11,"hash","","",84,[[["self"],["__h"]]]],[11,"hash","","",85,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen::ir::instructions","",139,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen::ir","",50,[[["self"],["__h"]]]],[11,"hash","","",147,[[["self"],["__h"]]]],[11,"hash","","",52,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen::ir::types","",153,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen::ir","",53,[[["self"],["__h"]]]],[11,"hash","","",158,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen::isa","",166,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen::loop_analysis","",176,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen::settings","",180,[[["self"],["__h"]]]],[11,"hash","","",181,[[["self"],["__h"]]]],[11,"hash","","",182,[[["self"],["__h"]]]],[11,"next","cranelift_codegen::dominator_tree","",200,[[["self"]],[["option",["block"]],["block"]]]],[11,"next","cranelift_codegen::flowgraph","",201,[[["self"]],[["option",["blockpredecessor"]],["blockpredecessor"]]]],[11,"next","cranelift_codegen::ir::dfg","",203,[[["self"]],["option"]]],[11,"next","cranelift_codegen::ir::function","",206,[[["self"]],["option"]]],[11,"next","cranelift_codegen::ir::layout","",208,[[["self"]],[["option",["block"]],["block"]]]],[11,"next","","",209,[[["self"]],[["option",["inst"]],["inst"]]]],[11,"next_back","","",209,[[["self"]],[["option",["inst"]],["inst"]]]],[11,"from_iter","cranelift_codegen::ir::constant","",59,[[["intoiterator"]],["self"]]],[11,"from_str","","Parse a hexadecimal string to `ConstantData`. This is the…",59,[[["str"]],[["result",["str"]],["str"]]]],[11,"from_str","cranelift_codegen::ir","",35,[[["str"]],["result"]]],[11,"from_str","","",36,[[["str"]],["result"]]],[11,"from_str","cranelift_codegen::ir::immediates","",81,[[["str"]],[["result",["str"]],["str"]]]],[11,"from_str","","",82,[[["str"]],[["result",["str"]],["str"]]]],[11,"from_str","","",207,[[["str"]],[["result",["str"]],["str"]]]],[11,"from_str","","",83,[[["str"]],[["result",["str"]],["str"]]]],[11,"from_str","","",84,[[["str"]],[["result",["str"]],["str"]]]],[11,"from_str","","",85,[[["str"]],[["result",["str"]],["str"]]]],[11,"from_str","cranelift_codegen::ir::instructions","Parse an Opcode name from a string.",139,[[["str"]],[["result",["str"]],["str"]]]],[11,"from_str","cranelift_codegen::ir","",50,[[["str"]],["result"]]],[11,"from_str","cranelift_codegen::ir::stackslot","",152,[[["str"]],["result"]]],[11,"from_str","cranelift_codegen::ir","",52,[[["str"]],["result"]]],[11,"from_str","cranelift_codegen::isa","",166,[[["str"]],["result"]]],[11,"from_str","cranelift_codegen::settings","",180,[[["str"]],["result"]]],[11,"from_str","","",181,[[["str"]],["result"]]],[11,"from_str","","",182,[[["str"]],["result"]]],[11,"into","cranelift_codegen::ir::immediates","",81,[[],["i64"]]],[11,"into","","",82,[[],["u64"]]],[11,"into","","",207,[[],["u32"]]],[11,"into","","",207,[[],["i64"]]],[11,"into","","",83,[[],["i32"]]],[11,"into","","",83,[[],["i64"]]],[11,"into","cranelift_codegen::verifier","",193,[[],[["verifiererror"],["vec",["verifiererror"]]]]],[11,"into","","",193,[[],["verifierresult"]]],[11,"clone","cranelift_codegen::binemit","",8,[[["self"]],["stackmap"]]],[11,"clone","","",6,[[["self"]],["reloc"]]],[11,"clone","","",7,[[["self"]],["frameunwindkind"]]],[11,"clone","cranelift_codegen::cursor","",17,[[["self"]],["cursorposition"]]],[11,"clone","cranelift_codegen::ir::constant","",59,[[["self"]],["constantdata"]]],[11,"clone","","",60,[[["self"]],["constantpoolentry"]]],[11,"clone","","",61,[[["self"]],["constantpool"]]],[11,"clone","cranelift_codegen::ir::dfg","",62,[[["self"]],["dataflowgraph"]]],[11,"clone","","",63,[[["self"]],["valuedef"]]],[11,"clone","cranelift_codegen::ir::entities","",65,[[["self"]],["block"]]],[11,"clone","","",66,[[["self"]],["value"]]],[11,"clone","","",67,[[["self"]],["inst"]]],[11,"clone","","",68,[[["self"]],["stackslot"]]],[11,"clone","","",69,[[["self"]],["globalvalue"]]],[11,"clone","","",70,[[["self"]],["constant"]]],[11,"clone","","",71,[[["self"]],["immediate"]]],[11,"clone","","",72,[[["self"]],["jumptable"]]],[11,"clone","","",73,[[["self"]],["funcref"]]],[11,"clone","","",74,[[["self"]],["sigref"]]],[11,"clone","","",75,[[["self"]],["heap"]]],[11,"clone","","",76,[[["self"]],["table"]]],[11,"clone","","",64,[[["self"]],["anyentity"]]],[11,"clone","cranelift_codegen::ir","",29,[[["self"]],["signature"]]],[11,"clone","","",27,[[["self"]],["abiparam"]]],[11,"clone","","",34,[[["self"]],["argumentextension"]]],[11,"clone","","",35,[[["self"]],["argumentpurpose"]]],[11,"clone","","",28,[[["self"]],["extfuncdata"]]],[11,"clone","","",36,[[["self"]],["externalname"]]],[11,"clone","","",39,[[["self"]],["framelayoutchange"]]],[11,"clone","","",30,[[["self"]],["framelayout"]]],[11,"clone","cranelift_codegen::ir::function","",77,[[["self"]],["function"]]],[11,"clone","cranelift_codegen::ir","",43,[[["self"]],["globalvaluedata"]]],[11,"clone","","",31,[[["self"]],["heapdata"]]],[11,"clone","","",47,[[["self"]],["heapstyle"]]],[11,"clone","cranelift_codegen::ir::immediates","",81,[[["self"]],["imm64"]]],[11,"clone","","",82,[[["self"]],["uimm64"]]],[11,"clone","","",207,[[["self"]],["uimm32"]]],[11,"clone","","",79,[[["self"]],["v128imm"]]],[11,"clone","","",83,[[["self"]],["offset32"]]],[11,"clone","","",84,[[["self"]],["ieee32"]]],[11,"clone","","",85,[[["self"]],["ieee64"]]],[11,"clone","cranelift_codegen::ir::instructions","",87,[[["self"]],["instructionformat"]]],[11,"clone","","",88,[[["self"]],["instructiondata"]]],[11,"clone","","",139,[[["self"]],["opcode"]]],[11,"clone","","",143,[[["self"]],["variableargs"]]],[11,"clone","","",144,[[["self"]],["opcodeconstraints"]]],[11,"clone","","",86,[[["self"]],["valuetypeset"]]],[11,"clone","","",142,[[["self"]],["resolvedconstraint"]]],[11,"clone","cranelift_codegen::ir::jumptable","",145,[[["self"]],["jumptabledata"]]],[11,"clone","cranelift_codegen::ir::layout","",146,[[["self"]],["layout"]]],[11,"clone","cranelift_codegen::ir","",50,[[["self"]],["libcall"]]],[11,"clone","","",147,[[["self"]],["memflags"]]],[11,"clone","","",202,[[["self"]],["programpoint"]]],[11,"clone","","",51,[[["self"]],["expandedprogrampoint"]]],[11,"clone","","",148,[[["self"]],["sourceloc"]]],[11,"clone","cranelift_codegen::ir::stackslot","",152,[[["self"]],["stackslotkind"]]],[11,"clone","","",149,[[["self"]],["stackslotdata"]]],[11,"clone","","",150,[[["self"]],["stacklayoutinfo"]]],[11,"clone","","",151,[[["self"]],["stackslots"]]],[11,"clone","cranelift_codegen::ir","",32,[[["self"]],["tabledata"]]],[11,"clone","","",52,[[["self"]],["trapcode"]]],[11,"clone","cranelift_codegen::ir::types","",153,[[["self"]],["type"]]],[11,"clone","cranelift_codegen::ir","",54,[[["self"]],["valueloc"]]],[11,"clone","","",53,[[["self"]],["argumentloc"]]],[11,"clone","","",158,[[["self"]],["valuelabel"]]],[11,"clone","","",33,[[["self"]],["valuelabelstart"]]],[11,"clone","","",55,[[["self"]],["valuelabelassignments"]]],[11,"clone","cranelift_codegen::isa","",166,[[["self"]],["callconv"]]],[11,"clone","","",167,[[["self"]],["constraintkind"]]],[11,"clone","","",161,[[["self"]],["recipeconstraints"]]],[11,"clone","","",159,[[["self"]],["branchrange"]]],[11,"clone","","",170,[[["self"]],["encoding"]]],[11,"clone","","",162,[[["self"]],["encinfo"]]],[11,"clone","cranelift_codegen::isa::registers","",210,[[["self"]],["regclassindex"]]],[11,"clone","","",173,[[["self"]],["reginfo"]]],[11,"clone","cranelift_codegen::isa","",164,[[["self"]],["stackref"]]],[11,"clone","","",168,[[["self"]],["stackbase"]]],[11,"clone","","",163,[[["self"]],["stackbasemask"]]],[11,"clone","","",169,[[["self"]],["lookuperror"]]],[11,"clone","","",165,[[["self"]],["targetfrontendconfig"]]],[11,"clone","cranelift_codegen::loop_analysis","",176,[[["self"]],["loop"]]],[11,"clone","cranelift_codegen::settings","",189,[[["self"]],["builder"]]],[11,"clone","","",190,[[["self"]],["predicateview"]]],[11,"clone","cranelift_codegen::settings::detail","",185,[[["self"]],["detail"]]],[11,"clone","cranelift_codegen::settings","",191,[[["self"]],["flags"]]],[11,"clone","","",180,[[["self"]],["optlevel"]]],[11,"clone","","",181,[[["self"]],["tlsmodel"]]],[11,"clone","","",182,[[["self"]],["libcallcallconv"]]],[11,"clone","","",178,[[["self"]],["flagsorisa"]]],[11,"clone","cranelift_codegen::verifier","",192,[[["self"]],["verifiererror"]]],[11,"clone","","",193,[[["self"]],["verifiererrors"]]],[11,"clone","cranelift_codegen::binemit","",195,[[["self"]],["regdiversions"]]],[11,"clone","cranelift_codegen","",2,[[["self"]],["valuelocrange"]]],[11,"default","cranelift_codegen::ir::constant","",59,[[],["constantdata"]]],[11,"default","cranelift_codegen::ir","",36,[[],["self"]]],[11,"default","cranelift_codegen::ir::function","",78,[[],["displayfunctionannotations"]]],[11,"default","cranelift_codegen::ir::instructions","",143,[[],["self"]]],[11,"default","cranelift_codegen::ir","",148,[[],["self"]]],[11,"default","cranelift_codegen::ir::types","",153,[[],["self"]]],[11,"default","cranelift_codegen::ir","",54,[[],["self"]]],[11,"default","","",53,[[],["self"]]],[11,"default","cranelift_codegen::isa","",170,[[],["self"]]],[11,"default","cranelift_codegen::timing","",212,[[],["self"]]],[11,"default","cranelift_codegen::verifier","",193,[[],["verifiererrors"]]],[11,"source","cranelift_codegen","",3,[[["self"]],[["option",["error"]],["error"]]]],[11,"new","cranelift_codegen::ir::entities","",65,[[["usize"]],["self"]]],[11,"index","","",65,[[],["usize"]]],[11,"new","","",66,[[["usize"]],["self"]]],[11,"index","","",66,[[],["usize"]]],[11,"new","","",67,[[["usize"]],["self"]]],[11,"index","","",67,[[],["usize"]]],[11,"new","","",68,[[["usize"]],["self"]]],[11,"index","","",68,[[],["usize"]]],[11,"new","","",69,[[["usize"]],["self"]]],[11,"index","","",69,[[],["usize"]]],[11,"new","","",70,[[["usize"]],["self"]]],[11,"index","","",70,[[],["usize"]]],[11,"new","","",71,[[["usize"]],["self"]]],[11,"index","","",71,[[],["usize"]]],[11,"new","","",72,[[["usize"]],["self"]]],[11,"index","","",72,[[],["usize"]]],[11,"new","","",73,[[["usize"]],["self"]]],[11,"index","","",73,[[],["usize"]]],[11,"new","","",74,[[["usize"]],["self"]]],[11,"index","","",74,[[],["usize"]]],[11,"new","","",75,[[["usize"]],["self"]]],[11,"index","","",75,[[],["usize"]]],[11,"new","","",76,[[["usize"]],["self"]]],[11,"index","","",76,[[],["usize"]]],[11,"new","cranelift_codegen::ir","",158,[[["usize"]],["self"]]],[11,"index","","",158,[[],["usize"]]],[11,"new","cranelift_codegen::isa::registers","",210,[[["usize"]],["self"]]],[11,"index","","",210,[[],["usize"]]],[11,"new","cranelift_codegen::loop_analysis","",176,[[["usize"]],["self"]]],[11,"index","","",176,[[],["usize"]]],[11,"reserved_value","cranelift_codegen::ir::entities","",65,[[],["block"]]],[11,"reserved_value","","",66,[[],["value"]]],[11,"reserved_value","","",67,[[],["inst"]]],[11,"reserved_value","","",68,[[],["stackslot"]]],[11,"reserved_value","","",69,[[],["globalvalue"]]],[11,"reserved_value","","",70,[[],["constant"]]],[11,"reserved_value","","",71,[[],["immediate"]]],[11,"reserved_value","","",72,[[],["jumptable"]]],[11,"reserved_value","","",73,[[],["funcref"]]],[11,"reserved_value","","",74,[[],["sigref"]]],[11,"reserved_value","","",75,[[],["heap"]]],[11,"reserved_value","","",76,[[],["table"]]],[11,"reserved_value","cranelift_codegen::ir","",158,[[],["valuelabel"]]],[11,"reserved_value","cranelift_codegen::loop_analysis","",176,[[],["loop"]]],[11,"deserialize","cranelift_codegen::binemit","",6,[[["__d"]],["result"]]],[11,"deserialize","cranelift_codegen::ir::entities","",68,[[["__d"]],["result"]]],[11,"deserialize","","",72,[[["__d"]],["result"]]],[11,"deserialize","cranelift_codegen::ir","",39,[[["__d"]],["result"]]],[11,"deserialize","","",50,[[["__d"]],["result"]]],[11,"deserialize","","",148,[[["__d"]],["result"]]],[11,"deserialize","cranelift_codegen::ir::stackslot","",152,[[["__d"]],["result"]]],[11,"deserialize","","",149,[[["__d"]],["result"]]],[11,"deserialize","","",150,[[["__d"]],["result"]]],[11,"deserialize","","",151,[[["__d"]],["result"]]],[11,"deserialize","cranelift_codegen::ir","",52,[[["__d"]],["result"]]],[11,"deserialize","","",54,[[["__d"]],["result"]]],[11,"deserialize","","",158,[[["__d"]],["result"]]],[11,"deserialize","cranelift_codegen::isa","",166,[[["__d"]],["result"]]],[11,"deserialize","cranelift_codegen","",2,[[["__d"]],["result"]]],[11,"serialize","cranelift_codegen::binemit","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","cranelift_codegen::ir::entities","",68,[[["self"],["__s"]],["result"]]],[11,"serialize","","",72,[[["self"],["__s"]],["result"]]],[11,"serialize","cranelift_codegen::ir","",39,[[["self"],["__s"]],["result"]]],[11,"serialize","","",50,[[["self"],["__s"]],["result"]]],[11,"serialize","","",148,[[["self"],["__s"]],["result"]]],[11,"serialize","cranelift_codegen::ir::stackslot","",152,[[["self"],["__s"]],["result"]]],[11,"serialize","","",149,[[["self"],["__s"]],["result"]]],[11,"serialize","","",150,[[["self"],["__s"]],["result"]]],[11,"serialize","","",151,[[["self"],["__s"]],["result"]]],[11,"serialize","cranelift_codegen::ir","",52,[[["self"],["__s"]],["result"]]],[11,"serialize","","",54,[[["self"],["__s"]],["result"]]],[11,"serialize","","",158,[[["self"],["__s"]],["result"]]],[11,"serialize","cranelift_codegen::isa","",166,[[["self"],["__s"]],["result"]]],[11,"serialize","cranelift_codegen","",2,[[["self"],["__s"]],["result"]]],[11,"is_none","cranelift_codegen::packed_option","Returns `true` if the packed option is a `None` value.",196,[[["self"]],["bool"]]],[11,"is_some","","Returns `true` if the packed option is a `Some` value.",196,[[["self"]],["bool"]]],[11,"expand","","Expand the packed option into a normal `Option`.",196,[[],["option"]]],[11,"map","","Maps a `PackedOption<T>` to `Option<U>` by applying a…",196,[[["f"]],["option"]]],[11,"unwrap","","Unwrap a packed `Some` value or panic.",196,[[],["t"]]],[11,"expect","","Unwrap a packed `Some` value or panic.",196,[[["str"]],["t"]]],[11,"take","","Takes the value out of the packed option, leaving a `None`…",196,[[["self"]],["option"]]],[11,"without_equal","cranelift_codegen::ir::condcodes","Get the corresponding IntCC with the equal component…",25,[[],["intcc"]]],[11,"unsigned","","Get the corresponding IntCC with the signed component…",25,[[],["intcc"]]],[11,"to_static_str","","Get the corresponding string condition code for the IntCC…",25,[[],["str"]]],[11,"jump","cranelift_codegen::ir","Jump.",154,[[["block"]],["inst"]]],[11,"fallthrough","","Fall through to the next block.",154,[[["block"]],["inst"]]],[11,"brz","","Branch when zero.",154,[[["value"],["block"]],["inst"]]],[11,"brnz","","Branch when non-zero.",154,[[["value"],["block"]],["inst"]]],[11,"br_icmp","","Compare scalar integers and branch.",154,[[["intcc"],["value"],["into",["intcc"]],["block"]],["inst"]]],[11,"brif","","Branch when condition is true in integer CPU flags.",154,[[["intcc"],["value"],["into",["intcc"]],["block"]],["inst"]]],[11,"brff","","Branch when condition is true in floating point CPU flags.",154,[[["floatcc"],["value"],["into",["floatcc"]],["block"]],["inst"]]],[11,"br_table","","Indirect branch via jump table.",154,[[["value"],["jumptable"],["block"]],["inst"]]],[11,"jump_table_entry","","Get an entry from a jump table.",154,[[["into",["uimm8"]],["jumptable"],["value"],["uimm8"]],["value"]]],[11,"jump_table_base","","Get the absolute base address of a jump table.",154,[[["type"],["jumptable"]],["value"]]],[11,"indirect_jump_table_br","","Branch indirectly via a jump table entry.",154,[[["value"],["jumptable"]],["inst"]]],[11,"debugtrap","","Encodes an assembly debug trap.",154,[[],["inst"]]],[11,"trap","","Terminate execution unconditionally.",154,[[["into",["trapcode"]],["trapcode"]],["inst"]]],[11,"trapz","","Trap when zero.",154,[[["value"],["into",["trapcode"]],["trapcode"]],["inst"]]],[11,"resumable_trap","","A resumable trap.",154,[[["into",["trapcode"]],["trapcode"]],["inst"]]],[11,"trapnz","","Trap when non-zero.",154,[[["value"],["into",["trapcode"]],["trapcode"]],["inst"]]],[11,"trapif","","Trap when condition is true in integer CPU flags.",154,[[["intcc"],["trapcode"],["value"],["into",["intcc"]],["into",["trapcode"]]],["inst"]]],[11,"trapff","","Trap when condition is true in floating point CPU flags.",154,[[["trapcode"],["floatcc"],["value"],["into",["floatcc"]],["into",["trapcode"]]],["inst"]]],[11,"return_","","Return from the function.",154,[[],["inst"]]],[11,"fallthrough_return","","Return from the function by fallthrough.",154,[[],["inst"]]],[11,"call","","Direct function call.",154,[[["funcref"]],["inst"]]],[11,"call_indirect","","Indirect function call.",154,[[["value"],["sigref"]],["inst"]]],[11,"func_addr","","Get the address of a function.",154,[[["type"],["funcref"]],["value"]]],[11,"splat","","Vector splat.",154,[[["value"],["type"]],["value"]]],[11,"swizzle","","Vector swizzle.",154,[[["value"],["type"]],["value"]]],[11,"insertlane","","Insert `y` as lane `Idx` in x.",154,[[["into",["uimm8"]],["value"],["uimm8"]],["value"]]],[11,"extractlane","","Extract lane `Idx` from `x`.",154,[[["value"],["into",["uimm8"]],["uimm8"]],["value"]]],[11,"imin","","Signed integer minimum.",154,[[["value"]],["value"]]],[11,"umin","","Unsigned integer minimum.",154,[[["value"]],["value"]]],[11,"imax","","Signed integer maximum.",154,[[["value"]],["value"]]],[11,"umax","","Unsigned integer maximum.",154,[[["value"]],["value"]]],[11,"avg_round","","Unsigned average with rounding: `a := (x + y + 1) // 2`",154,[[["value"]],["value"]]],[11,"load","","Load from memory at `p + Offset`.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["type"],["offset32"]],["value"]]],[11,"load_complex","","Load from memory at `sum(args) + Offset`.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["type"],["offset32"]],["value"]]],[11,"store","","Store `x` to memory at `p + Offset`.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["offset32"]],["inst"]]],[11,"store_complex","","Store `x` to memory at `sum(args) + Offset`.",154,[[["memflags"],["into",["memflags"]],["value"],["into",["offset32"]],["offset32"]],["inst"]]],[11,"uload8","","Load 8 bits from memory at `p + Offset` and zero-extend.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["type"],["offset32"]],["value"]]],[11,"uload8_complex","","Load 8 bits from memory at `sum(args) + Offset` and…",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["type"],["offset32"]],["value"]]],[11,"sload8","","Load 8 bits from memory at `p + Offset` and sign-extend.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["type"],["offset32"]],["value"]]],[11,"sload8_complex","","Load 8 bits from memory at `sum(args) + Offset` and…",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["type"],["offset32"]],["value"]]],[11,"istore8","","Store the low 8 bits of `x` to memory at `p + Offset`.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["offset32"]],["inst"]]],[11,"istore8_complex","","Store the low 8 bits of `x` to memory at `sum(args) +…",154,[[["memflags"],["into",["memflags"]],["value"],["into",["offset32"]],["offset32"]],["inst"]]],[11,"uload16","","Load 16 bits from memory at `p + Offset` and zero-extend.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["type"],["offset32"]],["value"]]],[11,"uload16_complex","","Load 16 bits from memory at `sum(args) + Offset` and…",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["type"],["offset32"]],["value"]]],[11,"sload16","","Load 16 bits from memory at `p + Offset` and sign-extend.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["type"],["offset32"]],["value"]]],[11,"sload16_complex","","Load 16 bits from memory at `sum(args) + Offset` and…",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["type"],["offset32"]],["value"]]],[11,"istore16","","Store the low 16 bits of `x` to memory at `p + Offset`.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["offset32"]],["inst"]]],[11,"istore16_complex","","Store the low 16 bits of `x` to memory at `sum(args) +…",154,[[["memflags"],["into",["memflags"]],["value"],["into",["offset32"]],["offset32"]],["inst"]]],[11,"uload32","","Load 32 bits from memory at `p + Offset` and zero-extend.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["offset32"]],["value"]]],[11,"uload32_complex","","Load 32 bits from memory at `sum(args) + Offset` and…",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["offset32"]],["value"]]],[11,"sload32","","Load 32 bits from memory at `p + Offset` and sign-extend.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["offset32"]],["value"]]],[11,"sload32_complex","","Load 32 bits from memory at `sum(args) + Offset` and…",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["offset32"]],["value"]]],[11,"istore32","","Store the low 32 bits of `x` to memory at `p + Offset`.",154,[[["memflags"],["into",["memflags"]],["into",["offset32"]],["value"],["offset32"]],["inst"]]],[11,"istore32_complex","","Store the low 32 bits of `x` to memory at `sum(args) +…",154,[[["memflags"],["into",["memflags"]],["value"],["into",["offset32"]],["offset32"]],["inst"]]],[11,"stack_load","","Load a value from a stack slot at the constant offset.",154,[[["into",["offset32"]],["type"],["stackslot"],["offset32"]],["value"]]],[11,"stack_store","","Store a value to a stack slot at a constant offset.",154,[[["into",["offset32"]],["value"],["stackslot"],["offset32"]],["inst"]]],[11,"stack_addr","","Get the address of a stack slot.",154,[[["into",["offset32"]],["type"],["stackslot"],["offset32"]],["value"]]],[11,"global_value","","Compute the value of global GV.",154,[[["type"],["globalvalue"]],["value"]]],[11,"symbol_value","","Compute the value of global GV, which is a symbolic value.",154,[[["type"],["globalvalue"]],["value"]]],[11,"tls_value","","Compute the value of global GV, which is a TLS (thread…",154,[[["type"],["globalvalue"]],["value"]]],[11,"heap_addr","","Bounds check and compute absolute address of heap memory.",154,[[["into",["uimm32"]],["value"],["type"],["heap"],["uimm32"]],["value"]]],[11,"get_pinned_reg","","Gets the content of the pinned register, when it's enabled.",154,[[["type"]],["value"]]],[11,"set_pinned_reg","","Sets the content of the pinned register, when it's enabled.",154,[[["value"]],["inst"]]],[11,"table_addr","","Bounds check and compute absolute address of a table entry.",154,[[["into",["offset32"]],["table"],["type"],["value"],["offset32"]],["value"]]],[11,"iconst","","Integer constant.",154,[[["type"],["into",["imm64"]],["imm64"]],["value"]]],[11,"f32const","","Floating point constant.",154,[[["into",["ieee32"]],["ieee32"]],["value"]]],[11,"f64const","","Floating point constant.",154,[[["into",["ieee64"]],["ieee64"]],["value"]]],[11,"bconst","","Boolean constant.",154,[[["bool"],["type"],["into",["bool"]]],["value"]]],[11,"vconst","","SIMD vector constant.",154,[[["type"],["into",["constant"]],["constant"]],["value"]]],[11,"shuffle","","SIMD vector shuffle.",154,[[["value"],["immediate"],["into",["immediate"]]],["value"]]],[11,"null","","Null constant value for reference types.",154,[[["type"]],["value"]]],[11,"nop","","Just a dummy instruction.",154,[[],["inst"]]],[11,"select","","Conditional select.",154,[[["value"]],["value"]]],[11,"selectif","","Conditional select, dependent on integer condition codes.",154,[[["intcc"],["value"],["type"],["into",["intcc"]]],["value"]]],[11,"bitselect","","Conditional select of bits.",154,[[["value"]],["value"]]],[11,"copy","","Register-register copy.",154,[[["value"]],["value"]]],[11,"spill","","Spill a register value to a stack slot.",154,[[["value"]],["value"]]],[11,"fill","","Load a register value from a stack slot.",154,[[["value"]],["value"]]],[11,"fill_nop","","This is identical to `fill`, except it has no encoding,…",154,[[["value"]],["value"]]],[11,"regmove","","Temporarily divert `x` from `src` to `dst`.",154,[[["into",["regunit"]],["value"],["regunit"]],["inst"]]],[11,"copy_special","","Copies the contents of ''src'' register to ''dst'' register.",154,[[["into",["regunit"]],["regunit"]],["inst"]]],[11,"copy_to_ssa","","Copies the contents of ''src'' register to ''a'' SSA name.",154,[[["into",["regunit"]],["type"],["regunit"]],["value"]]],[11,"copy_nop","","Stack-slot-to-the-same-stack-slot copy, which is…",154,[[["value"]],["value"]]],[11,"adjust_sp_down","","Subtracts `delta` offset value from the stack pointer…",154,[[["value"]],["inst"]]],[11,"adjust_sp_up_imm","","Adds `Offset` immediate offset value to the stack pointer…",154,[[["into",["imm64"]],["imm64"]],["inst"]]],[11,"adjust_sp_down_imm","","Subtracts `Offset` immediate offset value from the stack…",154,[[["into",["imm64"]],["imm64"]],["inst"]]],[11,"ifcmp_sp","","Compare `addr` with the stack pointer and set the CPU flags.",154,[[["value"]],["value"]]],[11,"regspill","","Temporarily divert `x` from `src` to `SS`.",154,[[["into",["regunit"]],["value"],["stackslot"],["regunit"]],["inst"]]],[11,"regfill","","Temporarily divert `x` from `SS` to `dst`.",154,[[["into",["regunit"]],["value"],["stackslot"],["regunit"]],["inst"]]],[11,"safepoint","","This instruction will provide live reference values at a…",154,[[],["inst"]]],[11,"vsplit","","Split a vector into two halves.",154,[[["value"]]]],[11,"vconcat","","Vector concatenation.",154,[[["value"]],["value"]]],[11,"vselect","","Vector lane select.",154,[[["value"]],["value"]]],[11,"vany_true","","Reduce a vector to a scalar boolean.",154,[[["value"]],["value"]]],[11,"vall_true","","Reduce a vector to a scalar boolean.",154,[[["value"]],["value"]]],[11,"icmp","","Integer comparison.",154,[[["intcc"],["value"],["into",["intcc"]]],["value"]]],[11,"icmp_imm","","Compare scalar integer to a constant.",154,[[["into",["imm64"]],["intcc"],["imm64"],["value"],["into",["intcc"]]],["value"]]],[11,"ifcmp","","Compare scalar integers and return flags.",154,[[["value"]],["value"]]],[11,"ifcmp_imm","","Compare scalar integer to a constant and return flags.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"iadd","","Wrapping integer addition: `a := x + y \\pmod{2^B}`.",154,[[["value"]],["value"]]],[11,"uadd_sat","","Add with unsigned saturation.",154,[[["value"]],["value"]]],[11,"sadd_sat","","Add with signed saturation.",154,[[["value"]],["value"]]],[11,"isub","","Wrapping integer subtraction: `a := x - y \\pmod{2^B}`.",154,[[["value"]],["value"]]],[11,"usub_sat","","Subtract with unsigned saturation.",154,[[["value"]],["value"]]],[11,"ssub_sat","","Subtract with signed saturation.",154,[[["value"]],["value"]]],[11,"ineg","","Integer negation: `a := -x \\pmod{2^B}`.",154,[[["value"]],["value"]]],[11,"imul","","Wrapping integer multiplication: `a := x y \\pmod{2^B}`.",154,[[["value"]],["value"]]],[11,"umulhi","","Unsigned integer multiplication, producing the high half…",154,[[["value"]],["value"]]],[11,"smulhi","","Signed integer multiplication, producing the high half of…",154,[[["value"]],["value"]]],[11,"udiv","","Unsigned integer division: `a := \\lfloor {x \\over y}…",154,[[["value"]],["value"]]],[11,"sdiv","","Signed integer division rounded toward zero: `a :=…",154,[[["value"]],["value"]]],[11,"urem","","Unsigned integer remainder.",154,[[["value"]],["value"]]],[11,"srem","","Signed integer remainder. The result has the sign of the…",154,[[["value"]],["value"]]],[11,"iadd_imm","","Add immediate integer.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"imul_imm","","Integer multiplication by immediate constant.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"udiv_imm","","Unsigned integer division by an immediate constant.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"sdiv_imm","","Signed integer division by an immediate constant.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"urem_imm","","Unsigned integer remainder with immediate divisor.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"srem_imm","","Signed integer remainder with immediate divisor.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"irsub_imm","","Immediate reverse wrapping subtraction: `a := Y - x…",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"iadd_cin","","Add integers with carry in.",154,[[["value"]],["value"]]],[11,"iadd_ifcin","","Add integers with carry in.",154,[[["value"]],["value"]]],[11,"iadd_cout","","Add integers with carry out.",154,[[["value"]]]],[11,"iadd_ifcout","","Add integers with carry out.",154,[[["value"]]]],[11,"iadd_carry","","Add integers with carry in and out.",154,[[["value"]]]],[11,"iadd_ifcarry","","Add integers with carry in and out.",154,[[["value"]]]],[11,"isub_bin","","Subtract integers with borrow in.",154,[[["value"]],["value"]]],[11,"isub_ifbin","","Subtract integers with borrow in.",154,[[["value"]],["value"]]],[11,"isub_bout","","Subtract integers with borrow out.",154,[[["value"]]]],[11,"isub_ifbout","","Subtract integers with borrow out.",154,[[["value"]]]],[11,"isub_borrow","","Subtract integers with borrow in and out.",154,[[["value"]]]],[11,"isub_ifborrow","","Subtract integers with borrow in and out.",154,[[["value"]]]],[11,"band","","Bitwise and.",154,[[["value"]],["value"]]],[11,"bor","","Bitwise or.",154,[[["value"]],["value"]]],[11,"bxor","","Bitwise xor.",154,[[["value"]],["value"]]],[11,"bnot","","Bitwise not.",154,[[["value"]],["value"]]],[11,"band_not","","Bitwise and not.",154,[[["value"]],["value"]]],[11,"bor_not","","Bitwise or not.",154,[[["value"]],["value"]]],[11,"bxor_not","","Bitwise xor not.",154,[[["value"]],["value"]]],[11,"band_imm","","Bitwise and with immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"bor_imm","","Bitwise or with immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"bxor_imm","","Bitwise xor with immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"rotl","","Rotate left.",154,[[["value"]],["value"]]],[11,"rotr","","Rotate right.",154,[[["value"]],["value"]]],[11,"rotl_imm","","Rotate left by immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"rotr_imm","","Rotate right by immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"ishl","","Integer shift left. Shift the bits in `x` towards the MSB…",154,[[["value"]],["value"]]],[11,"ushr","","Unsigned shift right. Shift bits in `x` towards the LSB by…",154,[[["value"]],["value"]]],[11,"sshr","","Signed shift right. Shift bits in `x` towards the LSB by…",154,[[["value"]],["value"]]],[11,"ishl_imm","","Integer shift left by immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"ushr_imm","","Unsigned shift right by immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"sshr_imm","","Signed shift right by immediate.",154,[[["value"],["into",["imm64"]],["imm64"]],["value"]]],[11,"bitrev","","Reverse the bits of a integer.",154,[[["value"]],["value"]]],[11,"clz","","Count leading zero bits.",154,[[["value"]],["value"]]],[11,"cls","","Count leading sign bits.",154,[[["value"]],["value"]]],[11,"ctz","","Count trailing zeros.",154,[[["value"]],["value"]]],[11,"popcnt","","Population count",154,[[["value"]],["value"]]],[11,"fcmp","","Floating point comparison.",154,[[["floatcc"],["value"],["into",["floatcc"]]],["value"]]],[11,"ffcmp","","Floating point comparison returning flags.",154,[[["value"]],["value"]]],[11,"fadd","","Floating point addition.",154,[[["value"]],["value"]]],[11,"fsub","","Floating point subtraction.",154,[[["value"]],["value"]]],[11,"fmul","","Floating point multiplication.",154,[[["value"]],["value"]]],[11,"fdiv","","Floating point division.",154,[[["value"]],["value"]]],[11,"sqrt","","Floating point square root.",154,[[["value"]],["value"]]],[11,"fma","","Floating point fused multiply-and-add.",154,[[["value"]],["value"]]],[11,"fneg","","Floating point negation.",154,[[["value"]],["value"]]],[11,"fabs","","Floating point absolute value.",154,[[["value"]],["value"]]],[11,"fcopysign","","Floating point copy sign.",154,[[["value"]],["value"]]],[11,"fmin","","Floating point minimum, propagating NaNs.",154,[[["value"]],["value"]]],[11,"fmax","","Floating point maximum, propagating NaNs.",154,[[["value"]],["value"]]],[11,"ceil","","Round floating point round to integral, towards positive…",154,[[["value"]],["value"]]],[11,"floor","","Round floating point round to integral, towards negative…",154,[[["value"]],["value"]]],[11,"trunc","","Round floating point round to integral, towards zero.",154,[[["value"]],["value"]]],[11,"nearest","","Round floating point round to integral, towards nearest…",154,[[["value"]],["value"]]],[11,"is_null","","Reference verification.",154,[[["value"]],["value"]]],[11,"is_invalid","","Reference verification.",154,[[["value"]],["value"]]],[11,"trueif","","Test integer CPU flags for a specific condition.",154,[[["value"],["into",["intcc"]],["intcc"]],["value"]]],[11,"trueff","","Test floating point CPU flags for a specific condition.",154,[[["floatcc"],["value"],["into",["floatcc"]]],["value"]]],[11,"bitcast","","Reinterpret the bits in `x` as a different type.",154,[[["value"],["type"]],["value"]]],[11,"raw_bitcast","","Cast the bits in `x` as a different type of the same bit…",154,[[["value"],["type"]],["value"]]],[11,"scalar_to_vector","","Scalar To Vector -- move a value out of a scalar register…",154,[[["value"],["type"]],["value"]]],[11,"breduce","","Convert `x` to a smaller boolean type in the…",154,[[["value"],["type"]],["value"]]],[11,"bextend","","Convert `x` to a larger boolean type in the…",154,[[["value"],["type"]],["value"]]],[11,"bint","","Convert `x` to an integer.",154,[[["value"],["type"]],["value"]]],[11,"bmask","","Convert `x` to an integer mask.",154,[[["value"],["type"]],["value"]]],[11,"ireduce","","Convert `x` to a smaller integer type by dropping high bits.",154,[[["value"],["type"]],["value"]]],[11,"uextend","","Convert `x` to a larger integer type by zero-extending.",154,[[["value"],["type"]],["value"]]],[11,"sextend","","Convert `x` to a larger integer type by sign-extending.",154,[[["value"],["type"]],["value"]]],[11,"fpromote","","Convert `x` to a larger floating point format.",154,[[["value"],["type"]],["value"]]],[11,"fdemote","","Convert `x` to a smaller floating point format.",154,[[["value"],["type"]],["value"]]],[11,"fcvt_to_uint","","Convert floating point to unsigned integer.",154,[[["value"],["type"]],["value"]]],[11,"fcvt_to_uint_sat","","Convert floating point to unsigned integer as fcvt_to_uint…",154,[[["value"],["type"]],["value"]]],[11,"fcvt_to_sint","","Convert floating point to signed integer.",154,[[["value"],["type"]],["value"]]],[11,"fcvt_to_sint_sat","","Convert floating point to signed integer as fcvt_to_sint…",154,[[["value"],["type"]],["value"]]],[11,"fcvt_from_uint","","Convert unsigned integer to floating point.",154,[[["value"],["type"]],["value"]]],[11,"fcvt_from_sint","","Convert signed integer to floating point.",154,[[["value"],["type"]],["value"]]],[11,"isplit","","Split an integer into low and high parts.",154,[[["value"]]]],[11,"iconcat","","Concatenate low and high bits to form a larger integer type.",154,[[["value"]],["value"]]],[11,"x86_udivmodx","","Extended unsigned division.",154,[[["value"]]]],[11,"x86_sdivmodx","","Extended signed division.",154,[[["value"]]]],[11,"x86_umulx","","Unsigned integer multiplication, producing a double-length…",154,[[["value"]]]],[11,"x86_smulx","","Signed integer multiplication, producing a double-length…",154,[[["value"]]]],[11,"x86_cvtt2si","","Convert with truncation floating point to signed integer.",154,[[["value"],["type"]],["value"]]],[11,"x86_fmin","","Floating point minimum with x86 semantics.",154,[[["value"]],["value"]]],[11,"x86_fmax","","Floating point maximum with x86 semantics.",154,[[["value"]],["value"]]],[11,"x86_push","","Pushes a value onto the stack.",154,[[["value"]],["inst"]]],[11,"x86_pop","","Pops a value from the stack.",154,[[["type"]],["value"]]],[11,"x86_bsr","","Bit Scan Reverse -- returns the bit-index of the most…",154,[[["value"]]]],[11,"x86_bsf","","Bit Scan Forwards -- returns the bit-index of the least…",154,[[["value"]]]],[11,"x86_pshufd","","Packed Shuffle Doublewords -- copies data from either…",154,[[["value"],["into",["uimm8"]],["uimm8"]],["value"]]],[11,"x86_pshufb","","Packed Shuffle Bytes -- re-orders data in an extended…",154,[[["value"]],["value"]]],[11,"x86_pextr","","Extract lane `Idx` from `x`. The lane index, `Idx`, is an…",154,[[["value"],["into",["uimm8"]],["uimm8"]],["value"]]],[11,"x86_pinsr","","Insert `y` into `x` at lane `Idx`. The lane index, `Idx`,…",154,[[["into",["uimm8"]],["value"],["uimm8"]],["value"]]],[11,"x86_insertps","","Insert a lane of `y` into `x` at using `Idx` to encode…",154,[[["into",["uimm8"]],["value"],["uimm8"]],["value"]]],[11,"x86_movsd","","Move the low 64 bits of the float vector `y` to the low 64…",154,[[["value"]],["value"]]],[11,"x86_movlhps","","Move the low 64 bits of the float vector `y` to the high…",154,[[["value"]],["value"]]],[11,"x86_psll","","Shift Packed Data Left Logical -- This implements the…",154,[[["value"]],["value"]]],[11,"x86_psrl","","Shift Packed Data Right Logical -- This implements the…",154,[[["value"]],["value"]]],[11,"x86_psra","","Shift Packed Data Right Arithmetic -- This implements the…",154,[[["value"]],["value"]]],[11,"x86_ptest","","Logical Compare -- PTEST will set the ZF flag if all bits…",154,[[["value"]],["value"]]],[11,"x86_pmaxs","","Maximum of Packed Signed Integers -- Compare signed…",154,[[["value"]],["value"]]],[11,"x86_pmaxu","","Maximum of Packed Unsigned Integers -- Compare unsigned…",154,[[["value"]],["value"]]],[11,"x86_pmins","","Minimum of Packed Signed Integers -- Compare signed…",154,[[["value"]],["value"]]],[11,"x86_pminu","","Minimum of Packed Unsigned Integers -- Compare unsigned…",154,[[["value"]],["value"]]],[11,"x86_elf_tls_get_addr","","Elf tls get addr -- This implements the GD TLS model for…",154,[[["globalvalue"]],["value"]]],[11,"x86_macho_tls_get_addr","","Mach-O tls get addr -- This implements TLS access for…",154,[[["globalvalue"]],["value"]]],[11,"Binary","","Binary(imms=(), vals=2)",154,[[["opcode"],["type"],["value"]]]],[11,"BinaryImm","","BinaryImm(imms=(imm: ir::immediates::Imm64), vals=1)",154,[[["opcode"],["type"],["imm64"],["value"]]]],[11,"Branch","","Branch(imms=(destination: ir::Block), vals=1)",154,[[["opcode"],["type"],["valuelist"],["block"]]]],[11,"BranchFloat","","BranchFloat(imms=(cond: ir::condcodes::FloatCC,…",154,[[["opcode"],["type"],["floatcc"],["valuelist"],["block"]]]],[11,"BranchIcmp","","BranchIcmp(imms=(cond: ir::condcodes::IntCC, destination:…",154,[[["opcode"],["type"],["intcc"],["valuelist"],["block"]]]],[11,"BranchInt","","BranchInt(imms=(cond: ir::condcodes::IntCC, destination:…",154,[[["opcode"],["type"],["intcc"],["valuelist"],["block"]]]],[11,"BranchTable","","BranchTable(imms=(destination: ir::Block, table:…",154,[[["opcode"],["type"],["jumptable"],["value"],["block"]]]],[11,"BranchTableBase","","BranchTableBase(imms=(table: ir::JumpTable), vals=0)",154,[[["opcode"],["type"],["jumptable"]]]],[11,"BranchTableEntry","","BranchTableEntry(imms=(imm: ir::immediates::Uimm8, table:…",154,[[["opcode"],["type"],["jumptable"],["value"],["uimm8"]]]],[11,"Call","","Call(imms=(func_ref: ir::FuncRef), vals=0)",154,[[["opcode"],["type"],["valuelist"],["funcref"]]]],[11,"CallIndirect","","CallIndirect(imms=(sig_ref: ir::SigRef), vals=1)",154,[[["opcode"],["type"],["sigref"],["valuelist"]]]],[11,"CondTrap","","CondTrap(imms=(code: ir::TrapCode), vals=1)",154,[[["opcode"],["type"],["trapcode"],["value"]]]],[11,"CopySpecial","","CopySpecial(imms=(src: isa::RegUnit, dst: isa::RegUnit),…",154,[[["opcode"],["type"],["regunit"]]]],[11,"CopyToSsa","","CopyToSsa(imms=(src: isa::RegUnit), vals=0)",154,[[["opcode"],["type"],["regunit"]]]],[11,"ExtractLane","","ExtractLane(imms=(lane: ir::immediates::Uimm8), vals=1)",154,[[["opcode"],["type"],["value"],["uimm8"]]]],[11,"FloatCompare","","FloatCompare(imms=(cond: ir::condcodes::FloatCC), vals=2)",154,[[["opcode"],["type"],["value"],["floatcc"]]]],[11,"FloatCond","","FloatCond(imms=(cond: ir::condcodes::FloatCC), vals=1)",154,[[["opcode"],["type"],["value"],["floatcc"]]]],[11,"FloatCondTrap","","FloatCondTrap(imms=(cond: ir::condcodes::FloatCC, code:…",154,[[["opcode"],["type"],["trapcode"],["floatcc"],["value"]]]],[11,"FuncAddr","","FuncAddr(imms=(func_ref: ir::FuncRef), vals=0)",154,[[["opcode"],["type"],["funcref"]]]],[11,"HeapAddr","","HeapAddr(imms=(heap: ir::Heap, imm:…",154,[[["opcode"],["type"],["value"],["uimm32"],["heap"]]]],[11,"IndirectJump","","IndirectJump(imms=(table: ir::JumpTable), vals=1)",154,[[["opcode"],["type"],["jumptable"],["value"]]]],[11,"InsertLane","","InsertLane(imms=(lane: ir::immediates::Uimm8), vals=2)",154,[[["opcode"],["type"],["value"],["uimm8"]]]],[11,"IntCompare","","IntCompare(imms=(cond: ir::condcodes::IntCC), vals=2)",154,[[["opcode"],["type"],["intcc"],["value"]]]],[11,"IntCompareImm","","IntCompareImm(imms=(cond: ir::condcodes::IntCC, imm:…",154,[[["opcode"],["type"],["intcc"],["imm64"],["value"]]]],[11,"IntCond","","IntCond(imms=(cond: ir::condcodes::IntCC), vals=1)",154,[[["opcode"],["type"],["intcc"],["value"]]]],[11,"IntCondTrap","","IntCondTrap(imms=(cond: ir::condcodes::IntCC, code:…",154,[[["opcode"],["type"],["intcc"],["trapcode"],["value"]]]],[11,"IntSelect","","IntSelect(imms=(cond: ir::condcodes::IntCC), vals=3)",154,[[["opcode"],["type"],["intcc"],["value"]]]],[11,"Jump","","Jump(imms=(destination: ir::Block), vals=0)",154,[[["opcode"],["type"],["valuelist"],["block"]]]],[11,"Load","","Load(imms=(flags: ir::MemFlags, offset:…",154,[[["memflags"],["opcode"],["type"],["value"],["offset32"]]]],[11,"LoadComplex","","LoadComplex(imms=(flags: ir::MemFlags, offset:…",154,[[["memflags"],["opcode"],["type"],["valuelist"],["offset32"]]]],[11,"MultiAry","","MultiAry(imms=(), vals=0)",154,[[["opcode"],["type"],["valuelist"]]]],[11,"NullAry","","NullAry(imms=(), vals=0)",154,[[["opcode"],["type"]]]],[11,"RegFill","","RegFill(imms=(src: ir::StackSlot, dst: isa::RegUnit),…",154,[[["opcode"],["type"],["value"],["stackslot"],["regunit"]]]],[11,"RegMove","","RegMove(imms=(src: isa::RegUnit, dst: isa::RegUnit), vals=1)",154,[[["opcode"],["type"],["value"],["regunit"]]]],[11,"RegSpill","","RegSpill(imms=(src: isa::RegUnit, dst: ir::StackSlot),…",154,[[["opcode"],["type"],["value"],["stackslot"],["regunit"]]]],[11,"Shuffle","","Shuffle(imms=(mask: ir::Immediate), vals=2)",154,[[["opcode"],["type"],["value"],["immediate"]]]],[11,"StackLoad","","StackLoad(imms=(stack_slot: ir::StackSlot, offset:…",154,[[["opcode"],["type"],["stackslot"],["offset32"]]]],[11,"StackStore","","StackStore(imms=(stack_slot: ir::StackSlot, offset:…",154,[[["opcode"],["type"],["value"],["stackslot"],["offset32"]]]],[11,"Store","","Store(imms=(flags: ir::MemFlags, offset:…",154,[[["memflags"],["opcode"],["type"],["value"],["offset32"]]]],[11,"StoreComplex","","StoreComplex(imms=(flags: ir::MemFlags, offset:…",154,[[["memflags"],["opcode"],["type"],["valuelist"],["offset32"]]]],[11,"TableAddr","","TableAddr(imms=(table: ir::Table, offset:…",154,[[["opcode"],["type"],["value"],["table"],["offset32"]]]],[11,"Ternary","","Ternary(imms=(), vals=3)",154,[[["opcode"],["type"],["value"]]]],[11,"Trap","","Trap(imms=(code: ir::TrapCode), vals=0)",154,[[["opcode"],["type"],["trapcode"]]]],[11,"Unary","","Unary(imms=(), vals=1)",154,[[["opcode"],["type"],["value"]]]],[11,"UnaryBool","","UnaryBool(imms=(imm: bool), vals=0)",154,[[["opcode"],["type"],["bool"]]]],[11,"UnaryConst","","UnaryConst(imms=(constant_handle: ir::Constant), vals=0)",154,[[["opcode"],["type"],["constant"]]]],[11,"UnaryGlobalValue","","UnaryGlobalValue(imms=(global_value: ir::GlobalValue),…",154,[[["opcode"],["type"],["globalvalue"]]]],[11,"UnaryIeee32","","UnaryIeee32(imms=(imm: ir::immediates::Ieee32), vals=0)",154,[[["opcode"],["type"],["ieee32"]]]],[11,"UnaryIeee64","","UnaryIeee64(imms=(imm: ir::immediates::Ieee64), vals=0)",154,[[["opcode"],["type"],["ieee64"]]]],[11,"UnaryImm","","UnaryImm(imms=(imm: ir::immediates::Imm64), vals=0)",154,[[["opcode"],["type"],["imm64"]]]]],"p":[[8,"ReservedValue"],[3,"Context"],[3,"ValueLocRange"],[4,"CodegenError"],[3,"MemoryCodeSink"],[3,"CodeInfo"],[4,"Reloc"],[4,"FrameUnwindKind"],[3,"Stackmap"],[8,"RelocSink"],[8,"StackmapSink"],[8,"TrapSink"],[8,"CodeSink"],[8,"FrameUnwindSink"],[3,"CFGPrinter"],[3,"FuncCursor"],[3,"EncCursor"],[4,"CursorPosition"],[8,"Cursor"],[3,"DisplayList"],[3,"DominatorTree"],[3,"DominatorTreePreorder"],[3,"BlockPredecessor"],[3,"ControlFlowGraph"],[8,"CondCode"],[4,"IntCC"],[4,"FloatCC"],[3,"AbiParam"],[3,"ExtFuncData"],[3,"Signature"],[3,"FrameLayout"],[3,"HeapData"],[3,"TableData"],[3,"ValueLabelStart"],[4,"ArgumentExtension"],[4,"ArgumentPurpose"],[4,"ExternalName"],[13,"User"],[13,"TestCase"],[4,"FrameLayoutChange"],[13,"CallFrameAddressAt"],[13,"RegAt"],[13,"ReturnAddressAt"],[4,"GlobalValueData"],[13,"Load"],[13,"IAddImm"],[13,"Symbol"],[4,"HeapStyle"],[13,"Dynamic"],[13,"Static"],[4,"LibCall"],[4,"ExpandedProgramPoint"],[4,"TrapCode"],[4,"ArgumentLoc"],[4,"ValueLoc"],[4,"ValueLabelAssignments"],[13,"Alias"],[3,"InsertBuilder"],[3,"ReplaceBuilder"],[3,"ConstantData"],[3,"ConstantPoolEntry"],[3,"ConstantPool"],[3,"DataFlowGraph"],[4,"ValueDef"],[4,"AnyEntity"],[3,"Block"],[3,"Value"],[3,"Inst"],[3,"StackSlot"],[3,"GlobalValue"],[3,"Constant"],[3,"Immediate"],[3,"JumpTable"],[3,"FuncRef"],[3,"SigRef"],[3,"Heap"],[3,"Table"],[3,"Function"],[3,"DisplayFunctionAnnotations"],[3,"V128Imm"],[8,"IntoBytes"],[3,"Imm64"],[3,"Uimm64"],[3,"Offset32"],[3,"Ieee32"],[3,"Ieee64"],[3,"ValueTypeSet"],[4,"InstructionFormat"],[4,"InstructionData"],[13,"Binary"],[13,"BinaryImm"],[13,"Branch"],[13,"BranchFloat"],[13,"BranchIcmp"],[13,"BranchInt"],[13,"BranchTable"],[13,"BranchTableBase"],[13,"BranchTableEntry"],[13,"Call"],[13,"CallIndirect"],[13,"CondTrap"],[13,"CopySpecial"],[13,"CopyToSsa"],[13,"ExtractLane"],[13,"FloatCompare"],[13,"FloatCond"],[13,"FloatCondTrap"],[13,"FuncAddr"],[13,"HeapAddr"],[13,"IndirectJump"],[13,"InsertLane"],[13,"IntCompare"],[13,"IntCompareImm"],[13,"IntCond"],[13,"IntCondTrap"],[13,"IntSelect"],[13,"Jump"],[13,"Load"],[13,"LoadComplex"],[13,"MultiAry"],[13,"NullAry"],[13,"RegFill"],[13,"RegMove"],[13,"RegSpill"],[13,"Shuffle"],[13,"StackLoad"],[13,"StackStore"],[13,"Store"],[13,"StoreComplex"],[13,"TableAddr"],[13,"Ternary"],[13,"Trap"],[13,"Unary"],[13,"UnaryBool"],[13,"UnaryConst"],[13,"UnaryGlobalValue"],[13,"UnaryIeee32"],[13,"UnaryIeee64"],[13,"UnaryImm"],[4,"Opcode"],[4,"BranchInfo"],[4,"CallInfo"],[4,"ResolvedConstraint"],[3,"VariableArgs"],[3,"OpcodeConstraints"],[3,"JumpTableData"],[3,"Layout"],[3,"MemFlags"],[3,"SourceLoc"],[3,"StackSlotData"],[3,"StackLayoutInfo"],[3,"StackSlots"],[4,"StackSlotKind"],[3,"Type"],[8,"InstBuilder"],[8,"InstBuilderBase"],[8,"InstInserterBase"],[8,"ProgramOrder"],[3,"ValueLabel"],[3,"BranchRange"],[3,"OperandConstraint"],[3,"RecipeConstraints"],[3,"EncInfo"],[3,"StackBaseMask"],[3,"StackRef"],[3,"TargetFrontendConfig"],[4,"CallConv"],[4,"ConstraintKind"],[4,"StackBase"],[4,"LookupError"],[3,"Encoding"],[3,"RegBank"],[3,"RegClassData"],[3,"RegInfo"],[8,"TargetIsa"],[3,"Builder"],[3,"Loop"],[3,"LoopAnalysis"],[3,"FlagsOrIsa"],[4,"SetError"],[4,"OptLevel"],[4,"TlsModel"],[4,"LibcallCallConv"],[3,"Template"],[3,"Descriptor"],[4,"Detail"],[13,"Bool"],[13,"Enum"],[8,"Configurable"],[3,"Builder"],[3,"PredicateView"],[3,"Flags"],[3,"VerifierError"],[3,"VerifierErrors"],[8,"FuncWriter"],[3,"RegDiversions"],[3,"PackedOption"],[3,"NullRelocSink"],[3,"NullStackmapSink"],[3,"NullTrapSink"],[3,"ChildIter"],[3,"PredIter"],[3,"ProgramPoint"],[3,"Values"],[3,"DisplayInst"],[3,"DisplayFunction"],[3,"InstOffsetIter"],[3,"Uimm32"],[3,"Blocks"],[3,"Insts"],[3,"RegClassIndex"],[3,"DisplayRegUnit"],[3,"PassTimes"],[3,"TimingToken"],[3,"PlainWriter"]]};
searchIndex["cranelift_codegen_meta"] = {"doc":"This crate generates Rust sources for use by…","i":[[5,"isa_from_arch","cranelift_codegen_meta","Generate an ISA from an architecture string (e.g. \"x86_64\").",null,[[["str"]],[["isa"],["result",["isa","string"]],["string"]]]],[5,"generate","","Generates all the Rust source files used in Cranelift from…",null,[[["str"]],[["error"],["result",["error"]]]]],[0,"cdsl","","Cranelift DSL classes.",null,null],[5,"camel_case","cranelift_codegen_meta::cdsl","Convert the string `s` to CamelCase.",null,[[["str"]],["string"]]],[0,"ast","","",null,null],[3,"Def","cranelift_codegen_meta::cdsl::ast","An AST definition associates a set of variables with the…",null,null],[12,"apply","","",0,null],[12,"defined_vars","","",0,null],[3,"DefPool","","",null,null],[12,"pool","","",1,null],[3,"DefIndex","","",null,null],[12,"0","","",2,null],[3,"Block","","A definition which would lead to generate a block creation.",null,null],[12,"location","","Instruction index after which the block entry is set.",3,null],[12,"name","","Variable holding the new created block.",3,null],[3,"BlockPool","","",null,null],[12,"pool","","",4,null],[3,"Var","","A free variable.",null,null],[12,"name","","",5,null],[12,"src_def","","The `Def` defining this variable in a source pattern.",5,null],[12,"dst_def","","The `Def` defining this variable in a destination pattern.",5,null],[12,"type_var","","TypeVar representing the type of this variable.",5,null],[12,"is_original_type_var","","Is this the original type variable, or has it be redefined…",5,null],[3,"VarIndex","","",null,null],[12,"0","","",6,null],[3,"VarPool","","",null,null],[12,"pool","","",7,null],[3,"ConstPool","","Contains constants created in the AST that must be…",null,null],[12,"pool","","",8,null],[3,"Apply","","Apply an instruction to arguments.",null,null],[12,"inst","","",9,null],[12,"args","","",9,null],[12,"value_types","","",9,null],[3,"DummyVar","","",null,null],[12,"name","","",10,null],[3,"DummyConstant","","",null,null],[12,"0","","",11,null],[3,"DummyDef","","",null,null],[12,"expr","","",12,null],[12,"defined_vars","","",12,null],[3,"ExprBuilder","","",null,null],[12,"expr","","",13,null],[4,"Expr","","",null,null],[13,"Var","","",14,null],[13,"Literal","","",14,null],[4,"Literal","","",null,null],[13,"Enumerator","","A value of an enumerated immediate operand.",15,null],[12,"rust_type","cranelift_codegen_meta::cdsl::ast::Literal","",16,null],[12,"value","","",16,null],[13,"Bits","cranelift_codegen_meta::cdsl::ast","A bitwise value of an immediate operand, used for bitwise…",15,null],[12,"rust_type","cranelift_codegen_meta::cdsl::ast::Literal","",17,null],[12,"value","","",17,null],[13,"Int","cranelift_codegen_meta::cdsl::ast","A value of an integer immediate operand.",15,null],[13,"EmptyVarArgs","","A empty list of variable set of arguments.",15,null],[4,"PatternPosition","","",null,null],[13,"Source","","",18,null],[13,"Destination","","",18,null],[4,"DummyExpr","","",null,null],[13,"Var","","",19,null],[13,"Literal","","",19,null],[13,"Constant","","",19,null],[13,"Apply","","",19,null],[13,"Block","","",19,null],[5,"constant","","",null,[[["vec",["u8"]],["u8"]],["dummyconstant"]]],[5,"var","","",null,[[["str"]],["dummyvar"]]],[11,"maybe_literal","","",14,[[["self"]],[["option",["literal"]],["literal"]]]],[11,"maybe_var","","",14,[[["self"]],[["option",["varindex"]],["varindex"]]]],[11,"unwrap_var","","",14,[[["self"]],["varindex"]]],[11,"to_rust_code","","",14,[[["self"],["varpool"]],["string"]]],[11,"to_comment_string","","",0,[[["self"],["varpool"]],["string"]]],[11,"new","","",1,[[],["self"]]],[11,"get","","",1,[[["self"],["defindex"]],["def"]]],[11,"next_index","","",1,[[["self"]],["defindex"]]],[11,"create_inst","","",1,[[["vec",["varindex"]],["varindex"],["self"],["apply"]],["defindex"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",2,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",2,[[],["u32"]]],[11,"new","","",4,[[],["self"]]],[11,"get","","",4,[[["self"],["defindex"]],[["option",["block"]],["block"]]]],[11,"create_block","","",4,[[["self"],["defindex"],["varindex"]]]],[11,"is_empty","","",4,[[["self"]],["bool"]]],[11,"enumerator_for","","",15,[[["operandkind"],["str"]],["self"]]],[11,"bits","","",15,[[["operandkind"],["u64"]],["self"]]],[11,"constant","","",15,[[["operandkind"],["i64"]],["self"]]],[11,"empty_vararg","","",15,[[],["self"]]],[11,"to_rust_code","","",15,[[["self"]],["string"]]],[11,"new","","",5,[[["string"]],["self"]]],[11,"is_input","","Is this an input value to the src pattern?",5,[[["self"]],["bool"]]],[11,"is_output","","Is this an output value, defined in both src and dst…",5,[[["self"]],["bool"]]],[11,"is_intermediate","","Is this an intermediate value, defined only in the src…",5,[[["self"]],["bool"]]],[11,"is_temp","","Is this a temp value, defined only in the dst pattern?",5,[[["self"]],["bool"]]],[11,"get_def","","Get the def of this variable according to the position.",5,[[["patternposition"],["self"]],[["option",["defindex"]],["defindex"]]]],[11,"set_def","","",5,[[["self"],["patternposition"],["defindex"]]]],[11,"get_or_create_typevar","","Get the type variable representing the type of this…",5,[[["self"]],["typevar"]]],[11,"get_typevar","","",5,[[["self"]],[["typevar"],["option",["typevar"]]]]],[11,"set_typevar","","",5,[[["typevar"],["self"]]]],[11,"has_free_typevar","","Check if this variable has a free type variable. If not,…",5,[[["self"]],["bool"]]],[11,"to_rust_code","","",5,[[["self"]],["string"]]],[11,"rust_type","","",5,[[["self"]],["string"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",6,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",6,[[],["u32"]]],[11,"new","","",7,[[],["self"]]],[11,"get","","",7,[[["self"],["varindex"]],["var"]]],[11,"get_mut","","",7,[[["self"],["varindex"]],["var"]]],[11,"create","","",7,[[["self"]],["varindex"]]],[11,"new","","Create an empty constant pool.",8,[[],["self"]]],[11,"create_name","","Create a name for a constant from its position in the pool.",8,[[["usize"]],["string"]]],[11,"insert","","Insert constant data into the pool, returning the name of…",8,[[["self"],["vec",["u8"]],["u8"]],["string"]]],[11,"iter","","Iterate over the name/value pairs in the pool.",8,[[["self"]]]],[11,"new","","",9,[[["expr"],["instspec"],["vec",["expr"]]],["self"]]],[11,"to_comment_string","","",9,[[["self"],["varpool"]],["string"]]],[11,"inst_predicate","","",9,[[["self"],["varpool"]],["instructionpredicate"]]],[11,"inst_predicate_with_ctrl_typevar","","Same as `inst_predicate()`, but also check the controlling…",9,[[["self"],["varpool"]],["instructionpredicate"]]],[11,"rust_builder","","",9,[[["varpool"],["self"]],["string"]]],[11,"apply","","",13,[[["dummyexpr"],["instspec"],["vec",["dummyexpr"]]],["self"]]],[11,"assign_to","","",13,[[["vec",["dummyvar"]],["dummyvar"]],["dummydef"]]],[11,"block","","",13,[[["dummyvar"]],["self"]]],[0,"cpu_modes","cranelift_codegen_meta::cdsl","",null,null],[3,"CpuMode","cranelift_codegen_meta::cdsl::cpu_modes","",null,null],[12,"name","","",20,null],[12,"default_legalize","","",20,null],[12,"monomorphic_legalize","","",20,null],[12,"typed_legalize","","",20,null],[12,"encodings","","",20,null],[11,"new","","",20,[[["str"]],["self"]]],[11,"set_encodings","","",20,[[["vec",["rc"]],["self"],["rc",["encodingcontent"]]]]],[11,"legalize_monomorphic","","",20,[[["self"],["transformgroup"]]]],[11,"legalize_default","","",20,[[["self"],["transformgroup"]]]],[11,"legalize_value_type","","",20,[[["self"],["transformgroup"]]]],[11,"legalize_type","","",20,[[["transformgroup"],["self"]]]],[11,"get_default_legalize_code","","",20,[[["self"]],["transformgroupindex"]]],[11,"get_legalize_code_for","","",20,[[["self"],["option"]],["transformgroupindex"]]],[11,"get_legalized_types","","",20,[[["self"]],[["transformgroupindex"],["valuetype"],["keys",["valuetype","transformgroupindex"]]]]],[11,"direct_transform_groups","","Returns a deterministically ordered, deduplicated list of…",20,[[["self"]],[["vec",["transformgroupindex"]],["transformgroupindex"]]]],[0,"encodings","cranelift_codegen_meta::cdsl","",null,null],[3,"EncodingContent","cranelift_codegen_meta::cdsl::encodings","Encoding for a concrete instruction.",null,null],[12,"inst","","The `Instruction` or `BoundInstruction` being encoded.",21,null],[12,"recipe","","The `EncodingRecipe` to use.",21,null],[12,"encbits","","Additional encoding bits to be interpreted by `recipe`.",21,null],[12,"inst_predicate","","An instruction predicate that must be true to allow…",21,null],[12,"isa_predicate","","An ISA predicate that must be true to allow selecting this…",21,null],[12,"bound_type","","The value type this encoding has been bound to, for…",21,null],[3,"EncodingBuilder","","",null,null],[12,"inst","","",22,null],[12,"recipe","","",22,null],[12,"encbits","","",22,null],[12,"inst_predicate","","",22,null],[12,"isa_predicate","","",22,null],[12,"bound_type","","",22,null],[6,"Encoding","","",null,null],[11,"inst","","",21,[[["self"]],["rc"]]],[11,"to_rust_comment","","",21,[[["primarymap"],["self"]],["string"]]],[11,"new","","",22,[[["u16"],["instspec"],["encodingrecipenumber"]],["self"]]],[11,"inst_predicate","","",22,[[["instructionpredicatenode"]],["self"]]],[11,"isa_predicate","","",22,[[["u8"]],["self"]]],[11,"build","","",22,[[["primarymap"],["instructionpredicateregistry"]],[["rc",["encodingcontent"]],["encodingcontent"]]]],[0,"formats","cranelift_codegen_meta::cdsl","",null,null],[3,"FormatField","cranelift_codegen_meta::cdsl::formats","An immediate field in an instruction format.",null,null],[12,"kind","","Immediate operand kind.",23,null],[12,"member","","Member name in InstructionData variant.",23,null],[3,"InstructionFormat","","Every instruction opcode has a corresponding instruction…",null,null],[12,"name","","Instruction format name in CamelCase. This is used as a…",24,null],[12,"num_value_operands","","",24,null],[12,"has_value_list","","",24,null],[12,"imm_fields","","",24,null],[12,"typevar_operand","","Index of the value input operand that is used to infer the…",24,null],[3,"FormatStructure","","A tuple serving as a key to deduplicate InstructionFormat.",null,null],[12,"num_value_operands","","",25,null],[12,"has_value_list","","",25,null],[12,"imm_field_names","","Tuples of (Rust field name / Rust type) for each immediate…",25,null],[3,"InstructionFormatBuilder","","",null,null],[12,"name","","",26,null],[12,"num_value_operands","","",26,null],[12,"has_value_list","","",26,null],[12,"imm_fields","","",26,null],[12,"typevar_operand","","",26,null],[11,"imm_by_name","","",24,[[["str"],["self"]],["formatfield"]]],[11,"structure","","Returns a tuple that uniquely identifies the structure.",24,[[["self"]],["formatstructure"]]],[11,"new","","",26,[[["str"]],["self"]]],[11,"value","","",26,[[],["self"]]],[11,"varargs","","",26,[[],["self"]]],[11,"imm","","",26,[[["operandkind"]],["self"]]],[11,"imm_with_name","","",26,[[["operandkind"],["str"]],["self"]]],[11,"typevar_operand","","",26,[[["usize"]],["self"]]],[11,"build","","",26,[[],[["rc",["instructionformat"]],["instructionformat"]]]],[0,"instructions","cranelift_codegen_meta::cdsl","",null,null],[3,"OpcodeNumber","cranelift_codegen_meta::cdsl::instructions","",null,null],[12,"0","","",27,null],[3,"InstructionGroupBuilder","","",null,null],[12,"all_instructions","","",28,null],[12,"own_instructions","","",28,null],[3,"InstructionGroup","","Every instruction must belong to exactly one instruction…",null,null],[12,"instructions","","",29,null],[3,"PolymorphicInfo","","",null,null],[12,"use_typevar_operand","","",30,null],[12,"ctrl_typevar","","",30,null],[12,"other_typevars","","",30,null],[3,"InstructionContent","","",null,null],[12,"name","","Instruction mnemonic, also becomes opcode name.",31,null],[12,"camel_name","","",31,null],[12,"opcode_number","","",31,null],[12,"doc","","Documentation string.",31,null],[12,"operands_in","","Input operands. This can be a mix of SSA value operands…",31,null],[12,"operands_out","","Output operands. The output operands must be SSA values or…",31,null],[12,"constraints","","Instruction-specific TypeConstraints.",31,null],[12,"format","","Instruction format, automatically derived from the input…",31,null],[12,"polymorphic_info","","One of the input or output operands is a free type…",31,null],[12,"value_opnums","","Indices in operands_in of input operands that are values.",31,null],[12,"imm_opnums","","Indices in operands_in of input operands that are…",31,null],[12,"value_results","","Indices in operands_out of output operands that are values.",31,null],[12,"is_terminator","","True for instructions that terminate the block.",31,null],[12,"is_branch","","True for all branch or jump instructions.",31,null],[12,"is_indirect_branch","","True for all indirect branch or jump instructions.',",31,null],[12,"is_call","","Is this a call instruction?",31,null],[12,"is_return","","Is this a return instruction?",31,null],[12,"is_ghost","","Is this a ghost instruction?",31,null],[12,"can_load","","Can this instruction read from memory?",31,null],[12,"can_store","","Can this instruction write to memory?",31,null],[12,"can_trap","","Can this instruction cause a trap?",31,null],[12,"other_side_effects","","Does this instruction have other side effects besides…",31,null],[12,"writes_cpu_flags","","Does this instruction write to CPU flags?",31,null],[3,"InstructionBuilder","","",null,null],[12,"name","","",32,null],[12,"doc","","",32,null],[12,"format","","",32,null],[12,"operands_in","","",32,null],[12,"operands_out","","",32,null],[12,"constraints","","",32,null],[12,"is_terminator","","",32,null],[12,"is_branch","","",32,null],[12,"is_indirect_branch","","",32,null],[12,"is_call","","",32,null],[12,"is_return","","",32,null],[12,"is_ghost","","",32,null],[12,"can_load","","",32,null],[12,"can_store","","",32,null],[12,"can_trap","","",32,null],[12,"other_side_effects","","",32,null],[3,"BoundInstruction","","",null,null],[12,"inst","","",33,null],[12,"value_types","","",33,null],[12,"immediate_values","","",33,null],[3,"FormatPredicateNode","","",null,null],[12,"format_name","","",34,null],[12,"member_name","","",34,null],[12,"kind","","",34,null],[3,"InstructionPredicate","","",null,null],[12,"node","","",35,null],[3,"InstructionPredicateNumber","","",null,null],[12,"0","","",36,null],[3,"InstructionPredicateRegistry","","A registry of predicates to help deduplicating them,…",null,null],[12,"map","","Maps a predicate number to its actual predicate.",37,null],[12,"inverted_map","","Inverse map: maps a predicate to its predicate number.…",37,null],[4,"ValueTypeOrAny","","A thin wrapper like Option, but with more precise semantics.",null,null],[13,"ValueType","","",38,null],[13,"Any","","",38,null],[4,"BindParameter","","An parameter used for binding instructions to specific…",null,null],[13,"Any","","",39,null],[13,"Lane","","",39,null],[13,"Vector","","",39,null],[13,"Reference","","",39,null],[13,"Immediate","","",39,null],[4,"Immediate","","",null,null],[13,"IntCC","","",40,null],[4,"FormatPredicateKind","","",null,null],[13,"IsEqual","","Is the field member equal to the expected value (stored…",41,null],[13,"IsSignedInt","","Is the immediate instruction format field representable as…",41,null],[13,"IsUnsignedInt","","Is the immediate instruction format field representable as…",41,null],[13,"IsZeroInt","","Is the immediate format field member an integer equal to…",41,null],[13,"IsZero32BitFloat","","Is the immediate format field member equal to zero?…",41,null],[13,"IsZero64BitFloat","","Is the immediate format field member equal to zero?…",41,null],[13,"IsAllZeroes","","Is the immediate format field member equal zero in all…",41,null],[13,"IsAllOnes","","Does the immediate format field member have ones in all…",41,null],[13,"LengthEquals","","Has the value list (in member_name) the size specified in…",41,null],[13,"IsColocatedFunc","","Is the referenced function colocated?",41,null],[13,"IsColocatedData","","Is the referenced data object colocated?",41,null],[4,"TypePredicateNode","","",null,null],[13,"TypeVarCheck","","Is the value argument (at the index designated by the…",42,null],[13,"CtrlTypeVarCheck","","Is the controlling type variable the same type as the one…",42,null],[4,"InstructionPredicateNode","","A basic node in an instruction predicate: either an atom,…",null,null],[13,"FormatPredicate","","",43,null],[13,"TypePredicate","","",43,null],[13,"And","","An AND-combination of two or more other predicates.",43,null],[13,"Or","","An OR-combination of two or more other predicates.",43,null],[4,"InstSpec","","An instruction specification, containing an instruction…",null,null],[13,"Inst","","",44,null],[13,"Bound","","",44,null],[5,"vector","","Constructor for more easily building vector parameters…",null,[[["u64"]],["bindparameter"]]],[5,"verify_format","","Checks that the input operands actually match the given…",null,[[["str"],["instructionformat"]]]],[5,"verify_polymorphic","","Check if this instruction is polymorphic, and verify its…",null,[[["instructionformat"]],[["option",["polymorphicinfo"]],["polymorphicinfo"]]]],[5,"is_ctrl_typevar_candidate","","Verify that the use of TypeVars is consistent with…",null,[[["typevar"]],[["string"],["result",["vec","string"]],["vec",["typevar"]]]]],[6,"AllInstructions","","",null,null],[6,"Instruction","","",null,null],[6,"VectorBitWidth","","The number of bits in the vector",null,null],[6,"InstructionPredicateMap","","",null,null],[8,"Bindable","","Instructions can have parameters bound to them to…",null,null],[10,"bind","","Bind a parameter to an instruction",45,[[["self"]],["boundinstruction"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",27,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",27,[[],["u32"]]],[11,"new","","",28,[[["primarymap"]],["self"]]],[11,"push","","",28,[[["instructionbuilder"],["self"]]]],[11,"build","","",28,[[],["instructiongroup"]]],[11,"by_name","","",29,[[["str"],["self"]],["rc"]]],[11,"snake_name","","",31,[[["self"]],["str"]]],[11,"all_typevars","","",31,[[["self"]],[["vec",["typevar"]],["typevar"]]]],[11,"new","","",32,[[["string"],["rc"],["into",["string"]]],["self"]]],[11,"operands_in","","",32,[[["vec",["operand"]],["operand"]],["self"]]],[11,"operands_out","","",32,[[["vec",["operand"]],["operand"]],["self"]]],[11,"constraints","","",32,[[["vec",["constraint"]],["constraint"]],["self"]]],[11,"is_terminator","","",32,[[["bool"]],["self"]]],[11,"is_branch","","",32,[[["bool"]],["self"]]],[11,"is_indirect_branch","","",32,[[["bool"]],["self"]]],[11,"is_call","","",32,[[["bool"]],["self"]]],[11,"is_return","","",32,[[["bool"]],["self"]]],[11,"is_ghost","","",32,[[["bool"]],["self"]]],[11,"can_load","","",32,[[["bool"]],["self"]]],[11,"can_store","","",32,[[["bool"]],["self"]]],[11,"can_trap","","",32,[[["bool"]],["self"]]],[11,"other_side_effects","","",32,[[["bool"]],["self"]]],[11,"build","","",32,[[["opcodenumber"]],[["rc",["instructioncontent"]],["instructioncontent"]]]],[11,"expect","","",38,[[["str"]],["valuetype"]]],[11,"new","","Construct a new bound instruction (with nothing bound yet)…",33,[[["rc"]],["self"]]],[11,"verify_bindings","","Verify that the bindings for a BoundInstruction are correct.",33,[[["self"]],[["result",["string"]],["string"]]]],[11,"new","","",34,[[["formatpredicatekind"],["instructionformat"],["str"]],["self"]]],[11,"new_raw","","",34,[[["formatpredicatekind"],["instructionformat"],["str"]],["self"]]],[11,"destructuring_member_name","","",34,[[["self"]],["str"]]],[11,"rust_predicate","","",34,[[["self"]],["string"]]],[11,"rust_predicate","","",42,[[["str"],["self"]],["string"]]],[11,"rust_predicate","","",43,[[["str"],["self"]],["string"]]],[11,"format_destructuring_member_name","","",43,[[["self"]],["str"]]],[11,"format_name","","",43,[[["self"]],["str"]]],[11,"is_type_predicate","","",43,[[["self"]],["bool"]]],[11,"collect_leaves","","",43,[[["self"]],[["vec",["instructionpredicatenode"]],["instructionpredicatenode"]]]],[11,"new","","",35,[[],["self"]]],[11,"unwrap","","",35,[[],["instructionpredicatenode"]]],[11,"new_typevar_check","","",35,[[["valuetype"],["rc"],["typevar"]],["instructionpredicatenode"]]],[11,"new_ctrl_typevar_check","","",35,[[["valuetype"]],["instructionpredicatenode"]]],[11,"new_is_field_equal","","",35,[[["instructionformat"],["str"],["string"]],["instructionpredicatenode"]]],[11,"new_is_field_equal_ast","","Used only for the AST module, which directly passes in the…",35,[[["instructionformat"],["formatfield"],["string"]],["instructionpredicatenode"]]],[11,"new_is_signed_int","","",35,[[["str"],["usize"],["instructionformat"]],["instructionpredicatenode"]]],[11,"new_is_unsigned_int","","",35,[[["str"],["usize"],["instructionformat"]],["instructionpredicatenode"]]],[11,"new_is_zero_int","","",35,[[["instructionformat"],["str"]],["instructionpredicatenode"]]],[11,"new_is_zero_32bit_float","","",35,[[["instructionformat"],["str"]],["instructionpredicatenode"]]],[11,"new_is_zero_64bit_float","","",35,[[["instructionformat"],["str"]],["instructionpredicatenode"]]],[11,"new_is_all_zeroes","","",35,[[["instructionformat"],["str"]],["instructionpredicatenode"]]],[11,"new_is_all_ones","","",35,[[["instructionformat"],["str"]],["instructionpredicatenode"]]],[11,"new_length_equals","","",35,[[["instructionformat"],["usize"]],["instructionpredicatenode"]]],[11,"new_is_colocated_func","","",35,[[["instructionformat"],["str"]],["instructionpredicatenode"]]],[11,"new_is_colocated_data","","",35,[[["formats"]],["instructionpredicatenode"]]],[11,"and","","",35,[[["instructionpredicatenode"]],["self"]]],[11,"or","","",35,[[["instructionpredicatenode"]],["self"]]],[11,"rust_predicate","","",35,[[["str"],["self"]],[["string"],["option",["string"]]]]],[11,"type_predicate","","Returns the type predicate if this is one, or None…",35,[[["str"],["self"]],[["string"],["option",["string"]]]]],[11,"collect_leaves","","Returns references to all the nodes that are leaves in the…",35,[[["self"]],[["vec",["instructionpredicatenode"]],["instructionpredicatenode"]]]],[11,"from_u32","","Return the underlying index value as a `u32`.",36,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",36,[[],["u32"]]],[11,"new","","",37,[[],["self"]]],[11,"insert","","",37,[[["self"],["instructionpredicate"]],["instructionpredicatenumber"]]],[11,"extract","","",37,[[],[["primarymap",["instructionpredicatenumber","instructionpredicate"]],["instructionpredicatenumber"],["instructionpredicate"]]]],[11,"inst","","",44,[[["self"]],["rc"]]],[0,"isa","cranelift_codegen_meta::cdsl","",null,null],[3,"TargetIsa","cranelift_codegen_meta::cdsl::isa","",null,null],[12,"name","","",46,null],[12,"instructions","","",46,null],[12,"settings","","",46,null],[12,"regs","","",46,null],[12,"recipes","","",46,null],[12,"cpu_modes","","",46,null],[12,"encodings_predicates","","",46,null],[12,"local_transform_groups","","TransformGroupIndex are global to all the ISAs, while we…",46,null],[11,"new","","",46,[[["str"],["instructionpredicate"],["primarymap",["instructionpredicatenumber","instructionpredicate"]],["instructiongroup"],["isaregs"],["primarymap",["encodingrecipenumber","encodingrecipe"]],["instructionpredicatenumber"],["encodingrecipe"],["cpumode"],["settinggroup"],["vec",["cpumode"]],["encodingrecipenumber"]],["self"]]],[11,"transitive_transform_groups","","Returns a deterministically ordered, deduplicated list of…",46,[[["self"],["transformgroups"]],[["vec",["transformgroupindex"]],["transformgroupindex"]]]],[11,"direct_transform_groups","","Returns a deterministically ordered, deduplicated list of…",46,[[["self"]],["vec"]]],[11,"translate_group_index","","",46,[[["self"],["transformgroupindex"]],["usize"]]],[0,"operands","cranelift_codegen_meta::cdsl","",null,null],[3,"Operand","cranelift_codegen_meta::cdsl::operands","An instruction operand can be an immediate, an SSA value,…",null,null],[12,"name","","Name of the operand variable, as it appears in function…",47,null],[12,"kind","","Type of the operand.",47,null],[12,"doc","","",47,null],[3,"OperandKind","","",null,null],[12,"rust_type","","String representation of the Rust type mapping to this…",48,null],[12,"rust_field_name","","Name of this OperandKind in the format's member field.",48,null],[12,"fields","","Type-specific fields for this OperandKind.",48,null],[12,"doc","","",48,null],[4,"OperandKindFields","","",null,null],[13,"EntityRef","","",49,null],[13,"VariableArgs","","",49,null],[13,"ImmValue","","",49,null],[13,"ImmEnum","","",49,null],[13,"TypeVar","","",49,null],[6,"EnumValues","","",null,null],[11,"new","","",47,[[["str"]],["self"]]],[11,"with_doc","","",47,[[["str"]],["self"]]],[11,"doc","","",47,[[["self"]],[["str"],["option",["str"]]]]],[11,"is_value","","",47,[[["self"]],["bool"]]],[11,"type_var","","",47,[[["self"]],[["typevar"],["option",["typevar"]]]]],[11,"is_varargs","","",47,[[["self"]],["bool"]]],[11,"is_immediate_or_entityref","","Returns true if the operand has an immediate kind or is an…",47,[[["self"]],["bool"]]],[11,"is_immediate","","Returns true if the operand has an immediate kind.",47,[[["self"]],["bool"]]],[11,"is_cpu_flags","","",47,[[["self"]],["bool"]]],[11,"new","","",48,[[["operandkindfields"],["str"]],["self"]]],[11,"with_doc","","",48,[[["str"]],["self"]]],[11,"doc","","",48,[[["self"]],[["str"],["option",["str"]]]]],[0,"recipes","cranelift_codegen_meta::cdsl","",null,null],[3,"Register","cranelift_codegen_meta::cdsl::recipes","A specific register in a register class.",null,null],[12,"regclass","","",50,null],[12,"unit","","",50,null],[3,"Stack","","An operand that must be in a stack slot.",null,null],[12,"regclass","","",51,null],[3,"BranchRange","","",null,null],[12,"inst_size","","",52,null],[12,"range","","",52,null],[3,"EncodingRecipe","","A recipe for encoding instructions with a given format.",null,null],[12,"name","","Short mnemonic name for this recipe.",53,null],[12,"format","","Associated instruction format.",53,null],[12,"base_size","","Base number of bytes in the binary encoded instruction.",53,null],[12,"operands_in","","Tuple of register constraints for value operands.",53,null],[12,"operands_out","","Tuple of register constraints for results.",53,null],[12,"compute_size","","Function name to use when computing actual size.",53,null],[12,"branch_range","","`(origin, bits)` range for branches.",53,null],[12,"clobbers_flags","","This instruction clobbers `iflags` and `fflags`; true by…",53,null],[12,"inst_predicate","","Instruction predicate.",53,null],[12,"isa_predicate","","ISA predicate.",53,null],[12,"emit","","Rust code for binary emission.",53,null],[3,"EncodingRecipeNumber","","",null,null],[12,"0","","",54,null],[3,"EncodingRecipeBuilder","","",null,null],[12,"name","","",55,null],[12,"format","","",55,null],[12,"base_size","","",55,null],[12,"operands_in","","",55,null],[12,"operands_out","","",55,null],[12,"compute_size","","",55,null],[12,"branch_range","","",55,null],[12,"emit","","",55,null],[12,"clobbers_flags","","",55,null],[12,"inst_predicate","","",55,null],[12,"isa_predicate","","",55,null],[4,"OperandConstraint","","",null,null],[13,"RegClass","","",56,null],[13,"FixedReg","","",56,null],[13,"TiedInput","","",56,null],[13,"Stack","","",56,null],[6,"Recipes","","",null,null],[11,"new","","",50,[[["u8"],["regclassindex"]],["self"]]],[11,"new","","",51,[[["regclassindex"]],["self"]]],[11,"stack_base_mask","","",51,[[],["str"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",54,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",54,[[],["u32"]]],[11,"new","","",55,[[["rc"],["u64"]],["self"]]],[11,"operands_in","","",55,[[["vec"]],["self"]]],[11,"operands_out","","",55,[[["vec"]],["self"]]],[11,"clobbers_flags","","",55,[[["bool"]],["self"]]],[11,"emit","","",55,[[],["self"]]],[11,"branch_range","","",55,[[],["self"]]],[11,"isa_predicate","","",55,[[["u8"]],["self"]]],[11,"inst_predicate","","",55,[[],["self"]]],[11,"compute_size","","",55,[[["str"]],["self"]]],[11,"build","","",55,[[],["encodingrecipe"]]],[0,"regs","cranelift_codegen_meta::cdsl","",null,null],[3,"RegBankIndex","cranelift_codegen_meta::cdsl::regs","",null,null],[12,"0","","",57,null],[3,"RegBank","","",null,null],[12,"name","","",58,null],[12,"first_unit","","",58,null],[12,"units","","",58,null],[12,"names","","",58,null],[12,"prefix","","",58,null],[12,"pressure_tracking","","",58,null],[12,"pinned_reg","","",58,null],[12,"toprcs","","",58,null],[12,"classes","","",58,null],[3,"RegClassIndex","","",null,null],[12,"0","","",59,null],[3,"RegClass","","",null,null],[12,"name","","",60,null],[12,"index","","",60,null],[12,"width","","",60,null],[12,"bank","","",60,null],[12,"toprc","","",60,null],[12,"count","","",60,null],[12,"start","","",60,null],[12,"subclasses","","",60,null],[3,"RegClassBuilder","","",null,null],[12,"name","","",61,null],[12,"width","","",61,null],[12,"count","","",61,null],[12,"start","","",61,null],[12,"proto","","",61,null],[3,"RegBankBuilder","","",null,null],[12,"name","","",62,null],[12,"units","","",62,null],[12,"names","","",62,null],[12,"prefix","","",62,null],[12,"pressure_tracking","","",62,null],[12,"pinned_reg","","",62,null],[3,"IsaRegsBuilder","","",null,null],[12,"banks","","",63,null],[12,"classes","","",63,null],[3,"IsaRegs","","",null,null],[12,"banks","","",64,null],[12,"classes","","",64,null],[4,"RegClassProto","","",null,null],[13,"TopLevel","","",65,null],[13,"SubClass","","",65,null],[11,"from_u32","","Return the underlying index value as a `u32`.",57,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",57,[[],["u32"]]],[11,"new","","",58,[[["bool"],["str"],["option",["u16"]],["u16"],["vec",["str"]],["u8"]],["self"]]],[11,"unit_by_name","","",58,[[["str"],["self"]],["u8"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",59,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",59,[[],["u32"]]],[11,"new","","",60,[[["str"],["regclassindex"],["regbankindex"],["u8"]],["self"]]],[11,"subclass_mask","","Compute a bit-mask of subclasses, including self.",60,[[["self"]],["u64"]]],[11,"mask","","Compute a bit-mask of the register units allocated by this…",60,[[["self"],["u8"]],[["u32"],["vec",["u32"]]]]],[11,"new_toplevel","","",61,[[["str"],["regbankindex"]],["self"]]],[11,"subclass_of","","",61,[[["str"],["regclassindex"],["u8"]],["self"]]],[11,"count","","",61,[[["u8"]],["self"]]],[11,"width","","",61,[[["u8"]],["self"]]],[11,"new","","",62,[[["str"]],["self"]]],[11,"units","","",62,[[["u8"]],["self"]]],[11,"names","","",62,[[["str"],["vec",["str"]]],["self"]]],[11,"track_pressure","","",62,[[["bool"]],["self"]]],[11,"pinned_reg","","",62,[[["u16"]],["self"]]],[11,"new","","",63,[[],["self"]]],[11,"add_bank","","",63,[[["self"],["regbankbuilder"]],["regbankindex"]]],[11,"add_class","","",63,[[["self"],["regclassbuilder"]],["regclassindex"]]],[11,"build","","Checks that the set of register classes satisfies:",63,[[],["isaregs"]]],[11,"new","","",64,[[["primarymap",["regclassindex","regclass"]],["primarymap",["regbankindex","regbank"]],["regbankindex"],["regclassindex"],["regbank"],["regclass"]],["self"]]],[11,"class_by_name","","",64,[[["str"],["self"]],["regclassindex"]]],[11,"regunit_by_name","","",64,[[["str"],["self"],["regclassindex"]],["u8"]]],[0,"settings","cranelift_codegen_meta::cdsl","",null,null],[3,"BoolSettingIndex","cranelift_codegen_meta::cdsl::settings","",null,null],[12,"0","","",66,null],[3,"BoolSetting","","",null,null],[12,"default","","",67,null],[12,"bit_offset","","",67,null],[12,"predicate_number","","",67,null],[3,"Setting","","",null,null],[12,"name","","",68,null],[12,"comment","","",68,null],[12,"specific","","",68,null],[12,"byte_offset","","",68,null],[3,"PresetIndex","","",null,null],[12,"0","","",69,null],[3,"Preset","","",null,null],[12,"name","","",70,null],[12,"values","","",70,null],[3,"SettingGroup","","",null,null],[12,"name","","",71,null],[12,"settings","","",71,null],[12,"bool_start_byte_offset","","",71,null],[12,"settings_size","","",71,null],[12,"presets","","",71,null],[12,"predicates","","",71,null],[3,"ProtoSetting","","This is the information provided during building for a…",null,null],[12,"name","","",72,null],[12,"comment","","",72,null],[12,"specific","","",72,null],[3,"ProtoPredicate","","",null,null],[12,"name","","",73,null],[12,"node","","",73,null],[3,"Predicate","","",null,null],[12,"name","","",74,null],[12,"node","","",74,null],[12,"number","","",74,null],[3,"SettingGroupBuilder","","",null,null],[12,"name","","",75,null],[12,"settings","","",75,null],[12,"presets","","",75,null],[12,"predicates","","",75,null],[4,"SpecificSetting","","",null,null],[13,"Bool","","",76,null],[13,"Enum","","",76,null],[13,"Num","","",76,null],[4,"PresetType","","",null,null],[13,"BoolSetting","","",77,null],[13,"OtherPreset","","",77,null],[4,"ProtoSpecificSetting","","This is the basic information needed to track the specific…",null,null],[13,"Bool","","",78,null],[13,"Enum","","",78,null],[13,"Num","","",78,null],[4,"PredicateNode","","",null,null],[13,"OwnedBool","","",79,null],[13,"SharedBool","","",79,null],[13,"Not","","",79,null],[13,"And","","",79,null],[6,"SettingPredicateNumber","","",null,null],[11,"default_byte","","",68,[[["self"]],["u8"]]],[11,"byte_for_value","","",68,[[["self"],["bool"]],["u8"]]],[11,"byte_mask","","",68,[[["self"]],["u8"]]],[11,"layout","","",70,[[["self"],["settinggroup"]],["vec"]]],[11,"num_bool_settings","","",71,[[["self"]],["u8"]]],[11,"byte_size","","",71,[[["self"]],["u8"]]],[11,"get_bool","","",71,[[["str"],["self"]]]],[11,"predicate_by_name","","",71,[[["str"],["self"]],["u8"]]],[11,"render","","",79,[[["self"],["settinggroup"]],["string"]]],[11,"render","","",74,[[["self"],["settinggroup"]],["string"]]],[11,"new","","",75,[[["str"]],["self"]]],[11,"add_setting","","",75,[[["self"],["str"],["protospecificsetting"]]]],[11,"add_bool","","",75,[[["self"],["str"],["bool"]],["boolsettingindex"]]],[11,"add_enum","","",75,[[["self"],["str"],["vec",["str"]]]]],[11,"add_num","","",75,[[["self"],["str"],["u8"]]]],[11,"add_predicate","","",75,[[["self"],["str"],["predicatenode"]]]],[11,"add_preset","","",75,[[["vec",["presettype"]],["str"],["self"],["presettype"]],["presetindex"]]],[11,"build","","Compute the layout of the byte vector used to represent…",75,[[],["settinggroup"]]],[0,"type_inference","cranelift_codegen_meta::cdsl","",null,null],[3,"TypeEnvironment","cranelift_codegen_meta::cdsl::type_inference","Class encapsulating the necessary bookkeeping for type…",null,null],[12,"vars","","",80,null],[12,"ranks","","",80,null],[12,"equivalency_map","","",80,null],[12,"constraints","","",80,null],[4,"Constraint","","",null,null],[13,"WiderOrEq","","Constraint specifying that a type var tv1 must be wider…",81,null],[13,"Eq","","Constraint specifying that two derived type vars must have…",81,null],[13,"InTypeset","","Constraint specifying that a type var must belong to some…",81,null],[4,"TypeEnvRank","","",null,null],[13,"Singleton","","",82,null],[13,"Input","","",82,null],[13,"Intermediate","","",82,null],[13,"Output","","",82,null],[13,"Temp","","",82,null],[13,"Internal","","",82,null],[5,"substitute","","Replaces an external type variable according to the…",null,[[["typevar"],["hashmap"]],["typevar"]]],[5,"canonicalize_derivations","","Normalize a (potentially derived) typevar using the…",null,[[["typevar"]],["typevar"]]],[5,"constrain_fixpoint","","Given typevars tv1 and tv2 (which could be derived from…",null,[[["typevar"]]]],[5,"unify","","Unify tv1 and tv2 in the given type environment. tv1 must…",null,[[["typevar"],["typeenvironment"]],[["result",["string"]],["string"]]]],[5,"infer_definition","","Perform type inference on one Def in the current type…",null,[[["varpool"],["usize"],["typeenvironment"],["def"]],[["typeenvironment"],["string"],["result",["typeenvironment","string"]]]]],[5,"infer_transform","","Perform type inference on an transformation. Return an…",null,[[["varpool"],["defpool"],["defindex"]],[["typeenvironment"],["string"],["result",["typeenvironment","string"]]]]],[11,"translate_with","","",81,[[["self"],["fn"]],["constraint"]]],[11,"translate_with_map","","Creates a new constraint by replacing type vars by their…",81,[[["self"],["hashmap"]],["constraint"]]],[11,"translate_with_env","","Creates a new constraint by replacing type vars by their…",81,[[["self"],["typeenvironment"]],["constraint"]]],[11,"is_trivial","","",81,[[["self"]],["bool"]]],[11,"is_concrete","","Returns true iff all the referenced type vars are…",81,[[["self"]],["bool"]]],[11,"typevar_args","","",81,[[["self"]],[["vec",["typevar"]],["typevar"]]]],[11,"new","","",80,[[],["self"]]],[11,"register","","",80,[[["var"],["self"],["varindex"]]]],[11,"add_constraint","","",80,[[["self"],["constraint"]]]],[11,"get_equivalent","","Returns the canonical representative of the equivalency…",80,[[["self"],["typevar"]],["typevar"]]],[11,"rank","","Get the rank of tv in the partial order: - TVs directly…",80,[[["self"],["typevar"]],["u8"]]],[11,"record_equivalent","","Record the fact that the free tv1 is part of the same…",80,[[["typevar"],["self"]]]],[11,"free_typevars","","Get the free typevars in the current type environment.",80,[[["varpool"],["self"]],[["typevar"],["vec",["typevar"]]]]],[11,"normalize","","Normalize by collapsing any roots that don't correspond to…",80,[[["varpool"],["self"]]]],[11,"extract","","Extract a clean type environment from self, that only…",80,[[["varpool"]],["typeenvironment"]]],[0,"types","cranelift_codegen_meta::cdsl","Cranelift ValueType hierarchy",null,null],[3,"LaneTypeIterator","cranelift_codegen_meta::cdsl::types","An iterator for different lane types.",null,null],[12,"bool_iter","","",83,null],[12,"int_iter","","",83,null],[12,"float_iter","","",83,null],[3,"VectorType","","A concrete SIMD vector type.",null,null],[12,"base","","",84,null],[12,"lanes","","",84,null],[3,"SpecialTypeIterator","","",null,null],[12,"flag_iter","","",85,null],[3,"ReferenceType","","Reference type is scalar type, but not lane type.",null,null],[12,"0","","",86,null],[3,"ReferenceTypeIterator","","An iterator for different reference types.",null,null],[12,"reference_iter","","",87,null],[4,"ValueType","","A concrete SSA value type.",null,null],[13,"Lane","","",88,null],[13,"Reference","","",88,null],[13,"Special","","",88,null],[13,"Vector","","",88,null],[4,"LaneType","","A concrete scalar type that can appear as a vector lane too.",null,null],[13,"Bool","","",89,null],[13,"Float","","",89,null],[13,"Int","","",89,null],[4,"SpecialType","","A concrete scalar type that is neither a vector nor a lane…",null,null],[13,"Flag","","",90,null],[7,"_RUST_NAME_PREFIX","","",null,null],[11,"all_lane_types","","Iterate through all of the lane types.",88,[[],["lanetypeiterator"]]],[11,"all_special_types","","Iterate through all of the special types (neither lanes…",88,[[],["specialtypeiterator"]]],[11,"all_reference_types","","",88,[[],["referencetypeiterator"]]],[11,"doc","","Return a string containing the documentation comment for…",88,[[["self"]],["string"]]],[11,"lane_bits","","Return the number of bits in a lane.",88,[[["self"]],["u64"]]],[11,"lane_count","","Return the number of lanes.",88,[[["self"]],["u64"]]],[11,"membytes","","Find the number of bytes that this type occupies in memory.",88,[[["self"]],["u64"]]],[11,"number","","Find the unique number associated with this type.",88,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"rust_name","","Return the name of this type for generated Rust source…",88,[[["self"]],["string"]]],[11,"_wider_or_equal","","Return true iff: 1. self and other have equal number of…",88,[[["valuetype"],["self"]],["bool"]]],[11,"width","","Return the total number of bits of an instance of this type.",88,[[["self"]],["u64"]]],[11,"doc","","Return a string containing the documentation comment for…",89,[[],["string"]]],[11,"lane_bits","","Return the number of bits in a lane.",89,[[],["u64"]]],[11,"number","","Find the unique number associated with this lane type.",89,[[],["u8"]]],[11,"bool_from_bits","","",89,[[["u16"]],["lanetype"]]],[11,"int_from_bits","","",89,[[["u16"]],["lanetype"]]],[11,"float_from_bits","","",89,[[["u16"]],["lanetype"]]],[11,"by","","",89,[[["u16"]],["valuetype"]]],[11,"is_float","","",89,[[],["bool"]]],[11,"is_int","","",89,[[],["bool"]]],[11,"new","","Create a new lane type iterator.",83,[[],["self"]]],[11,"new","","Initialize a new integer type with `n` bits.",84,[[["lanetype"],["u64"]],["self"]]],[11,"doc","","Return a string containing the documentation comment for…",84,[[["self"]],["string"]]],[11,"lane_bits","","Return the number of bits in a lane.",84,[[["self"]],["u64"]]],[11,"lane_count","","Return the number of lanes.",84,[[["self"]],["u64"]]],[11,"lane_type","","Return the lane type.",84,[[["self"]],["lanetype"]]],[11,"number","","Find the unique number associated with this vector type.",84,[[["self"]],["u8"]]],[11,"doc","","Return a string containing the documentation comment for…",90,[[],["string"]]],[11,"lane_bits","","Return the number of bits in a lane.",90,[[],["u64"]]],[11,"number","","Find the unique number associated with this special type.",90,[[],["u8"]]],[11,"new","","",85,[[],["self"]]],[11,"doc","","Return a string containing the documentation comment for…",86,[[],["string"]]],[11,"lane_bits","","Return the number of bits in a lane.",86,[[],["u64"]]],[11,"number","","Find the unique number associated with this reference type.",86,[[],["u8"]]],[11,"ref_from_bits","","",86,[[["u16"]],["referencetype"]]],[11,"new","","Create a new reference type iterator.",87,[[],["self"]]],[0,"typevar","cranelift_codegen_meta::cdsl","",null,null],[3,"TypeVarContent","cranelift_codegen_meta::cdsl::typevar","Type variables can be used in place of concrete types when…",null,null],[12,"name","","Short name of type variable used in instruction…",91,null],[12,"doc","","Documentation string.",91,null],[12,"type_set","","Type set associated to the type variable. This field must…",91,null],[12,"base","","",91,null],[3,"TypeVar","","",null,null],[12,"content","","",92,null],[3,"TypeVarParent","","",null,null],[12,"type_var","","",93,null],[12,"derived_func","","",93,null],[3,"TypeSet","","",null,null],[12,"lanes","","",94,null],[12,"ints","","",94,null],[12,"floats","","",94,null],[12,"bools","","",94,null],[12,"refs","","",94,null],[12,"specials","","",94,null],[3,"TypeSetBuilder","","",null,null],[12,"ints","","",95,null],[12,"floats","","",95,null],[12,"bools","","",95,null],[12,"refs","","",95,null],[12,"includes_scalars","","",95,null],[12,"simd_lanes","","",95,null],[12,"specials","","",95,null],[4,"DerivedFunc","","",null,null],[13,"LaneOf","","",96,null],[13,"AsBool","","",96,null],[13,"HalfWidth","","",96,null],[13,"DoubleWidth","","",96,null],[13,"HalfVector","","",96,null],[13,"DoubleVector","","",96,null],[4,"Interval","","",null,null],[13,"None","","",97,null],[13,"All","","",97,null],[13,"Range","","",97,null],[5,"set_wider_or_equal","","",null,[[["btreeset"]],["bool"]]],[5,"set_narrower","","",null,[[["btreeset"]],["bool"]]],[5,"legal_bool","","",null,[[["u16"]],["bool"]]],[5,"range_to_set","","Generates a set with all the powers of two included in the…",null,[[["option",["range"]],["range",["u16"]]],[["u16"],["btreeset",["u16"]]]]],[6,"RangeBound","","A set of types.",null,null],[6,"Range","","",null,null],[6,"NumSet","","",null,null],[17,"MAX_LANES","","",null,null],[17,"MAX_BITS","","",null,null],[17,"MAX_FLOAT_BITS","","",null,null],[11,"new","","",92,[[["typeset"]],["self"]]],[11,"new_singleton","","",92,[[["valuetype"]],["self"]]],[11,"copy_from","","Get a fresh copy of self, named after `name`. Can only be…",92,[[["typevar"],["string"]],["typevar"]]],[11,"get_typeset","","Returns the typeset for this TV. If the TV is derived,…",92,[[["self"]],["typeset"]]],[11,"get_raw_typeset","","Returns this typevar's type set, assuming this type var…",92,[[["self"]],["typeset"]]],[11,"singleton_type","","If the associated typeset has a single type return it.…",92,[[["self"]],[["option",["valuetype"]],["valuetype"]]]],[11,"free_typevar","","Get the free type variable controlling this one.",92,[[["self"]],[["typevar"],["option",["typevar"]]]]],[11,"derived","","Create a type variable that is a function of another.",92,[[["self"],["derivedfunc"]],["typevar"]]],[11,"lane_of","","",92,[[["self"]],["typevar"]]],[11,"as_bool","","",92,[[["self"]],["typevar"]]],[11,"half_width","","",92,[[["self"]],["typevar"]]],[11,"double_width","","",92,[[["self"]],["typevar"]]],[11,"half_vector","","",92,[[["self"]],["typevar"]]],[11,"double_vector","","",92,[[["self"]],["typevar"]]],[11,"constrain_types_by_ts","","Constrain the range of types this variable can assume to a…",92,[[["typeset"],["self"]]]],[11,"constrain_types","","Constrain the range of types this variable can assume to a…",92,[[["typevar"],["self"]]]],[11,"to_rust_code","","Get a Rust expression that computes the type of this type…",92,[[["self"]],["string"]]],[11,"name","","",96,[[],["str"]]],[11,"inverse","","Returns the inverse function of this one, if it is a…",96,[[],[["derivedfunc"],["option",["derivedfunc"]]]]],[11,"new","","",94,[[["u16"],["btreeset",["u16"]],["vec",["specialtype"]],["specialtype"]],["self"]]],[11,"size","","Return the number of concrete types represented by this…",94,[[["self"]],["usize"]]],[11,"image","","Return the image of self across the derived function func.",94,[[["self"],["derivedfunc"]],["typeset"]]],[11,"lane_of","","Return a TypeSet describing the image of self across…",94,[[["self"]],["typeset"]]],[11,"as_bool","","Return a TypeSet describing the image of self across…",94,[[["self"]],["typeset"]]],[11,"half_width","","Return a TypeSet describing the image of self across…",94,[[["self"]],["typeset"]]],[11,"double_width","","Return a TypeSet describing the image of self across…",94,[[["self"]],["typeset"]]],[11,"half_vector","","Return a TypeSet describing the image of self across…",94,[[["self"]],["typeset"]]],[11,"double_vector","","Return a TypeSet describing the image of self across…",94,[[["self"]],["typeset"]]],[11,"concrete_types","","",94,[[["self"]],[["vec",["valuetype"]],["valuetype"]]]],[11,"get_singleton","","Return the singleton type represented by self. Can only…",94,[[["self"]],["valuetype"]]],[11,"preimage","","Return the inverse image of self across the derived…",94,[[["self"],["derivedfunc"]],["typeset"]]],[11,"inplace_intersect_with","","",94,[[["self"],["typeset"]]]],[11,"is_subset","","",94,[[["self"],["typeset"]],["bool"]]],[11,"is_wider_or_equal","","",94,[[["self"],["typeset"]],["bool"]]],[11,"is_narrower","","",94,[[["self"],["typeset"]],["bool"]]],[11,"new","","",95,[[],["self"]]],[11,"ints","","",95,[[],["self"]]],[11,"floats","","",95,[[],["self"]]],[11,"bools","","",95,[[],["self"]]],[11,"refs","","",95,[[],["self"]]],[11,"includes_scalars","","",95,[[["bool"]],["self"]]],[11,"simd_lanes","","",95,[[],["self"]]],[11,"specials","","",95,[[["vec",["specialtype"]],["specialtype"]],["self"]]],[11,"build","","",95,[[],["typeset"]]],[11,"all","","",95,[[],["typeset"]]],[11,"to_range","","",97,[[["option",["u16"]],["u16"],["self"],["range",["u16"]]],[["range",["u16"]],["option",["range"]]]]],[0,"xform","cranelift_codegen_meta::cdsl","",null,null],[3,"Transform","cranelift_codegen_meta::cdsl::xform","An instruction transformation consists of a source and…",null,null],[12,"src","","",98,null],[12,"dst","","",98,null],[12,"var_pool","","",98,null],[12,"def_pool","","",98,null],[12,"block_pool","","",98,null],[12,"const_pool","","",98,null],[12,"type_env","","",98,null],[3,"TransformGroup","","A group of related transformations.",null,null],[12,"name","","",99,null],[12,"doc","","",99,null],[12,"chain_with","","",99,null],[12,"isa_name","","",99,null],[12,"id","","",99,null],[12,"custom_legalizes","","Maps Instruction camel_case names to custom legalization…",99,null],[12,"transforms","","",99,null],[3,"TransformGroupIndex","","",null,null],[12,"0","","",100,null],[3,"TransformGroupBuilder","","",null,null],[12,"name","","",101,null],[12,"doc","","",101,null],[12,"chain_with","","",101,null],[12,"isa_name","","",101,null],[12,"custom_legalizes","","",101,null],[12,"transforms","","",101,null],[3,"TransformGroups","","",null,null],[12,"groups","","",102,null],[5,"var_index","","Inserts, if not present, a name in the `symbol_table`.…",null,[[["str"],["varpool"],["vec"],["hashmap"]],["varindex"]]],[5,"rewrite_defined_vars","","Given a list of symbols defined in a Def, rewrite them to…",null,[[["varpool"],["patternposition"],["dummydef"],["vec"],["hashmap"],["defindex"]],[["vec",["varindex"]],["varindex"]]]],[5,"rewrite_expr","","Find all uses of variables in `expr` and replace them with…",null,[[["varpool"],["patternposition"],["vec"],["dummyexpr"],["hashmap"],["constpool"]],["apply"]]],[5,"rewrite_def_list","","",null,[[["varpool"],["patternposition"],["blockpool"],["vec",["dummydef"]],["defpool"],["dummydef"],["vec"],["hashmap"],["constpool"]],[["vec",["defindex"]],["defindex"]]]],[6,"SymbolTable","","",null,null],[11,"new","","",98,[[["dummydef"],["vec",["dummydef"]]],["self"]]],[11,"verify_legalize","","",98,[[["self"]]]],[11,"rust_name","","",99,[[["self"]],["string"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",100,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",100,[[],["u32"]]],[11,"new","","",101,[[["str"]],["self"]]],[11,"chain_with","","",101,[[["transformgroupindex"]],["self"]]],[11,"isa","","",101,[[["str"]],["self"]]],[11,"custom_legalize","","Add a custom legalization action for `inst`.",101,[[["self"],["rc"],["str"]]]],[11,"legalize","","Add a legalization pattern to this group.",101,[[["self"],["dummydef"],["vec",["dummydef"]]]]],[11,"build_and_add_to","","",101,[[["transformgroups"]],["transformgroupindex"]]],[11,"new","","",102,[[],["self"]]],[11,"add","","",102,[[["transformgroup"],["self"]],["transformgroupindex"]]],[11,"get","","",102,[[["self"],["transformgroupindex"]],["transformgroup"]]],[11,"next_key","","",102,[[["self"]],["transformgroupindex"]]],[11,"by_name","","",102,[[["str"],["self"]],["transformgroup"]]],[0,"srcgen","cranelift_codegen_meta","Source code generator.",null,null],[3,"Formatter","cranelift_codegen_meta::srcgen","",null,null],[12,"indent","","",103,null],[12,"lines","","",103,null],[3,"Match","","Match formatting class.",null,null],[12,"expr","","",104,null],[12,"arms","","",104,null],[12,"catch_all","","The clause for the placeholder pattern _.",104,null],[5,"_indent","","Compute the indentation of s, or None of an empty line.",null,[[["str"]],[["usize"],["option",["usize"]]]]],[5,"parse_multiline","","Given a multi-line string, split it into a sequence of…",null,[[["str"]],[["vec",["string"]],["string"]]]],[7,"SHIFTWIDTH","","",null,null],[11,"new","","Source code formatter class. Used to collect source code…",103,[[],["self"]]],[11,"indent_push","","Increase current indentation level by one.",103,[[["self"]]]],[11,"indent_pop","","Decrease indentation by one level.",103,[[["self"]]]],[11,"indent","","",103,[[["self"],["fnonce"]],["t"]]],[11,"get_indent","","Get the current whitespace indentation in the form of a…",103,[[["self"]],["string"]]],[11,"get_outdent","","Get a string containing whitespace outdented one level.…",103,[[["self"]],["string"]]],[11,"line","","Add an indented line.",103,[[["self"]]]],[11,"empty_line","","Pushes an empty line.",103,[[["self"]]]],[11,"outdented_line","","Emit a line outdented one level.",103,[[["str"],["self"]]]],[11,"update_file","","Write `self.lines` to a file.",103,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"multi_line","","Add one or more lines after stripping common indentation.",103,[[["str"],["self"]]]],[11,"comment","","Add a comment line.",103,[[["self"]]]],[11,"doc_comment","","Add a (multi-line) documentation comment.",103,[[["self"]]]],[11,"add_match","","Add a match expression.",103,[[["match"],["self"]]]],[11,"new","","Create a new match statement on `expr`.",104,[[],["self"]]],[11,"set_catch_all","","",104,[[["self"],["string"]]]],[11,"arm","","Add an arm that reads fields to the Match statement.",104,[[["into",["string"]],["vec"],["self"],["string"]]]],[11,"arm_no_fields","","Adds an arm that doesn't read anythings from the fields to…",104,[[["self"]]]],[0,"error","cranelift_codegen_meta","Error returned during meta code-generation.",null,null],[3,"Error","cranelift_codegen_meta::error","An error that occurred when the cranelift_codegen_meta…",null,null],[12,"inner","","",105,null],[4,"ErrorInner","","",null,null],[13,"Msg","","",106,null],[13,"IoError","","",106,null],[11,"with_msg","","Create a new error object with the given message.",105,[[["string"],["into",["string"]]],["error"]]],[0,"isa","cranelift_codegen_meta","Define supported ISAs; includes ISA-specific instructions,…",null,null],[4,"Isa","cranelift_codegen_meta::isa","Represents known ISA target.",null,null],[13,"Riscv","","",107,null],[13,"X86","","",107,null],[13,"Arm32","","",107,null],[13,"Arm64","","",107,null],[5,"define","","",null,[[["shareddefinitions"]],[["vec",["targetisa"]],["targetisa"]]]],[0,"arm32","","",null,null],[5,"define_settings","cranelift_codegen_meta::isa::arm32","",null,[[["settinggroup"]],["settinggroup"]]],[5,"define_regs","","",null,[[],["isaregs"]]],[5,"define","","",null,[[["shareddefinitions"]],["targetisa"]]],[0,"arm64","cranelift_codegen_meta::isa","",null,null],[5,"define_settings","cranelift_codegen_meta::isa::arm64","",null,[[["settinggroup"]],["settinggroup"]]],[5,"define_registers","","",null,[[],["isaregs"]]],[5,"define","","",null,[[["shareddefinitions"]],["targetisa"]]],[0,"riscv","cranelift_codegen_meta::isa","",null,null],[5,"define_settings","cranelift_codegen_meta::isa::riscv","",null,[[["settinggroup"]],["settinggroup"]]],[5,"define_registers","","",null,[[],["isaregs"]]],[5,"define","","",null,[[["shareddefinitions"]],["targetisa"]]],[0,"encodings","","",null,null],[3,"PerCpuModeEncodings","cranelift_codegen_meta::isa::riscv::encodings","",null,null],[12,"inst_pred_reg","","",108,null],[12,"enc32","","",108,null],[12,"enc64","","",108,null],[12,"recipes","","",108,null],[5,"load_bits","","",null,[[["u16"]],["u16"]]],[5,"store_bits","","",null,[[["u16"]],["u16"]]],[5,"branch_bits","","",null,[[["u16"]],["u16"]]],[5,"jalr_bits","","",null,[[],["u16"]]],[5,"jal_bits","","",null,[[],["u16"]]],[5,"opimm_bits","","",null,[[["u16"]],["u16"]]],[5,"opimm32_bits","","",null,[[["u16"]],["u16"]]],[5,"op_bits","","",null,[[["u16"]],["u16"]]],[5,"op32_bits","","",null,[[["u16"]],["u16"]]],[5,"lui_bits","","",null,[[],["u16"]]],[5,"define","","",null,[[["shareddefinitions"],["recipegroup"],["settinggroup"]],["percpumodeencodings"]]],[11,"new","","",108,[[["primarymap"]],["self"]]],[11,"enc","","",108,[[["u16"],["self"],["encodingrecipenumber"]],["encodingbuilder"]]],[11,"add32","","",108,[[["self"],["encodingbuilder"]]]],[11,"add64","","",108,[[["self"],["encodingbuilder"]]]],[0,"recipes","cranelift_codegen_meta::isa::riscv","",null,null],[3,"RecipeGroup","cranelift_codegen_meta::isa::riscv::recipes","An helper to create recipes and use them when defining the…",null,null],[12,"recipes","","The actualy list of recipes explicitly created in this file.",109,null],[12,"name_to_recipe","","Provides fast lookup from a name to an encoding recipe.",109,null],[5,"define","","",null,[[["isaregs"],["shareddefinitions"]],["recipegroup"]]],[11,"new","","",109,[[],["self"]]],[11,"push","","",109,[[["self"],["encodingrecipebuilder"]]]],[11,"by_name","","",109,[[["str"],["self"]],["encodingrecipenumber"]]],[11,"collect","","",109,[[],[["encodingrecipe"],["primarymap",["encodingrecipenumber","encodingrecipe"]],["encodingrecipenumber"]]]],[0,"x86","cranelift_codegen_meta::isa","",null,null],[5,"define","cranelift_codegen_meta::isa::x86","",null,[[["shareddefinitions"]],["targetisa"]]],[0,"encodings","","",null,null],[3,"PerCpuModeEncodings","cranelift_codegen_meta::isa::x86::encodings","",null,null],[12,"enc32","","",110,null],[12,"enc64","","",110,null],[12,"recipes","","",110,null],[12,"recipes_by_name","","",110,null],[12,"inst_pred_reg","","",110,null],[5,"define_moves","","",null,[[["shareddefinitions"],["recipegroup"],["percpumodeencodings"]]]],[5,"define_memory","","",null,[[["percpumodeencodings"],["instructiongroup"],["recipegroup"],["shareddefinitions"]]]],[5,"define_fpu_moves","","",null,[[["shareddefinitions"],["recipegroup"],["percpumodeencodings"]]]],[5,"define_fpu_memory","","",null,[[["shareddefinitions"],["recipegroup"],["percpumodeencodings"]]]],[5,"define_fpu_ops","","",null,[[["settinggroup"],["percpumodeencodings"],["instructiongroup"],["recipegroup"],["shareddefinitions"]]]],[5,"define_alu","","",null,[[["settinggroup"],["percpumodeencodings"],["instructiongroup"],["recipegroup"],["shareddefinitions"]]]],[5,"define_simd","","",null,[[["settinggroup"],["percpumodeencodings"],["instructiongroup"],["recipegroup"],["shareddefinitions"]]]],[5,"define_entity_ref","","",null,[[["settinggroup"],["percpumodeencodings"],["recipegroup"],["shareddefinitions"]]]],[5,"define_control_flow","","Control flow opcodes.",null,[[["settinggroup"],["percpumodeencodings"],["recipegroup"],["shareddefinitions"]]]],[5,"define_reftypes","","Reference type instructions.",null,[[["shareddefinitions"],["recipegroup"],["percpumodeencodings"]]]],[5,"define","","",null,[[["shareddefinitions"],["instructiongroup"],["recipegroup"],["settinggroup"]],["percpumodeencodings"]]],[11,"new","","",110,[[],["self"]]],[11,"add_recipe","","",110,[[["self"],["encodingrecipe"]],["encodingrecipenumber"]]],[11,"make_encoding","","",110,[[["template"],["self"],["instspec"],["t"]],[["rc",["encodingcontent"]],["encodingcontent"]]]],[11,"enc32_func","","",110,[[["template"],["self"],["t"]]]],[11,"enc32","","",110,[[["self"],["template"]]]],[11,"enc32_isap","","",110,[[["template"],["self"],["u8"]]]],[11,"enc32_instp","","",110,[[["template"],["self"],["instructionpredicatenode"]]]],[11,"enc32_rec","","",110,[[["encodingrecipe"],["u16"],["self"]]]],[11,"enc64_func","","",110,[[["template"],["self"],["t"]]]],[11,"enc64","","",110,[[["self"],["template"]]]],[11,"enc64_isap","","",110,[[["template"],["self"],["u8"]]]],[11,"enc64_instp","","",110,[[["template"],["self"],["instructionpredicatenode"]]]],[11,"enc64_rec","","",110,[[["encodingrecipe"],["u16"],["self"]]]],[11,"enc_i32_i64","","Adds I32/I64 encodings as appropriate for a typed…",110,[[["self"],["template"]]]],[11,"enc_i32_i64_explicit_rex","","Adds I32/I64 encodings as appropriate for a typed…",110,[[["self"],["template"]]]],[11,"enc_b32_b64","","Adds B32/B64 encodings as appropriate for a typed…",110,[[["self"],["template"]]]],[11,"enc_i32_i64_rex_only","","Add encodings for `inst.i32` to X86_32. Add encodings for…",110,[[["self"],["template"]]]],[11,"enc_i32_i64_instp","","Add encodings for `inst.i32` to X86_32. Add encodings for…",110,[[["rc"],["template"],["self"],["instructionpredicatenode"]]]],[11,"enc_r32_r64_rex_only","","Add encodings for `inst.r32` to X86_32. Add encodings for…",110,[[["self"],["template"]]]],[11,"enc_r32_r64_ld_st","","",110,[[["rc"],["template"],["self"],["bool"]]]],[11,"enc_x86_64","","Add encodings for `inst` to X86_64 with and without a REX…",110,[[["self"],["template"]]]],[11,"enc_x86_64_instp","","Add encodings for `inst` to X86_64 with and without a REX…",110,[[["template"],["self"],["instructionpredicatenode"]]]],[11,"enc_x86_64_isap","","",110,[[["template"],["self"],["u8"]]]],[11,"enc_both","","Add all three encodings for `inst`: - X86_32 - X86_64 with…",110,[[["self"],["template"]]]],[11,"enc_both_isap","","",110,[[["template"],["self"],["u8"]]]],[11,"enc_both_instp","","",110,[[["template"],["self"],["instructionpredicatenode"]]]],[11,"enc_both_rex_only","","Add two encodings for `inst`: - X86_32 - X86_64 with the…",110,[[["self"],["template"]]]],[11,"enc_i32_i64_ld_st","","Add encodings for `inst.i32` to X86_32. Add encodings for…",110,[[["rc"],["template"],["self"],["bool"]]]],[11,"enc_32_64","","Add the same encoding/template pairing to both X86_32 and…",110,[[["self"],["template"]]]],[11,"enc_32_64_rec","","Add the same encoding/recipe pairing to both X86_32 and…",110,[[["encodingrecipe"],["u16"],["self"]]]],[11,"enc_32_64_func","","Add the same encoding to both X86_32 and X86_64; assumes…",110,[[["template"],["self"],["t"]]]],[11,"enc_32_64_maybe_isap","","Add the same encoding to both X86_32 and X86_64; assumes…",110,[[["template"],["option",["u8"]],["self"],["u8"]]]],[11,"enc32_maybe_isap","","",110,[[["template"],["option",["u8"]],["self"],["u8"]]]],[11,"enc64_maybe_isap","","",110,[[["template"],["option",["u8"]],["self"],["u8"]]]],[0,"instructions","cranelift_codegen_meta::isa::x86","",null,null],[5,"define","cranelift_codegen_meta::isa::x86::instructions","",null,[[["immediates"],["entityrefs"],["primarymap"],["formats"]],["instructiongroup"]]],[0,"legalize","cranelift_codegen_meta::isa::x86","",null,null],[5,"define","cranelift_codegen_meta::isa::x86::legalize","",null,[[["shareddefinitions"],["instructiongroup"]]]],[5,"define_simd","","",null,[[["shareddefinitions"],["instructiongroup"]]]],[0,"opcodes","cranelift_codegen_meta::isa::x86","Static, named definitions of instruction opcodes.",null,null],[7,"EMPTY","cranelift_codegen_meta::isa::x86::opcodes","Empty opcode for use as a default.",null,null],[7,"ADC","","Add with carry flag r{16,32,64} to r/m of the same size.",null,null],[7,"ADD","","Add r{16,32,64} to r/m of the same size.",null,null],[7,"ADD_IMM","","Add imm{16,32} to r/m{16,32,64}, possibly sign-extended.",null,null],[7,"ADD_IMM8_SIGN_EXTEND","","Add sign-extended imm8 to r/m{16,32,64}.",null,null],[7,"ADDPD","","Add packed double-precision floating-point values from…",null,null],[7,"ADDPS","","Add packed single-precision floating-point values from…",null,null],[7,"ADDSD","","Add the low double-precision floating-point value from…",null,null],[7,"ADDSS","","Add the low single-precision floating-point value from…",null,null],[7,"AND","","r/m{16,32,64} AND register of the same size (Intel docs…",null,null],[7,"AND_IMM","","imm{16,32} AND r/m{16,32,64}, possibly sign-extended.",null,null],[7,"AND_IMM8_SIGN_EXTEND","","r/m{16,32,64} AND sign-extended imm8.",null,null],[7,"ANDNPS","","Return the bitwise logical AND NOT of packed…",null,null],[7,"ANDPS","","Return the bitwise logical AND of packed single-precision…",null,null],[7,"BIT_SCAN_FORWARD","","Bit scan forward (stores index of first encountered 1 from…",null,null],[7,"BIT_SCAN_REVERSE","","Bit scan reverse (stores index of first encountered 1 from…",null,null],[7,"CALL_RELATIVE","","Call near, relative, displacement relative to next…",null,null],[7,"CMOV_OVERFLOW","","Move r/m{16,32,64} if overflow (OF=1).",null,null],[7,"CMP_IMM","","Compare imm{16,32} with r/m{16,32,64} (sign-extended if 64).",null,null],[7,"CMP_IMM8","","Compare imm8 with r/m{16,32,64}.",null,null],[7,"CMP_REG","","Compare r{16,32,64} with r/m of the same size.",null,null],[7,"CMPPD","","Compare packed double-precision floating-point value in…",null,null],[7,"CMPPS","","Compare packed single-precision floating-point value in…",null,null],[7,"CVTSD2SS","","Convert scalar double-precision floating-point value to…",null,null],[7,"CVTSI2SD","","Convert doubleword integer to scalar double-precision…",null,null],[7,"CVTSI2SS","","Convert doubleword integer to scalar single-precision…",null,null],[7,"CVTSS2SD","","Convert scalar single-precision floating-point value to…",null,null],[7,"CVTTSD2SI","","Convert with truncation scalar double-precision…",null,null],[7,"CVTTSS2SI","","Convert with truncation scalar single-precision…",null,null],[7,"DIV","","Unsigned divide for {16,32,64}-bit.",null,null],[7,"DIVPD","","Divide packed double-precision floating-point values in…",null,null],[7,"DIVPS","","Divide packed single-precision floating-point values in…",null,null],[7,"DIVSD","","Divide low double-precision floating-point value in xmm1…",null,null],[7,"DIVSS","","Divide low single-precision floating-point value in xmm1…",null,null],[7,"IDIV","","Signed divide for {16,32,64}-bit.",null,null],[7,"IMUL","","Signed multiply for {16,32,64}-bit, generic registers.",null,null],[7,"IMUL_RDX_RAX","","Signed multiply for {16,32,64}-bit, storing into RDX:RAX.",null,null],[7,"INSERTPS","","Insert scalar single-precision floating-point value.",null,null],[7,"JUMP_ABSOLUTE","","Either: 1. Jump near, absolute indirect, RIP = 64-bit…",null,null],[7,"JUMP_NEAR_RELATIVE","","Jump near, relative, RIP = RIP + 32-bit displacement sign…",null,null],[7,"JUMP_NEAR_IF_OVERFLOW","","Jump near (rel32) if overflow (OF=1).",null,null],[7,"JUMP_SHORT","","Jump short, relative, RIP = RIP + 8-bit displacement sign…",null,null],[7,"JUMP_SHORT_IF_EQUAL","","Jump short (rel8) if equal (ZF=1).",null,null],[7,"JUMP_SHORT_IF_NOT_EQUAL","","Jump short (rel8) if not equal (ZF=0).",null,null],[7,"JUMP_SHORT_IF_OVERFLOW","","Jump short (rel8) if overflow (OF=1).",null,null],[7,"LEA","","Store effective address for m in register r{16,32,64}.",null,null],[7,"LZCNT","","Count the number of leading zero bits.",null,null],[7,"MAXPD","","Return the maximum packed double-precision floating-point…",null,null],[7,"MAXPS","","Return the maximum packed single-precision floating-point…",null,null],[7,"MAXSD","","Return the maximum scalar double-precision floating-point…",null,null],[7,"MAXSS","","Return the maximum scalar single-precision floating-point…",null,null],[7,"MINPD","","Return the minimum packed double-precision floating-point…",null,null],[7,"MINPS","","Return the minimum packed single-precision floating-point…",null,null],[7,"MINSD","","Return the minimum scalar double-precision floating-point…",null,null],[7,"MINSS","","Return the minimum scalar single-precision floating-point…",null,null],[7,"MOV_BYTE_STORE","","Move r8 to r/m8.",null,null],[7,"MOV_IMM","","Move imm{16,32,64} to same-sized register.",null,null],[7,"MOV_IMM_SIGNEXTEND","","Move imm{16,32} to r{16,32,64}, sign-extended if 64-bit…",null,null],[7,"MOV_LOAD","","Move {r/m16, r/m32, r/m64} to same-sized register.",null,null],[7,"MOV_STORE_16","","Move r16 to r/m16.",null,null],[7,"MOV_STORE","","Move {r16, r32, r64} to same-sized register or memory.",null,null],[7,"MOVAPS_LOAD","","Move aligned packed single-precision floating-point values…",null,null],[7,"MOVD_LOAD_XMM","","Move doubleword from r/m32 to xmm (SSE2). Quadword with…",null,null],[7,"MOVD_STORE_XMM","","Move doubleword from xmm to r/m32 (SSE2). Quadword with…",null,null],[7,"MOVLHPS","","Move packed single-precision floating-point values low to…",null,null],[7,"MOVSD_LOAD","","Move scalar double-precision floating-point value (from…",null,null],[7,"MOVSD_STORE","","Move scalar double-precision floating-point value (from…",null,null],[7,"MOVSS_STORE","","Move scalar single-precision floating-point value (from…",null,null],[7,"MOVSS_LOAD","","Move scalar single-precision floating-point-value (from…",null,null],[7,"MOVSX_BYTE","","Move byte to register with sign-extension.",null,null],[7,"MOVSX_WORD","","Move word to register with sign-extension.",null,null],[7,"MOVSXD","","Move doubleword to register with sign-extension.",null,null],[7,"MOVUPS_LOAD","","Move unaligned packed single-precision floating-point from…",null,null],[7,"MOVUPS_STORE","","Move unaligned packed single-precision floating-point…",null,null],[7,"MOVZX_BYTE","","Move byte to register with zero-extension.",null,null],[7,"MOVZX_WORD","","Move word to register with zero-extension.",null,null],[7,"MUL","","Unsigned multiply for {16,32,64}-bit.",null,null],[7,"MULPD","","Multiply packed double-precision floating-point values…",null,null],[7,"MULPS","","Multiply packed single-precision floating-point values…",null,null],[7,"MULSD","","Multiply the low double-precision floating-point value in…",null,null],[7,"MULSS","","Multiply the low single-precision floating-point value in…",null,null],[7,"NOT","","Reverse each bit of r/m{16,32,64}.",null,null],[7,"OR","","r{16,32,64} OR register of same size.",null,null],[7,"OR_IMM","","imm{16,32} OR r/m{16,32,64}, possibly sign-extended.",null,null],[7,"OR_IMM8_SIGN_EXTEND","","r/m{16,32,64} OR sign-extended imm8.",null,null],[7,"ORPS","","Return the bitwise logical OR of packed single-precision…",null,null],[7,"PADDB","","Add packed byte integers from xmm2/m128 and xmm1 (SSE2).",null,null],[7,"PADDD","","Add packed doubleword integers from xmm2/m128 and xmm1…",null,null],[7,"PADDQ","","Add packed quadword integers from xmm2/m128 and xmm1 (SSE2).",null,null],[7,"PADDW","","Add packed word integers from xmm2/m128 and xmm1 (SSE2).",null,null],[7,"PADDSB","","Add packed signed byte integers from xmm2/m128 and xmm1…",null,null],[7,"PADDSW","","Add packed signed word integers from xmm2/m128 and xmm1…",null,null],[7,"PADDUSB","","Add packed unsigned byte integers from xmm2/m128 and xmm1…",null,null],[7,"PADDUSW","","Add packed unsigned word integers from xmm2/m128 and xmm1…",null,null],[7,"PAND","","Bitwise AND of xmm2/m128 and xmm1 (SSE2).",null,null],[7,"PANDN","","Bitwise AND NOT of xmm2/m128 and xmm1 (SSE2).",null,null],[7,"PAVGB","","Average packed unsigned byte integers from xmm2/m128 and…",null,null],[7,"PAVGW","","Average packed unsigned word integers from xmm2/m128 and…",null,null],[7,"PCMPEQB","","Compare packed data for equal (SSE2).",null,null],[7,"PCMPEQD","","Compare packed data for equal (SSE2).",null,null],[7,"PCMPEQQ","","Compare packed data for equal (SSE4.1).",null,null],[7,"PCMPEQW","","Compare packed data for equal (SSE2).",null,null],[7,"PCMPGTB","","Compare packed signed byte integers for greater than (SSE2).",null,null],[7,"PCMPGTD","","Compare packed signed doubleword integers for greater than…",null,null],[7,"PCMPGTQ","","Compare packed signed quadword integers for greater than…",null,null],[7,"PCMPGTW","","Compare packed signed word integers for greater than (SSE2).",null,null],[7,"PEXTR","","Extract doubleword or quadword, depending on REX.W (SSE4.1).",null,null],[7,"PEXTRB","","Extract byte (SSE4.1).",null,null],[7,"PEXTRW","","Extract word (SSE4.1). There is a 3-byte SSE2 variant that…",null,null],[7,"PINSR","","Insert doubleword or quadword, depending on REX.W (SSE4.1).",null,null],[7,"PINSRB","","Insert byte (SSE4.1).",null,null],[7,"PINSRW","","Insert word (SSE2).",null,null],[7,"PMAXSB","","Compare packed signed byte integers in xmm1 and xmm2/m128…",null,null],[7,"PMAXSD","","Compare packed signed doubleword integers in xmm1 and…",null,null],[7,"PMAXSW","","Compare packed signed word integers in xmm1 and xmm2/m128…",null,null],[7,"PMAXUB","","Compare packed unsigned byte integers in xmm1 and…",null,null],[7,"PMAXUD","","Compare packed unsigned doubleword integers in xmm1 and…",null,null],[7,"PMAXUW","","Compare packed unsigned word integers in xmm1 and…",null,null],[7,"PMINSB","","Compare packed signed byte integers in xmm1 and xmm2/m128…",null,null],[7,"PMINSD","","Compare packed signed doubleword integers in xmm1 and…",null,null],[7,"PMINSW","","Compare packed signed word integers in xmm1 and xmm2/m128…",null,null],[7,"PMINUB","","Compare packed unsigned byte integers in xmm1 and…",null,null],[7,"PMINUD","","Compare packed unsigned doubleword integers in xmm1 and…",null,null],[7,"PMINUW","","Compare packed unsigned word integers in xmm1 and…",null,null],[7,"PMULLW","","Multiply the packed signed word integers in xmm1 and…",null,null],[7,"PMULLD","","Multiply the packed doubleword signed integers in xmm1 and…",null,null],[7,"PMULLQ","","Multiply the packed quadword signed integers in xmm2 and…",null,null],[7,"POP_REG","","Pop top of stack into r{16,32,64}; increment stack pointer.",null,null],[7,"POPCNT","","Returns the count of number of bits set to 1.",null,null],[7,"POR","","Bitwise OR of xmm2/m128 and xmm1 (SSE2).",null,null],[7,"PSHUFB","","Shuffle bytes in xmm1 according to contents of xmm2/m128…",null,null],[7,"PSHUFD","","Shuffle the doublewords in xmm2/m128 based on the encoding…",null,null],[7,"PS_W_IMM","","Shift words in xmm1 by imm8; the direction and sign-bit…",null,null],[7,"PS_D_IMM","","Shift doublewords in xmm1 by imm8; the direction and…",null,null],[7,"PS_Q_IMM","","Shift quadwords in xmm1 by imm8; the direction and…",null,null],[7,"PSLLW","","Shift words in xmm1 left by xmm2/m128 while shifting in 0s…",null,null],[7,"PSLLD","","Shift doublewords in xmm1 left by xmm2/m128 while shifting…",null,null],[7,"PSLLQ","","Shift quadwords in xmm1 left by xmm2/m128 while shifting…",null,null],[7,"PSRLW","","Shift words in xmm1 right by xmm2/m128 while shifting in…",null,null],[7,"PSRLD","","Shift doublewords in xmm1 right by xmm2/m128 while…",null,null],[7,"PSRLQ","","Shift quadwords in xmm1 right by xmm2/m128 while shifting…",null,null],[7,"PSRAW","","Shift words in xmm1 right by xmm2/m128 while shifting in…",null,null],[7,"PSRAD","","Shift doublewords in xmm1 right by xmm2/m128 while…",null,null],[7,"PSUBB","","Subtract packed byte integers in xmm2/m128 from packed…",null,null],[7,"PSUBW","","Subtract packed word integers in xmm2/m128 from packed…",null,null],[7,"PSUBD","","Subtract packed doubleword integers in xmm2/m128 from…",null,null],[7,"PSUBQ","","Subtract packed quadword integers in xmm2/m128 from xmm1…",null,null],[7,"PSUBSB","","Subtract packed signed byte integers in xmm2/m128 from…",null,null],[7,"PSUBSW","","Subtract packed signed word integers in xmm2/m128 from…",null,null],[7,"PSUBUSB","","Subtract packed unsigned byte integers in xmm2/m128 from…",null,null],[7,"PSUBUSW","","Subtract packed unsigned word integers in xmm2/m128 from…",null,null],[7,"PTEST","","Set ZF if xmm2/m128 AND xmm1 result is all 0s; set CF if…",null,null],[7,"PUSH_REG","","Push r{16,32,64}.",null,null],[7,"PXOR","","Logical exclusive OR (SSE2).",null,null],[7,"RET_NEAR","","Near return to calling procedure.",null,null],[7,"ROTATE_CL","","General rotation opcode. Kind of rotation depends on…",null,null],[7,"ROTATE_IMM8","","General rotation opcode. Kind of rotation depends on…",null,null],[7,"ROUNDSD","","Round scalar doubl-precision floating-point values.",null,null],[7,"ROUNDSS","","Round scalar single-precision floating-point values.",null,null],[7,"SBB","","Subtract with borrow r{16,32,64} from r/m of the same size.",null,null],[7,"SET_BYTE_IF_OVERFLOW","","Set byte if overflow (OF=1).",null,null],[7,"SQRTPD","","Compute the square root of the packed double-precision…",null,null],[7,"SQRTPS","","Compute the square root of the packed double-precision…",null,null],[7,"SQRTSD","","Compute square root of scalar double-precision…",null,null],[7,"SQRTSS","","Compute square root of scalar single-precision value.",null,null],[7,"SUB","","Subtract r{16,32,64} from r/m of same size.",null,null],[7,"SUBPD","","Subtract packed double-precision floating-point values in…",null,null],[7,"SUBPS","","Subtract packed single-precision floating-point values in…",null,null],[7,"SUBSD","","Subtract the low double-precision floating-point value in…",null,null],[7,"SUBSS","","Subtract the low single-precision floating-point value in…",null,null],[7,"TEST_BYTE_REG","","AND r8 with r/m8; set SF, ZF, PF according to result.",null,null],[7,"TEST_REG","","AND {r16, r32, r64} with r/m of the same size; set SF, ZF,…",null,null],[7,"TZCNT","","Count the number of trailing zero bits.",null,null],[7,"UCOMISD","","Compare low double-precision floating-point values in xmm1…",null,null],[7,"UCOMISS","","Compare low single-precision floating-point values in xmm1…",null,null],[7,"UNDEFINED2","","Raise invalid opcode instruction.",null,null],[7,"XOR_IMM","","imm{16,32} XOR r/m{16,32,64}, possibly sign-extended.",null,null],[7,"XOR_IMM8_SIGN_EXTEND","","r/m{16,32,64} XOR sign-extended imm8.",null,null],[7,"XOR","","r/m{16,32,64} XOR register of the same size.",null,null],[7,"XORB","","r/m8 XOR r8.",null,null],[7,"XORPD","","Bitwise logical XOR of packed double-precision…",null,null],[7,"XORPS","","Bitwise logical XOR of packed single-precision…",null,null],[0,"recipes","cranelift_codegen_meta::isa::x86","Encoding recipes for x86/x86_64.",null,null],[3,"RecipeGroup","cranelift_codegen_meta::isa::x86::recipes","Helper data structure to create recipes and template…",null,null],[12,"regs","","Memoized registers description, to pass it to builders…",111,null],[12,"recipes","","All the recipes explicitly created in this file. This is…",111,null],[12,"templates","","All the recipe templates created in this file.",111,null],[3,"Template","","Previously called a TailRecipe in the Python meta…",null,null],[12,"regs","","Description of registers, used in the build() method.",112,null],[12,"recipe","","The recipe template, which is to be specialized (by copy).",112,null],[12,"rex_kind","","How is the REX prefix emitted?",112,null],[12,"inferred_rex_compute_size","","Function for `compute_size()` when REX is inferrable.",112,null],[12,"when_prefixed","","Other recipe to use when REX-prefixed.",112,null],[12,"w_bit","","Value of the W bit (0 or 1), stored in the EncodingBits.",112,null],[12,"rrr_bits","","Value of the RRR bits (between 0 and 0b111).",112,null],[12,"op_bytes","","Opcode bytes.",112,null],[4,"RecipePrefixKind","","Specifies how the prefix (e.g. REX) is emitted by a Recipe.",null,null],[13,"Unspecified","","The REX emission behavior is not hardcoded for the Recipe…",113,null],[13,"NeverEmitRex","","The Recipe must hardcode the non-emission of the REX prefix.",113,null],[13,"AlwaysEmitRex","","The Recipe must hardcode the emission of the REX prefix.",113,null],[13,"InferRex","","The Recipe should infer the emission of the REX.RXB bits…",113,null],[13,"Evex","","The Recipe must hardcode the emission of an EVEX prefix.",113,null],[5,"decode_opcodes","","Given a sequence of opcode bytes, compute the recipe name…",null,[[["u16"]]]],[5,"replace_put_op","","Given a snippet of Rust code (or None), replace the…",null,[[["option",["string"]],["str"],["string"]],[["string"],["option",["string"]]]]],[5,"replace_nonrex_constraints","","Replaces constraints to a REX-prefixed register class by…",null,[[["vec",["operandconstraint"]],["operandconstraint"],["isaregs"]],[["vec",["operandconstraint"]],["operandconstraint"]]]],[5,"replace_evex_constraints","","",null,[[["vec",["operandconstraint"]],["operandconstraint"],["isaregs"]],[["vec",["operandconstraint"]],["operandconstraint"]]]],[5,"supported_floatccs_predicate","","Returns a predicate checking that the \"cond\" field of the…",null,[[["instructionformat"]],["instructionpredicate"]]],[5,"valid_scale","","Return an instruction predicate that checks if `iform.imm`…",null,[[["instructionformat"]],["instructionpredicate"]]],[5,"define","","",null,[[["shareddefinitions"],["settinggroup"],["isaregs"]],["recipegroup"]]],[11,"new","","",111,[[["isaregs"]],["self"]]],[11,"add_recipe","","",111,[[["self"],["encodingrecipebuilder"]]]],[11,"add_template_recipe","","",111,[[["self"],["encodingrecipebuilder"]],[["rc",["template"]],["template"]]]],[11,"add_template_inferred","","",111,[[["self"],["str"],["encodingrecipebuilder"]],[["rc",["template"]],["template"]]]],[11,"add_template","","",111,[[["self"],["template"]],[["rc",["template"]],["template"]]]],[11,"recipe","","",111,[[["str"],["self"]],["encodingrecipe"]]],[11,"template","","",111,[[["str"],["self"]],["template"]]],[11,"new","","",112,[[["isaregs"],["encodingrecipebuilder"]],["self"]]],[11,"name","","",112,[[["self"]],["str"]]],[11,"rex_kind","","",112,[[["recipeprefixkind"]],["self"]]],[11,"inferred_rex_compute_size","","",112,[[["str"]],["self"]]],[11,"when_prefixed","","",112,[[["rc",["template"]],["template"]],["self"]]],[11,"opcodes","","",112,[[["self"]],["self"]]],[11,"w","","",112,[[["self"]],["self"]]],[11,"rrr","","",112,[[["u16"],["self"]],["self"]]],[11,"nonrex","","",112,[[["self"]],["self"]]],[11,"rex","","",112,[[["self"]],["self"]]],[11,"infer_rex","","",112,[[["self"]],["self"]]],[11,"build","","",112,[[]]],[0,"registers","cranelift_codegen_meta::isa::x86","",null,null],[5,"define","cranelift_codegen_meta::isa::x86::registers","",null,[[],["isaregs"]]],[0,"settings","cranelift_codegen_meta::isa::x86","",null,null],[5,"define","cranelift_codegen_meta::isa::x86::settings","",null,[[["settinggroup"]],["settinggroup"]]],[11,"from_name","cranelift_codegen_meta::isa","Creates isa target using name.",107,[[["str"]],["option"]]],[11,"from_arch","","Creates isa target from arch.",107,[[["str"]],["option"]]],[11,"all","","Returns all supported isa targets.",107,[[]]],[0,"gen_binemit","cranelift_codegen_meta","Generate binary emission code for each ISA.",null,null],[5,"gen_recipe","cranelift_codegen_meta::gen_binemit","Generate code to handle a single recipe.",null,[[["encodingrecipe"],["formatter"]]]],[5,"unwrap_values","","Emit code that unwraps values living in registers or stack…",null,[[["str"],["formatter"]],["string"]]],[5,"gen_isa","","",null,[[["str"],["primarymap"],["formatter"]]]],[5,"generate","","",null,[[["str"],["primarymap"]],[["error"],["result",["error"]]]]],[0,"gen_encodings","cranelift_codegen_meta","Generate sources for instruction encoding.",null,null],[3,"Level1Table","cranelift_codegen_meta::gen_encodings","Level 1 table mapping types to `Level2` objects.",null,null],[12,"cpu_mode","","",114,null],[12,"legalize_code","","",114,null],[12,"table_map","","",114,null],[12,"table_vec","","",114,null],[3,"Level2HashTableEntry","","",null,null],[12,"inst_name","","",115,null],[12,"offset","","",115,null],[3,"Level2Table","","Level 2 table mapping instruction opcodes to `EncList`…",null,null],[12,"typ","","",116,null],[12,"legalize_code","","",116,null],[12,"inst_to_encodings","","",116,null],[12,"hash_table_offset","","",116,null],[12,"hash_table_len","","",116,null],[3,"Encoder","","Encoder for the list format above.",null,null],[12,"num_instruction_predicates","","",117,null],[12,"words","","u16 encoding list words.",117,null],[12,"docs","","Documentation comments: Index into `words` + comment.",117,null],[3,"EncodingList","","List of instructions for encoding a given type + opcode…",null,null],[12,"inst","","",118,null],[12,"typ","","",118,null],[12,"encodings","","",118,null],[12,"offset","","",118,null],[5,"emit_instp","","Emit code for matching an instruction predicate against an…",null,[[["bool"],["formatter"],["instructionpredicate"]]]],[5,"emit_recipe_predicates","","Emit private functions for checking recipe predicates as…",null,[[["formatter"],["targetisa"]]]],[5,"emit_inst_predicates","","Emit private functions for matching instruction predicates…",null,[[["formatter"],["targetisa"]]]],[5,"emit_recipe_names","","Emit a table of encoding recipe names keyed by recipe…",null,[[["formatter"],["targetisa"]]]],[5,"get_fixed_registers","","Returns a set of all the registers involved in fixed…",null,[[],[["register"],["hashset",["register"]]]]],[5,"emit_operand_constraints","","Emit a struct field initializer for an array of operand…",null,[[["formatter"],["str"],["encodingrecipe"],["hashset"],["hashmap"],["isaregs"]]]],[5,"emit_recipe_constraints","","Emit a table of encoding recipe operand constraints keyed…",null,[[["formatter"],["targetisa"]]]],[5,"emit_recipe_sizing","","Emit a table of encoding recipe code size information.",null,[[["formatter"],["targetisa"]]]],[5,"make_tables","","",null,[[["cpumode"]],["level1table"]]],[5,"encode_enclists","","Compute encodings and doc comments for encoding lists in…",null,[[["cpumode"],["hashmap"],["level1table"],["uniqueseqtable"],["targetisa"]]]],[5,"encode_level2_hashtables","","",null,[[["vec"],["hashmap"],["level1table"]]]],[5,"emit_encoding_tables","","",null,[[["targetisa"],["formatter"],["shareddefinitions"]]]],[5,"gen_isa","","",null,[[["targetisa"],["formatter"],["shareddefinitions"]]]],[5,"generate","","",null,[[["str"],["shareddefinitions"],["targetisa"]],[["error"],["result",["error"]]]]],[17,"CODE_BITS","","The u16 values in an encoding list entry are interpreted…",null,null],[17,"PRED_START","","Beginning of the predicate code words.",null,null],[17,"PRED_BITS","","Number of bits used to hold a predicate number…",null,null],[17,"PRED_MASK","","Mask for extracting the predicate number.",null,null],[11,"new","","",114,[[["cpumode"]],["self"]]],[11,"l2table_for","","Returns the level2 table for the given type; None means…",114,[[["self"],["option",["valuetype"]],["valuetype"]],["level2table"]]],[11,"l2tables","","",114,[[["self"]],[["level2table"],["vec",["level2table"]]]]],[11,"new","","",116,[[["option",["valuetype"]],["valuetype"],["transformgroupindex"]],["self"]]],[11,"enclist_for","","",116,[[["self"],["rc"]],["encodinglist"]]],[11,"enclists","","",116,[[["self"]],[["string"],["encodinglist"],["valuesmut",["string","encodinglist"]]]]],[11,"is_empty","","",116,[[["self"]],["bool"]]],[11,"layout_hashtable","","",116,[[["vec"],["self"],["hashmap"]]]],[11,"new","","",117,[[["usize"]],["self"]]],[11,"recipe","","Add a recipe+bits entry to the list.",117,[[["primarymap"],["rc"],["self"],["bool"]]]],[11,"pred","","Add a predicate entry.",117,[[["usize"],["self"],["string"]]]],[11,"inst_predicate","","Add an instruction predicate entry.",117,[[["instructionpredicatenumber"],["self"],["usize"]]]],[11,"isa_predicate","","Add an ISA predicate entry.",117,[[["self"],["usize"],["u8"]]]],[11,"new","","",118,[[["rc"],["option",["valuetype"]],["valuetype"]],["self"]]],[11,"encode","","Encode this list as a sequence of u16 numbers.",118,[[["cpumode"],["hashmap"],["self"],["uniqueseqtable"],["targetisa"]]]],[0,"gen_inst","cranelift_codegen_meta","Generate instruction data (including opcodes, formats,…",null,null],[5,"gen_formats","cranelift_codegen_meta::gen_inst","Generate an instruction format enumeration.",null,[[["formatter"]]]],[5,"gen_instruction_data","","Generate the InstructionData enum.",null,[[["formatter"]]]],[5,"gen_arguments_method","","",null,[[["bool"],["formatter"]]]],[5,"gen_instruction_data_impl","","Generate the boring parts of the InstructionData…",null,[[["formatter"]]]],[5,"gen_bool_accessor","","",null,[[["str"],["primarymap"],["fn"],["formatter"]]]],[5,"gen_opcodes","","",null,[[["formatter"],["primarymap"]]]],[5,"get_constraint","","Get the value type constraint for an SSA value operand,…",null,[[["uniquetable"],["operand"],["typevar"],["option",["typevar"]]],["string"]]],[5,"gen_bitset","","",null,[[["formatter"],["str"],["intoiterator"],["u8"]]]],[5,"iterable_to_string","","",null,[[["intoiterator"]],["string"]]],[5,"typeset_to_string","","",null,[[["typeset"]],["string"]]],[5,"gen_typesets_table","","Generate the table of ValueTypeSets described by type_sets.",null,[[["uniquetable"],["formatter"]]]],[5,"gen_type_constraints","","Generate value type constraints for all instructions. -…",null,[[["formatter"],["primarymap"]]]],[5,"gen_member_inits","","Emit member initializers for an instruction format.",null,[[["instructionformat"],["formatter"]]]],[5,"gen_format_constructor","","Emit a method for creating and inserting an instruction…",null,[[["instructionformat"],["formatter"]]]],[5,"gen_inst_builder","","Emit a method for generating the instruction `inst`.",null,[[["rc"],["instructionformat"],["formatter"]]]],[5,"gen_builder","","Generate a Builder trait with methods for all instructions.",null,[[["formatter"],["primarymap"]]]],[5,"generate","","",null,[[["str"],["vec",["instructionformat"]],["primarymap"],["instructionformat"]],[["error"],["result",["error"]]]]],[17,"TYPESET_LIMIT","","",null,null],[0,"gen_legalizer","cranelift_codegen_meta","Generate transformations to legalize instructions without…",null,null],[5,"unwrap_inst","cranelift_codegen_meta::gen_legalizer","Given a `Def` node, emit code that extracts all the…",null,[[["formatter"],["transform"]],["bool"]]],[5,"build_derived_expr","","",null,[[["typevar"]],["string"]]],[5,"emit_runtime_typecheck","","Emit rust code for the given check.",null,[[["constraint"],["uniquetable"],["formatter"]]]],[5,"is_value_split","","Determine if `node` represents one of the value splitting…",null,[[["def"]],["bool"]]],[5,"emit_dst_inst","","",null,[[["def"],["formatter"],["defpool"],["varpool"]]]],[5,"gen_transform","","Emit code for `transform`, assuming that the opcode of…",null,[[["transform"],["formatter"],["uniquetable"],["bool"]]]],[5,"gen_transform_group","","",null,[[["transformgroup"],["uniquetable"],["transformgroups"],["formatter"]]]],[5,"gen_isa","","Generate legalization functions for `isa` and add any…",null,[[["targetisa"],["formatter"],["hashset"],["transformgroups"]]]],[5,"generate","","Generate the legalizer files.",null,[[["str"],["transformgroups"]],[["error"],["result",["error"]]]]],[0,"gen_registers","cranelift_codegen_meta","Generate the ISA-specific registers.",null,null],[5,"gen_regbank","cranelift_codegen_meta::gen_registers","",null,[[["regbank"],["formatter"]]]],[5,"gen_regclass","","",null,[[["regclass"],["formatter"],["targetisa"]]]],[5,"gen_regbank_units","","",null,[[["regbank"],["formatter"]]]],[5,"gen_isa","","",null,[[["formatter"],["targetisa"]]]],[5,"generate","","",null,[[["str"],["targetisa"]],[["error"],["result",["error"]]]]],[0,"gen_settings","cranelift_codegen_meta","Generate the ISA-specific settings.",null,null],[4,"ParentGroup","cranelift_codegen_meta::gen_settings","",null,null],[13,"None","","",119,null],[13,"Shared","","",119,null],[4,"SettingOrPreset","","",null,null],[13,"Setting","","",120,null],[13,"Preset","","",120,null],[5,"gen_constructor","","Emits the constructor of the Flags structure.",null,[[["parentgroup"],["formatter"],["settinggroup"]]]],[5,"gen_to_and_from_str","","Emit Display and FromStr implementations for enum settings.",null,[[["str"],["formatter"]]]],[5,"gen_enum_types","","Emit real enum for the Enum settings.",null,[[["formatter"],["settinggroup"]]]],[5,"gen_getter","","Emit a getter function for `setting`.",null,[[["setting"],["formatter"]]]],[5,"gen_pred_getter","","",null,[[["predicate"],["formatter"],["settinggroup"]]]],[5,"gen_getters","","Emits getters for each setting value.",null,[[["formatter"],["settinggroup"]]]],[5,"gen_descriptors","","Emits DESCRIPTORS, ENUMERATORS, HASH_TABLE and PRESETS.",null,[[["formatter"],["settinggroup"]]]],[5,"gen_template","","",null,[[["formatter"],["settinggroup"]]]],[5,"gen_display","","",null,[[["formatter"],["settinggroup"]]]],[5,"gen_group","","",null,[[["parentgroup"],["formatter"],["settinggroup"]]]],[5,"generate","","",null,[[["str"],["parentgroup"],["settinggroup"]],[["error"],["result",["error"]]]]],[11,"name","","",120,[[["self"]],["str"]]],[0,"gen_types","cranelift_codegen_meta","Generate sources with type info.",null,null],[5,"emit_type","cranelift_codegen_meta::gen_types","Emit a constant definition of a single value type.",null,[[["formatter"],["valuetype"]],[["error"],["result",["error"]]]]],[5,"emit_vectors","","Emit definition for all vector types with `bits` total size.",null,[[["formatter"],["u64"]],[["error"],["result",["error"]]]]],[5,"emit_types","","Emit types using the given formatter object.",null,[[["formatter"]],[["error"],["result",["error"]]]]],[5,"generate","","Generate the types file.",null,[[["str"]],[["error"],["result",["error"]]]]],[0,"default_map","cranelift_codegen_meta","Trait for extending `HashMap` with `get_or_default`.",null,null],[8,"MapWithDefault","cranelift_codegen_meta::default_map","",null,null],[10,"get_or_default","","",121,[[["self"],["k"]],["v"]]],[0,"shared","cranelift_codegen_meta","Shared definitions for the Cranelift intermediate language.",null,null],[3,"Definitions","cranelift_codegen_meta::shared","",null,null],[12,"settings","","",122,null],[12,"all_instructions","","",122,null],[12,"instructions","","",122,null],[12,"imm","","",122,null],[12,"formats","","",122,null],[12,"transform_groups","","",122,null],[12,"entities","","",122,null],[5,"define","","",null,[[],["definitions"]]],[0,"entities","","",null,null],[3,"EntityRefs","cranelift_codegen_meta::shared::entities","",null,null],[12,"block","","A reference to a basic block in the same function. This is…",123,null],[12,"stack_slot","","A reference to a stack slot declared in the function…",123,null],[12,"global_value","","A reference to a global value.",123,null],[12,"sig_ref","","A reference to a function signature declared in the…",123,null],[12,"func_ref","","A reference to an external function declared in the…",123,null],[12,"jump_table","","A reference to a jump table declared in the function…",123,null],[12,"heap","","A reference to a heap declared in the function preamble.",123,null],[12,"table","","A reference to a table declared in the function preamble.",123,null],[12,"varargs","","A variable-sized list of value operands. Use for Block and…",123,null],[5,"new","","Small helper to initialize an OperandBuilder with the…",null,[[["str"]],["operandkind"]]],[11,"new","","",123,[[],["self"]]],[0,"formats","cranelift_codegen_meta::shared","",null,null],[3,"Formats","cranelift_codegen_meta::shared::formats","",null,null],[12,"binary","","",124,null],[12,"binary_imm","","",124,null],[12,"branch","","",124,null],[12,"branch_float","","",124,null],[12,"branch_icmp","","",124,null],[12,"branch_int","","",124,null],[12,"branch_table","","",124,null],[12,"branch_table_base","","",124,null],[12,"branch_table_entry","","",124,null],[12,"call","","",124,null],[12,"call_indirect","","",124,null],[12,"cond_trap","","",124,null],[12,"copy_special","","",124,null],[12,"copy_to_ssa","","",124,null],[12,"extract_lane","","",124,null],[12,"float_compare","","",124,null],[12,"float_cond","","",124,null],[12,"float_cond_trap","","",124,null],[12,"func_addr","","",124,null],[12,"heap_addr","","",124,null],[12,"indirect_jump","","",124,null],[12,"insert_lane","","",124,null],[12,"int_compare","","",124,null],[12,"int_compare_imm","","",124,null],[12,"int_cond","","",124,null],[12,"int_cond_trap","","",124,null],[12,"int_select","","",124,null],[12,"jump","","",124,null],[12,"load","","",124,null],[12,"load_complex","","",124,null],[12,"multiary","","",124,null],[12,"nullary","","",124,null],[12,"reg_fill","","",124,null],[12,"reg_move","","",124,null],[12,"reg_spill","","",124,null],[12,"shuffle","","",124,null],[12,"stack_load","","",124,null],[12,"stack_store","","",124,null],[12,"store","","",124,null],[12,"store_complex","","",124,null],[12,"table_addr","","",124,null],[12,"ternary","","",124,null],[12,"trap","","",124,null],[12,"unary","","",124,null],[12,"unary_bool","","",124,null],[12,"unary_const","","",124,null],[12,"unary_global_value","","",124,null],[12,"unary_ieee32","","",124,null],[12,"unary_ieee64","","",124,null],[12,"unary_imm","","",124,null],[11,"new","","",124,[[["entityrefs"],["immediates"]],["self"]]],[0,"immediates","cranelift_codegen_meta::shared","",null,null],[3,"Immediates","cranelift_codegen_meta::shared::immediates","",null,null],[12,"imm64","","A 64-bit immediate integer operand.",125,null],[12,"uimm8","","An unsigned 8-bit immediate integer operand.",125,null],[12,"uimm32","","An unsigned 32-bit immediate integer operand.",125,null],[12,"uimm128","","An unsigned 128-bit immediate integer operand.",125,null],[12,"pool_constant","","A constant stored in the constant pool.",125,null],[12,"offset32","","A 32-bit immediate signed offset.",125,null],[12,"ieee32","","A 32-bit immediate floating point operand.",125,null],[12,"ieee64","","A 64-bit immediate floating point operand.",125,null],[12,"boolean","","An immediate boolean operand.",125,null],[12,"intcc","","A condition code for comparing integer values.",125,null],[12,"floatcc","","A condition code for comparing floating point values.",125,null],[12,"memflags","","Flags for memory operations like `load` and `store`.",125,null],[12,"regunit","","A register unit in the current target ISA.",125,null],[12,"trapcode","","A trap code indicating the reason for trapping.",125,null],[5,"new_imm","","",null,[[["str"]],["operandkind"]]],[5,"new_enum","","",null,[[["str"],["hashmap",["str","str"]]],["operandkind"]]],[11,"new","","",125,[[],["self"]]],[0,"instructions","cranelift_codegen_meta::shared","",null,null],[5,"define_control_flow","cranelift_codegen_meta::shared::instructions","",null,[[["immediates"],["entityrefs"],["instructiongroupbuilder"],["formats"]]]],[5,"define_simd_lane_access","","",null,[[["immediates"],["entityrefs"],["instructiongroupbuilder"],["formats"]]]],[5,"define_simd_arithmetic","","",null,[[["immediates"],["entityrefs"],["instructiongroupbuilder"],["formats"]]]],[5,"define","","",null,[[["immediates"],["entityrefs"],["primarymap"],["formats"]],["instructiongroup"]]],[0,"legalize","cranelift_codegen_meta::shared","",null,null],[5,"define","cranelift_codegen_meta::shared::legalize","",null,[[["instructiongroup"],["immediates"]],["transformgroups"]]],[0,"settings","cranelift_codegen_meta::shared","",null,null],[5,"define","cranelift_codegen_meta::shared::settings","",null,[[],["settinggroup"]]],[0,"types","cranelift_codegen_meta::shared","This module predefines all the Cranelift scalar types.",null,null],[3,"BoolIterator","cranelift_codegen_meta::shared::types","This provides an iterator through all of the supported…",null,null],[12,"index","","",126,null],[3,"IntIterator","","This provides an iterator through all of the supported int…",null,null],[12,"index","","",127,null],[3,"FloatIterator","","Iterator through the variants of the Float enum.",null,null],[12,"index","","",128,null],[3,"FlagIterator","","Iterator through the variants of the Flag enum.",null,null],[12,"index","","",129,null],[3,"ReferenceIterator","","This provides an iterator through all of the supported…",null,null],[12,"index","","",130,null],[4,"Bool","","",null,null],[13,"B1","","1-bit bool.",131,null],[13,"B8","","8-bit bool.",131,null],[13,"B16","","16-bit bool.",131,null],[13,"B32","","32-bit bool.",131,null],[13,"B64","","64-bit bool.",131,null],[13,"B128","","128-bit bool.",131,null],[4,"Int","","",null,null],[13,"I8","","8-bit int.",132,null],[13,"I16","","16-bit int.",132,null],[13,"I32","","32-bit int.",132,null],[13,"I64","","64-bit int.",132,null],[13,"I128","","128-bit int.",132,null],[4,"Float","","",null,null],[13,"F32","","",133,null],[13,"F64","","",133,null],[4,"Flag","","A type representing CPU flags.",null,null],[13,"IFlags","","CPU flags from an integer comparison.",134,null],[13,"FFlags","","CPU flags from a floating point comparison.",134,null],[4,"Reference","","",null,null],[13,"R32","","32-bit reference.",135,null],[13,"R64","","64-bit reference.",135,null],[11,"new","","",126,[[],["self"]]],[11,"new","","",127,[[],["self"]]],[11,"new","","",128,[[],["self"]]],[11,"new","","",129,[[],["self"]]],[11,"new","","",130,[[],["self"]]],[11,"verify_instruction_formats","cranelift_codegen_meta::shared","Verifies certain properties of formats.",122,[[["self"]],[["instructionformat"],["vec",["instructionformat"]]]]],[0,"unique_table","cranelift_codegen_meta","An index-accessed table implementation that avoids…",null,null],[3,"UniqueTable","cranelift_codegen_meta::unique_table","Collect items into the `table` list, removing duplicates.",null,null],[12,"table","","",136,null],[12,"map","","",136,null],[3,"UniqueSeqTable","","A table of sequences which tries to avoid common…",null,null],[12,"table","","",137,null],[5,"find_subsequence","","Try to find the subsequence `sub` in the `whole` sequence.…",null,[[],[["usize"],["option",["usize"]]]]],[11,"new","","",136,[[],["self"]]],[11,"add","","",136,[[["self"],["t"]],["usize"]]],[11,"len","","",136,[[["self"]],["usize"]]],[11,"get","","",136,[[["self"],["usize"]],["t"]]],[11,"iter","","",136,[[["self"]],[["iter"],["t"]]]],[11,"new","","",137,[[],["self"]]],[11,"add","","",137,[[["self"]],["usize"]]],[11,"len","","",137,[[["self"]],["usize"]]],[11,"iter","","",137,[[["self"]],["iter"]]],[14,"predicate","cranelift_codegen_meta","A macro that converts boolean settings into predicates to…",null,null],[14,"preset","","A macro that joins boolean settings into a list (e.g.…",null,null],[11,"from","cranelift_codegen_meta::cdsl::ast","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"key","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"key","","",6,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::cdsl::cpu_modes","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::cdsl::encodings","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::cdsl::formats","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::cdsl::instructions","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"key","","",27,[[["self"]],["t"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_string","","",31,[[["self"]],["string"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"key","","",36,[[["self"]],["t"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::cdsl::isa","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::cdsl::operands","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::cdsl::recipes","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"key","","",54,[[["self"]],["t"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,[[["self"],["t"]]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::cdsl::regs","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"key","","",57,[[["self"]],["t"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"key","","",59,[[["self"]],["t"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::cdsl::settings","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::cdsl::type_inference","",80,[[["t"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,[[["self"],["t"]]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::cdsl::types","",83,[[["t"]],["t"]]],[11,"into","","",83,[[],["u"]]],[11,"into_iter","","",83,[[],["i"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,[[["self"],["t"]]]],[11,"to_string","","",84,[[["self"]],["string"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"into_iter","","",85,[[],["i"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,[[["self"],["t"]]]],[11,"to_string","","",86,[[["self"]],["string"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[],["u"]]],[11,"into_iter","","",87,[[],["i"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,[[["self"],["t"]]]],[11,"to_string","","",88,[[["self"]],["string"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,[[["self"],["t"]]]],[11,"to_string","","",89,[[["self"]],["string"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"try_into","","",89,[[],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"type_id","","",89,[[["self"]],["typeid"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,[[["self"],["t"]]]],[11,"to_string","","",90,[[["self"]],["string"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"try_into","","",90,[[],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"type_id","","",90,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::cdsl::typevar","",91,[[["t"]],["t"]]],[11,"into","","",91,[[],["u"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"try_into","","",91,[[],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"type_id","","",91,[[["self"]],["typeid"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,[[["self"],["t"]]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,[[["self"],["t"]]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,[[["self"],["t"]]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::cdsl::xform","",98,[[["t"]],["t"]]],[11,"into","","",98,[[],["u"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,[[["self"],["t"]]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"key","","",100,[[["self"]],["t"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[],["u"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[],["u"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::srcgen","",103,[[["t"]],["t"]]],[11,"into","","",103,[[],["u"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::error","",105,[[["t"]],["t"]]],[11,"into","","",105,[[],["u"]]],[11,"to_string","","",105,[[["self"]],["string"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[],["u"]]],[11,"to_string","","",106,[[["self"]],["string"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::isa","",107,[[["t"]],["t"]]],[11,"into","","",107,[[],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,[[["self"],["t"]]]],[11,"to_string","","",107,[[["self"]],["string"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::isa::riscv::encodings","",108,[[["t"]],["t"]]],[11,"into","","",108,[[],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::isa::riscv::recipes","",109,[[["t"]],["t"]]],[11,"into","","",109,[[],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::isa::x86::encodings","",110,[[["t"]],["t"]]],[11,"into","","",110,[[],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::isa::x86::recipes","",111,[[["t"]],["t"]]],[11,"into","","",111,[[],["u"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,[[["self"],["t"]]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"try_into","","",112,[[],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,[[["self"],["t"]]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::gen_encodings","",114,[[["t"]],["t"]]],[11,"into","","",114,[[],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"try_into","","",115,[[],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"try_into","","",117,[[],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"try_into","","",118,[[],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"type_id","","",118,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::gen_settings","",119,[[["t"]],["t"]]],[11,"into","","",119,[[],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"try_into","","",119,[[],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"type_id","","",119,[[["self"]],["typeid"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"try_into","","",120,[[],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"type_id","","",120,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::shared","",122,[[["t"]],["t"]]],[11,"into","","",122,[[],["u"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"try_into","","",122,[[],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"type_id","","",122,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::shared::entities","",123,[[["t"]],["t"]]],[11,"into","","",123,[[],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"try_into","","",123,[[],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"type_id","","",123,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::shared::formats","",124,[[["t"]],["t"]]],[11,"into","","",124,[[],["u"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"try_into","","",124,[[],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"type_id","","",124,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::shared::immediates","",125,[[["t"]],["t"]]],[11,"into","","",125,[[],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"try_into","","",125,[[],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"type_id","","",125,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::shared::types","",126,[[["t"]],["t"]]],[11,"into","","",126,[[],["u"]]],[11,"into_iter","","",126,[[],["i"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"try_into","","",126,[[],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"type_id","","",126,[[["self"]],["typeid"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[],["u"]]],[11,"into_iter","","",127,[[],["i"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"try_into","","",127,[[],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"type_id","","",127,[[["self"]],["typeid"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[],["u"]]],[11,"into_iter","","",128,[[],["i"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"try_into","","",128,[[],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"type_id","","",128,[[["self"]],["typeid"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[],["u"]]],[11,"into_iter","","",129,[[],["i"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"try_into","","",129,[[],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"type_id","","",129,[[["self"]],["typeid"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[],["u"]]],[11,"into_iter","","",130,[[],["i"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"try_into","","",130,[[],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"type_id","","",130,[[["self"]],["typeid"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,[[["self"],["t"]]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"try_into","","",131,[[],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"type_id","","",131,[[["self"]],["typeid"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,[[["self"],["t"]]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"try_into","","",132,[[],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"type_id","","",132,[[["self"]],["typeid"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,[[["self"],["t"]]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"try_into","","",133,[[],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"type_id","","",133,[[["self"]],["typeid"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,[[["self"],["t"]]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"try_into","","",134,[[],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"type_id","","",134,[[["self"]],["typeid"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,[[["self"],["t"]]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"try_into","","",135,[[],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"type_id","","",135,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_meta::unique_table","",136,[[["t"]],["t"]]],[11,"into","","",136,[[],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"try_into","","",136,[[],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"type_id","","",136,[[["self"]],["typeid"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"try_into","","",137,[[],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"type_id","","",137,[[["self"]],["typeid"]]],[11,"bind","cranelift_codegen_meta::cdsl::instructions","",33,[[["self"]],["boundinstruction"]]],[11,"bind","","",44,[[["self"]],["boundinstruction"]]],[11,"from","","",39,[[["int"]],["self"]]],[11,"from","","",39,[[["bool"]],["self"]]],[11,"from","","",39,[[["float"]],["self"]]],[11,"from","","",39,[[["lanetype"]],["self"]]],[11,"from","","",39,[[["reference"]],["self"]]],[11,"from","","",39,[[["immediate"]],["self"]]],[11,"from","cranelift_codegen_meta::cdsl::types","",88,[[["lanetype"]],["self"]]],[11,"from","","",88,[[["referencetype"]],["self"]]],[11,"from","","",88,[[["specialtype"]],["self"]]],[11,"from","","",88,[[["vectortype"]],["self"]]],[11,"from","","",89,[[["bool"]],["self"]]],[11,"from","","",89,[[["float"]],["self"]]],[11,"from","","",89,[[["int"]],["self"]]],[11,"from","","",90,[[["flag"]],["self"]]],[11,"from","","",86,[[["reference"]],["self"]]],[11,"from","cranelift_codegen_meta::error","",105,[[["error"]],["self"]]],[11,"into","cranelift_codegen_meta::cdsl::ast","",10,[[],["dummyexpr"]]],[11,"into","","",15,[[],["dummyexpr"]]],[11,"into","","",11,[[],["dummyexpr"]]],[11,"into","cranelift_codegen_meta::cdsl::instructions","",43,[[],["instructionpredicate"]]],[11,"into","","",33,[[],["instspec"]]],[11,"into","cranelift_codegen_meta::cdsl::regs","",59,[[],["operandconstraint"]]],[11,"into","cranelift_codegen_meta::cdsl::recipes","",50,[[],["operandconstraint"]]],[11,"into","","",51,[[],["operandconstraint"]]],[11,"into","cranelift_codegen_meta::cdsl::settings","",66,[[],["presettype"]]],[11,"into","","",69,[[],["presettype"]]],[11,"into","","",66,[[],["predicatenode"]]],[11,"into","cranelift_codegen_meta::cdsl::types","",88,[[],["typevar"]]],[11,"next","","",83,[[["self"]],["option"]]],[11,"next","","",85,[[["self"]],["option"]]],[11,"next","","",87,[[["self"]],["option"]]],[11,"next","cranelift_codegen_meta::shared::types","",126,[[["self"]],["option"]]],[11,"next","","",127,[[["self"]],["option"]]],[11,"next","","",128,[[["self"]],["option"]]],[11,"next","","",129,[[["self"]],["option"]]],[11,"next","","",130,[[["self"]],["option"]]],[11,"clone","cranelift_codegen_meta::cdsl::ast","",2,[[["self"]],["defindex"]]],[11,"clone","","",3,[[["self"]],["block"]]],[11,"clone","","",15,[[["self"]],["literal"]]],[11,"clone","","",18,[[["self"]],["patternposition"]]],[11,"clone","","",6,[[["self"]],["varindex"]]],[11,"clone","","",10,[[["self"]],["dummyvar"]]],[11,"clone","","",11,[[["self"]],["dummyconstant"]]],[11,"clone","cranelift_codegen_meta::cdsl::instructions","",27,[[["self"]],["opcodenumber"]]],[11,"clone","","",38,[[["self"]],["valuetypeorany"]]],[11,"clone","","",40,[[["self"]],["immediate"]]],[11,"clone","","",33,[[["self"]],["boundinstruction"]]],[11,"clone","","",41,[[["self"]],["formatpredicatekind"]]],[11,"clone","","",34,[[["self"]],["formatpredicatenode"]]],[11,"clone","","",42,[[["self"]],["typepredicatenode"]]],[11,"clone","","",43,[[["self"]],["instructionpredicatenode"]]],[11,"clone","","",35,[[["self"]],["instructionpredicate"]]],[11,"clone","","",36,[[["self"]],["instructionpredicatenumber"]]],[11,"clone","cranelift_codegen_meta::cdsl::operands","",47,[[["self"]],["operand"]]],[11,"clone","","",49,[[["self"]],["operandkindfields"]]],[11,"clone","","",48,[[["self"]],["operandkind"]]],[11,"clone","cranelift_codegen_meta::cdsl::recipes","",50,[[["self"]],["register"]]],[11,"clone","","",51,[[["self"]],["stack"]]],[11,"clone","","",52,[[["self"]],["branchrange"]]],[11,"clone","","",56,[[["self"]],["operandconstraint"]]],[11,"clone","","",53,[[["self"]],["encodingrecipe"]]],[11,"clone","","",54,[[["self"]],["encodingrecipenumber"]]],[11,"clone","","",55,[[["self"]],["encodingrecipebuilder"]]],[11,"clone","cranelift_codegen_meta::cdsl::regs","",57,[[["self"]],["regbankindex"]]],[11,"clone","","",59,[[["self"]],["regclassindex"]]],[11,"clone","cranelift_codegen_meta::cdsl::settings","",66,[[["self"]],["boolsettingindex"]]],[11,"clone","cranelift_codegen_meta::cdsl::type_inference","",82,[[["self"]],["typeenvrank"]]],[11,"clone","cranelift_codegen_meta::cdsl::types","",88,[[["self"]],["valuetype"]]],[11,"clone","","",89,[[["self"]],["lanetype"]]],[11,"clone","","",84,[[["self"]],["vectortype"]]],[11,"clone","","",90,[[["self"]],["specialtype"]]],[11,"clone","","",86,[[["self"]],["referencetype"]]],[11,"clone","cranelift_codegen_meta::cdsl::typevar","",92,[[["self"]],["typevar"]]],[11,"clone","","",96,[[["self"]],["derivedfunc"]]],[11,"clone","","",94,[[["self"]],["typeset"]]],[11,"clone","cranelift_codegen_meta::cdsl::xform","",100,[[["self"]],["transformgroupindex"]]],[11,"clone","cranelift_codegen_meta::isa::x86::recipes","",113,[[["self"]],["recipeprefixkind"]]],[11,"clone","","",112,[[["self"]],["template"]]],[11,"clone","cranelift_codegen_meta::isa","",107,[[["self"]],["isa"]]],[11,"clone","cranelift_codegen_meta::shared::types","",131,[[["self"]],["bool"]]],[11,"clone","","",132,[[["self"]],["int"]]],[11,"clone","","",133,[[["self"]],["float"]]],[11,"clone","","",134,[[["self"]],["flag"]]],[11,"clone","","",135,[[["self"]],["reference"]]],[11,"default","cranelift_codegen_meta::isa::x86::recipes","",113,[[],["self"]]],[11,"cmp","cranelift_codegen_meta::cdsl::ast","",2,[[["self"],["defindex"]],["ordering"]]],[11,"cmp","","",6,[[["varindex"],["self"]],["ordering"]]],[11,"cmp","cranelift_codegen_meta::cdsl::instructions","",27,[[["opcodenumber"],["self"]],["ordering"]]],[11,"cmp","","",36,[[["instructionpredicatenumber"],["self"]],["ordering"]]],[11,"cmp","cranelift_codegen_meta::cdsl::recipes","",54,[[["encodingrecipenumber"],["self"]],["ordering"]]],[11,"cmp","cranelift_codegen_meta::cdsl::regs","",57,[[["regbankindex"],["self"]],["ordering"]]],[11,"cmp","","",59,[[["regclassindex"],["self"]],["ordering"]]],[11,"cmp","cranelift_codegen_meta::cdsl::xform","",100,[[["self"],["transformgroupindex"]],["ordering"]]],[11,"eq","cranelift_codegen_meta::cdsl::ast","",2,[[["self"],["defindex"]],["bool"]]],[11,"ne","","",2,[[["self"],["defindex"]],["bool"]]],[11,"eq","","",6,[[["varindex"],["self"]],["bool"]]],[11,"ne","","",6,[[["varindex"],["self"]],["bool"]]],[11,"eq","cranelift_codegen_meta::cdsl::formats","",25,[[["formatstructure"],["self"]],["bool"]]],[11,"ne","","",25,[[["formatstructure"],["self"]],["bool"]]],[11,"eq","cranelift_codegen_meta::cdsl::instructions","",27,[[["opcodenumber"],["self"]],["bool"]]],[11,"ne","","",27,[[["opcodenumber"],["self"]],["bool"]]],[11,"eq","","",41,[[["self"],["formatpredicatekind"]],["bool"]]],[11,"ne","","",41,[[["self"],["formatpredicatekind"]],["bool"]]],[11,"eq","","",34,[[["self"],["formatpredicatenode"]],["bool"]]],[11,"ne","","",34,[[["self"],["formatpredicatenode"]],["bool"]]],[11,"eq","","",42,[[["self"],["typepredicatenode"]],["bool"]]],[11,"ne","","",42,[[["self"],["typepredicatenode"]],["bool"]]],[11,"eq","","",43,[[["instructionpredicatenode"],["self"]],["bool"]]],[11,"ne","","",43,[[["instructionpredicatenode"],["self"]],["bool"]]],[11,"eq","","",35,[[["self"],["instructionpredicate"]],["bool"]]],[11,"ne","","",35,[[["self"],["instructionpredicate"]],["bool"]]],[11,"eq","","",36,[[["instructionpredicatenumber"],["self"]],["bool"]]],[11,"ne","","",36,[[["instructionpredicatenumber"],["self"]],["bool"]]],[11,"eq","cranelift_codegen_meta::cdsl::recipes","",50,[[["register"],["self"]],["bool"]]],[11,"ne","","",50,[[["register"],["self"]],["bool"]]],[11,"eq","","",51,[[["self"],["stack"]],["bool"]]],[11,"ne","","",51,[[["self"],["stack"]],["bool"]]],[11,"eq","","",52,[[["branchrange"],["self"]],["bool"]]],[11,"ne","","",52,[[["branchrange"],["self"]],["bool"]]],[11,"eq","","",56,[[["self"],["operandconstraint"]],["bool"]]],[11,"ne","","",56,[[["self"],["operandconstraint"]],["bool"]]],[11,"eq","","",53,[[["self"]],["bool"]]],[11,"eq","","",54,[[["encodingrecipenumber"],["self"]],["bool"]]],[11,"ne","","",54,[[["encodingrecipenumber"],["self"]],["bool"]]],[11,"eq","cranelift_codegen_meta::cdsl::regs","",57,[[["regbankindex"],["self"]],["bool"]]],[11,"ne","","",57,[[["regbankindex"],["self"]],["bool"]]],[11,"eq","","",59,[[["regclassindex"],["self"]],["bool"]]],[11,"ne","","",59,[[["regclassindex"],["self"]],["bool"]]],[11,"eq","cranelift_codegen_meta::cdsl::settings","",66,[[["self"],["boolsettingindex"]],["bool"]]],[11,"ne","","",66,[[["self"],["boolsettingindex"]],["bool"]]],[11,"eq","","",67,[[["self"],["boolsetting"]],["bool"]]],[11,"ne","","",67,[[["self"],["boolsetting"]],["bool"]]],[11,"eq","","",76,[[["specificsetting"],["self"]],["bool"]]],[11,"ne","","",76,[[["specificsetting"],["self"]],["bool"]]],[11,"eq","","",68,[[["setting"],["self"]],["bool"]]],[11,"ne","","",68,[[["setting"],["self"]],["bool"]]],[11,"eq","","",69,[[["presetindex"],["self"]],["bool"]]],[11,"ne","","",69,[[["presetindex"],["self"]],["bool"]]],[11,"eq","","",77,[[["presettype"],["self"]],["bool"]]],[11,"ne","","",77,[[["presettype"],["self"]],["bool"]]],[11,"eq","","",70,[[["self"],["preset"]],["bool"]]],[11,"ne","","",70,[[["self"],["preset"]],["bool"]]],[11,"eq","","",79,[[["predicatenode"],["self"]],["bool"]]],[11,"ne","","",79,[[["predicatenode"],["self"]],["bool"]]],[11,"eq","cranelift_codegen_meta::cdsl::type_inference","",81,[[["constraint"],["self"]],["bool"]]],[11,"ne","","",81,[[["constraint"],["self"]],["bool"]]],[11,"eq","cranelift_codegen_meta::cdsl::types","",88,[[["valuetype"],["self"]],["bool"]]],[11,"ne","","",88,[[["valuetype"],["self"]],["bool"]]],[11,"eq","","",89,[[["self"],["lanetype"]],["bool"]]],[11,"ne","","",89,[[["self"],["lanetype"]],["bool"]]],[11,"eq","","",84,[[["vectortype"],["self"]],["bool"]]],[11,"ne","","",84,[[["vectortype"],["self"]],["bool"]]],[11,"eq","","",90,[[["specialtype"],["self"]],["bool"]]],[11,"ne","","",90,[[["specialtype"],["self"]],["bool"]]],[11,"eq","","",86,[[["self"],["referencetype"]],["bool"]]],[11,"ne","","",86,[[["self"],["referencetype"]],["bool"]]],[11,"eq","cranelift_codegen_meta::cdsl::typevar","",92,[[["self"],["typevar"]],["bool"]]],[11,"eq","","",96,[[["self"],["derivedfunc"]],["bool"]]],[11,"eq","","",94,[[["self"],["typeset"]],["bool"]]],[11,"ne","","",94,[[["self"],["typeset"]],["bool"]]],[11,"eq","","",97,[[["interval"],["self"]],["bool"]]],[11,"ne","","",97,[[["interval"],["self"]],["bool"]]],[11,"eq","cranelift_codegen_meta::cdsl::xform","",100,[[["self"],["transformgroupindex"]],["bool"]]],[11,"ne","","",100,[[["self"],["transformgroupindex"]],["bool"]]],[11,"eq","cranelift_codegen_meta::isa::x86::recipes","",113,[[["self"],["recipeprefixkind"]],["bool"]]],[11,"eq","cranelift_codegen_meta::gen_settings","",120,[[["self"],["settingorpreset"]],["bool"]]],[11,"ne","","",120,[[["self"],["settingorpreset"]],["bool"]]],[11,"eq","cranelift_codegen_meta::shared::types","",131,[[["self"],["bool"]],["bool"]]],[11,"eq","","",132,[[["self"],["int"]],["bool"]]],[11,"eq","","",133,[[["float"],["self"]],["bool"]]],[11,"eq","","",134,[[["flag"],["self"]],["bool"]]],[11,"eq","","",135,[[["self"],["reference"]],["bool"]]],[11,"partial_cmp","cranelift_codegen_meta::cdsl::ast","",2,[[["self"],["defindex"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",2,[[["self"],["defindex"]],["bool"]]],[11,"le","","",2,[[["self"],["defindex"]],["bool"]]],[11,"gt","","",2,[[["self"],["defindex"]],["bool"]]],[11,"ge","","",2,[[["self"],["defindex"]],["bool"]]],[11,"partial_cmp","","",6,[[["varindex"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",6,[[["varindex"],["self"]],["bool"]]],[11,"le","","",6,[[["varindex"],["self"]],["bool"]]],[11,"gt","","",6,[[["varindex"],["self"]],["bool"]]],[11,"ge","","",6,[[["varindex"],["self"]],["bool"]]],[11,"partial_cmp","cranelift_codegen_meta::cdsl::instructions","",27,[[["opcodenumber"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",27,[[["opcodenumber"],["self"]],["bool"]]],[11,"le","","",27,[[["opcodenumber"],["self"]],["bool"]]],[11,"gt","","",27,[[["opcodenumber"],["self"]],["bool"]]],[11,"ge","","",27,[[["opcodenumber"],["self"]],["bool"]]],[11,"partial_cmp","","",36,[[["instructionpredicatenumber"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",36,[[["instructionpredicatenumber"],["self"]],["bool"]]],[11,"le","","",36,[[["instructionpredicatenumber"],["self"]],["bool"]]],[11,"gt","","",36,[[["instructionpredicatenumber"],["self"]],["bool"]]],[11,"ge","","",36,[[["instructionpredicatenumber"],["self"]],["bool"]]],[11,"partial_cmp","cranelift_codegen_meta::cdsl::recipes","",54,[[["encodingrecipenumber"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",54,[[["encodingrecipenumber"],["self"]],["bool"]]],[11,"le","","",54,[[["encodingrecipenumber"],["self"]],["bool"]]],[11,"gt","","",54,[[["encodingrecipenumber"],["self"]],["bool"]]],[11,"ge","","",54,[[["encodingrecipenumber"],["self"]],["bool"]]],[11,"partial_cmp","cranelift_codegen_meta::cdsl::regs","",57,[[["regbankindex"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",57,[[["regbankindex"],["self"]],["bool"]]],[11,"le","","",57,[[["regbankindex"],["self"]],["bool"]]],[11,"gt","","",57,[[["regbankindex"],["self"]],["bool"]]],[11,"ge","","",57,[[["regbankindex"],["self"]],["bool"]]],[11,"partial_cmp","","",59,[[["regclassindex"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",59,[[["regclassindex"],["self"]],["bool"]]],[11,"le","","",59,[[["regclassindex"],["self"]],["bool"]]],[11,"gt","","",59,[[["regclassindex"],["self"]],["bool"]]],[11,"ge","","",59,[[["regclassindex"],["self"]],["bool"]]],[11,"partial_cmp","cranelift_codegen_meta::cdsl::xform","",100,[[["self"],["transformgroupindex"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",100,[[["self"],["transformgroupindex"]],["bool"]]],[11,"le","","",100,[[["self"],["transformgroupindex"]],["bool"]]],[11,"gt","","",100,[[["self"],["transformgroupindex"]],["bool"]]],[11,"ge","","",100,[[["self"],["transformgroupindex"]],["bool"]]],[11,"deref","cranelift_codegen_meta::cdsl::typevar","",92,[[["self"]]]],[11,"fmt","cranelift_codegen_meta::cdsl::ast","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen_meta::cdsl::formats","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen_meta::cdsl::instructions","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen_meta::cdsl::operands","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen_meta::cdsl::regs","",59,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen_meta::cdsl::type_inference","",81,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen_meta::cdsl::types","",88,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",89,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",84,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",90,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",86,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen_meta::cdsl::typevar","",91,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",92,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",96,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",93,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",94,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","cranelift_codegen_meta::error","",105,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",106,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen_meta::shared::types","",131,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",132,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",133,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",134,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",135,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen_meta::cdsl::formats","",24,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","cranelift_codegen_meta::cdsl::instructions","",31,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",40,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","cranelift_codegen_meta::cdsl::types","",88,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",89,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",84,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",90,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",86,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen_meta::error","",105,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",106,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen_meta::isa","",107,[[["formatter"],["self"]],["result"]]],[11,"hash","cranelift_codegen_meta::cdsl::ast","",2,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen_meta::cdsl::formats","",25,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen_meta::cdsl::instructions","",27,[[["self"],["__h"]]]],[11,"hash","","",41,[[["self"],["__h"]]]],[11,"hash","","",34,[[["self"],["__h"]]]],[11,"hash","","",42,[[["self"],["__h"]]]],[11,"hash","","",43,[[["self"],["__h"]]]],[11,"hash","","",35,[[["self"],["__h"]]]],[11,"hash","","",36,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen_meta::cdsl::recipes","",50,[[["self"],["__h"]]]],[11,"hash","","",51,[[["self"],["__h"]]]],[11,"hash","","",52,[[["self"],["__h"]]]],[11,"hash","","",56,[[["self"],["__h"]]]],[11,"hash","","",54,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen_meta::cdsl::regs","",57,[[["self"],["__h"]]]],[11,"hash","","",59,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen_meta::cdsl::settings","",66,[[["self"],["__h"]]]],[11,"hash","","",67,[[["self"],["__h"]]]],[11,"hash","","",76,[[["self"],["__h"]]]],[11,"hash","","",68,[[["self"],["__h"]]]],[11,"hash","","",69,[[["self"],["__h"]]]],[11,"hash","","",77,[[["self"],["__h"]]]],[11,"hash","","",70,[[["self"],["__h"]]]],[11,"hash","","",79,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen_meta::cdsl::type_inference","",81,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen_meta::cdsl::types","",88,[[["self"],["__h"]]]],[11,"hash","","",89,[[["self"],["__h"]]]],[11,"hash","","",84,[[["self"],["__h"]]]],[11,"hash","","",90,[[["self"],["__h"]]]],[11,"hash","","",86,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen_meta::cdsl::typevar","",92,[[["self"],["h"]]]],[11,"hash","","",96,[[["self"],["__h"]]]],[11,"hash","","",93,[[["self"],["__h"]]]],[11,"hash","","",94,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen_meta::cdsl::xform","",100,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen_meta::gen_settings","",120,[[["self"],["__h"]]]],[11,"hash","cranelift_codegen_meta::shared::types","",131,[[["self"],["__h"]]]],[11,"hash","","",132,[[["self"],["__h"]]]],[11,"hash","","",133,[[["self"],["__h"]]]],[11,"hash","","",134,[[["self"],["__h"]]]],[11,"hash","","",135,[[["self"],["__h"]]]],[11,"new","cranelift_codegen_meta::cdsl::ast","",2,[[["usize"]],["self"]]],[11,"index","","",2,[[],["usize"]]],[11,"new","","",6,[[["usize"]],["self"]]],[11,"index","","",6,[[],["usize"]]],[11,"new","cranelift_codegen_meta::cdsl::instructions","",27,[[["usize"]],["self"]]],[11,"index","","",27,[[],["usize"]]],[11,"new","","",36,[[["usize"]],["self"]]],[11,"index","","",36,[[],["usize"]]],[11,"new","cranelift_codegen_meta::cdsl::recipes","",54,[[["usize"]],["self"]]],[11,"index","","",54,[[],["usize"]]],[11,"new","cranelift_codegen_meta::cdsl::regs","",57,[[["usize"]],["self"]]],[11,"index","","",57,[[],["usize"]]],[11,"new","","",59,[[["usize"]],["self"]]],[11,"index","","",59,[[],["usize"]]],[11,"new","cranelift_codegen_meta::cdsl::xform","",100,[[["usize"]],["self"]]],[11,"index","","",100,[[],["usize"]]],[11,"reserved_value","cranelift_codegen_meta::cdsl::ast","",2,[[],["defindex"]]],[11,"reserved_value","","",6,[[],["varindex"]]],[11,"reserved_value","cranelift_codegen_meta::cdsl::instructions","",27,[[],["opcodenumber"]]],[11,"reserved_value","","",36,[[],["instructionpredicatenumber"]]],[11,"reserved_value","cranelift_codegen_meta::cdsl::recipes","",54,[[],["encodingrecipenumber"]]],[11,"reserved_value","cranelift_codegen_meta::cdsl::regs","",57,[[],["regbankindex"]]],[11,"reserved_value","","",59,[[],["regclassindex"]]],[11,"reserved_value","cranelift_codegen_meta::cdsl::xform","",100,[[],["transformgroupindex"]]],[11,"key","cranelift_codegen_meta::cdsl::ast","",3,[[["self"]],["defindex"]]]],"p":[[3,"Def"],[3,"DefPool"],[3,"DefIndex"],[3,"Block"],[3,"BlockPool"],[3,"Var"],[3,"VarIndex"],[3,"VarPool"],[3,"ConstPool"],[3,"Apply"],[3,"DummyVar"],[3,"DummyConstant"],[3,"DummyDef"],[3,"ExprBuilder"],[4,"Expr"],[4,"Literal"],[13,"Enumerator"],[13,"Bits"],[4,"PatternPosition"],[4,"DummyExpr"],[3,"CpuMode"],[3,"EncodingContent"],[3,"EncodingBuilder"],[3,"FormatField"],[3,"InstructionFormat"],[3,"FormatStructure"],[3,"InstructionFormatBuilder"],[3,"OpcodeNumber"],[3,"InstructionGroupBuilder"],[3,"InstructionGroup"],[3,"PolymorphicInfo"],[3,"InstructionContent"],[3,"InstructionBuilder"],[3,"BoundInstruction"],[3,"FormatPredicateNode"],[3,"InstructionPredicate"],[3,"InstructionPredicateNumber"],[3,"InstructionPredicateRegistry"],[4,"ValueTypeOrAny"],[4,"BindParameter"],[4,"Immediate"],[4,"FormatPredicateKind"],[4,"TypePredicateNode"],[4,"InstructionPredicateNode"],[4,"InstSpec"],[8,"Bindable"],[3,"TargetIsa"],[3,"Operand"],[3,"OperandKind"],[4,"OperandKindFields"],[3,"Register"],[3,"Stack"],[3,"BranchRange"],[3,"EncodingRecipe"],[3,"EncodingRecipeNumber"],[3,"EncodingRecipeBuilder"],[4,"OperandConstraint"],[3,"RegBankIndex"],[3,"RegBank"],[3,"RegClassIndex"],[3,"RegClass"],[3,"RegClassBuilder"],[3,"RegBankBuilder"],[3,"IsaRegsBuilder"],[3,"IsaRegs"],[4,"RegClassProto"],[3,"BoolSettingIndex"],[3,"BoolSetting"],[3,"Setting"],[3,"PresetIndex"],[3,"Preset"],[3,"SettingGroup"],[3,"ProtoSetting"],[3,"ProtoPredicate"],[3,"Predicate"],[3,"SettingGroupBuilder"],[4,"SpecificSetting"],[4,"PresetType"],[4,"ProtoSpecificSetting"],[4,"PredicateNode"],[3,"TypeEnvironment"],[4,"Constraint"],[4,"TypeEnvRank"],[3,"LaneTypeIterator"],[3,"VectorType"],[3,"SpecialTypeIterator"],[3,"ReferenceType"],[3,"ReferenceTypeIterator"],[4,"ValueType"],[4,"LaneType"],[4,"SpecialType"],[3,"TypeVarContent"],[3,"TypeVar"],[3,"TypeVarParent"],[3,"TypeSet"],[3,"TypeSetBuilder"],[4,"DerivedFunc"],[4,"Interval"],[3,"Transform"],[3,"TransformGroup"],[3,"TransformGroupIndex"],[3,"TransformGroupBuilder"],[3,"TransformGroups"],[3,"Formatter"],[3,"Match"],[3,"Error"],[4,"ErrorInner"],[4,"Isa"],[3,"PerCpuModeEncodings"],[3,"RecipeGroup"],[3,"PerCpuModeEncodings"],[3,"RecipeGroup"],[3,"Template"],[4,"RecipePrefixKind"],[3,"Level1Table"],[3,"Level2HashTableEntry"],[3,"Level2Table"],[3,"Encoder"],[3,"EncodingList"],[4,"ParentGroup"],[4,"SettingOrPreset"],[8,"MapWithDefault"],[3,"Definitions"],[3,"EntityRefs"],[3,"Formats"],[3,"Immediates"],[3,"BoolIterator"],[3,"IntIterator"],[3,"FloatIterator"],[3,"FlagIterator"],[3,"ReferenceIterator"],[4,"Bool"],[4,"Int"],[4,"Float"],[4,"Flag"],[4,"Reference"],[3,"UniqueTable"],[3,"UniqueSeqTable"]]};
searchIndex["cranelift_codegen_shared"] = {"doc":"This library contains code that is common to both the…","i":[[0,"condcodes","cranelift_codegen_shared","Condition codes for the Cranelift code generator.",null,null],[4,"IntCC","cranelift_codegen_shared::condcodes","Condition code for comparing integers.",null,null],[13,"Equal","","`==`.",0,null],[13,"NotEqual","","`!=`.",0,null],[13,"SignedLessThan","","Signed `<`.",0,null],[13,"SignedGreaterThanOrEqual","","Signed `>=`.",0,null],[13,"SignedGreaterThan","","Signed `>`.",0,null],[13,"SignedLessThanOrEqual","","Signed `<=`.",0,null],[13,"UnsignedLessThan","","Unsigned `<`.",0,null],[13,"UnsignedGreaterThanOrEqual","","Unsigned `>=`.",0,null],[13,"UnsignedGreaterThan","","Unsigned `>`.",0,null],[13,"UnsignedLessThanOrEqual","","Unsigned `<=`.",0,null],[13,"Overflow","","Signed Overflow.",0,null],[13,"NotOverflow","","Signed No Overflow.",0,null],[4,"FloatCC","","Condition code for comparing floating point numbers.",null,null],[13,"Ordered","","EQ | LT | GT",1,null],[13,"Unordered","","UN",1,null],[13,"Equal","","EQ",1,null],[13,"NotEqual","","The C '!=' operator is the inverse of '==': `NotEqual`. UN…",1,null],[13,"OrderedNotEqual","","LT | GT",1,null],[13,"UnorderedOrEqual","","UN | EQ",1,null],[13,"LessThan","","LT",1,null],[13,"LessThanOrEqual","","LT | EQ",1,null],[13,"GreaterThan","","GT",1,null],[13,"GreaterThanOrEqual","","GT | EQ",1,null],[13,"UnorderedOrLessThan","","UN | LT",1,null],[13,"UnorderedOrLessThanOrEqual","","UN | LT | EQ",1,null],[13,"UnorderedOrGreaterThan","","UN | GT",1,null],[13,"UnorderedOrGreaterThanOrEqual","","UN | GT | EQ",1,null],[8,"CondCode","","Common traits of condition codes.",null,null],[10,"inverse","","Get the inverse condition code of `self`.",2,[[],["self"]]],[10,"reverse","","Get the reversed condition code for `self`.",2,[[],["self"]]],[11,"without_equal","","Get the corresponding IntCC with the equal component…",0,[[],["self"]]],[11,"unsigned","","Get the corresponding IntCC with the signed component…",0,[[],["self"]]],[11,"to_static_str","","Get the corresponding string condition code for the IntCC…",0,[[],["str"]]],[0,"constant_hash","cranelift_codegen_shared","Build support for precomputed constant hash tables.",null,null],[5,"simple_hash","cranelift_codegen_shared::constant_hash","A primitive hash function for matching opcodes.",null,[[["str"]],["usize"]]],[5,"generate_table","","Compute an open addressed, quadratically probed hash table…",null,[[["iterator"],["fn"],["usize"]],[["vec",["option"]],["option"]]]],[0,"constants","cranelift_codegen_shared","This module contains constants that are shared between the…",null,null],[17,"LANE_BASE","cranelift_codegen_shared::constants","Start of the lane types.",null,null],[17,"REFERENCE_BASE","","Base for reference types.",null,null],[17,"VECTOR_BASE","","Start of the 2-lane vector types.",null,null],[17,"MAX_TRACKED_TOP_RCS","","Guaranteed maximum number of top-level register classes…",null,null],[17,"MAX_NUM_REG_CLASSES","","Guaranteed maximum number of register classes in any ISA.",null,null],[0,"isa","cranelift_codegen_shared","Shared ISA-specific definitions.",null,null],[0,"x86","cranelift_codegen_shared::isa","Shared x86-specific definitions.",null,null],[3,"EncodingBits","cranelift_codegen_shared::isa::x86","Named interface to the `u16` Encoding bits, representing…",null,null],[4,"OpcodePrefix","","Opcode prefix representation.",null,null],[13,"Op1","","",3,null],[13,"Mp1_66","","",3,null],[13,"Mp1_f3","","",3,null],[13,"Mp1_f2","","",3,null],[13,"Op2_0f","","",3,null],[13,"Mp2_66_0f","","",3,null],[13,"Mp2_f3_0f","","",3,null],[13,"Mp2_f2_0f","","",3,null],[13,"Op3_0f_38","","",3,null],[13,"Mp3_66_0f_38","","",3,null],[13,"Mp3_f3_0f_38","","",3,null],[13,"Mp3_f2_0f_38","","",3,null],[13,"Op3_0f_3a","","",3,null],[13,"Mp3_66_0f_3a","","",3,null],[13,"Mp3_f3_0f_3a","","",3,null],[13,"Mp3_f2_0f_3a","","",3,null],[11,"new","","Constructs a new EncodingBits from parts.",4,[[["u16"]],["self"]]],[11,"with_rrr","","Returns a copy of the EncodingBits with the RRR bits set.",4,[[["u8"]],["self"]]],[11,"with_rex_w","","Returns a copy of the EncodingBits with the REX.W bit set.",4,[[],["self"]]],[11,"bits","","Returns the raw bits.",4,[[],["u16"]]],[11,"opcode_byte","","Instruction opcode byte, without the prefix.",4,[[],["u8"]]],[11,"prefix","","Prefix kind for the instruction, as an enum.",4,[[],["opcodeprefix"]]],[11,"pp","","Extracts the PP bits of the OpcodePrefix.",4,[[],["u8"]]],[11,"mm","","Extracts the MM bits of the OpcodePrefix.",4,[[],["u8"]]],[11,"rrr","","Bits for the ModR/M byte for certain opcodes.",4,[[],["u8"]]],[11,"rex_w","","REX.W bit (or VEX.W/E).",4,[[],["u8"]]],[11,"from_opcode","","Extracts the OpcodePrefix from the opcode.",3,[[],["self"]]],[11,"recipe_name_prefix","","Returns the recipe name prefix.",3,[[],["str"]]],[17,"VERSION","cranelift_codegen_shared","Version number of this crate.",null,null],[11,"from","cranelift_codegen_shared::condcodes","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","cranelift_codegen_shared::isa::x86","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"inverse","cranelift_codegen_shared::condcodes","",0,[[],["self"]]],[11,"reverse","","",0,[[],["self"]]],[11,"inverse","","",1,[[],["self"]]],[11,"reverse","","",1,[[],["self"]]],[11,"from","cranelift_codegen_shared::isa::x86","",4,[[["u16"]],["self"]]],[11,"from","","",3,[[["u8"]],["self"]]],[11,"into","","",3,[[],["u8"]]],[11,"clone","cranelift_codegen_shared::condcodes","",0,[[["self"]],["intcc"]]],[11,"clone","","",1,[[["self"]],["floatcc"]]],[11,"clone","cranelift_codegen_shared::isa::x86","",4,[[["self"]],["encodingbits"]]],[11,"clone","","",3,[[["self"]],["opcodeprefix"]]],[11,"eq","cranelift_codegen_shared::condcodes","",0,[[["intcc"],["self"]],["bool"]]],[11,"eq","","",1,[[["floatcc"],["self"]],["bool"]]],[11,"eq","cranelift_codegen_shared::isa::x86","",4,[[["self"],["encodingbits"]],["bool"]]],[11,"ne","","",4,[[["self"],["encodingbits"]],["bool"]]],[11,"eq","","",3,[[["opcodeprefix"],["self"]],["bool"]]],[11,"fmt","cranelift_codegen_shared::condcodes","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen_shared::isa::x86","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_codegen_shared::condcodes","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"from_str","","",0,[[["str"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result"]]]],"p":[[4,"IntCC"],[4,"FloatCC"],[8,"CondCode"],[4,"OpcodePrefix"],[3,"EncodingBits"]]};
searchIndex["cranelift_entity"] = {"doc":"Array-based data structures using densely numbered entity…","i":[[3,"BoxedSlice","cranelift_entity","A slice mapping `K -> V` allocating dense entity references.",null,null],[3,"Iter","","Iterate over all keys in order.",null,null],[3,"IterMut","","Iterate over all keys in order.",null,null],[3,"Keys","","Iterate over all keys in order.",null,null],[3,"EntityList","","A small list of entity references allocated from a pool.",null,null],[3,"ListPool","","A memory pool for storing lists of `T`.",null,null],[3,"SecondaryMap","","A mapping `K -> V` for densely indexed entity references.",null,null],[3,"PrimaryMap","","A primary mapping `K -> V` allocating dense entity…",null,null],[3,"EntitySet","","A set of `K` for densely indexed entity references.",null,null],[3,"SparseMap","","A sparse mapping of entity references.",null,null],[0,"packed_option","","Compact representation of `Option<T>` for types with a…",null,null],[3,"PackedOption","cranelift_entity::packed_option","Packed representation of `Option<T>`.",null,null],[8,"ReservedValue","","Types that have a reserved value which can't be created…",null,null],[10,"reserved_value","","Create an instance of the reserved value.",0,[[],["self"]]],[11,"is_none","","Returns `true` if the packed option is a `None` value.",1,[[["self"]],["bool"]]],[11,"is_some","","Returns `true` if the packed option is a `Some` value.",1,[[["self"]],["bool"]]],[11,"expand","","Expand the packed option into a normal `Option`.",1,[[],["option"]]],[11,"map","","Maps a `PackedOption<T>` to `Option<U>` by applying a…",1,[[["f"]],["option"]]],[11,"unwrap","","Unwrap a packed `Some` value or panic.",1,[[],["t"]]],[11,"expect","","Unwrap a packed `Some` value or panic.",1,[[["str"]],["t"]]],[11,"take","","Takes the value out of the packed option, leaving a `None`…",1,[[["self"]],["option"]]],[11,"from_raw","cranelift_entity","Create a new slice from a raw pointer. A safer way to…",2,[[],["self"]]],[11,"is_valid","","Check if `k` is a valid key in the map.",2,[[["self"],["k"]],["bool"]]],[11,"get","","Get the element at `k` if it exists.",2,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_mut","","Get the element at `k` if it exists, mutable version.",2,[[["self"],["k"]],[["option"],["v"]]]],[11,"is_empty","","Is this map completely empty?",2,[[["self"]],["bool"]]],[11,"len","","Get the total number of entity references created.",2,[[["self"]],["usize"]]],[11,"keys","","Iterate over all the keys in this map.",2,[[["self"]],["keys"]]],[11,"values","","Iterate over all the values in this map.",2,[[["self"]],["iter"]]],[11,"values_mut","","Iterate over all the values in this map, mutable edition.",2,[[["self"]],["itermut"]]],[11,"iter","","Iterate over all the keys and values in this map.",2,[[["self"]],["iter"]]],[11,"iter_mut","","Iterate over all the keys and values in this map, mutable…",2,[[["self"]],["itermut"]]],[11,"last","","Returns the last element that was inserted in the map.",2,[[["self"]],[["v"],["option"]]]],[11,"new","","Create an `Iter` iterator that visits the `PrimaryMap`…",3,[[["iter"]],["self"]]],[11,"new","","Create an `IterMut` iterator that visits the `PrimaryMap`…",4,[[["itermut"]],["self"]]],[11,"with_len","","Create a `Keys` iterator that visits `len` entities…",5,[[["usize"]],["self"]]],[11,"new","","Create a new list pool.",6,[[],["self"]]],[11,"clear","","Clear the pool, forgetting about all lists that use it.",6,[[["self"]]]],[11,"new","","Create a new empty list.",7,[[],["self"]]],[11,"from_slice","","Create a new list with the contents initialized from a…",7,[[["listpool"]],["self"]]],[11,"is_empty","","Returns `true` if the list has a length of 0.",7,[[["self"]],["bool"]]],[11,"len","","Get the number of elements in the list.",7,[[["listpool"],["self"]],["usize"]]],[11,"is_valid","","Returns `true` if the list is valid",7,[[["listpool"],["self"]],["bool"]]],[11,"as_slice","","Get the list as a slice.",7,[[["listpool"],["self"]]]],[11,"get","","Get a single element from the list.",7,[[["listpool"],["self"],["usize"]],["option"]]],[11,"first","","Get the first element from the list.",7,[[["listpool"],["self"]],["option"]]],[11,"as_mut_slice","","Get the list as a mutable slice.",7,[[["self"],["listpool"]]]],[11,"get_mut","","Get a mutable reference to a single element from the list.",7,[[["self"],["usize"],["listpool"]],[["option"],["t"]]]],[11,"clear","","Removes all elements from the list.",7,[[["self"],["listpool"]]]],[11,"take","","Take all elements from this list and return them as a new…",7,[[["self"]],["self"]]],[11,"push","","Appends an element to the back of the list. Returns the…",7,[[["self"],["t"],["listpool"]],["usize"]]],[11,"extend","","Appends multiple elements to the back of the list.",7,[[["self"],["i"],["listpool"]]]],[11,"insert","","Inserts an element as position `index` in the list,…",7,[[["usize"],["self"],["t"],["listpool"]]]],[11,"remove","","Removes the element at position `index` from the list.…",7,[[["self"],["usize"],["listpool"]]]],[11,"swap_remove","","Removes the element at `index` in constant time by…",7,[[["self"],["usize"],["listpool"]]]],[11,"grow_at","","Grow the list by inserting `count` elements at `index`.",7,[[["self"],["usize"],["listpool"]]]],[11,"new","","Create a new empty map.",8,[[],["self"]]],[11,"with_capacity","","Create a new, empty map with the specified capacity.",8,[[["usize"]],["self"]]],[11,"with_default","","Create a new empty map with a specified default value.",8,[[["v"]],["self"]]],[11,"capacity","","Returns the number of elements the map can hold without…",8,[[["self"]],["usize"]]],[11,"get","","Get the element at `k` if it exists.",8,[[["self"],["k"]],[["v"],["option"]]]],[11,"is_empty","","Is this map completely empty?",8,[[["self"]],["bool"]]],[11,"clear","","Remove all entries from this map.",8,[[["self"]]]],[11,"iter","","Iterate over all the keys and values in this map.",8,[[["self"]],["iter"]]],[11,"iter_mut","","Iterate over all the keys and values in this map, mutable…",8,[[["self"]],["itermut"]]],[11,"keys","","Iterate over all the keys in this map.",8,[[["self"]],["keys"]]],[11,"values","","Iterate over all the values in this map.",8,[[["self"]],["iter"]]],[11,"values_mut","","Iterate over all the values in this map, mutable edition.",8,[[["self"]],["itermut"]]],[11,"resize","","Resize the map to have `n` entries by adding default…",8,[[["self"],["usize"]]]],[11,"new","","Create a new empty map.",9,[[],["self"]]],[11,"with_capacity","","Create a new empty map with the given capacity.",9,[[["usize"]],["self"]]],[11,"is_valid","","Check if `k` is a valid key in the map.",9,[[["self"],["k"]],["bool"]]],[11,"get","","Get the element at `k` if it exists.",9,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_mut","","Get the element at `k` if it exists, mutable version.",9,[[["self"],["k"]],[["option"],["v"]]]],[11,"is_empty","","Is this map completely empty?",9,[[["self"]],["bool"]]],[11,"len","","Get the total number of entity references created.",9,[[["self"]],["usize"]]],[11,"keys","","Iterate over all the keys in this map.",9,[[["self"]],["keys"]]],[11,"values","","Iterate over all the values in this map.",9,[[["self"]],["iter"]]],[11,"values_mut","","Iterate over all the values in this map, mutable edition.",9,[[["self"]],["itermut"]]],[11,"iter","","Iterate over all the keys and values in this map.",9,[[["self"]],["iter"]]],[11,"iter_mut","","Iterate over all the keys and values in this map, mutable…",9,[[["self"]],["itermut"]]],[11,"clear","","Remove all entries from this map.",9,[[["self"]]]],[11,"next_key","","Get the key that will be assigned to the next pushed value.",9,[[["self"]],["k"]]],[11,"push","","Append `v` to the mapping, assigning a new key which is…",9,[[["self"],["v"]],["k"]]],[11,"last","","Returns the last element that was inserted in the map.",9,[[["self"]],[["v"],["option"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",9,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",9,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the `PrimaryMap` as much as…",9,[[["self"]]]],[11,"into_boxed_slice","","Consumes this `PrimaryMap` and produces a `BoxedSlice`.",9,[[],["boxedslice"]]],[11,"new","","Create a new empty set.",10,[[],["self"]]],[11,"with_capacity","","Creates a new empty set with the specified capacity.",10,[[["usize"]],["self"]]],[11,"contains","","Get the element at `k` if it exists.",10,[[["self"],["k"]],["bool"]]],[11,"is_empty","","Is this set completely empty?",10,[[["self"]],["bool"]]],[11,"cardinality","","Returns the cardinality of the set. More precisely, it…",10,[[["self"]],["usize"]]],[11,"clear","","Remove all entries from this set.",10,[[["self"]]]],[11,"keys","","Iterate over all the keys in this set.",10,[[["self"]],["keys"]]],[11,"resize","","Resize the set to have `n` entries by adding default…",10,[[["self"],["usize"]]]],[11,"insert","","Insert the element at `k`.",10,[[["self"],["k"]],["bool"]]],[11,"pop","","Removes and returns the entity from the set if it exists.",10,[[["self"]],["option"]]],[11,"new","","Create a new empty mapping.",11,[[],["self"]]],[11,"len","","Returns the number of elements in the map.",11,[[["self"]],["usize"]]],[11,"is_empty","","Returns true is the map contains no elements.",11,[[["self"]],["bool"]]],[11,"clear","","Remove all elements from the mapping.",11,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",11,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",11,[[["self"],["k"]],[["option"],["v"]]]],[11,"contains_key","","Return `true` if the map contains a value corresponding to…",11,[[["self"],["k"]],["bool"]]],[11,"insert","","Insert a value into the map.",11,[[["self"],["v"]],["option"]]],[11,"remove","","Remove a value from the map and return it.",11,[[["self"],["k"]],["option"]]],[11,"pop","","Remove the last value from the map.",11,[[["self"]],["option"]]],[11,"values","","Get an iterator over the values in the map.",11,[[["self"]],["iter"]]],[11,"as_slice","","Get the values as a slice.",11,[[["self"]]]],[6,"SparseSet","","A sparse set of entity references.",null,null],[8,"EntityRef","","A type wrapping a small integer index should implement…",null,null],[10,"new","","Create a new entity reference from a small integer. This…",12,[[["usize"]],["self"]]],[10,"index","","Get the index that was used to create this entity reference.",12,[[],["usize"]]],[8,"SparseMapValue","","Trait for extracting keys from values stored in a…",null,null],[10,"key","","Get the key of this sparse map value. This key is not…",13,[[["self"]],["k"]]],[14,"entity_impl","","Macro which provides the common implementation of a 32-bit…",null,null],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","cranelift_entity::packed_option","",1,[[],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"from","","Convert `t` into a packed `Some(x)`.",1,[[["t"]],["self"]]],[11,"from","","Convert an option into its packed equivalent.",1,[[["option"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","cranelift_entity","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","cranelift_entity::packed_option","",1,[[["self"],["packedoption"]],["bool"]]],[11,"ne","","",1,[[["self"],["packedoption"]],["bool"]]],[11,"eq","cranelift_entity","",8,[[["self"]],["bool"]]],[11,"eq","","",9,[[["primarymap"],["self"]],["bool"]]],[11,"ne","","",9,[[["primarymap"],["self"]],["bool"]]],[11,"cmp","cranelift_entity::packed_option","",1,[[["self"],["packedoption"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["packedoption"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["self"],["packedoption"]],["bool"]]],[11,"le","","",1,[[["self"],["packedoption"]],["bool"]]],[11,"gt","","",1,[[["self"],["packedoption"]],["bool"]]],[11,"ge","","",1,[[["self"],["packedoption"]],["bool"]]],[11,"index","cranelift_entity","",2,[[["self"],["k"]],["v"]]],[11,"index","","",8,[[["self"],["k"]],["v"]]],[11,"index","","",9,[[["self"],["k"]],["v"]]],[11,"index_mut","","",2,[[["self"],["k"]],["v"]]],[11,"index_mut","","",8,[[["self"],["k"]],["v"]]],[11,"index_mut","","",9,[[["self"],["k"]],["v"]]],[11,"hash","cranelift_entity::packed_option","",1,[[["self"],["__h"]]]],[11,"hash","cranelift_entity","",9,[[["self"],["__h"]]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,[[["self"]]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,[[["self"]]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,[[["self"]]]],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"from_iter","","",9,[[["t"]],["self"]]],[11,"into","cranelift_entity::packed_option","",1,[[],["option"]]],[11,"clone","","",1,[[["self"]],["packedoption"]]],[11,"clone","cranelift_entity","",2,[[["self"]],["boxedslice"]]],[11,"clone","","",7,[[["self"]],["entitylist"]]],[11,"clone","","",6,[[["self"]],["listpool"]]],[11,"clone","","",8,[[["self"]],["secondarymap"]]],[11,"clone","","",9,[[["self"]],["primarymap"]]],[11,"clone","","",10,[[["self"]],["entityset"]]],[11,"default","cranelift_entity::packed_option","Create a default packed option representing `None`.",1,[[],["self"]]],[11,"default","cranelift_entity","",7,[[],["self"]]],[11,"serialize","","",8,[[["s"],["self"]],["result"]]],[11,"serialize","","",9,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",8,[[["d"]],["result"]]],[11,"deserialize","","",9,[[["__d"]],["result"]]]],"p":[[8,"ReservedValue"],[3,"PackedOption"],[3,"BoxedSlice"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"ListPool"],[3,"EntityList"],[3,"SecondaryMap"],[3,"PrimaryMap"],[3,"EntitySet"],[3,"SparseMap"],[8,"EntityRef"],[8,"SparseMapValue"]]};
searchIndex["cranelift_faerie"] = {"doc":"Top-level lib.rs for `cranelift_faerie`.","i":[[3,"FaerieBackend","cranelift_faerie","A `FaerieBackend` implements `Backend` and emits \".o\"…",null,null],[3,"FaerieBuilder","","A builder for `FaerieBackend`.",null,null],[3,"FaerieProduct","","This is the output of `Module`'s `finish` function. It…",null,null],[12,"artifact","","Faerie artifact with all functions, data, and links from…",0,null],[12,"trap_manifest","","Optional trap manifest. Contains `FaerieTrapManifest` when…",0,null],[4,"FaerieTrapCollection","","Setting to enable collection of traps. Setting this to…",null,null],[13,"Disabled","","`FaerieProduct::trap_manifest` will be `None`",1,null],[13,"Enabled","","`FaerieProduct::trap_manifest` will be `Some`",1,null],[4,"Format","","An object file format.",null,null],[13,"ELF","","The ELF object file format.",2,null],[13,"MachO","","The Mach-O object file format.",2,null],[11,"new","","Create a new `FaerieBuilder` using the given Cranelift…",3,[[["targetisa"],["faerietrapcollection"],["box",["targetisa"]],["box",["fn"]],["fn"],["string"]],["moduleresult"]]],[11,"name","","Return the name of the output file. This is the name…",0,[[["self"]],["str"]]],[11,"emit","","Call `emit` on the faerie `Artifact`, producing bytes in…",0,[[["self"]],[["error"],["vec",["u8"]],["result",["vec","error"]]]]],[11,"write","","Call `write` on the faerie `Artifact`, writing to a file.",0,[[["self"],["file"]],[["result",["error"]],["error"]]]],[0,"traps","","Faerie trap manifests record every `TrapCode` that…",null,null],[3,"FaerieTrapSink","cranelift_faerie::traps","Record of the trap sites for a given function",null,null],[12,"name","","Name of function",4,null],[12,"code_size","","Total code size of function",4,null],[12,"sites","","All trap sites collected in function",4,null],[3,"FaerieTrapManifest","","Collection of all `FaerieTrapSink`s for the module",null,null],[12,"sinks","","All `FaerieTrapSink` for the module",5,null],[11,"new","","Create an empty `FaerieTrapSink`",4,[[["str"],["u32"]],["self"]]],[11,"new_with_sites","","Create a `FaerieTrapSink` pre-populated with `traps`",4,[[["str"],["u32"],["trapsite"],["vec",["trapsite"]]],["self"]]],[11,"new","","Create an empty `FaerieTrapManifest`",5,[[],["self"]]],[11,"add_sink","","Put a `FaerieTrapSink` into manifest",5,[[["self"],["faerietrapsink"]]]],[17,"VERSION","cranelift_faerie","Version number of this crate.",null,null],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"equivalent","","",2,[[["k"],["self"]],["bool"]]],[11,"from","cranelift_faerie::traps","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"clone","cranelift_faerie","",2,[[["self"]],["format"]]],[11,"eq","","",2,[[["self"],["format"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","cranelift_faerie::traps","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"trap","","",4,[[["codeoffset"],["trapcode"],["self"],["sourceloc"]]]],[11,"new","cranelift_faerie","Create a new `FaerieBackend` using the given Cranelift…",6,[[["faeriebuilder"]],["self"]]],[11,"isa","","",6,[[["self"]],["targetisa"]]],[11,"declare_function","","",6,[[["funcid"],["str"],["linkage"],["self"]]]],[11,"declare_data","","",6,[[["str"],["dataid"],["u8"],["option",["u8"]],["linkage"],["self"],["bool"]]]],[11,"define_function","","",6,[[["funcid"],["str"],["u32"],["context"],["self"],["modulenamespace"]],["moduleresult"]]],[11,"define_function_bytes","","",6,[[["funcid"],["str"],["trapsite"],["self"],["modulenamespace"],["vec",["trapsite"]]],["moduleresult"]]],[11,"define_data","","",6,[[["datacontext"],["dataid"],["option",["u8"]],["bool"],["str"],["self"],["modulenamespace"],["u8"]],[["moduleresult",["faeriecompileddata"]],["faeriecompileddata"]]]],[11,"write_data_funcaddr","","",6,[[["faeriecompileddata"],["usize"],["self"],["funcref"]]]],[11,"write_data_dataaddr","","",6,[[["faeriecompileddata"],["usize"],["globalvalue"],["self"],["addend"]]]],[11,"finalize_function","","",6,[[["funcid"],["faeriecompiledfunction"],["self"],["modulenamespace"]]]],[11,"get_finalized_function","","",6,[[["faeriecompiledfunction"],["self"]]]],[11,"finalize_data","","",6,[[["dataid"],["self"],["modulenamespace"],["faeriecompileddata"]]]],[11,"get_finalized_data","","",6,[[["self"],["faeriecompileddata"]]]],[11,"publish","","",6,[[["self"]]]],[11,"finish","","",6,[[["modulenamespace"]],["faerieproduct"]]]],"p":[[3,"FaerieProduct"],[4,"FaerieTrapCollection"],[4,"Format"],[3,"FaerieBuilder"],[3,"FaerieTrapSink"],[3,"FaerieTrapManifest"],[3,"FaerieBackend"]]};
searchIndex["cranelift_filetests"] = {"doc":"File tests.","i":[[3,"FunctionRunner","cranelift_filetests","Run a function on a host",null,null],[5,"run","","Main entry point for `clif-util test`.",null,[[["bool"]],[["string"],["result",["duration","string"]],["duration"]]]],[5,"run_passes","","Used for 'pass' subcommand. Commands are interpreted as…",null,[[["str"],["bool"]],[["string"],["result",["duration","string"]],["duration"]]]],[11,"new","","Build a function runner from a function and the ISA to run…",0,[[["targetisa"],["function"],["box",["targetisa"]]],["self"]]],[11,"with_host_isa","","Build a function runner using the host machine's ISA and…",0,[[["function"],["flags"]],["self"]]],[11,"with_default_host_isa","","Build a function runner using the host machine's ISA and…",0,[[["function"]],["self"]]],[11,"run","","Compile and execute a single function, expecting a boolean…",0,[[["self"]],[["result",["string"]],["string"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]]],"p":[[3,"FunctionRunner"]]};
searchIndex["cranelift_frontend"] = {"doc":"Cranelift IR builder library.","i":[[3,"FunctionBuilder","cranelift_frontend","Temporary object used to build a single Cranelift IR…",null,null],[12,"func","","The function currently being built. This field is public…",0,null],[3,"FunctionBuilderContext","","Structure used for translating a series of functions into…",null,null],[3,"Switch","","Unlike with `br_table`, `Switch` cases may be sparse or…",null,null],[3,"Variable","","An opaque reference to a variable.",null,null],[11,"new","","Creates a FunctionBuilderContext structure. The structure…",1,[[],["self"]]],[11,"new","","Creates a new FunctionBuilder structure that will operate…",0,[[["functionbuildercontext"],["function"]],["self"]]],[11,"set_srcloc","","Set the source location that should be assigned to all new…",0,[[["self"],["sourceloc"]]]],[11,"create_block","","Creates a new `Block` and returns its reference.",0,[[["self"]],["block"]]],[11,"switch_to_block","","After the call to this function, new instructions will be…",0,[[["self"],["block"]]]],[11,"seal_block","","Declares that all the predecessors of this block are known.",0,[[["self"],["block"]]]],[11,"seal_all_blocks","","Effectively calls seal_block on all blocks in the function.",0,[[["self"]]]],[11,"declare_var","","In order to use a variable in a `use_var`, you need to…",0,[[["variable"],["self"],["type"]]]],[11,"use_var","","Returns the Cranelift IR value corresponding to the…",0,[[["variable"],["self"]],["value"]]],[11,"def_var","","Register a new definition of a user variable. The type of…",0,[[["variable"],["self"],["value"]]]],[11,"set_val_label","","Set label for Value",0,[[["self"],["valuelabel"],["value"]]]],[11,"create_jump_table","","Creates a jump table in the function, to be used by…",0,[[["self"],["jumptabledata"]],["jumptable"]]],[11,"create_stack_slot","","Creates a stack slot in the function, to be used by…",0,[[["self"],["stackslotdata"]],["stackslot"]]],[11,"import_signature","","Adds a signature which can later be used to declare an…",0,[[["self"],["signature"]],["sigref"]]],[11,"import_function","","Declare an external function import.",0,[[["self"],["extfuncdata"]],["funcref"]]],[11,"create_global_value","","Declares a global value accessible to the function.",0,[[["self"],["globalvaluedata"]],["globalvalue"]]],[11,"create_heap","","Declares a heap accessible to the function.",0,[[["self"],["heapdata"]],["heap"]]],[11,"ins","","Returns an object with the `InstBuilder` trait that allows…",0,[[["self"]],["funcinstbuilder"]]],[11,"ensure_inserted_block","","Make sure that the current block is inserted in the layout.",0,[[["self"]]]],[11,"cursor","","Returns a `FuncCursor` pointed at the current position…",0,[[["self"]],["funccursor"]]],[11,"append_block_params_for_function_params","","Append parameters to the given `Block` corresponding to…",0,[[["self"],["block"]]]],[11,"append_block_params_for_function_returns","","Append parameters to the given `Block` corresponding to…",0,[[["self"],["block"]]]],[11,"finalize","","Declare that translation of the current function is…",0,[[["self"]]]],[11,"block_params","","Retrieves all the parameters for a `Block` currently…",0,[[["block"],["self"]]]],[11,"signature","","Retrieves the signature with reference `sigref` previously…",0,[[["self"],["sigref"]],[["option",["signature"]],["signature"]]]],[11,"append_block_param","","Creates a parameter for a specific `Block` by appending it…",0,[[["type"],["self"],["block"]],["value"]]],[11,"inst_results","","Returns the result values of an instruction.",0,[[["inst"],["self"]]]],[11,"change_jump_destination","","Changes the destination of a jump instruction after…",0,[[["self"],["inst"],["block"]]]],[11,"is_unreachable","","Returns `true` if and only if the current `Block` is…",0,[[["self"]],["bool"]]],[11,"is_pristine","","Returns `true` if and only if no instructions have been…",0,[[["self"]],["bool"]]],[11,"is_filled","","Returns `true` if and only if a terminator instruction has…",0,[[["self"]],["bool"]]],[11,"display","","Returns a displayable object for the function as it is.",0,[[["self"],["into",["option"]],["option",["targetisa"]]],["displayfunction"]]],[11,"call_memcpy","","Calls libc.memcpy",0,[[["targetfrontendconfig"],["value"],["self"]]]],[11,"emit_small_memory_copy","","Optimised memcpy or memmove for small copies.",0,[[["targetfrontendconfig"],["bool"],["value"],["self"],["u64"],["u8"]]]],[11,"call_memset","","Calls libc.memset",0,[[["targetfrontendconfig"],["value"],["self"]]]],[11,"emit_small_memset","","Calls libc.memset",0,[[["targetfrontendconfig"],["value"],["self"],["u64"],["u8"]]]],[11,"call_memmove","","Calls libc.memmove",0,[[["targetfrontendconfig"],["value"],["self"]]]],[11,"new","","Create a new empty switch",2,[[],["self"]]],[11,"set_entry","","Set a switch entry",2,[[["self"],["u64"],["block"]]]],[11,"entries","","Get a reference to all existing entries",2,[[["self"]],["hashmap"]]],[11,"emit","","Build the switch",2,[[["functionbuilder"],["block"],["value"]]]],[11,"with_u32","","Create a new Variable with the given index.",3,[[["u32"]],["self"]]],[17,"VERSION","","Version number of this crate.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"key","","",3,[[["self"]],["t"]]],[11,"equivalent","","",3,[[["k"],["self"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["variable"],["self"]],["bool"]]],[11,"ne","","",3,[[["variable"],["self"]],["bool"]]],[11,"clone","","",3,[[["self"]],["variable"]]],[11,"default","","",2,[[],["switch"]]],[11,"new","","",3,[[["usize"]],["self"]]],[11,"index","","",3,[[],["usize"]]]],"p":[[3,"FunctionBuilder"],[3,"FunctionBuilderContext"],[3,"Switch"],[3,"Variable"]]};
searchIndex["cranelift_module"] = {"doc":"Top-level lib.rs for `cranelift_module`.","i":[[3,"DataContext","cranelift_module","This is to data objects what cranelift_codegen::Context is…",null,null],[3,"DataDescription","","A description of a data object.",null,null],[12,"init","","How the data should be initialized.",0,null],[12,"function_decls","","External function declarations.",0,null],[12,"data_decls","","External data object declarations.",0,null],[12,"function_relocs","","Function addresses to write at specified offsets.",0,null],[12,"data_relocs","","Data addresses to write at specified offsets.",0,null],[3,"DataId","","A data object identifier for use in the `Module` interface.",null,null],[3,"FuncId","","A function identifier for use in the `Module` interface.",null,null],[3,"Module","","A `Module` is a utility for collecting functions and data…",null,null],[3,"ModuleFunction","","A function belonging to a `Module`.",null,null],[12,"decl","","The function declaration.",1,null],[12,"compiled","","The compiled artifact, once it's available.",1,null],[3,"ModuleNamespace","","This provides a view to the state of a module which allows…",null,null],[3,"TrapSite","","Record of the arguments cranelift passes to…",null,null],[12,"offset","","Offset into function.",2,null],[12,"srcloc","","Source location given to cranelift.",2,null],[12,"code","","Trap code, as determined by cranelift.",2,null],[4,"Init","","This specifies how data is to be initialized.",null,null],[13,"Uninitialized","","This indicates that no initialization has been specified…",3,null],[13,"Zeros","","Initialize the data with all zeros.",3,null],[12,"size","cranelift_module::Init","The size of the data.",4,null],[13,"Bytes","cranelift_module","Initialize the data with the specified contents.",3,null],[12,"contents","cranelift_module::Init","The contents, which also implies the size of the data.",5,null],[4,"FuncOrDataId","cranelift_module","A declared name may refer to either a function or data…",null,null],[13,"Func","","When it's a FuncId",6,null],[13,"Data","","When it's a DataId",6,null],[4,"Linkage","","Linkage refers to where an entity is defined and who can…",null,null],[13,"Import","","Defined outside of a module.",7,null],[13,"Local","","Defined inside the module, but not visible outside it.",7,null],[13,"Preemptible","","Defined inside the module, visible outside it, and may be…",7,null],[13,"Export","","Defined inside the module, and visible outside it.",7,null],[4,"ModuleError","","Error messages for all `Module` and `Backend` methods",null,null],[13,"Undeclared","","Indicates an identifier was used before it was declared",8,null],[13,"IncompatibleDeclaration","","Indicates an identifier was used as data/function first,…",8,null],[13,"IncompatibleSignature","","Indicates a function identifier was declared with a…",8,null],[13,"DuplicateDefinition","","Indicates an identifier was defined more than once",8,null],[13,"InvalidImportDefinition","","Indicates an identifier was defined, but was declared as…",8,null],[13,"FunctionTooLarge","","Indicates a too-long function was defined",8,null],[13,"Compilation","","Wraps a `cranelift-codegen` error",8,null],[13,"Backend","","Wraps a generic error from a backend",8,null],[5,"default_libcall_names","","Default names for `ir::LibCall`s. A function by this name…",null,[[],[["box",["fn"]],["fn"]]]],[11,"size","","Return the size of the data to be initialized.",3,[[["self"]],["usize"]]],[11,"new","","Allocate a new context.",9,[[],["self"]]],[11,"clear","","Clear all data structures in this context.",9,[[["self"]]]],[11,"define_zeroinit","","Define a zero-initialized object with the given size.",9,[[["self"],["usize"]]]],[11,"define","","Define an object initialized with the given contents.",9,[[["self"],["box"]]]],[11,"import_function","","Declare an external function import.",9,[[["self"],["externalname"]],["funcref"]]],[11,"import_global_value","","Declares a global value import.",9,[[["self"],["externalname"]],["globalvalue"]]],[11,"write_function_addr","","Write the address of `func` into the data at offset…",9,[[["self"],["codeoffset"],["funcref"]]]],[11,"write_data_addr","","Write the address of `data` into the data at offset…",9,[[["codeoffset"],["self"],["globalvalue"],["addend"]]]],[11,"description","","Reference the initializer data.",9,[[["self"]],["datadescription"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",10,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",10,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",11,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",11,[[],["u32"]]],[11,"is_definable","","Test whether this linkage can have a definition.",7,[[],["bool"]]],[11,"is_final","","Test whether this linkage will have a definition that…",7,[[],["bool"]]],[11,"get_function_id","","Get the `FuncId` for the function named by `name`.",12,[[["externalname"],["self"]],["funcid"]]],[11,"get_data_id","","Get the `DataId` for the data object named by `name`.",12,[[["externalname"],["self"]],["dataid"]]],[11,"get_function_decl","","Get the `FunctionDeclaration` for the function named by…",12,[[["externalname"],["self"]],["functiondeclaration"]]],[11,"get_data_decl","","Get the `DataDeclaration` for the data object named by…",12,[[["externalname"],["self"]],["datadeclaration"]]],[11,"get_function_definition","","Get the definition for the function named by `name`, along…",12,[[["externalname"],["self"]]]],[11,"get_data_definition","","Get the definition for the data object named by `name`,…",12,[[["externalname"],["self"]]]],[11,"is_function","","Return whether `name` names a function, rather than a data…",12,[[["externalname"],["self"]],["bool"]]],[11,"new","","Create a new `Module`.",13,[[],["self"]]],[11,"get_name","","Get the module identifier for a given name, if that name…",13,[[["str"],["self"]],[["option",["funcordataid"]],["funcordataid"]]]],[11,"target_config","","Return the target information needed by frontends to…",13,[[["self"]],["targetfrontendconfig"]]],[11,"make_context","","Create a new `Context` initialized for use with this…",13,[[["self"]],["context"]]],[11,"clear_context","","Clear the given `Context` and reset it for use with a new…",13,[[["context"],["self"]]]],[11,"make_signature","","Create a new empty `Signature` with the default calling…",13,[[["self"]],["signature"]]],[11,"clear_signature","","Clear the given `Signature` and reset for use with a new…",13,[[["self"],["signature"]]]],[11,"declare_function","","Declare a function in this module.",13,[[["str"],["signature"],["self"],["linkage"]],[["funcid"],["moduleresult",["funcid"]]]]],[11,"declared_functions","","An iterator over functions that have been declared in this…",13,[[["self"]],[["iter",["modulefunction"]],["modulefunction"]]]],[11,"declare_data","","Declare a data object in this module.",13,[[["str"],["option",["u8"]],["u8"],["self"],["linkage"],["bool"]],[["dataid"],["moduleresult",["dataid"]]]]],[11,"declare_func_in_func","","Use this when you're building the IR of a function to…",13,[[["function"],["self"],["funcid"]],["funcref"]]],[11,"declare_data_in_func","","Use this when you're building the IR of a function to…",13,[[["dataid"],["self"],["function"]],["globalvalue"]]],[11,"declare_func_in_data","","TODO: Same as above.",13,[[["datacontext"],["self"],["funcid"]],["funcref"]]],[11,"declare_data_in_data","","TODO: Same as above.",13,[[["dataid"],["self"],["datacontext"]],["globalvalue"]]],[11,"define_function","","Define a function, producing the function body from the…",13,[[["self"],["context"],["funcid"]],[["modulecompiledfunction"],["moduleresult",["modulecompiledfunction"]]]]],[11,"define_function_bytes","","Define a function, taking the function body from the given…",13,[[["trapsite"],["vec",["trapsite"]],["self"],["funcid"]],[["modulecompiledfunction"],["moduleresult",["modulecompiledfunction"]]]]],[11,"define_data","","Define a data object, producing the data contents from the…",13,[[["dataid"],["self"],["datacontext"]],["moduleresult"]]],[11,"write_data_funcaddr","","Write the address of `what` into the data for `data` at…",13,[[["dataid"],["usize"],["self"],["funcref"]]]],[11,"write_data_dataaddr","","Write the address of `what` plus `addend` into the data…",13,[[["dataid"],["usize"],["addend"],["self"],["globalvalue"]]]],[11,"finalize_definitions","","Finalize all functions and data objects that are defined…",13,[[["self"]]]],[11,"get_finalized_function","","Return the finalized artifact from the backend, if it…",13,[[["self"],["funcid"]]]],[11,"get_finalized_data","","Return the finalized artifact from the backend, if it…",13,[[["dataid"],["self"]]]],[11,"isa","","Return the target isa",13,[[["self"]],["targetisa"]]],[11,"finish","","Consume the module and return the resulting `Product`.…",13,[[]]],[6,"ModuleResult","","A convenient alias for a `Result` that uses `ModuleError`…",null,null],[17,"VERSION","","Version number of this crate.",null,null],[8,"Backend","","A `Backend` implements the functionality needed to support…",null,null],[16,"Builder","","A builder for constructing `Backend` instances.",14,null],[16,"CompiledFunction","","The results of compiling a function.",14,null],[16,"CompiledData","","The results of \"compiling\" a data object.",14,null],[16,"FinalizedFunction","","The completed output artifact for a function, if this is…",14,null],[16,"FinalizedData","","The completed output artifact for a data object, if this…",14,null],[16,"Product","","This is an object returned by `Module`'s `finish`…",14,null],[10,"new","","Create a new `Backend` instance.",14,[[],["self"]]],[10,"isa","","Return the `TargetIsa` to compile for.",14,[[["self"]],["targetisa"]]],[10,"declare_function","","Declare a function.",14,[[["str"],["self"],["linkage"],["funcid"]]]],[10,"declare_data","","Declare a data object.",14,[[["dataid"],["str"],["option",["u8"]],["u8"],["self"],["linkage"],["bool"]]]],[10,"define_function","","Define a function, producing the function body from the…",14,[[["str"],["modulenamespace"],["u32"],["self"],["context"],["funcid"]],["moduleresult"]]],[10,"define_function_bytes","","Define a function, taking the function body from the given…",14,[[["str"],["trapsite"],["vec",["trapsite"]],["self"],["modulenamespace"],["funcid"]],["moduleresult"]]],[10,"define_data","","Define a zero-initialized data object of the given size.",14,[[["datacontext"],["option",["u8"]],["bool"],["dataid"],["str"],["modulenamespace"],["self"],["u8"]],["moduleresult"]]],[10,"write_data_funcaddr","","Write the address of `what` into the data for `data` at…",14,[[["usize"],["self"],["funcref"]]]],[10,"write_data_dataaddr","","Write the address of `what` plus `addend` into the data…",14,[[["usize"],["addend"],["self"],["globalvalue"]]]],[10,"finalize_function","","Perform all outstanding relocations on the given function.…",14,[[["funcid"],["self"],["modulenamespace"]]]],[10,"get_finalized_function","","Return the finalized artifact from the backend, if relevant.",14,[[["self"]]]],[10,"finalize_data","","Perform all outstanding relocations on the given data…",14,[[["dataid"],["self"],["modulenamespace"]]]],[10,"get_finalized_data","","Return the finalized artifact from the backend, if relevant.",14,[[["self"]]]],[10,"publish","","\"Publish\" all finalized functions and data objects to…",14,[[["self"]]]],[10,"finish","","Consume this `Backend` and return a result. Some…",14,[[["modulenamespace"]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"key","","",11,[[["self"]],["t"]]],[11,"equivalent","","",11,[[["k"],["self"]],["bool"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"key","","",10,[[["self"]],["t"]]],[11,"equivalent","","",10,[[["k"],["self"]],["bool"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"equivalent","","",3,[[["k"],["self"]],["bool"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"equivalent","","",6,[[["k"],["self"]],["bool"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"equivalent","","",7,[[["k"],["self"]],["bool"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"from","","",8,[[["codegenerror"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"eq","","",3,[[["self"],["init"]],["bool"]]],[11,"ne","","",3,[[["self"],["init"]],["bool"]]],[11,"eq","","",10,[[["funcid"],["self"]],["bool"]]],[11,"ne","","",10,[[["funcid"],["self"]],["bool"]]],[11,"eq","","",11,[[["dataid"],["self"]],["bool"]]],[11,"ne","","",11,[[["dataid"],["self"]],["bool"]]],[11,"eq","","",7,[[["self"],["linkage"]],["bool"]]],[11,"eq","","",6,[[["funcordataid"],["self"]],["bool"]]],[11,"ne","","",6,[[["funcordataid"],["self"]],["bool"]]],[11,"cmp","","",10,[[["funcid"],["self"]],["ordering"]]],[11,"cmp","","",11,[[["dataid"],["self"]],["ordering"]]],[11,"cmp","","",6,[[["funcordataid"],["self"]],["ordering"]]],[11,"partial_cmp","","",10,[[["funcid"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",10,[[["funcid"],["self"]],["bool"]]],[11,"le","","",10,[[["funcid"],["self"]],["bool"]]],[11,"gt","","",10,[[["funcid"],["self"]],["bool"]]],[11,"ge","","",10,[[["funcid"],["self"]],["bool"]]],[11,"partial_cmp","","",11,[[["dataid"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",11,[[["dataid"],["self"]],["bool"]]],[11,"le","","",11,[[["dataid"],["self"]],["bool"]]],[11,"gt","","",11,[[["dataid"],["self"]],["bool"]]],[11,"ge","","",11,[[["dataid"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["funcordataid"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",6,[[["funcordataid"],["self"]],["bool"]]],[11,"le","","",6,[[["funcordataid"],["self"]],["bool"]]],[11,"gt","","",6,[[["funcordataid"],["self"]],["bool"]]],[11,"ge","","",6,[[["funcordataid"],["self"]],["bool"]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","","",11,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"clone","","",10,[[["self"]],["funcid"]]],[11,"clone","","",11,[[["self"]],["dataid"]]],[11,"clone","","",7,[[["self"]],["linkage"]]],[11,"clone","","",6,[[["self"]],["funcordataid"]]],[11,"clone","","",2,[[["self"]],["trapsite"]]],[11,"source","","",8,[[["self"]],[["option",["error"]],["error"]]]],[11,"new","","",10,[[["usize"]],["self"]]],[11,"index","","",10,[[],["usize"]]],[11,"new","","",11,[[["usize"]],["self"]]],[11,"index","","",11,[[],["usize"]]],[11,"reserved_value","","",10,[[],["funcid"]]],[11,"reserved_value","","",11,[[],["dataid"]]]],"p":[[3,"DataDescription"],[3,"ModuleFunction"],[3,"TrapSite"],[4,"Init"],[13,"Zeros"],[13,"Bytes"],[4,"FuncOrDataId"],[4,"Linkage"],[4,"ModuleError"],[3,"DataContext"],[3,"FuncId"],[3,"DataId"],[3,"ModuleNamespace"],[3,"Module"],[8,"Backend"]]};
searchIndex["cranelift_native"] = {"doc":"Performs autodetection of the host for the purposes of…","i":[[5,"builder","cranelift_native","Return an `isa` builder configured for the current host…",null,[[],[["result",["builder","str"]],["builder"],["str"]]]],[17,"VERSION","","Version number of this crate.",null,null]],"p":[]};
searchIndex["cranelift_object"] = {"doc":"Top-level lib.rs for `cranelift_object`.","i":[[3,"ObjectBackend","cranelift_object","A `ObjectBackend` implements `Backend` and emits \".o\"…",null,null],[3,"ObjectBuilder","","A builder for `ObjectBackend`.",null,null],[3,"ObjectProduct","","This is the output of `Module`'s `finish` function. It…",null,null],[12,"object","","Object artifact with all functions and data from the…",0,null],[12,"functions","","Symbol IDs for functions (both declared and defined).",0,null],[12,"data_objects","","Symbol IDs for data objects (both declared and defined).",0,null],[12,"traps","","Trap sites for defined functions.",0,null],[3,"ObjectTrapSink","","Record of the trap sites for a given function",null,null],[12,"sites","","All trap sites collected in function",1,null],[4,"ObjectTrapCollection","","Setting to enable collection of traps. Setting this to…",null,null],[13,"Disabled","","`ObjectProduct::traps` will be empty",2,null],[13,"Enabled","","`ObjectProduct::traps` will contain trap sites",2,null],[11,"new","","Create a new `ObjectBuilder` using the given Cranelift…",3,[[["targetisa"],["into",["vec"]],["fn"],["objecttrapcollection"],["box",["fn"]],["vec",["u8"]],["box",["targetisa"]]],["self"]]],[11,"function_alignment","","Set the alignment used for functions.",3,[[["self"],["u64"]],["self"]]],[11,"function_symbol","","Return the `SymbolId` for the given function.",0,[[["self"],["funcid"]],["symbolid"]]],[11,"data_symbol","","Return the `SymbolId` for the given data object.",0,[[["self"],["dataid"]],["symbolid"]]],[11,"emit","","Write the object bytes in memory.",0,[[],[["result",["vec","string"]],["vec",["u8"]],["string"]]]],[17,"VERSION","","Version number of this crate.",null,null],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"clone","","",1,[[["self"]],["objecttrapsink"]]],[11,"default","","",1,[[],["objecttrapsink"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"trap","","",1,[[["codeoffset"],["sourceloc"],["self"],["trapcode"]]]],[11,"new","","Create a new `ObjectBackend` using the given Cranelift…",4,[[["objectbuilder"]],["self"]]],[11,"isa","","",4,[[["self"]],["targetisa"]]],[11,"declare_function","","",4,[[["str"],["linkage"],["self"],["funcid"]]]],[11,"declare_data","","",4,[[["str"],["linkage"],["u8"],["dataid"],["option",["u8"]],["self"],["bool"]]]],[11,"define_function","","",4,[[["str"],["modulenamespace"],["u32"],["self"],["funcid"],["context"]],["moduleresult"]]],[11,"define_function_bytes","","",4,[[["str"],["modulenamespace"],["vec",["trapsite"]],["self"],["funcid"],["trapsite"]],["moduleresult"]]],[11,"define_data","","",4,[[["option",["u8"]],["bool"],["str"],["datacontext"],["modulenamespace"],["dataid"],["self"],["u8"]],[["objectcompileddata"],["moduleresult",["objectcompileddata"]]]]],[11,"write_data_funcaddr","","",4,[[["usize"],["objectcompileddata"],["self"],["funcref"]]]],[11,"write_data_dataaddr","","",4,[[["usize"],["addend"],["objectcompileddata"],["self"],["globalvalue"]]]],[11,"finalize_function","","",4,[[["objectcompiledfunction"],["modulenamespace"],["self"],["funcid"]]]],[11,"get_finalized_function","","",4,[[["objectcompiledfunction"],["self"]]]],[11,"finalize_data","","",4,[[["modulenamespace"],["dataid"],["self"],["objectcompileddata"]]]],[11,"get_finalized_data","","",4,[[["objectcompileddata"],["self"]]]],[11,"publish","","",4,[[["self"]]]],[11,"finish","","",4,[[["modulenamespace"]],["objectproduct"]]]],"p":[[3,"ObjectProduct"],[3,"ObjectTrapSink"],[4,"ObjectTrapCollection"],[3,"ObjectBuilder"],[3,"ObjectBackend"]]};
searchIndex["cranelift_preopt"] = {"doc":"Performs early-stage optimizations on Cranelift IR.","i":[[5,"optimize","cranelift_preopt","Optimize the function with available optimizations.",null,[[["context"],["targetisa"]],["codegenresult"]]],[5,"fold_constants","","Fold constants",null,[[["foi"],["context"]],["codegenresult"]]]],"p":[]};
searchIndex["cranelift_reader"] = {"doc":"Cranelift file reader library.","i":[[3,"Location","cranelift_reader","The location of a `Token` or `Error`.",null,null],[12,"line_number","","Line number. Command-line arguments are line 0 and source…",0,null],[3,"ParseError","","A parse error is returned when the parse failed.",null,null],[12,"location","","Location of the error.",1,null],[12,"message","","Error message.",1,null],[12,"is_warning","","Whether it's a warning or a plain error.",1,null],[3,"ParseOptions","","Options for configuring the parsing of filetests.",null,null],[12,"passes","","Compiler passes to run on the parsed functions.",2,null],[12,"target","","Target ISA for compiling the parsed functions, e.g.…",2,null],[12,"default_calling_convention","","Default calling convention used when none is specified for…",2,null],[3,"SourceMap","","Mapping from entity names to source locations.",null,null],[3,"TestCommand","","A command appearing in a test file.",null,null],[12,"command","","The command name as a string.",3,null],[12,"options","","The options following the command name.",3,null],[3,"Comment","","A comment in a parsed function.",null,null],[12,"entity","","The entity this comment is attached to. Comments always…",4,null],[12,"text","","Text of the comment, including the leading `;`.",4,null],[3,"Details","","Additional details about a function parsed from a text…",null,null],[12,"location","","Location of the `function` keyword that begins this…",5,null],[12,"comments","","Annotation comments that appeared inside or after the…",5,null],[12,"map","","Mapping of entity numbers to source locations.",5,null],[3,"TestFile","","A parsed test case.",null,null],[12,"commands","","`test foo ...` lines.",6,null],[12,"isa_spec","","`isa bar ...` lines.",6,null],[12,"features","","`feature ...` lines",6,null],[12,"preamble_comments","","Comments appearing before the first function. These are…",6,null],[12,"functions","","Parsed functions and additional details about each function.",6,null],[4,"IsaSpec","","The ISA specifications in a `.clif` file.",null,null],[13,"None","","The parsed file does not contain any `isa` commands, but…",7,null],[13,"Some","","The parsed file does contain `isa` commands. Each `isa`…",7,null],[4,"TestOption","","An option on a test command.",null,null],[13,"Flag","","Single identifier flag: `foo`.",8,null],[13,"Value","","A value assigned to an identifier: `foo=bar`.",8,null],[4,"Feature","","A cranelift feature in a test file preamble.",null,null],[13,"With","","`feature \"...\"` lines",9,null],[13,"Without","","`feature ! \"...\"` lines.",9,null],[5,"parse_options","","Parse an iterator of command line options and apply them…",null,[[["i"],["configurable"],["location"]],["parseresult"]]],[5,"parse_functions","","Parse the entire `text` into a list of functions.",null,[[["str"]],[["parseresult",["vec"]],["vec",["function"]]]]],[5,"parse_test","","Parse the entire `text` as a test case file.",null,[[["str"],["parseoptions"]],[["testfile"],["parseresult",["testfile"]]]]],[11,"unique_isa","","If the `IsaSpec` contains exactly 1 `TargetIsa` we return…",7,[[["self"]],[["targetisa"],["option",["targetisa"]]]]],[11,"contains_value","","Look up a value entity.",10,[[["self"],["value"]],["bool"]]],[11,"contains_block","","Look up a block entity.",10,[[["block"],["self"]],["bool"]]],[11,"contains_ss","","Look up a stack slot entity.",10,[[["self"],["stackslot"]],["bool"]]],[11,"contains_gv","","Look up a global value entity.",10,[[["self"],["globalvalue"]],["bool"]]],[11,"contains_heap","","Look up a heap entity.",10,[[["self"],["heap"]],["bool"]]],[11,"contains_table","","Look up a table entity.",10,[[["self"],["table"]],["bool"]]],[11,"contains_sig","","Look up a signature entity.",10,[[["self"],["sigref"]],["bool"]]],[11,"contains_fn","","Look up a function entity.",10,[[["funcref"],["self"]],["bool"]]],[11,"contains_jt","","Look up a jump table entity.",10,[[["jumptable"],["self"]],["bool"]]],[11,"lookup_str","","Look up an entity by source name. Returns the entity…",10,[[["str"],["self"]],[["anyentity"],["option",["anyentity"]]]]],[11,"location","","Get the source location where an entity was defined.",10,[[["self"],["anyentity"]],[["option",["location"]],["location"]]]],[11,"new","","Create a new empty `SourceMap`.",10,[[],["self"]]],[11,"def_value","","Define the value `entity`.",10,[[["location"],["self"],["value"]],["parseresult"]]],[11,"def_block","","Define the block `entity`.",10,[[["self"],["block"],["location"]],["parseresult"]]],[11,"def_ss","","Define the stack slot `entity`.",10,[[["location"],["self"],["stackslot"]],["parseresult"]]],[11,"def_gv","","Define the global value `entity`.",10,[[["location"],["self"],["globalvalue"]],["parseresult"]]],[11,"def_heap","","Define the heap `entity`.",10,[[["location"],["self"],["heap"]],["parseresult"]]],[11,"def_table","","Define the table `entity`.",10,[[["location"],["self"],["table"]],["parseresult"]]],[11,"def_sig","","Define the signature `entity`.",10,[[["self"],["sigref"],["location"]],["parseresult"]]],[11,"def_fn","","Define the external function `entity`.",10,[[["funcref"],["self"],["location"]],["parseresult"]]],[11,"def_jt","","Define the jump table `entity`.",10,[[["self"],["jumptable"],["location"]],["parseresult"]]],[11,"def_entity","","Define an entity. This can be used for instructions whose…",10,[[["self"],["anyentity"],["location"]],["parseresult"]]],[11,"new","","Create a new TestCommand by parsing `s`. The returned…",3,[[["str"]],["self"]]],[11,"new","","Create a new TestOption by parsing `s`. The returned…",8,[[["str"]],["self"]]],[6,"ParseResult","","Result of a parser operation. The `ParseError` variant…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"equivalent","","",0,[[["k"],["self"]],["bool"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"equivalent","","",3,[[["k"],["self"]],["bool"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"equivalent","","",4,[[["k"],["self"]],["bool"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"equivalent","","",8,[[["k"],["self"]],["bool"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"equivalent","","",9,[[["k"],["self"]],["bool"]]],[11,"clone","","",0,[[["self"]],["location"]]],[11,"clone","","",3,[[["self"]],["testcommand"]]],[11,"clone","","",8,[[["self"]],["testoption"]]],[11,"clone","","",4,[[["self"]],["comment"]]],[11,"default","","",0,[[],["location"]]],[11,"default","","",2,[[],["self"]]],[11,"default","","",10,[[],["sourcemap"]]],[11,"eq","","",0,[[["self"],["location"]],["bool"]]],[11,"ne","","",0,[[["self"],["location"]],["bool"]]],[11,"eq","","",3,[[["self"],["testcommand"]],["bool"]]],[11,"ne","","",3,[[["self"],["testcommand"]],["bool"]]],[11,"eq","","",8,[[["self"],["testoption"]],["bool"]]],[11,"ne","","",8,[[["self"],["testoption"]],["bool"]]],[11,"eq","","",4,[[["comment"],["self"]],["bool"]]],[11,"ne","","",4,[[["comment"],["self"]],["bool"]]],[11,"eq","","",9,[[["feature"],["self"]],["bool"]]],[11,"ne","","",9,[[["feature"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]]],"p":[[3,"Location"],[3,"ParseError"],[3,"ParseOptions"],[3,"TestCommand"],[3,"Comment"],[3,"Details"],[3,"TestFile"],[4,"IsaSpec"],[4,"TestOption"],[4,"Feature"],[3,"SourceMap"]]};
searchIndex["cranelift_simplejit"] = {"doc":"Top-level lib.rs for `cranelift_simplejit`.","i":[[3,"SimpleJITBackend","cranelift_simplejit","A `SimpleJITBackend` implements `Backend` and emits code…",null,null],[3,"SimpleJITBuilder","","A builder for `SimpleJITBackend`.",null,null],[11,"new","","Create a new `SimpleJITBuilder`.",0,[[["fn"],["box",["fn"]]],["self"]]],[11,"with_isa","","Create a new `SimpleJITBuilder` with an arbitrary target.…",0,[[["targetisa"],["fn"],["box",["fn"]],["box",["targetisa"]]],["self"]]],[11,"symbol","","Define a symbol in the internal symbol table.",0,[[["self"],["k"]],["self"]]],[11,"symbols","","Define multiple symbols in the internal symbol table.",0,[[["self"],["it"]],["self"]]],[17,"VERSION","","Version number of this crate.",null,null],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"new","","Create a new `SimpleJITBackend`.",1,[[["simplejitbuilder"]],["self"]]],[11,"isa","","",1,[[["self"]],["targetisa"]]],[11,"declare_function","","",1,[[["str"],["linkage"],["self"],["funcid"]]]],[11,"declare_data","","",1,[[["str"],["linkage"],["u8"],["dataid"],["option",["u8"]],["self"],["bool"]]]],[11,"define_function","","",1,[[["str"],["modulenamespace"],["u32"],["self"],["funcid"],["context"]],["moduleresult"]]],[11,"define_function_bytes","","",1,[[["str"],["modulenamespace"],["vec",["trapsite"]],["self"],["funcid"],["trapsite"]],["moduleresult"]]],[11,"define_data","","",1,[[["option",["u8"]],["bool"],["str"],["datacontext"],["modulenamespace"],["dataid"],["self"],["u8"]],["moduleresult"]]],[11,"write_data_funcaddr","","",1,[[["usize"],["self"],["funcref"]]]],[11,"write_data_dataaddr","","",1,[[["usize"],["self"],["globalvalue"],["addend"]]]],[11,"finalize_function","","",1,[[["modulenamespace"],["self"],["funcid"]]]],[11,"get_finalized_function","","",1,[[["self"]]]],[11,"finalize_data","","",1,[[["modulenamespace"],["dataid"],["self"]]]],[11,"get_finalized_data","","",1,[[["self"]]]],[11,"publish","","",1,[[["self"]]]],[11,"finish","","SimpleJIT emits code and data into memory as it processes…",1,[[["modulenamespace"]]]]],"p":[[3,"SimpleJITBuilder"],[3,"SimpleJITBackend"]]};
searchIndex["cranelift_wasm"] = {"doc":"Performs translation from a wasm module in binary format…","i":[[3,"DummyEnvironment","cranelift_wasm","This `ModuleEnvironment` implementation is a \"naïve\" one,…",null,null],[12,"info","","Module information.",0,null],[12,"func_bytecode_sizes","","Vector of wasm bytecode size for each function.",0,null],[3,"FuncTranslator","","WebAssembly to Cranelift IR function translator.",null,null],[3,"FuncTranslationState","","Contains information passed along during a function's…",null,null],[3,"ModuleTranslationState","","Contains information decoded from the Wasm module that…",null,null],[3,"DataIndex","","Index type of a passive data segment inside the…",null,null],[3,"DefinedFuncIndex","","Index type of a defined function inside the WebAssembly…",null,null],[3,"DefinedGlobalIndex","","Index type of a defined global inside the WebAssembly…",null,null],[3,"DefinedMemoryIndex","","Index type of a defined memory inside the WebAssembly…",null,null],[3,"DefinedTableIndex","","Index type of a defined table inside the WebAssembly module.",null,null],[3,"ElemIndex","","Index type of a passive element segment inside the…",null,null],[3,"FuncIndex","","Index type of a function (imported or defined) inside the…",null,null],[3,"Global","","WebAssembly global.",null,null],[12,"ty","","The type of the value stored in the global.",1,null],[12,"mutability","","A flag indicating whether the value may change at runtime.",1,null],[12,"initializer","","The source of the initial value.",1,null],[3,"GlobalIndex","","Index type of a global variable (imported or defined)…",null,null],[3,"Memory","","WebAssembly linear memory.",null,null],[12,"minimum","","The minimum number of pages in the memory.",2,null],[12,"maximum","","The maximum number of pages in the memory.",2,null],[12,"shared","","Whether the memory may be shared between multiple threads.",2,null],[3,"MemoryIndex","","Index type of a linear memory (imported or defined) inside…",null,null],[3,"SignatureIndex","","Index type of a signature (imported or defined) inside the…",null,null],[3,"Table","","WebAssembly table.",null,null],[12,"ty","","The type of data stored in elements of the table.",3,null],[12,"minimum","","The minimum number of elements in the table.",3,null],[12,"maximum","","The maximum number of elements in the table.",3,null],[3,"TableIndex","","Index type of a table (imported or defined) inside the…",null,null],[4,"GlobalVariable","","The value of a WebAssembly global variable.",null,null],[13,"Const","","This is a constant global with a value known at compile…",4,null],[13,"Memory","","This is a variable in memory that should be referenced…",4,null],[12,"gv","cranelift_wasm::GlobalVariable","The address of the global variable storage.",5,null],[12,"offset","","An offset to add to the address.",5,null],[12,"ty","","The global variable's type.",5,null],[13,"Custom","cranelift_wasm","This is a global variable that needs to be handled by the…",4,null],[4,"ReturnMode","","How to return from functions.",null,null],[13,"NormalReturns","","Use normal return instructions as needed.",6,null],[13,"FallthroughReturn","","Use a single fallthrough return at the end of the function.",6,null],[4,"WasmError","","A WebAssembly translation error.",null,null],[13,"InvalidWebAssembly","","The input WebAssembly code is invalid.",7,null],[12,"message","cranelift_wasm::WasmError","A string describing the validation error.",8,null],[12,"offset","","The bytecode offset where the error occurred.",8,null],[13,"Unsupported","cranelift_wasm","A feature used by the WebAssembly code is not supported by…",7,null],[13,"ImplLimitExceeded","","An implementation limit was exceeded.",7,null],[13,"User","","Any user-defined error.",7,null],[4,"GlobalInit","","Globals are initialized via the `const` operators or by…",null,null],[13,"I32Const","","An `i32.const`.",9,null],[13,"I64Const","","An `i64.const`.",9,null],[13,"F32Const","","An `f32.const`.",9,null],[13,"F64Const","","An `f64.const`.",9,null],[13,"V128Const","","A `vconst`.",9,null],[13,"GetGlobal","","A `global.get` of another global.",9,null],[13,"RefNullConst","","A `ref.null`.",9,null],[13,"RefFunc","","A `ref.func <index>`.",9,null],[13,"Import","","< The global is imported from, and thus initialized by, a…",9,null],[4,"TableElementType","","WebAssembly table element. Can be a function or a scalar…",null,null],[13,"Val","","A scalar type.",10,null],[13,"Func","","A function.",10,null],[5,"translate_module","","Translate a sequence of bytes forming a valid Wasm binary…",null,[[["moduleenvironment"]],[["moduletranslationstate"],["wasmresult",["moduletranslationstate"]]]]],[5,"get_vmctx_value_label","","Special VMContext value label. It is tracked as…",null,[[],["valuelabel"]]],[11,"new","","Creates a new `DummyEnvironment` instance.",0,[[["targetfrontendconfig"],["returnmode"],["bool"]],["self"]]],[11,"func_env","","Return a `DummyFuncEnvironment` for translating functions…",0,[[["self"]],["dummyfuncenvironment"]]],[11,"get_num_func_imports","","Return the number of imported functions within this…",0,[[["self"]],["usize"]]],[11,"get_func_name","","Return the name of the function, if a name for the…",0,[[["funcindex"],["self"]],[["str"],["option",["str"]]]]],[11,"new","","Create a new translator.",11,[[],["self"]]],[11,"translate","","Translate a binary WebAssembly function.",11,[[["usize"],["moduletranslationstate"],["function"],["self"],["fe"]],["wasmresult"]]],[11,"translate_from_reader","","Translate a binary WebAssembly function from a…",11,[[["function"],["moduletranslationstate"],["self"],["fe"],["binaryreader"]],["wasmresult"]]],[11,"reachable","","True if the current translation state expresses reachable…",12,[[["self"]],["bool"]]],[11,"new","","Creates a new empty ModuleTranslationState.",13,[[],["self"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",14,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",14,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",15,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",15,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",16,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",16,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",17,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",17,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",18,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",18,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",19,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",19,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",20,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",20,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",21,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",21,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",22,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",22,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",23,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",23,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",24,[[["u32"]],["self"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",24,[[],["u32"]]],[6,"WasmResult","","A convenient alias for a `Result` that uses `WasmError` as…",null,null],[17,"VERSION","","Version number of this crate.",null,null],[8,"FuncEnvironment","","Environment affecting the translation of a single…",null,null],[11,"is_wasm_parameter","","Is the given parameter of the given function a wasm-level…",25,[[["usize"],["self"],["signature"]],["bool"]]],[11,"is_wasm_return","","Is the given return of the given function a wasm-level…",25,[[["usize"],["self"],["signature"]],["bool"]]],[11,"return_mode","","Should the code be structured to use a single…",25,[[["self"]],["returnmode"]]],[10,"make_global","","Set up the necessary preamble definitions in `func` to…",25,[[["self"],["function"],["globalindex"]],[["wasmresult",["globalvariable"]],["globalvariable"]]]],[10,"make_heap","","Set up the necessary preamble definitions in `func` to…",25,[[["self"],["function"],["memoryindex"]],[["wasmresult",["heap"]],["heap"]]]],[10,"make_table","","Set up the necessary preamble definitions in `func` to…",25,[[["tableindex"],["self"],["function"]],[["table"],["wasmresult",["table"]]]]],[10,"make_indirect_sig","","Set up a signature definition in the preamble of `func`…",25,[[["self"],["function"],["signatureindex"]],[["sigref"],["wasmresult",["sigref"]]]]],[10,"make_direct_func","","Set up an external function definition in the preamble of…",25,[[["self"],["function"],["funcindex"]],[["wasmresult",["funcref"]],["funcref"]]]],[10,"translate_call_indirect","","Translate a `call_indirect` WebAssembly instruction at…",25,[[["tableindex"],["funccursor"],["sigref"],["value"],["table"],["self"],["signatureindex"]],[["wasmresult",["inst"]],["inst"]]]],[11,"translate_call","","Translate a `call` WebAssembly instruction at `pos`.",25,[[["funcindex"],["funccursor"],["self"],["funcref"]],[["wasmresult",["inst"]],["inst"]]]],[10,"translate_memory_grow","","Translate a `memory.grow` WebAssembly instruction.",25,[[["funccursor"],["value"],["self"],["memoryindex"],["heap"]],[["wasmresult",["value"]],["value"]]]],[10,"translate_memory_size","","Translates a `memory.size` WebAssembly instruction.",25,[[["funccursor"],["self"],["memoryindex"],["heap"]],[["wasmresult",["value"]],["value"]]]],[10,"translate_memory_copy","","Translate a `memory.copy` WebAssembly instruction.",25,[[["funccursor"],["value"],["self"],["memoryindex"],["heap"]],["wasmresult"]]],[10,"translate_memory_fill","","Translate a `memory.fill` WebAssembly instruction.",25,[[["funccursor"],["value"],["self"],["memoryindex"],["heap"]],["wasmresult"]]],[10,"translate_memory_init","","Translate a `memory.init` WebAssembly instruction.",25,[[["u32"],["funccursor"],["value"],["self"],["memoryindex"],["heap"]],["wasmresult"]]],[10,"translate_data_drop","","Translate a `data.drop` WebAssembly instruction.",25,[[["self"],["u32"],["funccursor"]],["wasmresult"]]],[10,"translate_table_size","","Translate a `table.size` WebAssembly instruction.",25,[[["tableindex"],["funccursor"],["self"],["table"]],[["wasmresult",["value"]],["value"]]]],[10,"translate_table_grow","","Translate a `table.grow` WebAssembly instruction.",25,[[["u32"],["funccursor"],["value"],["self"]],[["wasmresult",["value"]],["value"]]]],[10,"translate_table_get","","Translate a `table.get` WebAssembly instruction.",25,[[["u32"],["funccursor"],["value"],["self"]],[["wasmresult",["value"]],["value"]]]],[10,"translate_table_set","","Translate a `table.set` WebAssembly instruction.",25,[[["u32"],["funccursor"],["value"],["self"]],["wasmresult"]]],[10,"translate_table_copy","","Translate a `table.copy` WebAssembly instruction.",25,[[["tableindex"],["funccursor"],["value"],["self"],["table"]],["wasmresult"]]],[10,"translate_table_fill","","Translate a `table.fill` WebAssembly instruction.",25,[[["u32"],["funccursor"],["value"],["self"]],["wasmresult"]]],[10,"translate_table_init","","Translate a `table.init` WebAssembly instruction.",25,[[["tableindex"],["u32"],["funccursor"],["value"],["self"],["table"]],["wasmresult"]]],[10,"translate_elem_drop","","Translate a `elem.drop` WebAssembly instruction.",25,[[["self"],["u32"],["funccursor"]],["wasmresult"]]],[10,"translate_ref_func","","Translate a `ref.func` WebAssembly instruction.",25,[[["self"],["u32"],["funccursor"]],[["wasmresult",["value"]],["value"]]]],[10,"translate_custom_global_get","","Translate a `global.get` WebAssembly instruction at `pos`…",25,[[["self"],["globalindex"],["funccursor"]],[["wasmresult",["value"]],["value"]]]],[10,"translate_custom_global_set","","Translate a `global.set` WebAssembly instruction at `pos`…",25,[[["funccursor"],["value"],["self"],["globalindex"]],["wasmresult"]]],[11,"translate_loop_header","","Emit code at the beginning of every wasm loop.",25,[[["self"],["funccursor"]],["wasmresult"]]],[11,"before_translate_operator","","Optional callback for the `FunctionEnvironment` performing…",25,[[["functionbuilder"],["operator"],["functranslationstate"],["self"]],["wasmresult"]]],[11,"after_translate_operator","","Optional callback for the `FunctionEnvironment` performing…",25,[[["functionbuilder"],["operator"],["functranslationstate"],["self"]],["wasmresult"]]],[8,"ModuleEnvironment","","An object satisfying the `ModuleEnvironment` trait can be…",null,null],[11,"reserve_signatures","","Provides the number of signatures up front. By default…",26,[[["self"],["u32"]],["wasmresult"]]],[10,"declare_signature","","Declares a function signature to the environment.",26,[[["self"],["signature"]],["wasmresult"]]],[11,"reserve_imports","","Provides the number of imports up front. By default this…",26,[[["self"],["u32"]],["wasmresult"]]],[10,"declare_func_import","","Declares a function import to the environment.",26,[[["str"],["self"],["signatureindex"]],["wasmresult"]]],[10,"declare_table_import","","Declares a table import to the environment.",26,[[["str"],["self"],["table"]],["wasmresult"]]],[10,"declare_memory_import","","Declares a memory import to the environment.",26,[[["str"],["memory"],["self"]],["wasmresult"]]],[10,"declare_global_import","","Declares a global import to the environment.",26,[[["str"],["global"],["self"]],["wasmresult"]]],[11,"finish_imports","","Notifies the implementation that all imports have been…",26,[[["self"]],["wasmresult"]]],[11,"reserve_func_types","","Provides the number of defined functions up front. By…",26,[[["self"],["u32"]],["wasmresult"]]],[10,"declare_func_type","","Declares the type (signature) of a local function in the…",26,[[["self"],["signatureindex"]],["wasmresult"]]],[11,"reserve_tables","","Provides the number of defined tables up front. By default…",26,[[["self"],["u32"]],["wasmresult"]]],[10,"declare_table","","Declares a table to the environment.",26,[[["self"],["table"]],["wasmresult"]]],[11,"reserve_memories","","Provides the number of defined memories up front. By…",26,[[["self"],["u32"]],["wasmresult"]]],[10,"declare_memory","","Declares a memory to the environment",26,[[["self"],["memory"]],["wasmresult"]]],[11,"reserve_globals","","Provides the number of defined globals up front. By…",26,[[["self"],["u32"]],["wasmresult"]]],[10,"declare_global","","Declares a global to the environment.",26,[[["self"],["global"]],["wasmresult"]]],[11,"reserve_exports","","Provides the number of exports up front. By default this…",26,[[["self"],["u32"]],["wasmresult"]]],[10,"declare_func_export","","Declares a function export to the environment.",26,[[["str"],["self"],["funcindex"]],["wasmresult"]]],[10,"declare_table_export","","Declares a table export to the environment.",26,[[["tableindex"],["self"],["str"]],["wasmresult"]]],[10,"declare_memory_export","","Declares a memory export to the environment.",26,[[["str"],["self"],["memoryindex"]],["wasmresult"]]],[10,"declare_global_export","","Declares a global export to the environment.",26,[[["str"],["self"],["globalindex"]],["wasmresult"]]],[11,"finish_exports","","Notifies the implementation that all exports have been…",26,[[["self"]],["wasmresult"]]],[10,"declare_start_func","","Declares the optional start function.",26,[[["self"],["funcindex"]],["wasmresult"]]],[11,"reserve_table_elements","","Provides the number of element initializers up front. By…",26,[[["self"],["u32"]],["wasmresult"]]],[10,"declare_table_elements","","Fills a declared table with references to functions in the…",26,[[["tableindex"],["option",["globalindex"]],["usize"],["box"],["self"],["globalindex"]],["wasmresult"]]],[10,"declare_passive_element","","Declare a passive element segment.",26,[[["box"],["self"],["elemindex"]],["wasmresult"]]],[11,"reserve_passive_data","","Provides the number of passive data segments up front.",26,[[["self"],["u32"]],["wasmresult"]]],[10,"declare_passive_data","","Declare a passive data segment.",26,[[["dataindex"],["self"]],["wasmresult"]]],[10,"define_function_body","","Provides the contents of a function body.",26,[[["usize"],["moduletranslationstate"],["self"]],["wasmresult"]]],[11,"reserve_data_initializers","","Provides the number of data initializers up front. By…",26,[[["self"],["u32"]],["wasmresult"]]],[10,"declare_data_initialization","","Fills a declared memory with bytes at module instantiation.",26,[[["option",["globalindex"]],["usize"],["self"],["memoryindex"],["globalindex"]],["wasmresult"]]],[11,"declare_func_name","","Declares the name of a function to the environment.",26,[[["str"],["self"],["funcindex"]],["wasmresult"]]],[11,"custom_section","","Indicates that a custom section has been found in the wasm…",26,[[["str"],["self"]],["wasmresult"]]],[8,"TargetEnvironment","","Environment affecting the translation of a WebAssembly.",null,null],[10,"target_config","","Get the information needed to produce Cranelift IR for the…",27,[[["self"]],["targetfrontendconfig"]]],[11,"pointer_type","","Get the Cranelift integer type to use for native pointers.",27,[[["self"]],["type"]]],[11,"pointer_bytes","","Get the size of a native pointer, in bytes.",27,[[["self"]],["u8"]]],[11,"reference_type","","Get the Cranelift reference type to use for native…",27,[[["self"]],["type"]]],[14,"wasm_unsupported","","Return an `Err(WasmError::Unsupported(msg))` where `msg`…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"key","","",23,[[["self"]],["t"]]],[11,"equivalent","","",23,[[["k"],["self"]],["bool"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"key","","",15,[[["self"]],["t"]]],[11,"equivalent","","",15,[[["k"],["self"]],["bool"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into","","",18,[[],["u"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"key","","",18,[[["self"]],["t"]]],[11,"equivalent","","",18,[[["k"],["self"]],["bool"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"key","","",17,[[["self"]],["t"]]],[11,"equivalent","","",17,[[["k"],["self"]],["bool"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"key","","",16,[[["self"]],["t"]]],[11,"equivalent","","",16,[[["k"],["self"]],["bool"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"key","","",24,[[["self"]],["t"]]],[11,"equivalent","","",24,[[["k"],["self"]],["bool"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"key","","",14,[[["self"]],["t"]]],[11,"equivalent","","",14,[[["k"],["self"]],["bool"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"key","","",20,[[["self"]],["t"]]],[11,"equivalent","","",20,[[["k"],["self"]],["bool"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into","","",21,[[],["u"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"key","","",21,[[["self"]],["t"]]],[11,"equivalent","","",21,[[["k"],["self"]],["bool"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into","","",22,[[],["u"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"key","","",22,[[["self"]],["t"]]],[11,"equivalent","","",22,[[["k"],["self"]],["bool"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"key","","",19,[[["self"]],["t"]]],[11,"equivalent","","",19,[[["k"],["self"]],["bool"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"equivalent","","",6,[[["k"],["self"]],["bool"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"target_config","","",0,[[["self"]],["targetfrontendconfig"]]],[11,"declare_signature","","",0,[[["self"],["signature"]],["wasmresult"]]],[11,"declare_func_import","","",0,[[["str"],["self"],["signatureindex"]],["wasmresult"]]],[11,"declare_func_type","","",0,[[["self"],["signatureindex"]],["wasmresult"]]],[11,"declare_global","","",0,[[["self"],["global"]],["wasmresult"]]],[11,"declare_global_import","","",0,[[["str"],["global"],["self"]],["wasmresult"]]],[11,"declare_table","","",0,[[["self"],["table"]],["wasmresult"]]],[11,"declare_table_import","","",0,[[["str"],["self"],["table"]],["wasmresult"]]],[11,"declare_table_elements","","",0,[[["tableindex"],["option",["globalindex"]],["usize"],["box"],["self"],["globalindex"]],["wasmresult"]]],[11,"declare_passive_element","","",0,[[["box"],["self"],["elemindex"]],["wasmresult"]]],[11,"declare_passive_data","","",0,[[["dataindex"],["self"]],["wasmresult"]]],[11,"declare_memory","","",0,[[["self"],["memory"]],["wasmresult"]]],[11,"declare_memory_import","","",0,[[["str"],["memory"],["self"]],["wasmresult"]]],[11,"declare_data_initialization","","",0,[[["option",["globalindex"]],["usize"],["self"],["memoryindex"],["globalindex"]],["wasmresult"]]],[11,"declare_func_export","","",0,[[["str"],["self"],["funcindex"]],["wasmresult"]]],[11,"declare_table_export","","",0,[[["tableindex"],["self"],["str"]],["wasmresult"]]],[11,"declare_memory_export","","",0,[[["str"],["self"],["memoryindex"]],["wasmresult"]]],[11,"declare_global_export","","",0,[[["str"],["self"],["globalindex"]],["wasmresult"]]],[11,"declare_start_func","","",0,[[["self"],["funcindex"]],["wasmresult"]]],[11,"define_function_body","","",0,[[["usize"],["moduletranslationstate"],["self"]],["wasmresult"]]],[11,"declare_func_name","","",0,[[["str"],["self"],["funcindex"]],["wasmresult"]]],[11,"from","","Convert from a `BinaryReaderError` to a `WasmError`.",7,[[["binaryreadererror"]],["self"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"eq","","",6,[[["returnmode"],["self"]],["bool"]]],[11,"eq","","",14,[[["funcindex"],["self"]],["bool"]]],[11,"ne","","",14,[[["funcindex"],["self"]],["bool"]]],[11,"eq","","",15,[[["definedfuncindex"],["self"]],["bool"]]],[11,"ne","","",15,[[["definedfuncindex"],["self"]],["bool"]]],[11,"eq","","",16,[[["self"],["definedtableindex"]],["bool"]]],[11,"ne","","",16,[[["self"],["definedtableindex"]],["bool"]]],[11,"eq","","",17,[[["definedmemoryindex"],["self"]],["bool"]]],[11,"ne","","",17,[[["definedmemoryindex"],["self"]],["bool"]]],[11,"eq","","",18,[[["definedglobalindex"],["self"]],["bool"]]],[11,"ne","","",18,[[["definedglobalindex"],["self"]],["bool"]]],[11,"eq","","",19,[[["self"],["tableindex"]],["bool"]]],[11,"ne","","",19,[[["self"],["tableindex"]],["bool"]]],[11,"eq","","",20,[[["self"],["globalindex"]],["bool"]]],[11,"ne","","",20,[[["self"],["globalindex"]],["bool"]]],[11,"eq","","",21,[[["memoryindex"],["self"]],["bool"]]],[11,"ne","","",21,[[["memoryindex"],["self"]],["bool"]]],[11,"eq","","",22,[[["self"],["signatureindex"]],["bool"]]],[11,"ne","","",22,[[["self"],["signatureindex"]],["bool"]]],[11,"eq","","",23,[[["dataindex"],["self"]],["bool"]]],[11,"ne","","",23,[[["dataindex"],["self"]],["bool"]]],[11,"eq","","",24,[[["self"],["elemindex"]],["bool"]]],[11,"ne","","",24,[[["self"],["elemindex"]],["bool"]]],[11,"cmp","","",14,[[["funcindex"],["self"]],["ordering"]]],[11,"cmp","","",15,[[["definedfuncindex"],["self"]],["ordering"]]],[11,"cmp","","",16,[[["self"],["definedtableindex"]],["ordering"]]],[11,"cmp","","",17,[[["definedmemoryindex"],["self"]],["ordering"]]],[11,"cmp","","",18,[[["definedglobalindex"],["self"]],["ordering"]]],[11,"cmp","","",19,[[["self"],["tableindex"]],["ordering"]]],[11,"cmp","","",20,[[["self"],["globalindex"]],["ordering"]]],[11,"cmp","","",21,[[["memoryindex"],["self"]],["ordering"]]],[11,"cmp","","",22,[[["self"],["signatureindex"]],["ordering"]]],[11,"cmp","","",23,[[["dataindex"],["self"]],["ordering"]]],[11,"cmp","","",24,[[["self"],["elemindex"]],["ordering"]]],[11,"partial_cmp","","",14,[[["funcindex"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",14,[[["funcindex"],["self"]],["bool"]]],[11,"le","","",14,[[["funcindex"],["self"]],["bool"]]],[11,"gt","","",14,[[["funcindex"],["self"]],["bool"]]],[11,"ge","","",14,[[["funcindex"],["self"]],["bool"]]],[11,"partial_cmp","","",15,[[["definedfuncindex"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",15,[[["definedfuncindex"],["self"]],["bool"]]],[11,"le","","",15,[[["definedfuncindex"],["self"]],["bool"]]],[11,"gt","","",15,[[["definedfuncindex"],["self"]],["bool"]]],[11,"ge","","",15,[[["definedfuncindex"],["self"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["definedtableindex"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",16,[[["self"],["definedtableindex"]],["bool"]]],[11,"le","","",16,[[["self"],["definedtableindex"]],["bool"]]],[11,"gt","","",16,[[["self"],["definedtableindex"]],["bool"]]],[11,"ge","","",16,[[["self"],["definedtableindex"]],["bool"]]],[11,"partial_cmp","","",17,[[["definedmemoryindex"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",17,[[["definedmemoryindex"],["self"]],["bool"]]],[11,"le","","",17,[[["definedmemoryindex"],["self"]],["bool"]]],[11,"gt","","",17,[[["definedmemoryindex"],["self"]],["bool"]]],[11,"ge","","",17,[[["definedmemoryindex"],["self"]],["bool"]]],[11,"partial_cmp","","",18,[[["definedglobalindex"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",18,[[["definedglobalindex"],["self"]],["bool"]]],[11,"le","","",18,[[["definedglobalindex"],["self"]],["bool"]]],[11,"gt","","",18,[[["definedglobalindex"],["self"]],["bool"]]],[11,"ge","","",18,[[["definedglobalindex"],["self"]],["bool"]]],[11,"partial_cmp","","",19,[[["self"],["tableindex"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",19,[[["self"],["tableindex"]],["bool"]]],[11,"le","","",19,[[["self"],["tableindex"]],["bool"]]],[11,"gt","","",19,[[["self"],["tableindex"]],["bool"]]],[11,"ge","","",19,[[["self"],["tableindex"]],["bool"]]],[11,"partial_cmp","","",20,[[["self"],["globalindex"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",20,[[["self"],["globalindex"]],["bool"]]],[11,"le","","",20,[[["self"],["globalindex"]],["bool"]]],[11,"gt","","",20,[[["self"],["globalindex"]],["bool"]]],[11,"ge","","",20,[[["self"],["globalindex"]],["bool"]]],[11,"partial_cmp","","",21,[[["memoryindex"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",21,[[["memoryindex"],["self"]],["bool"]]],[11,"le","","",21,[[["memoryindex"],["self"]],["bool"]]],[11,"gt","","",21,[[["memoryindex"],["self"]],["bool"]]],[11,"ge","","",21,[[["memoryindex"],["self"]],["bool"]]],[11,"partial_cmp","","",22,[[["self"],["signatureindex"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",22,[[["self"],["signatureindex"]],["bool"]]],[11,"le","","",22,[[["self"],["signatureindex"]],["bool"]]],[11,"gt","","",22,[[["self"],["signatureindex"]],["bool"]]],[11,"ge","","",22,[[["self"],["signatureindex"]],["bool"]]],[11,"partial_cmp","","",23,[[["dataindex"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",23,[[["dataindex"],["self"]],["bool"]]],[11,"le","","",23,[[["dataindex"],["self"]],["bool"]]],[11,"gt","","",23,[[["dataindex"],["self"]],["bool"]]],[11,"ge","","",23,[[["dataindex"],["self"]],["bool"]]],[11,"partial_cmp","","",24,[[["self"],["elemindex"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",24,[[["self"],["elemindex"]],["bool"]]],[11,"le","","",24,[[["self"],["elemindex"]],["bool"]]],[11,"gt","","",24,[[["self"],["elemindex"]],["bool"]]],[11,"ge","","",24,[[["self"],["elemindex"]],["bool"]]],[11,"hash","","",14,[[["self"],["__h"]]]],[11,"hash","","",15,[[["self"],["__h"]]]],[11,"hash","","",16,[[["self"],["__h"]]]],[11,"hash","","",17,[[["self"],["__h"]]]],[11,"hash","","",18,[[["self"],["__h"]]]],[11,"hash","","",19,[[["self"],["__h"]]]],[11,"hash","","",20,[[["self"],["__h"]]]],[11,"hash","","",21,[[["self"],["__h"]]]],[11,"hash","","",22,[[["self"],["__h"]]]],[11,"hash","","",23,[[["self"],["__h"]]]],[11,"hash","","",24,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"clone","","",4,[[["self"]],["globalvariable"]]],[11,"clone","","",6,[[["self"]],["returnmode"]]],[11,"clone","","",14,[[["self"]],["funcindex"]]],[11,"clone","","",15,[[["self"]],["definedfuncindex"]]],[11,"clone","","",16,[[["self"]],["definedtableindex"]]],[11,"clone","","",17,[[["self"]],["definedmemoryindex"]]],[11,"clone","","",18,[[["self"]],["definedglobalindex"]]],[11,"clone","","",19,[[["self"]],["tableindex"]]],[11,"clone","","",20,[[["self"]],["globalindex"]]],[11,"clone","","",21,[[["self"]],["memoryindex"]]],[11,"clone","","",22,[[["self"]],["signatureindex"]]],[11,"clone","","",23,[[["self"]],["dataindex"]]],[11,"clone","","",24,[[["self"]],["elemindex"]]],[11,"clone","","",1,[[["self"]],["global"]]],[11,"clone","","",9,[[["self"]],["globalinit"]]],[11,"clone","","",3,[[["self"]],["table"]]],[11,"clone","","",10,[[["self"]],["tableelementtype"]]],[11,"clone","","",2,[[["self"]],["memory"]]],[11,"deserialize","","",14,[[["__d"]],["result"]]],[11,"serialize","","",14,[[["self"],["__s"]],["result"]]],[11,"new","","",14,[[["usize"]],["self"]]],[11,"index","","",14,[[],["usize"]]],[11,"new","","",15,[[["usize"]],["self"]]],[11,"index","","",15,[[],["usize"]]],[11,"new","","",16,[[["usize"]],["self"]]],[11,"index","","",16,[[],["usize"]]],[11,"new","","",17,[[["usize"]],["self"]]],[11,"index","","",17,[[],["usize"]]],[11,"new","","",18,[[["usize"]],["self"]]],[11,"index","","",18,[[],["usize"]]],[11,"new","","",19,[[["usize"]],["self"]]],[11,"index","","",19,[[],["usize"]]],[11,"new","","",20,[[["usize"]],["self"]]],[11,"index","","",20,[[],["usize"]]],[11,"new","","",21,[[["usize"]],["self"]]],[11,"index","","",21,[[],["usize"]]],[11,"new","","",22,[[["usize"]],["self"]]],[11,"index","","",22,[[],["usize"]]],[11,"new","","",23,[[["usize"]],["self"]]],[11,"index","","",23,[[],["usize"]]],[11,"new","","",24,[[["usize"]],["self"]]],[11,"index","","",24,[[],["usize"]]],[11,"reserved_value","","",14,[[],["funcindex"]]],[11,"reserved_value","","",15,[[],["definedfuncindex"]]],[11,"reserved_value","","",16,[[],["definedtableindex"]]],[11,"reserved_value","","",17,[[],["definedmemoryindex"]]],[11,"reserved_value","","",18,[[],["definedglobalindex"]]],[11,"reserved_value","","",19,[[],["tableindex"]]],[11,"reserved_value","","",20,[[],["globalindex"]]],[11,"reserved_value","","",21,[[],["memoryindex"]]],[11,"reserved_value","","",22,[[],["signatureindex"]]],[11,"reserved_value","","",23,[[],["dataindex"]]],[11,"reserved_value","","",24,[[],["elemindex"]]],[11,"pointer_type","","Get the Cranelift integer type to use for native pointers.",27,[[["self"]],["type"]]],[11,"pointer_bytes","","Get the size of a native pointer, in bytes.",27,[[["self"]],["u8"]]],[11,"reference_type","","Get the Cranelift reference type to use for native…",27,[[["self"]],["type"]]],[11,"is_wasm_parameter","","Is the given parameter of the given function a wasm-level…",25,[[["usize"],["self"],["signature"]],["bool"]]],[11,"is_wasm_return","","Is the given return of the given function a wasm-level…",25,[[["usize"],["self"],["signature"]],["bool"]]],[11,"return_mode","","Should the code be structured to use a single…",25,[[["self"]],["returnmode"]]],[11,"translate_call","","Translate a `call` WebAssembly instruction at `pos`.",25,[[["funcindex"],["funccursor"],["self"],["funcref"]],[["wasmresult",["inst"]],["inst"]]]],[11,"translate_loop_header","","Emit code at the beginning of every wasm loop.",25,[[["self"],["funccursor"]],["wasmresult"]]],[11,"before_translate_operator","","Optional callback for the `FunctionEnvironment` performing…",25,[[["functionbuilder"],["operator"],["functranslationstate"],["self"]],["wasmresult"]]],[11,"after_translate_operator","","Optional callback for the `FunctionEnvironment` performing…",25,[[["functionbuilder"],["operator"],["functranslationstate"],["self"]],["wasmresult"]]],[11,"reserve_signatures","","Provides the number of signatures up front. By default…",26,[[["self"],["u32"]],["wasmresult"]]],[11,"reserve_imports","","Provides the number of imports up front. By default this…",26,[[["self"],["u32"]],["wasmresult"]]],[11,"finish_imports","","Notifies the implementation that all imports have been…",26,[[["self"]],["wasmresult"]]],[11,"reserve_func_types","","Provides the number of defined functions up front. By…",26,[[["self"],["u32"]],["wasmresult"]]],[11,"reserve_tables","","Provides the number of defined tables up front. By default…",26,[[["self"],["u32"]],["wasmresult"]]],[11,"reserve_memories","","Provides the number of defined memories up front. By…",26,[[["self"],["u32"]],["wasmresult"]]],[11,"reserve_globals","","Provides the number of defined globals up front. By…",26,[[["self"],["u32"]],["wasmresult"]]],[11,"reserve_exports","","Provides the number of exports up front. By default this…",26,[[["self"],["u32"]],["wasmresult"]]],[11,"finish_exports","","Notifies the implementation that all exports have been…",26,[[["self"]],["wasmresult"]]],[11,"reserve_table_elements","","Provides the number of element initializers up front. By…",26,[[["self"],["u32"]],["wasmresult"]]],[11,"reserve_passive_data","","Provides the number of passive data segments up front.",26,[[["self"],["u32"]],["wasmresult"]]],[11,"reserve_data_initializers","","Provides the number of data initializers up front. By…",26,[[["self"],["u32"]],["wasmresult"]]],[11,"declare_func_name","","Declares the name of a function to the environment.",26,[[["str"],["self"],["funcindex"]],["wasmresult"]]],[11,"custom_section","","Indicates that a custom section has been found in the wasm…",26,[[["str"],["self"]],["wasmresult"]]]],"p":[[3,"DummyEnvironment"],[3,"Global"],[3,"Memory"],[3,"Table"],[4,"GlobalVariable"],[13,"Memory"],[4,"ReturnMode"],[4,"WasmError"],[13,"InvalidWebAssembly"],[4,"GlobalInit"],[4,"TableElementType"],[3,"FuncTranslator"],[3,"FuncTranslationState"],[3,"ModuleTranslationState"],[3,"FuncIndex"],[3,"DefinedFuncIndex"],[3,"DefinedTableIndex"],[3,"DefinedMemoryIndex"],[3,"DefinedGlobalIndex"],[3,"TableIndex"],[3,"GlobalIndex"],[3,"MemoryIndex"],[3,"SignatureIndex"],[3,"DataIndex"],[3,"ElemIndex"],[8,"FuncEnvironment"],[8,"ModuleEnvironment"],[8,"TargetEnvironment"]]};
searchIndex["fib"] = {"doc":"","i":[[5,"fib","fib","",null,[[["u32"]],["u32"]]]],"p":[]};
searchIndex["lightbeam"] = {"doc":"","i":[[3,"CodeGenSession","lightbeam","",null,null],[12,"module_context","","",0,null],[12,"op_offset_map","","",0,null],[3,"ExecutableModule","","",null,null],[3,"TranslatedModule","","",null,null],[4,"ExecutionError","","",null,null],[13,"FuncIndexOutOfBounds","","",1,null],[13,"TypeMismatch","","",1,null],[5,"translate_function","","",null,[[["functionbody"],["u32"],["relocsink"],["codegensession"]],[["result",["error"]],["error"]]]],[5,"translate","","",null,[[],[["error"],["result",["executablemodule","error"]],["executablemodule"]]]],[11,"new","","",0,[[["m"],["u32"]],["self"]]],[11,"new_context","","",0,[[["relocsink"],["self"],["u32"]],["context"]]],[11,"into_translated_code_section","","",0,[[],[["result",["translatedcodesection","error"]],["error"],["translatedcodesection"]]]],[11,"instantiate","","",2,[[],["executablemodule"]]],[11,"disassemble","","",2,[[["self"]]]],[11,"execute_func_unchecked","","Executes the function identified by `func_idx`.",3,[[["u32"],["self"],["functionargs"]],["t"]]],[11,"execute_func","","",3,[[["typelist"],["u32"],["self"],["functionargs"]],[["typelist"],["executionerror"],["result",["executionerror"]]]]],[11,"disassemble","","",3,[[["self"]]]],[8,"ModuleContext","","",null,null],[16,"Signature","","",4,null],[16,"GlobalType","","",4,null],[10,"vmctx_vmglobal_definition","","",4,[[["u32"],["self"]],["u32"]]],[10,"vmctx_vmglobal_import_from","","",4,[[["u32"],["self"]],["u32"]]],[10,"vmctx_vmmemory_import_from","","",4,[[["u32"],["self"]],["u32"]]],[10,"vmctx_vmmemory_definition","","",4,[[["u32"],["self"]],["u32"]]],[10,"vmctx_vmmemory_definition_base","","",4,[[["u32"],["self"]],["u32"]]],[10,"vmctx_vmmemory_definition_current_length","","",4,[[["u32"],["self"]],["u32"]]],[10,"vmmemory_definition_base","","",4,[[["self"]],["u8"]]],[10,"vmmemory_definition_current_length","","",4,[[["self"]],["u8"]]],[10,"vmctx_vmtable_import_from","","",4,[[["u32"],["self"]],["u32"]]],[10,"vmctx_vmtable_definition","","",4,[[["u32"],["self"]],["u32"]]],[10,"vmctx_vmtable_definition_base","","",4,[[["u32"],["self"]],["u32"]]],[10,"vmctx_vmtable_definition_current_elements","","",4,[[["u32"],["self"]],["u32"]]],[10,"vmctx_vmfunction_import_body","","",4,[[["u32"],["self"]],["u32"]]],[10,"vmctx_vmfunction_import_vmctx","","",4,[[["u32"],["self"]],["u32"]]],[10,"vmtable_definition_base","","",4,[[["self"]],["u8"]]],[10,"vmtable_definition_current_elements","","",4,[[["self"]],["u8"]]],[10,"vmctx_vmshared_signature_id","","",4,[[["u32"],["self"]],["u32"]]],[10,"vmcaller_checked_anyfunc_type_index","","",4,[[["self"]],["u8"]]],[10,"vmcaller_checked_anyfunc_func_ptr","","",4,[[["self"]],["u8"]]],[10,"vmcaller_checked_anyfunc_vmctx","","",4,[[["self"]],["u8"]]],[10,"size_of_vmcaller_checked_anyfunc","","",4,[[["self"]],["u8"]]],[10,"defined_table_index","","",4,[[["u32"],["self"]],[["u32"],["option",["u32"]]]]],[10,"defined_memory_index","","",4,[[["u32"],["self"]],[["u32"],["option",["u32"]]]]],[10,"defined_global_index","","",4,[[["u32"],["self"]],[["u32"],["option",["u32"]]]]],[10,"global_type","","",4,[[["u32"],["self"]]]],[10,"func_type_index","","",4,[[["u32"],["self"]],["u32"]]],[10,"signature","","",4,[[["u32"],["self"]]]],[10,"func_index","","",4,[[["u32"],["self"]],["u32"]]],[10,"defined_func_index","","",4,[[["u32"],["self"]],[["u32"],["option",["u32"]]]]],[11,"defined_func_type","","",4,[[["u32"],["self"]]]],[11,"func_type","","",4,[[["u32"],["self"]]]],[11,"emit_memory_bounds_check","","",4,[[["self"]],["bool"]]],[8,"Signature","","",null,null],[16,"Type","","",5,null],[10,"params","","",5,[[["self"]]]],[10,"returns","","",5,[[["self"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"equivalent","","",1,[[["k"],["self"]],["bool"]]],[11,"clone_any","","",1,[[["self"]],[["box",["cloneany"]],["cloneany"]]]],[11,"clone_any_send","","",1,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_sync","","",1,[[["self"]],[["box",["cloneany"]],["cloneany"]]]],[11,"clone_any_send_sync","","",1,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone","","",1,[[["self"]],["executionerror"]]],[11,"default","","",2,[[],["translatedmodule"]]],[11,"eq","","",1,[[["executionerror"],["self"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"defined_func_type","","",4,[[["u32"],["self"]]]],[11,"func_type","","",4,[[["u32"],["self"]]]],[11,"emit_memory_bounds_check","","",4,[[["self"]],["bool"]]]],"p":[[3,"CodeGenSession"],[4,"ExecutionError"],[3,"TranslatedModule"],[3,"ExecutableModule"],[8,"ModuleContext"],[8,"Signature"]]};
searchIndex["proc_macro2"] = {"doc":"A wrapper around the procedural macro API of the…","i":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a…",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"Span","","A region of source code, along with macro expansion…",null,null],[3,"Group","","A delimited token stream.",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`,…",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal…",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`),…",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees…",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",0,null],[13,"Ident","","An identifier.",0,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number…",0,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",1,null],[13,"Brace","","`{ ... }`",1,null],[13,"Bracket","","`[ ... ]`",1,null],[13,"None","","`Ø ... Ø`",1,null],[4,"Spacing","","Whether an `Punct` is followed immediately by another…",null,null],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,null],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'` is `Joint` in `'#`.",2,null],[0,"token_stream","","Public implementation details for the `TokenStream` type,…",null,null],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",null,null],[11,"new","proc_macro2","Returns an empty `TokenStream` containing no token trees.",3,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",3,[[["self"]],["bool"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",4,[[],["span"]]],[11,"unwrap","","Convert `proc_macro2::Span` to `proc_macro::Span`.",4,[[],["span"]]],[11,"join","","Create a new span encompassing `self` and `other`.",4,[[["self"],["span"]],[["span"],["option",["span"]]]]],[11,"span","","Returns the span of this tree, delegating to the `span`…",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"new","","Creates a new `Group` with the given delimiter and token…",5,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",5,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in…",5,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream,…",5,[[["self"]],["span"]]],[11,"span_open","","Returns the span pointing to the opening delimiter of this…",5,[[["self"]],["span"]]],[11,"span_close","","Returns the span pointing to the closing delimiter of this…",5,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not…",5,[[["self"],["span"]]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",6,[[["spacing"],["char"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",6,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character,…",6,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",6,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",6,[[["self"],["span"]]]],[11,"new","","Creates a new `Ident` with the given `string` as well as…",7,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its…",7,[[["self"],["span"]]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u64"]],["literal"]]],[11,"u128_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u128"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i64"]],["literal"]]],[11,"i128_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i128"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u64"]],["literal"]]],[11,"u128_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u128"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i64"]],["literal"]]],[11,"i128_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i128"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","Creates a new unsuffixed floating-point literal.",8,[[["f64"]],["literal"]]],[11,"f64_suffixed","","Creates a new suffixed floating-point literal.",8,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",8,[[["f32"]],["literal"]]],[11,"f32_suffixed","","Creates a new suffixed floating-point literal.",8,[[["f32"]],["literal"]]],[11,"string","","String literal.",8,[[["str"]],["literal"]]],[11,"character","","Character literal.",8,[[["char"]],["literal"]]],[11,"byte_string","","Byte string literal.",8,[[],["literal"]]],[11,"span","","Returns the span encompassing this literal.",8,[[["self"]],["span"]]],[11,"set_span","","Configures the span associated for this literal.",8,[[["self"],["span"]]]],[11,"subspan","","Returns a `Span` that is a subset of `self.span()`…",8,[[["rangebounds",["usize"]],["self"],["usize"]],[["span"],["option",["span"]]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","proc_macro2::token_stream","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"into_iter","","",10,[[],["i"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","proc_macro2","",4,[[["span"]],["span"]]],[11,"from","","",3,[[["tokenstream"]],["tokenstream"]]],[11,"from","","",3,[[["tokentree"]],["self"]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"extend","","",3,[[["self"],["intoiterator"]]]],[11,"extend","","",3,[[["self"],["intoiterator"]]]],[11,"into_iter","","",3,[[],["intoiter"]]],[11,"next","proc_macro2::token_stream","",10,[[["self"]],[["option",["tokentree"]],["tokentree"]]]],[11,"clone","proc_macro2","",3,[[["self"]],["tokenstream"]]],[11,"clone","","",4,[[["self"]],["span"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"clone","","",5,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"clone","","",6,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"clone","","",7,[[["self"]],["ident"]]],[11,"clone","","",8,[[["self"]],["literal"]]],[11,"clone","proc_macro2::token_stream","",10,[[["self"]],["intoiter"]]],[11,"default","proc_macro2","",3,[[],["self"]]],[11,"cmp","","",7,[[["ident"],["self"]],["ordering"]]],[11,"eq","","",1,[[["delimiter"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"eq","","",7,[[["ident"],["self"]],["bool"]]],[11,"eq","","",7,[[["t"],["self"]],["bool"]]],[11,"partial_cmp","","",7,[[["ident"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","proc_macro2::token_stream","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","proc_macro2","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"hash","","",7,[[["self"],["h"]]]],[11,"from_iter","","",3,[[["intoiterator"]],["self"]]],[11,"from_iter","","",3,[[["intoiterator"]],["self"]]],[11,"from_str","","",3,[[["str"]],[["tokenstream"],["lexerror"],["result",["tokenstream","lexerror"]]]]]],"p":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"TokenStream"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"],[3,"LexError"],[3,"IntoIter"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust…","i":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending…",null,null],[10,"append","","For use by `ToTokens` implementations.",0,[[["u"],["self"]]]],[10,"append_all","","For use by `ToTokens` implementations.",0,[[["self"],["i"]]]],[10,"append_separated","","For use by `ToTokens` implementations.",0,[[["u"],["self"],["i"]]]],[10,"append_terminated","","For use by `ToTokens` implementations.",0,[[["u"],["self"],["i"]]]],[8,"IdentFragment","","Specialized formatting trait used by `format_ident!`.",null,null],[10,"fmt","","Format this value as an identifier fragment.",1,[[["formatter"],["self"]],["result"]]],[11,"span","","Span associated with this `IdentFragment`.",1,[[["self"]],[["option",["span"]],["span"]]]],[8,"ToTokens","","Types that can be interpolated inside a `quote!` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `TokenStream`.",2,[[["tokenstream"],["self"]]]],[11,"to_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[["self"]],["tokenstream"]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[],["tokenstream"]]],[14,"format_ident","","Formatting macro for constructing `Ident`s.",null,null],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens…",null,null],[11,"span","","Span associated with this `IdentFragment`.",1,[[["self"]],[["option",["span"]],["span"]]]],[11,"to_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[["self"]],["tokenstream"]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[],["tokenstream"]]]],"p":[[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]};
searchIndex["run_examples"] = {"doc":"","i":[[5,"main","run_examples","",null,[[]]],[5,"run","","",null,[[["command"]]]]],"p":[]};
searchIndex["serde"] = {"doc":"Serde","i":[[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any…",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",0,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32`…",0,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or…",0,null],[13,"Float","","The input contained a floating point `f32` or `f64` that…",0,null],[13,"Char","","The input contained a `char` that was not expected.",0,null],[13,"Str","","The input contained a `&str` or `String` that was not…",0,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not…",0,null],[13,"Unit","","The input contained a unit `()` that was not expected.",0,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,null],[13,"Seq","","The input contained a sequence that was not expected.",0,null],[13,"Map","","The input contained a map that was not expected.",0,null],[13,"Enum","","The input contained an enum that was not expected.",0,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,null],[13,"Other","","A message stating what uncategorized thing the input…",0,null],[0,"value","","Building blocks for deserializing basic values using the…",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can…",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"I128Deserializer","","A deserializer holding an `i128`.",null,null],[3,"U128Deserializer","","A deserializer holding a `u128`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to…",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to…",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"new","","Create a new borrowed deserializer from the given string.",1,[[["str"]],["borrowedstrdeserializer"]]],[11,"new","","Create a new borrowed deserializer from the given byte…",2,[[],["borrowedbytesdeserializer"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",3,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a…",3,[[],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",4,[[["a"]],["self"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",5,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a…",5,[[],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",6,[[["a"]],["self"]]],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to…",null,null],[10,"custom","","Raised when there is general error when deserializing a…",7,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from…",7,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right…",7,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input…",7,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant…",7,[[["str"]],["self"]]],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field…",7,[[["str"]],["self"]]],[11,"missing_field","","Raised when a `Deserialize` struct type expected to…",7,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than…",7,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a…",null,null],[10,"fmt","","Format an explanation of what data was being expected.…",8,[[["formatter"],["self"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data…",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",9,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without…",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the…",null,null],[16,"Value","","The type produced by using this seed.",10,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize`…",10,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",11,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the…",11,[[["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool`…",11,[[["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",11,[[["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16`…",11,[[["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32`…",11,[[["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64`…",11,[[["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128`…",11,[[["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",11,[[["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",11,[[["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",11,[[["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",11,[[["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128`…",11,[[["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",11,[[["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",11,[[["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char`…",11,[[["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string…",11,[[["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string…",11,[[["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array…",11,[[["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array…",11,[[["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional…",11,[[["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",11,[[["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence…",11,[[["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence…",11,[[["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple…",11,[[["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of…",11,[[["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of…",11,[[["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a…",11,[[["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should…",11,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a…",null,null],[16,"Value","","The value produced by this visitor.",12,null],[10,"expecting","","Format a message stating what data this Visitor expects to…",12,[[["formatter"],["self"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",12,[[["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",12,[[["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",12,[[["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",12,[[["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",12,[[["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",12,[[["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",12,[[["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",12,[[["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",12,[[["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",12,[[["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",12,[[["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",12,[[["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",12,[[["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",12,[[["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is…",12,[[["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as…",12,[[["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is…",12,[[["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte…",12,[[],["result"]]],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as…",12,[[],["result"]]],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte…",12,[[["vec",["u8"]],["u8"]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",12,[[],["result"]]],[11,"visit_some","","The input contains an optional that is present.",12,[[["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",12,[[],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",12,[[["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",12,[[["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",12,[[["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",12,[[["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",13,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the…",13,[[["self"],["t"]],[["option"],["result",["option"]]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the…",13,[[["self"]],[["result",["option"]],["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence,…",13,[[["self"]],[["usize"],["option",["usize"]]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",14,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map,…",14,[[["self"],["k"]],[["result",["option"]],["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",14,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next…",14,[[["self"],["k"],["v"]],[["result",["option"]],["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map,…",14,[[["self"]],[["result",["option"]],["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",14,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next…",14,[[["self"]],[["option"],["result",["option"]]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if…",14,[[["self"]],[["usize"],["option",["usize"]]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",15,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content…",15,null],[10,"variant_seed","","`variant` is called to identify which variant to…",15,[[["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to…",15,[[],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",16,null],[10,"unit_variant","","Called when deserializing a variant with no values.",16,[[],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",16,[[["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",16,[[],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",16,[[["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",16,[[["v"]],["result"]]],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from…",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",17,null],[10,"into_deserializer","","Convert this value into a deserializer.",17,[[]]],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not…",null,null],[8,"Error","","Trait used by `Serialize` implementations to generically…",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any…",18,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data…",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",19,[[["s"],["self"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure…",null,null],[16,"Ok","","The output type produced by this `Serializer` during…",20,null],[16,"Error","","The error type when some error occurs during serialization.",20,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the…",20,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the…",20,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for…",20,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for…",20,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the…",20,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing…",20,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for…",20,null],[10,"serialize_bool","","Serialize a `bool` value.",20,[[["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",20,[[["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",20,[[["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",20,[[["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",20,[[["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",20,[[["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",20,[[["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",20,[[["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",20,[[["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",20,[[["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",20,[[["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",20,[[["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",20,[[["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",20,[[["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",20,[[["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",20,[[],["result"]]],[10,"serialize_none","","Serialize a [`None`] value.",20,[[],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",20,[[["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",20,[[],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or…",20,[[["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",20,[[["str"],["u32"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",20,[[["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8)…",20,[[["str"],["u32"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call…",20,[[["usize"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose…",20,[[["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8,…",20,[[["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E…",20,[[["str"],["u32"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by…",20,[[["usize"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g:…",20,[[["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E…",20,[[["str"],["u32"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",20,[[["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",20,[[["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of…",20,[[["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should…",20,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",21,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",21,null],[10,"serialize_element","","Serialize a sequence element.",21,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",21,[[],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",22,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",22,null],[10,"serialize_element","","Serialize a tuple element.",22,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",22,[[],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",23,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",23,null],[10,"serialize_field","","Serialize a tuple struct field.",23,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",23,[[],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",24,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",24,null],[10,"serialize_field","","Serialize a tuple variant field.",24,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",24,[[],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",25,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",25,null],[10,"serialize_key","","Serialize a map key.",25,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",25,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",25,[[["k"],["self"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",25,[[],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",26,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",26,null],[10,"serialize_field","","Serialize a struct field.",26,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",26,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",26,[[],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",27,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",27,null],[10,"serialize_field","","Serialize a struct variant field.",27,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",27,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",27,[[],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data…",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",9,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",11,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the…",11,[[["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool`…",11,[[["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",11,[[["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16`…",11,[[["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32`…",11,[[["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64`…",11,[[["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128`…",11,[[["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",11,[[["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",11,[[["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",11,[[["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",11,[[["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128`…",11,[[["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",11,[[["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",11,[[["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char`…",11,[[["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string…",11,[[["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string…",11,[[["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array…",11,[[["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array…",11,[[["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional…",11,[[["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",11,[[["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence…",11,[[["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence…",11,[[["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple…",11,[[["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of…",11,[[["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of…",11,[[["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a…",11,[[["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should…",11,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data…",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",19,[[["s"],["self"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure…",null,null],[16,"Ok","","The output type produced by this `Serializer` during…",20,null],[16,"Error","","The error type when some error occurs during serialization.",20,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the…",20,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the…",20,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for…",20,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for…",20,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the…",20,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing…",20,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for…",20,null],[10,"serialize_bool","","Serialize a `bool` value.",20,[[["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",20,[[["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",20,[[["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",20,[[["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",20,[[["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",20,[[["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",20,[[["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",20,[[["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",20,[[["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",20,[[["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",20,[[["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",20,[[["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",20,[[["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",20,[[["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",20,[[["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",20,[[],["result"]]],[10,"serialize_none","","Serialize a [`None`] value.",20,[[],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",20,[[["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",20,[[],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or…",20,[[["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",20,[[["str"],["u32"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",20,[[["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8)…",20,[[["str"],["u32"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call…",20,[[["usize"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose…",20,[[["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8,…",20,[[["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E…",20,[[["str"],["u32"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by…",20,[[["usize"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g:…",20,[[["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E…",20,[[["str"],["u32"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",20,[[["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",20,[[["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of…",20,[[["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should…",20,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of…",null,null],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is…",null,null],[11,"fmt","serde::de","",28,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","serde::de::value","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","serde::ser","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"deserialize","serde::de","",28,[[["d"]],[["result",["ignoredany"]],["ignoredany"]]]],[11,"deserialize_bool","serde::de::value","",30,[[["v"]],["result"]]],[11,"deserialize_i8","","",30,[[["v"]],["result"]]],[11,"deserialize_i16","","",30,[[["v"]],["result"]]],[11,"deserialize_i32","","",30,[[["v"]],["result"]]],[11,"deserialize_i64","","",30,[[["v"]],["result"]]],[11,"deserialize_i128","","",30,[[["v"]],["result"]]],[11,"deserialize_u8","","",30,[[["v"]],["result"]]],[11,"deserialize_u16","","",30,[[["v"]],["result"]]],[11,"deserialize_u32","","",30,[[["v"]],["result"]]],[11,"deserialize_u64","","",30,[[["v"]],["result"]]],[11,"deserialize_u128","","",30,[[["v"]],["result"]]],[11,"deserialize_f32","","",30,[[["v"]],["result"]]],[11,"deserialize_f64","","",30,[[["v"]],["result"]]],[11,"deserialize_char","","",30,[[["v"]],["result"]]],[11,"deserialize_str","","",30,[[["v"]],["result"]]],[11,"deserialize_string","","",30,[[["v"]],["result"]]],[11,"deserialize_bytes","","",30,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",30,[[["v"]],["result"]]],[11,"deserialize_unit","","",30,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",30,[[["v"]],["result"]]],[11,"deserialize_tuple","","",30,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",30,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",30,[[["v"]],["result"]]],[11,"deserialize_struct","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",30,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",30,[[["v"]],["result"]]],[11,"deserialize_any","","",30,[[["v"]],["result"]]],[11,"deserialize_option","","",30,[[["v"]],["result"]]],[11,"deserialize_bool","","",31,[[["v"]],["result"]]],[11,"deserialize_i8","","",31,[[["v"]],["result"]]],[11,"deserialize_i16","","",31,[[["v"]],["result"]]],[11,"deserialize_i32","","",31,[[["v"]],["result"]]],[11,"deserialize_i64","","",31,[[["v"]],["result"]]],[11,"deserialize_i128","","",31,[[["v"]],["result"]]],[11,"deserialize_u8","","",31,[[["v"]],["result"]]],[11,"deserialize_u16","","",31,[[["v"]],["result"]]],[11,"deserialize_u32","","",31,[[["v"]],["result"]]],[11,"deserialize_u64","","",31,[[["v"]],["result"]]],[11,"deserialize_u128","","",31,[[["v"]],["result"]]],[11,"deserialize_f32","","",31,[[["v"]],["result"]]],[11,"deserialize_f64","","",31,[[["v"]],["result"]]],[11,"deserialize_char","","",31,[[["v"]],["result"]]],[11,"deserialize_str","","",31,[[["v"]],["result"]]],[11,"deserialize_string","","",31,[[["v"]],["result"]]],[11,"deserialize_bytes","","",31,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",31,[[["v"]],["result"]]],[11,"deserialize_option","","",31,[[["v"]],["result"]]],[11,"deserialize_unit","","",31,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",31,[[["v"]],["result"]]],[11,"deserialize_tuple","","",31,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",31,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",31,[[["v"]],["result"]]],[11,"deserialize_struct","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",31,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",31,[[["v"]],["result"]]],[11,"deserialize_any","","",31,[[["v"]],["result"]]],[11,"deserialize_bool","","",32,[[["v"]],["result"]]],[11,"deserialize_i8","","",32,[[["v"]],["result"]]],[11,"deserialize_i16","","",32,[[["v"]],["result"]]],[11,"deserialize_i32","","",32,[[["v"]],["result"]]],[11,"deserialize_i64","","",32,[[["v"]],["result"]]],[11,"deserialize_i128","","",32,[[["v"]],["result"]]],[11,"deserialize_u8","","",32,[[["v"]],["result"]]],[11,"deserialize_u16","","",32,[[["v"]],["result"]]],[11,"deserialize_u32","","",32,[[["v"]],["result"]]],[11,"deserialize_u64","","",32,[[["v"]],["result"]]],[11,"deserialize_u128","","",32,[[["v"]],["result"]]],[11,"deserialize_f32","","",32,[[["v"]],["result"]]],[11,"deserialize_f64","","",32,[[["v"]],["result"]]],[11,"deserialize_char","","",32,[[["v"]],["result"]]],[11,"deserialize_str","","",32,[[["v"]],["result"]]],[11,"deserialize_string","","",32,[[["v"]],["result"]]],[11,"deserialize_bytes","","",32,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",32,[[["v"]],["result"]]],[11,"deserialize_option","","",32,[[["v"]],["result"]]],[11,"deserialize_unit","","",32,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",32,[[["v"]],["result"]]],[11,"deserialize_tuple","","",32,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",32,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",32,[[["v"]],["result"]]],[11,"deserialize_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",32,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",32,[[["v"]],["result"]]],[11,"deserialize_any","","",32,[[["v"]],["result"]]],[11,"deserialize_bool","","",33,[[["v"]],["result"]]],[11,"deserialize_i8","","",33,[[["v"]],["result"]]],[11,"deserialize_i16","","",33,[[["v"]],["result"]]],[11,"deserialize_i32","","",33,[[["v"]],["result"]]],[11,"deserialize_i64","","",33,[[["v"]],["result"]]],[11,"deserialize_i128","","",33,[[["v"]],["result"]]],[11,"deserialize_u8","","",33,[[["v"]],["result"]]],[11,"deserialize_u16","","",33,[[["v"]],["result"]]],[11,"deserialize_u32","","",33,[[["v"]],["result"]]],[11,"deserialize_u64","","",33,[[["v"]],["result"]]],[11,"deserialize_u128","","",33,[[["v"]],["result"]]],[11,"deserialize_f32","","",33,[[["v"]],["result"]]],[11,"deserialize_f64","","",33,[[["v"]],["result"]]],[11,"deserialize_char","","",33,[[["v"]],["result"]]],[11,"deserialize_str","","",33,[[["v"]],["result"]]],[11,"deserialize_string","","",33,[[["v"]],["result"]]],[11,"deserialize_bytes","","",33,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",33,[[["v"]],["result"]]],[11,"deserialize_option","","",33,[[["v"]],["result"]]],[11,"deserialize_unit","","",33,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",33,[[["v"]],["result"]]],[11,"deserialize_tuple","","",33,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",33,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",33,[[["v"]],["result"]]],[11,"deserialize_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",33,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",33,[[["v"]],["result"]]],[11,"deserialize_any","","",33,[[["v"]],["result"]]],[11,"deserialize_bool","","",34,[[["v"]],["result"]]],[11,"deserialize_i8","","",34,[[["v"]],["result"]]],[11,"deserialize_i16","","",34,[[["v"]],["result"]]],[11,"deserialize_i32","","",34,[[["v"]],["result"]]],[11,"deserialize_i64","","",34,[[["v"]],["result"]]],[11,"deserialize_i128","","",34,[[["v"]],["result"]]],[11,"deserialize_u8","","",34,[[["v"]],["result"]]],[11,"deserialize_u16","","",34,[[["v"]],["result"]]],[11,"deserialize_u32","","",34,[[["v"]],["result"]]],[11,"deserialize_u64","","",34,[[["v"]],["result"]]],[11,"deserialize_u128","","",34,[[["v"]],["result"]]],[11,"deserialize_f32","","",34,[[["v"]],["result"]]],[11,"deserialize_f64","","",34,[[["v"]],["result"]]],[11,"deserialize_char","","",34,[[["v"]],["result"]]],[11,"deserialize_str","","",34,[[["v"]],["result"]]],[11,"deserialize_string","","",34,[[["v"]],["result"]]],[11,"deserialize_bytes","","",34,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",34,[[["v"]],["result"]]],[11,"deserialize_option","","",34,[[["v"]],["result"]]],[11,"deserialize_unit","","",34,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",34,[[["v"]],["result"]]],[11,"deserialize_tuple","","",34,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",34,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",34,[[["v"]],["result"]]],[11,"deserialize_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",34,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",34,[[["v"]],["result"]]],[11,"deserialize_any","","",34,[[["v"]],["result"]]],[11,"deserialize_bool","","",35,[[["v"]],["result"]]],[11,"deserialize_i8","","",35,[[["v"]],["result"]]],[11,"deserialize_i16","","",35,[[["v"]],["result"]]],[11,"deserialize_i32","","",35,[[["v"]],["result"]]],[11,"deserialize_i64","","",35,[[["v"]],["result"]]],[11,"deserialize_i128","","",35,[[["v"]],["result"]]],[11,"deserialize_u8","","",35,[[["v"]],["result"]]],[11,"deserialize_u16","","",35,[[["v"]],["result"]]],[11,"deserialize_u32","","",35,[[["v"]],["result"]]],[11,"deserialize_u64","","",35,[[["v"]],["result"]]],[11,"deserialize_u128","","",35,[[["v"]],["result"]]],[11,"deserialize_f32","","",35,[[["v"]],["result"]]],[11,"deserialize_f64","","",35,[[["v"]],["result"]]],[11,"deserialize_char","","",35,[[["v"]],["result"]]],[11,"deserialize_str","","",35,[[["v"]],["result"]]],[11,"deserialize_string","","",35,[[["v"]],["result"]]],[11,"deserialize_bytes","","",35,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",35,[[["v"]],["result"]]],[11,"deserialize_option","","",35,[[["v"]],["result"]]],[11,"deserialize_unit","","",35,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",35,[[["v"]],["result"]]],[11,"deserialize_tuple","","",35,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",35,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",35,[[["v"]],["result"]]],[11,"deserialize_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",35,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",35,[[["v"]],["result"]]],[11,"deserialize_any","","",35,[[["v"]],["result"]]],[11,"deserialize_bool","","",36,[[["v"]],["result"]]],[11,"deserialize_i8","","",36,[[["v"]],["result"]]],[11,"deserialize_i16","","",36,[[["v"]],["result"]]],[11,"deserialize_i32","","",36,[[["v"]],["result"]]],[11,"deserialize_i64","","",36,[[["v"]],["result"]]],[11,"deserialize_i128","","",36,[[["v"]],["result"]]],[11,"deserialize_u8","","",36,[[["v"]],["result"]]],[11,"deserialize_u16","","",36,[[["v"]],["result"]]],[11,"deserialize_u32","","",36,[[["v"]],["result"]]],[11,"deserialize_u64","","",36,[[["v"]],["result"]]],[11,"deserialize_u128","","",36,[[["v"]],["result"]]],[11,"deserialize_f32","","",36,[[["v"]],["result"]]],[11,"deserialize_f64","","",36,[[["v"]],["result"]]],[11,"deserialize_char","","",36,[[["v"]],["result"]]],[11,"deserialize_str","","",36,[[["v"]],["result"]]],[11,"deserialize_string","","",36,[[["v"]],["result"]]],[11,"deserialize_bytes","","",36,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",36,[[["v"]],["result"]]],[11,"deserialize_option","","",36,[[["v"]],["result"]]],[11,"deserialize_unit","","",36,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",36,[[["v"]],["result"]]],[11,"deserialize_tuple","","",36,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",36,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",36,[[["v"]],["result"]]],[11,"deserialize_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",36,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",36,[[["v"]],["result"]]],[11,"deserialize_any","","",36,[[["v"]],["result"]]],[11,"deserialize_bool","","",37,[[["v"]],["result"]]],[11,"deserialize_i8","","",37,[[["v"]],["result"]]],[11,"deserialize_i16","","",37,[[["v"]],["result"]]],[11,"deserialize_i32","","",37,[[["v"]],["result"]]],[11,"deserialize_i64","","",37,[[["v"]],["result"]]],[11,"deserialize_i128","","",37,[[["v"]],["result"]]],[11,"deserialize_u8","","",37,[[["v"]],["result"]]],[11,"deserialize_u16","","",37,[[["v"]],["result"]]],[11,"deserialize_u32","","",37,[[["v"]],["result"]]],[11,"deserialize_u64","","",37,[[["v"]],["result"]]],[11,"deserialize_u128","","",37,[[["v"]],["result"]]],[11,"deserialize_f32","","",37,[[["v"]],["result"]]],[11,"deserialize_f64","","",37,[[["v"]],["result"]]],[11,"deserialize_char","","",37,[[["v"]],["result"]]],[11,"deserialize_str","","",37,[[["v"]],["result"]]],[11,"deserialize_string","","",37,[[["v"]],["result"]]],[11,"deserialize_bytes","","",37,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",37,[[["v"]],["result"]]],[11,"deserialize_option","","",37,[[["v"]],["result"]]],[11,"deserialize_unit","","",37,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",37,[[["v"]],["result"]]],[11,"deserialize_tuple","","",37,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",37,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",37,[[["v"]],["result"]]],[11,"deserialize_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",37,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",37,[[["v"]],["result"]]],[11,"deserialize_any","","",37,[[["v"]],["result"]]],[11,"deserialize_bool","","",38,[[["v"]],["result"]]],[11,"deserialize_i8","","",38,[[["v"]],["result"]]],[11,"deserialize_i16","","",38,[[["v"]],["result"]]],[11,"deserialize_i32","","",38,[[["v"]],["result"]]],[11,"deserialize_i64","","",38,[[["v"]],["result"]]],[11,"deserialize_i128","","",38,[[["v"]],["result"]]],[11,"deserialize_u8","","",38,[[["v"]],["result"]]],[11,"deserialize_u16","","",38,[[["v"]],["result"]]],[11,"deserialize_u32","","",38,[[["v"]],["result"]]],[11,"deserialize_u64","","",38,[[["v"]],["result"]]],[11,"deserialize_u128","","",38,[[["v"]],["result"]]],[11,"deserialize_f32","","",38,[[["v"]],["result"]]],[11,"deserialize_f64","","",38,[[["v"]],["result"]]],[11,"deserialize_char","","",38,[[["v"]],["result"]]],[11,"deserialize_str","","",38,[[["v"]],["result"]]],[11,"deserialize_string","","",38,[[["v"]],["result"]]],[11,"deserialize_bytes","","",38,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",38,[[["v"]],["result"]]],[11,"deserialize_option","","",38,[[["v"]],["result"]]],[11,"deserialize_unit","","",38,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",38,[[["v"]],["result"]]],[11,"deserialize_tuple","","",38,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",38,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",38,[[["v"]],["result"]]],[11,"deserialize_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",38,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",38,[[["v"]],["result"]]],[11,"deserialize_any","","",38,[[["v"]],["result"]]],[11,"deserialize_bool","","",39,[[["v"]],["result"]]],[11,"deserialize_i8","","",39,[[["v"]],["result"]]],[11,"deserialize_i16","","",39,[[["v"]],["result"]]],[11,"deserialize_i32","","",39,[[["v"]],["result"]]],[11,"deserialize_i64","","",39,[[["v"]],["result"]]],[11,"deserialize_i128","","",39,[[["v"]],["result"]]],[11,"deserialize_u8","","",39,[[["v"]],["result"]]],[11,"deserialize_u16","","",39,[[["v"]],["result"]]],[11,"deserialize_u32","","",39,[[["v"]],["result"]]],[11,"deserialize_u64","","",39,[[["v"]],["result"]]],[11,"deserialize_u128","","",39,[[["v"]],["result"]]],[11,"deserialize_f32","","",39,[[["v"]],["result"]]],[11,"deserialize_f64","","",39,[[["v"]],["result"]]],[11,"deserialize_char","","",39,[[["v"]],["result"]]],[11,"deserialize_str","","",39,[[["v"]],["result"]]],[11,"deserialize_string","","",39,[[["v"]],["result"]]],[11,"deserialize_bytes","","",39,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",39,[[["v"]],["result"]]],[11,"deserialize_option","","",39,[[["v"]],["result"]]],[11,"deserialize_unit","","",39,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",39,[[["v"]],["result"]]],[11,"deserialize_tuple","","",39,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",39,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",39,[[["v"]],["result"]]],[11,"deserialize_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",39,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",39,[[["v"]],["result"]]],[11,"deserialize_any","","",39,[[["v"]],["result"]]],[11,"deserialize_bool","","",40,[[["v"]],["result"]]],[11,"deserialize_i8","","",40,[[["v"]],["result"]]],[11,"deserialize_i16","","",40,[[["v"]],["result"]]],[11,"deserialize_i32","","",40,[[["v"]],["result"]]],[11,"deserialize_i64","","",40,[[["v"]],["result"]]],[11,"deserialize_i128","","",40,[[["v"]],["result"]]],[11,"deserialize_u8","","",40,[[["v"]],["result"]]],[11,"deserialize_u16","","",40,[[["v"]],["result"]]],[11,"deserialize_u32","","",40,[[["v"]],["result"]]],[11,"deserialize_u64","","",40,[[["v"]],["result"]]],[11,"deserialize_u128","","",40,[[["v"]],["result"]]],[11,"deserialize_f32","","",40,[[["v"]],["result"]]],[11,"deserialize_f64","","",40,[[["v"]],["result"]]],[11,"deserialize_char","","",40,[[["v"]],["result"]]],[11,"deserialize_str","","",40,[[["v"]],["result"]]],[11,"deserialize_string","","",40,[[["v"]],["result"]]],[11,"deserialize_bytes","","",40,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",40,[[["v"]],["result"]]],[11,"deserialize_option","","",40,[[["v"]],["result"]]],[11,"deserialize_unit","","",40,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",40,[[["v"]],["result"]]],[11,"deserialize_tuple","","",40,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",40,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",40,[[["v"]],["result"]]],[11,"deserialize_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",40,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",40,[[["v"]],["result"]]],[11,"deserialize_any","","",40,[[["v"]],["result"]]],[11,"deserialize_bool","","",41,[[["v"]],["result"]]],[11,"deserialize_i8","","",41,[[["v"]],["result"]]],[11,"deserialize_i16","","",41,[[["v"]],["result"]]],[11,"deserialize_i32","","",41,[[["v"]],["result"]]],[11,"deserialize_i64","","",41,[[["v"]],["result"]]],[11,"deserialize_i128","","",41,[[["v"]],["result"]]],[11,"deserialize_u8","","",41,[[["v"]],["result"]]],[11,"deserialize_u16","","",41,[[["v"]],["result"]]],[11,"deserialize_u32","","",41,[[["v"]],["result"]]],[11,"deserialize_u64","","",41,[[["v"]],["result"]]],[11,"deserialize_u128","","",41,[[["v"]],["result"]]],[11,"deserialize_f32","","",41,[[["v"]],["result"]]],[11,"deserialize_f64","","",41,[[["v"]],["result"]]],[11,"deserialize_char","","",41,[[["v"]],["result"]]],[11,"deserialize_str","","",41,[[["v"]],["result"]]],[11,"deserialize_string","","",41,[[["v"]],["result"]]],[11,"deserialize_bytes","","",41,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",41,[[["v"]],["result"]]],[11,"deserialize_option","","",41,[[["v"]],["result"]]],[11,"deserialize_unit","","",41,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",41,[[["v"]],["result"]]],[11,"deserialize_tuple","","",41,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",41,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",41,[[["v"]],["result"]]],[11,"deserialize_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",41,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",41,[[["v"]],["result"]]],[11,"deserialize_any","","",41,[[["v"]],["result"]]],[11,"deserialize_bool","","",42,[[["v"]],["result"]]],[11,"deserialize_i8","","",42,[[["v"]],["result"]]],[11,"deserialize_i16","","",42,[[["v"]],["result"]]],[11,"deserialize_i32","","",42,[[["v"]],["result"]]],[11,"deserialize_i64","","",42,[[["v"]],["result"]]],[11,"deserialize_i128","","",42,[[["v"]],["result"]]],[11,"deserialize_u8","","",42,[[["v"]],["result"]]],[11,"deserialize_u16","","",42,[[["v"]],["result"]]],[11,"deserialize_u32","","",42,[[["v"]],["result"]]],[11,"deserialize_u64","","",42,[[["v"]],["result"]]],[11,"deserialize_u128","","",42,[[["v"]],["result"]]],[11,"deserialize_f32","","",42,[[["v"]],["result"]]],[11,"deserialize_f64","","",42,[[["v"]],["result"]]],[11,"deserialize_char","","",42,[[["v"]],["result"]]],[11,"deserialize_str","","",42,[[["v"]],["result"]]],[11,"deserialize_string","","",42,[[["v"]],["result"]]],[11,"deserialize_bytes","","",42,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",42,[[["v"]],["result"]]],[11,"deserialize_option","","",42,[[["v"]],["result"]]],[11,"deserialize_unit","","",42,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",42,[[["v"]],["result"]]],[11,"deserialize_tuple","","",42,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",42,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",42,[[["v"]],["result"]]],[11,"deserialize_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",42,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",42,[[["v"]],["result"]]],[11,"deserialize_any","","",42,[[["v"]],["result"]]],[11,"deserialize_bool","","",43,[[["v"]],["result"]]],[11,"deserialize_i8","","",43,[[["v"]],["result"]]],[11,"deserialize_i16","","",43,[[["v"]],["result"]]],[11,"deserialize_i32","","",43,[[["v"]],["result"]]],[11,"deserialize_i64","","",43,[[["v"]],["result"]]],[11,"deserialize_i128","","",43,[[["v"]],["result"]]],[11,"deserialize_u8","","",43,[[["v"]],["result"]]],[11,"deserialize_u16","","",43,[[["v"]],["result"]]],[11,"deserialize_u32","","",43,[[["v"]],["result"]]],[11,"deserialize_u64","","",43,[[["v"]],["result"]]],[11,"deserialize_u128","","",43,[[["v"]],["result"]]],[11,"deserialize_f32","","",43,[[["v"]],["result"]]],[11,"deserialize_f64","","",43,[[["v"]],["result"]]],[11,"deserialize_char","","",43,[[["v"]],["result"]]],[11,"deserialize_str","","",43,[[["v"]],["result"]]],[11,"deserialize_string","","",43,[[["v"]],["result"]]],[11,"deserialize_bytes","","",43,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",43,[[["v"]],["result"]]],[11,"deserialize_option","","",43,[[["v"]],["result"]]],[11,"deserialize_unit","","",43,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",43,[[["v"]],["result"]]],[11,"deserialize_tuple","","",43,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",43,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",43,[[["v"]],["result"]]],[11,"deserialize_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",43,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",43,[[["v"]],["result"]]],[11,"deserialize_any","","",43,[[["v"]],["result"]]],[11,"deserialize_bool","","",44,[[["v"]],["result"]]],[11,"deserialize_i8","","",44,[[["v"]],["result"]]],[11,"deserialize_i16","","",44,[[["v"]],["result"]]],[11,"deserialize_i32","","",44,[[["v"]],["result"]]],[11,"deserialize_i64","","",44,[[["v"]],["result"]]],[11,"deserialize_i128","","",44,[[["v"]],["result"]]],[11,"deserialize_u8","","",44,[[["v"]],["result"]]],[11,"deserialize_u16","","",44,[[["v"]],["result"]]],[11,"deserialize_u32","","",44,[[["v"]],["result"]]],[11,"deserialize_u64","","",44,[[["v"]],["result"]]],[11,"deserialize_u128","","",44,[[["v"]],["result"]]],[11,"deserialize_f32","","",44,[[["v"]],["result"]]],[11,"deserialize_f64","","",44,[[["v"]],["result"]]],[11,"deserialize_char","","",44,[[["v"]],["result"]]],[11,"deserialize_str","","",44,[[["v"]],["result"]]],[11,"deserialize_string","","",44,[[["v"]],["result"]]],[11,"deserialize_bytes","","",44,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",44,[[["v"]],["result"]]],[11,"deserialize_option","","",44,[[["v"]],["result"]]],[11,"deserialize_unit","","",44,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",44,[[["v"]],["result"]]],[11,"deserialize_tuple","","",44,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",44,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",44,[[["v"]],["result"]]],[11,"deserialize_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",44,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",44,[[["v"]],["result"]]],[11,"deserialize_any","","",44,[[["v"]],["result"]]],[11,"deserialize_bool","","",45,[[["v"]],["result"]]],[11,"deserialize_i8","","",45,[[["v"]],["result"]]],[11,"deserialize_i16","","",45,[[["v"]],["result"]]],[11,"deserialize_i32","","",45,[[["v"]],["result"]]],[11,"deserialize_i64","","",45,[[["v"]],["result"]]],[11,"deserialize_i128","","",45,[[["v"]],["result"]]],[11,"deserialize_u8","","",45,[[["v"]],["result"]]],[11,"deserialize_u16","","",45,[[["v"]],["result"]]],[11,"deserialize_u32","","",45,[[["v"]],["result"]]],[11,"deserialize_u64","","",45,[[["v"]],["result"]]],[11,"deserialize_u128","","",45,[[["v"]],["result"]]],[11,"deserialize_f32","","",45,[[["v"]],["result"]]],[11,"deserialize_f64","","",45,[[["v"]],["result"]]],[11,"deserialize_char","","",45,[[["v"]],["result"]]],[11,"deserialize_str","","",45,[[["v"]],["result"]]],[11,"deserialize_string","","",45,[[["v"]],["result"]]],[11,"deserialize_bytes","","",45,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",45,[[["v"]],["result"]]],[11,"deserialize_option","","",45,[[["v"]],["result"]]],[11,"deserialize_unit","","",45,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",45,[[["v"]],["result"]]],[11,"deserialize_tuple","","",45,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",45,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",45,[[["v"]],["result"]]],[11,"deserialize_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",45,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",45,[[["v"]],["result"]]],[11,"deserialize_any","","",45,[[["v"]],["result"]]],[11,"deserialize_bool","","",46,[[["v"]],["result"]]],[11,"deserialize_i8","","",46,[[["v"]],["result"]]],[11,"deserialize_i16","","",46,[[["v"]],["result"]]],[11,"deserialize_i32","","",46,[[["v"]],["result"]]],[11,"deserialize_i64","","",46,[[["v"]],["result"]]],[11,"deserialize_i128","","",46,[[["v"]],["result"]]],[11,"deserialize_u8","","",46,[[["v"]],["result"]]],[11,"deserialize_u16","","",46,[[["v"]],["result"]]],[11,"deserialize_u32","","",46,[[["v"]],["result"]]],[11,"deserialize_u64","","",46,[[["v"]],["result"]]],[11,"deserialize_u128","","",46,[[["v"]],["result"]]],[11,"deserialize_f32","","",46,[[["v"]],["result"]]],[11,"deserialize_f64","","",46,[[["v"]],["result"]]],[11,"deserialize_char","","",46,[[["v"]],["result"]]],[11,"deserialize_str","","",46,[[["v"]],["result"]]],[11,"deserialize_string","","",46,[[["v"]],["result"]]],[11,"deserialize_bytes","","",46,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",46,[[["v"]],["result"]]],[11,"deserialize_option","","",46,[[["v"]],["result"]]],[11,"deserialize_unit","","",46,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",46,[[["v"]],["result"]]],[11,"deserialize_tuple","","",46,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",46,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",46,[[["v"]],["result"]]],[11,"deserialize_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",46,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",46,[[["v"]],["result"]]],[11,"deserialize_any","","",46,[[["v"]],["result"]]],[11,"deserialize_enum","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_any","","",47,[[["v"]],["result"]]],[11,"deserialize_enum","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",47,[[["v"]],["result"]]],[11,"deserialize_i8","","",47,[[["v"]],["result"]]],[11,"deserialize_i16","","",47,[[["v"]],["result"]]],[11,"deserialize_i32","","",47,[[["v"]],["result"]]],[11,"deserialize_i64","","",47,[[["v"]],["result"]]],[11,"deserialize_i128","","",47,[[["v"]],["result"]]],[11,"deserialize_u8","","",47,[[["v"]],["result"]]],[11,"deserialize_u16","","",47,[[["v"]],["result"]]],[11,"deserialize_u32","","",47,[[["v"]],["result"]]],[11,"deserialize_u64","","",47,[[["v"]],["result"]]],[11,"deserialize_u128","","",47,[[["v"]],["result"]]],[11,"deserialize_f32","","",47,[[["v"]],["result"]]],[11,"deserialize_f64","","",47,[[["v"]],["result"]]],[11,"deserialize_char","","",47,[[["v"]],["result"]]],[11,"deserialize_str","","",47,[[["v"]],["result"]]],[11,"deserialize_string","","",47,[[["v"]],["result"]]],[11,"deserialize_bytes","","",47,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",47,[[["v"]],["result"]]],[11,"deserialize_option","","",47,[[["v"]],["result"]]],[11,"deserialize_unit","","",47,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",47,[[["v"]],["result"]]],[11,"deserialize_tuple","","",47,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",47,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",47,[[["v"]],["result"]]],[11,"deserialize_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",47,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",47,[[["v"]],["result"]]],[11,"deserialize_any","","",1,[[["v"]],["result"]]],[11,"deserialize_enum","","",1,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",1,[[["v"]],["result"]]],[11,"deserialize_i8","","",1,[[["v"]],["result"]]],[11,"deserialize_i16","","",1,[[["v"]],["result"]]],[11,"deserialize_i32","","",1,[[["v"]],["result"]]],[11,"deserialize_i64","","",1,[[["v"]],["result"]]],[11,"deserialize_i128","","",1,[[["v"]],["result"]]],[11,"deserialize_u8","","",1,[[["v"]],["result"]]],[11,"deserialize_u16","","",1,[[["v"]],["result"]]],[11,"deserialize_u32","","",1,[[["v"]],["result"]]],[11,"deserialize_u64","","",1,[[["v"]],["result"]]],[11,"deserialize_u128","","",1,[[["v"]],["result"]]],[11,"deserialize_f32","","",1,[[["v"]],["result"]]],[11,"deserialize_f64","","",1,[[["v"]],["result"]]],[11,"deserialize_char","","",1,[[["v"]],["result"]]],[11,"deserialize_str","","",1,[[["v"]],["result"]]],[11,"deserialize_string","","",1,[[["v"]],["result"]]],[11,"deserialize_bytes","","",1,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",1,[[["v"]],["result"]]],[11,"deserialize_option","","",1,[[["v"]],["result"]]],[11,"deserialize_unit","","",1,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",1,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",1,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",1,[[["v"]],["result"]]],[11,"deserialize_tuple","","",1,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",1,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",1,[[["v"]],["result"]]],[11,"deserialize_struct","","",1,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",1,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",1,[[["v"]],["result"]]],[11,"deserialize_any","","",48,[[["v"]],["result"]]],[11,"deserialize_enum","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",48,[[["v"]],["result"]]],[11,"deserialize_i8","","",48,[[["v"]],["result"]]],[11,"deserialize_i16","","",48,[[["v"]],["result"]]],[11,"deserialize_i32","","",48,[[["v"]],["result"]]],[11,"deserialize_i64","","",48,[[["v"]],["result"]]],[11,"deserialize_i128","","",48,[[["v"]],["result"]]],[11,"deserialize_u8","","",48,[[["v"]],["result"]]],[11,"deserialize_u16","","",48,[[["v"]],["result"]]],[11,"deserialize_u32","","",48,[[["v"]],["result"]]],[11,"deserialize_u64","","",48,[[["v"]],["result"]]],[11,"deserialize_u128","","",48,[[["v"]],["result"]]],[11,"deserialize_f32","","",48,[[["v"]],["result"]]],[11,"deserialize_f64","","",48,[[["v"]],["result"]]],[11,"deserialize_char","","",48,[[["v"]],["result"]]],[11,"deserialize_str","","",48,[[["v"]],["result"]]],[11,"deserialize_string","","",48,[[["v"]],["result"]]],[11,"deserialize_bytes","","",48,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",48,[[["v"]],["result"]]],[11,"deserialize_option","","",48,[[["v"]],["result"]]],[11,"deserialize_unit","","",48,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",48,[[["v"]],["result"]]],[11,"deserialize_tuple","","",48,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",48,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",48,[[["v"]],["result"]]],[11,"deserialize_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",48,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",48,[[["v"]],["result"]]],[11,"deserialize_any","","",49,[[["v"]],["result"]]],[11,"deserialize_enum","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",49,[[["v"]],["result"]]],[11,"deserialize_i8","","",49,[[["v"]],["result"]]],[11,"deserialize_i16","","",49,[[["v"]],["result"]]],[11,"deserialize_i32","","",49,[[["v"]],["result"]]],[11,"deserialize_i64","","",49,[[["v"]],["result"]]],[11,"deserialize_i128","","",49,[[["v"]],["result"]]],[11,"deserialize_u8","","",49,[[["v"]],["result"]]],[11,"deserialize_u16","","",49,[[["v"]],["result"]]],[11,"deserialize_u32","","",49,[[["v"]],["result"]]],[11,"deserialize_u64","","",49,[[["v"]],["result"]]],[11,"deserialize_u128","","",49,[[["v"]],["result"]]],[11,"deserialize_f32","","",49,[[["v"]],["result"]]],[11,"deserialize_f64","","",49,[[["v"]],["result"]]],[11,"deserialize_char","","",49,[[["v"]],["result"]]],[11,"deserialize_str","","",49,[[["v"]],["result"]]],[11,"deserialize_string","","",49,[[["v"]],["result"]]],[11,"deserialize_bytes","","",49,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",49,[[["v"]],["result"]]],[11,"deserialize_option","","",49,[[["v"]],["result"]]],[11,"deserialize_unit","","",49,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",49,[[["v"]],["result"]]],[11,"deserialize_tuple","","",49,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",49,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",49,[[["v"]],["result"]]],[11,"deserialize_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",49,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",49,[[["v"]],["result"]]],[11,"deserialize_any","","",2,[[["v"]],["result"]]],[11,"deserialize_bool","","",2,[[["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["v"]],["result"]]],[11,"deserialize_char","","",2,[[["v"]],["result"]]],[11,"deserialize_str","","",2,[[["v"]],["result"]]],[11,"deserialize_string","","",2,[[["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["v"]],["result"]]],[11,"deserialize_option","","",2,[[["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["v"]],["result"]]],[11,"deserialize_struct","","",2,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",2,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["v"]],["result"]]],[11,"deserialize_enum","","",2,[[["str"],["v"]],["result"]]],[11,"deserialize_any","","",3,[[["v"]],["result"]]],[11,"deserialize_bool","","",3,[[["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["v"]],["result"]]],[11,"deserialize_char","","",3,[[["v"]],["result"]]],[11,"deserialize_str","","",3,[[["v"]],["result"]]],[11,"deserialize_string","","",3,[[["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["v"]],["result"]]],[11,"deserialize_option","","",3,[[["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["v"]],["result"]]],[11,"deserialize_struct","","",3,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",3,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",3,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["v"]],["result"]]],[11,"deserialize_any","","",4,[[["v"]],["result"]]],[11,"deserialize_bool","","",4,[[["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["v"]],["result"]]],[11,"deserialize_char","","",4,[[["v"]],["result"]]],[11,"deserialize_str","","",4,[[["v"]],["result"]]],[11,"deserialize_string","","",4,[[["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["v"]],["result"]]],[11,"deserialize_option","","",4,[[["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["v"]],["result"]]],[11,"deserialize_struct","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",4,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["v"]],["result"]]],[11,"deserialize_any","","",5,[[["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",5,[[["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["v"]],["result"]]],[11,"deserialize_char","","",5,[[["v"]],["result"]]],[11,"deserialize_str","","",5,[[["v"]],["result"]]],[11,"deserialize_string","","",5,[[["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["v"]],["result"]]],[11,"deserialize_option","","",5,[[["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["v"]],["result"]]],[11,"deserialize_struct","","",5,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",5,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",5,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["v"]],["result"]]],[11,"deserialize_any","","",6,[[["v"]],["result"]]],[11,"deserialize_enum","","",6,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",6,[[["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["v"]],["result"]]],[11,"deserialize_char","","",6,[[["v"]],["result"]]],[11,"deserialize_str","","",6,[[["v"]],["result"]]],[11,"deserialize_string","","",6,[[["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["v"]],["result"]]],[11,"deserialize_option","","",6,[[["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["v"]],["result"]]],[11,"deserialize_struct","","",6,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",6,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["v"]],["result"]]],[11,"expecting","serde::de","",28,[[["formatter"],["self"]],["result"]]],[11,"visit_bool","","",28,[[["bool"]],["result"]]],[11,"visit_i64","","",28,[[["i64"]],["result"]]],[11,"visit_u64","","",28,[[["u64"]],["result"]]],[11,"visit_f64","","",28,[[["f64"]],["result"]]],[11,"visit_str","","",28,[[["str"]],["result"]]],[11,"visit_none","","",28,[[],["result"]]],[11,"visit_some","","",28,[[["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["d"]],["result"]]],[11,"visit_unit","","",28,[[],["result"]]],[11,"visit_seq","","",28,[[["a"]],["result"]]],[11,"visit_map","","",28,[[["a"]],["result"]]],[11,"visit_bytes","","",28,[[],["result"]]],[11,"visit_enum","","",28,[[["a"]],["result"]]],[11,"next_element_seed","serde::de::value","",3,[[["self"],["v"]],[["option"],["result",["option"]]]]],[11,"size_hint","","",3,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"next_element_seed","","",5,[[["self"],["t"]],[["option"],["result",["option"]]]]],[11,"size_hint","","",5,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"next_key_seed","","",5,[[["self"],["t"]],[["result",["option"]],["option"]]]],[11,"next_value_seed","","",5,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",5,[[["tv"],["self"],["tk"]],[["result",["option"]],["option"]]]],[11,"size_hint","","",5,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"variant_seed","","",46,[[["t"]],["result"]]],[11,"variant_seed","","",47,[[["t"]],["result"]]],[11,"variant_seed","","",1,[[["t"]],["result"]]],[11,"variant_seed","","",48,[[["t"]],["result"]]],[11,"variant_seed","","",49,[[["t"]],["result"]]],[11,"variant_seed","","",6,[[["t"]],["result"]]],[11,"serialize_element","serde::ser","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_element","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_field","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_field","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_key","","",50,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_field","","",50,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_field","","",50,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"custom","serde::de::value","",29,[[["t"]],["self"]]],[11,"custom","","",29,[[["t"]],["self"]]],[11,"clone","","",29,[[["self"]],["error"]]],[11,"clone","","",30,[[["self"]],["self"]]],[11,"clone","","",31,[[["self"]],["self"]]],[11,"clone","","",32,[[["self"]],["self"]]],[11,"clone","","",33,[[["self"]],["self"]]],[11,"clone","","",34,[[["self"]],["self"]]],[11,"clone","","",35,[[["self"]],["self"]]],[11,"clone","","",36,[[["self"]],["self"]]],[11,"clone","","",37,[[["self"]],["self"]]],[11,"clone","","",38,[[["self"]],["self"]]],[11,"clone","","",39,[[["self"]],["self"]]],[11,"clone","","",40,[[["self"]],["self"]]],[11,"clone","","",41,[[["self"]],["self"]]],[11,"clone","","",42,[[["self"]],["self"]]],[11,"clone","","",43,[[["self"]],["self"]]],[11,"clone","","",44,[[["self"]],["self"]]],[11,"clone","","",45,[[["self"]],["self"]]],[11,"clone","","",46,[[["self"]],["self"]]],[11,"clone","","",47,[[["self"]],["self"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone","","",48,[[["self"]],["self"]]],[11,"clone","","",49,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["seqdeserializer"]]],[11,"clone","","",4,[[["self"]],["seqaccessdeserializer"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["mapaccessdeserializer"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"eq","serde::de::value","",29,[[["error"],["self"]],["bool"]]],[11,"ne","","",29,[[["error"],["self"]],["bool"]]],[11,"eq","serde::de","",0,[[["unexpected"],["self"]],["bool"]]],[11,"ne","","",0,[[["unexpected"],["self"]],["bool"]]],[11,"fmt","serde::de::value","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",44,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","serde::de","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","serde::de::value","",29,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","serde::de","",0,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"description","serde::de::value","",29,[[["self"]],["str"]]]],"p":[[4,"Unexpected"],[3,"BorrowedStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"IgnoredAny"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"Impossible"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","i":[[24,"Serialize","serde_derive","",null,null],[24,"Deserialize","","",null,null]],"p":[]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust…","i":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal…",null,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tokens","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy,…",null,null],[12,"path","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature =…",null,null],[12,"path","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point…",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as…",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or…",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true;…",null,null],[12,"attrs","","",10,null],[12,"pat","","",10,null],[12,"guard","","",10,null],[12,"fat_arrow_token","","",10,null],[12,"body","","",10,null],[12,"comma","","",10,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"attrs","","Attributes tagged on the field.",11,null],[12,"member","","Name or index of the field.",11,null],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand…",11,null],[12,"expr","","Value of the field.",11,null],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",null,null],[12,"name","","",12,null],[12,"colon_token","","",12,null],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method…",null,null],[12,"colon2_token","","",13,null],[12,"lt_token","","",13,null],[12,"args","","",13,null],[12,"gt_token","","",13,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[12,"attrs","","",14,null],[12,"bracket_token","","",14,null],[12,"elems","","",14,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[12,"attrs","","",15,null],[12,"left","","",15,null],[12,"eq_token","","",15,null],[12,"right","","",15,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[12,"attrs","","",16,null],[12,"left","","",16,null],[12,"op","","",16,null],[12,"right","","",16,null],[3,"ExprAsync","","An async block: `async { ... }`.",null,null],[12,"attrs","","",17,null],[12,"async_token","","",17,null],[12,"capture","","",17,null],[12,"block","","",17,null],[3,"ExprAwait","","An await expression: `fut.await`.",null,null],[12,"attrs","","",18,null],[12,"base","","",18,null],[12,"dot_token","","",18,null],[12,"await_token","","",18,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",19,null],[12,"left","","",19,null],[12,"op","","",19,null],[12,"right","","",19,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[12,"attrs","","",20,null],[12,"label","","",20,null],[12,"block","","",20,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[12,"attrs","","",21,null],[12,"box_token","","",21,null],[12,"expr","","",21,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional…",null,null],[12,"attrs","","",22,null],[12,"break_token","","",22,null],[12,"label","","",22,null],[12,"expr","","",22,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",23,null],[12,"func","","",23,null],[12,"paren_token","","",23,null],[12,"args","","",23,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",24,null],[12,"expr","","",24,null],[12,"as_token","","",24,null],[12,"ty","","",24,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[12,"attrs","","",25,null],[12,"asyncness","","",25,null],[12,"movability","","",25,null],[12,"capture","","",25,null],[12,"or1_token","","",25,null],[12,"inputs","","",25,null],[12,"or2_token","","",25,null],[12,"output","","",25,null],[12,"body","","",25,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[12,"attrs","","",26,null],[12,"continue_token","","",26,null],[12,"label","","",26,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple…",null,null],[12,"attrs","","",27,null],[12,"base","","",27,null],[12,"dot_token","","",27,null],[12,"member","","",27,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[12,"attrs","","",28,null],[12,"label","","",28,null],[12,"for_token","","",28,null],[12,"pat","","",28,null],[12,"in_token","","",28,null],[12,"expr","","",28,null],[12,"body","","",28,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[12,"attrs","","",29,null],[12,"group_token","","",29,null],[12,"expr","","",29,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr…",null,null],[12,"attrs","","",30,null],[12,"if_token","","",30,null],[12,"cond","","",30,null],[12,"then_branch","","",30,null],[12,"else_branch","","",30,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",31,null],[12,"expr","","",31,null],[12,"bracket_token","","",31,null],[12,"index","","",31,null],[3,"ExprLet","","A `let` guard: `let Some(x) = opt`.",null,null],[12,"attrs","","",32,null],[12,"let_token","","",32,null],[12,"pat","","",32,null],[12,"eq_token","","",32,null],[12,"expr","","",32,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",33,null],[12,"lit","","",33,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[12,"attrs","","",34,null],[12,"label","","",34,null],[12,"loop_token","","",34,null],[12,"body","","",34,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[12,"attrs","","",35,null],[12,"mac","","",35,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {}…",null,null],[12,"attrs","","",36,null],[12,"match_token","","",36,null],[12,"expr","","",36,null],[12,"brace_token","","",36,null],[12,"arms","","",36,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[12,"attrs","","",37,null],[12,"receiver","","",37,null],[12,"dot_token","","",37,null],[12,"method","","",37,null],[12,"turbofish","","",37,null],[12,"paren_token","","",37,null],[12,"args","","",37,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",38,null],[12,"paren_token","","",38,null],[12,"expr","","",38,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing…",null,null],[12,"attrs","","",39,null],[12,"qself","","",39,null],[12,"path","","",39,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[12,"attrs","","",40,null],[12,"from","","",40,null],[12,"limits","","",40,null],[12,"to","","",40,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[12,"attrs","","",41,null],[12,"and_token","","",41,null],[12,"raw","","",41,null],[12,"mutability","","",41,null],[12,"expr","","",41,null],[3,"ExprRepeat","","An array literal constructed from one repeated element:…",null,null],[12,"attrs","","",42,null],[12,"bracket_token","","",42,null],[12,"expr","","",42,null],[12,"semi_token","","",42,null],[12,"len","","",42,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[12,"attrs","","",43,null],[12,"return_token","","",43,null],[12,"expr","","",43,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[12,"attrs","","",44,null],[12,"path","","",44,null],[12,"brace_token","","",44,null],[12,"fields","","",44,null],[12,"dot2_token","","",44,null],[12,"rest","","",44,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[12,"attrs","","",45,null],[12,"expr","","",45,null],[12,"question_token","","",45,null],[3,"ExprTryBlock","","A try block: `try { ... }`.",null,null],[12,"attrs","","",46,null],[12,"try_token","","",46,null],[12,"block","","",46,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[12,"attrs","","",47,null],[12,"paren_token","","",47,null],[12,"elems","","",47,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[12,"attrs","","",48,null],[12,"expr","","",48,null],[12,"colon_token","","",48,null],[12,"ty","","",48,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",49,null],[12,"op","","",49,null],[12,"expr","","",49,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[12,"attrs","","",50,null],[12,"unsafe_token","","",50,null],[12,"block","","",50,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[12,"attrs","","",51,null],[12,"label","","",51,null],[12,"while_token","","",51,null],[12,"cond","","",51,null],[12,"body","","",51,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[12,"attrs","","",52,null],[12,"yield_token","","",52,null],[12,"expr","","",52,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",53,null],[12,"span","","",53,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",54,null],[12,"lt_token","","",54,null],[12,"lifetimes","","",54,null],[12,"gt_token","","",54,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",55,null],[12,"const_token","","",55,null],[12,"ident","","",55,null],[12,"colon_token","","",55,null],[12,"ty","","",55,null],[12,"eq_token","","",55,null],[12,"default","","",55,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of…",null,null],[12,"lt_token","","",56,null],[12,"params","","",56,null],[12,"gt_token","","",56,null],[12,"where_clause","","",56,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",57,null],[12,"lifetime","","",57,null],[12,"colon_token","","",57,null],[12,"bounds","","",57,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",58,null],[12,"eq_token","","",58,null],[12,"rhs_ty","","",58,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",59,null],[12,"colon_token","","",59,null],[12,"bounds","","",59,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>:…",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",60,null],[12,"bounded_ty","","The type being bounded",60,null],[12,"colon_token","","",60,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",60,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",61,null],[12,"modifier","","",61,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",61,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",61,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",62,null],[12,"ident","","",62,null],[12,"colon_token","","",62,null],[12,"bounds","","",62,null],[12,"eq_token","","",62,null],[12,"default","","",62,null],[3,"WhereClause","","A `where` clause in a definition: `where T:…",null,null],[12,"where_token","","",63,null],[12,"predicates","","",63,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"ForeignItemFn","","A foreign function in an `extern` block.",null,null],[12,"attrs","","",64,null],[12,"vis","","",64,null],[12,"sig","","",64,null],[12,"semi_token","","",64,null],[3,"ForeignItemMacro","","A macro invocation within an extern block.",null,null],[12,"attrs","","",65,null],[12,"mac","","",65,null],[12,"semi_token","","",65,null],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext:…",null,null],[12,"attrs","","",66,null],[12,"vis","","",66,null],[12,"static_token","","",66,null],[12,"mutability","","",66,null],[12,"ident","","",66,null],[12,"colon_token","","",66,null],[12,"ty","","",66,null],[12,"semi_token","","",66,null],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",null,null],[12,"attrs","","",67,null],[12,"vis","","",67,null],[12,"type_token","","",67,null],[12,"ident","","",67,null],[12,"semi_token","","",67,null],[3,"ImplItemConst","","An associated constant within an impl block.",null,null],[12,"attrs","","",68,null],[12,"vis","","",68,null],[12,"defaultness","","",68,null],[12,"const_token","","",68,null],[12,"ident","","",68,null],[12,"colon_token","","",68,null],[12,"ty","","",68,null],[12,"eq_token","","",68,null],[12,"expr","","",68,null],[12,"semi_token","","",68,null],[3,"ImplItemMacro","","A macro invocation within an impl block.",null,null],[12,"attrs","","",69,null],[12,"mac","","",69,null],[12,"semi_token","","",69,null],[3,"ImplItemMethod","","A method within an impl block.",null,null],[12,"attrs","","",70,null],[12,"vis","","",70,null],[12,"defaultness","","",70,null],[12,"sig","","",70,null],[12,"block","","",70,null],[3,"ImplItemType","","An associated type within an impl block.",null,null],[12,"attrs","","",71,null],[12,"vis","","",71,null],[12,"defaultness","","",71,null],[12,"type_token","","",71,null],[12,"ident","","",71,null],[12,"generics","","",71,null],[12,"eq_token","","",71,null],[12,"ty","","",71,null],[12,"semi_token","","",71,null],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",null,null],[12,"attrs","","",72,null],[12,"vis","","",72,null],[12,"const_token","","",72,null],[12,"ident","","",72,null],[12,"colon_token","","",72,null],[12,"ty","","",72,null],[12,"eq_token","","",72,null],[12,"expr","","",72,null],[12,"semi_token","","",72,null],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { A(A), B(B) }`.",null,null],[12,"attrs","","",73,null],[12,"vis","","",73,null],[12,"enum_token","","",73,null],[12,"ident","","",73,null],[12,"generics","","",73,null],[12,"brace_token","","",73,null],[12,"variants","","",73,null],[3,"ItemExternCrate","","An `extern crate` item: `extern crate serde`.",null,null],[12,"attrs","","",74,null],[12,"vis","","",74,null],[12,"extern_token","","",74,null],[12,"crate_token","","",74,null],[12,"ident","","",74,null],[12,"rename","","",74,null],[12,"semi_token","","",74,null],[3,"ItemFn","","A free-standing function: `fn process(n: usize) ->…",null,null],[12,"attrs","","",75,null],[12,"vis","","",75,null],[12,"sig","","",75,null],[12,"block","","",75,null],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",null,null],[12,"attrs","","",76,null],[12,"abi","","",76,null],[12,"brace_token","","",76,null],[12,"items","","",76,null],[3,"ItemImpl","","An impl block providing trait or associated items:…",null,null],[12,"attrs","","",77,null],[12,"defaultness","","",77,null],[12,"unsafety","","",77,null],[12,"impl_token","","",77,null],[12,"generics","","",77,null],[12,"trait_","","Trait this impl implements.",77,null],[12,"self_ty","","The Self type of the impl.",77,null],[12,"brace_token","","",77,null],[12,"items","","",77,null],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!`…",null,null],[12,"attrs","","",78,null],[12,"ident","","The `example` in `macro_rules! example { ... }`.",78,null],[12,"mac","","",78,null],[12,"semi_token","","",78,null],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro`…",null,null],[12,"attrs","","",79,null],[12,"vis","","",79,null],[12,"macro_token","","",79,null],[12,"ident","","",79,null],[12,"rules","","",79,null],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",null,null],[12,"attrs","","",80,null],[12,"vis","","",80,null],[12,"mod_token","","",80,null],[12,"ident","","",80,null],[12,"content","","",80,null],[12,"semi","","",80,null],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",null,null],[12,"attrs","","",81,null],[12,"vis","","",81,null],[12,"static_token","","",81,null],[12,"mutability","","",81,null],[12,"ident","","",81,null],[12,"colon_token","","",81,null],[12,"ty","","",81,null],[12,"eq_token","","",81,null],[12,"expr","","",81,null],[12,"semi_token","","",81,null],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",null,null],[12,"attrs","","",82,null],[12,"vis","","",82,null],[12,"struct_token","","",82,null],[12,"ident","","",82,null],[12,"generics","","",82,null],[12,"fields","","",82,null],[12,"semi_token","","",82,null],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",null,null],[12,"attrs","","",83,null],[12,"vis","","",83,null],[12,"unsafety","","",83,null],[12,"auto_token","","",83,null],[12,"trait_token","","",83,null],[12,"ident","","",83,null],[12,"generics","","",83,null],[12,"colon_token","","",83,null],[12,"supertraits","","",83,null],[12,"brace_token","","",83,null],[12,"items","","",83,null],[3,"ItemTraitAlias","","A trait alias: `pub trait SharableIterator = Iterator +…",null,null],[12,"attrs","","",84,null],[12,"vis","","",84,null],[12,"trait_token","","",84,null],[12,"ident","","",84,null],[12,"generics","","",84,null],[12,"eq_token","","",84,null],[12,"bounds","","",84,null],[12,"semi_token","","",84,null],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T,…",null,null],[12,"attrs","","",85,null],[12,"vis","","",85,null],[12,"type_token","","",85,null],[12,"ident","","",85,null],[12,"generics","","",85,null],[12,"eq_token","","",85,null],[12,"ty","","",85,null],[12,"semi_token","","",85,null],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",null,null],[12,"attrs","","",86,null],[12,"vis","","",86,null],[12,"union_token","","",86,null],[12,"ident","","",86,null],[12,"generics","","",86,null],[12,"fields","","",86,null],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",null,null],[12,"attrs","","",87,null],[12,"vis","","",87,null],[12,"use_token","","",87,null],[12,"leading_colon","","",87,null],[12,"tree","","",87,null],[12,"semi_token","","",87,null],[3,"Receiver","","The `self` argument of an associated method, whether taken…",null,null],[12,"attrs","","",88,null],[12,"reference","","",88,null],[12,"mutability","","",88,null],[12,"self_token","","",88,null],[3,"Signature","","A function signature in a trait or implementation: `unsafe…",null,null],[12,"constness","","",89,null],[12,"asyncness","","",89,null],[12,"unsafety","","",89,null],[12,"abi","","",89,null],[12,"fn_token","","",89,null],[12,"ident","","",89,null],[12,"generics","","",89,null],[12,"paren_token","","",89,null],[12,"inputs","","",89,null],[12,"variadic","","",89,null],[12,"output","","",89,null],[3,"TraitItemConst","","An associated constant within the definition of a trait.",null,null],[12,"attrs","","",90,null],[12,"const_token","","",90,null],[12,"ident","","",90,null],[12,"colon_token","","",90,null],[12,"ty","","",90,null],[12,"default","","",90,null],[12,"semi_token","","",90,null],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",null,null],[12,"attrs","","",91,null],[12,"mac","","",91,null],[12,"semi_token","","",91,null],[3,"TraitItemMethod","","A trait method within the definition of a trait.",null,null],[12,"attrs","","",92,null],[12,"sig","","",92,null],[12,"default","","",92,null],[12,"semi_token","","",92,null],[3,"TraitItemType","","An associated type within the definition of a trait.",null,null],[12,"attrs","","",93,null],[12,"type_token","","",93,null],[12,"ident","","",93,null],[12,"generics","","",93,null],[12,"colon_token","","",93,null],[12,"bounds","","",93,null],[12,"default","","",93,null],[12,"semi_token","","",93,null],[3,"UseGlob","","A glob import in a `use` item: `*`.",null,null],[12,"star_token","","",94,null],[3,"UseGroup","","A braced group of imports in a `use` item: `{A, B, C}`.",null,null],[12,"brace_token","","",95,null],[12,"items","","",95,null],[3,"UseName","","An identifier imported by a `use` item: `HashMap`.",null,null],[12,"ident","","",96,null],[3,"UsePath","","A path prefix of imports in a `use` item: `std::...`.",null,null],[12,"ident","","",97,null],[12,"colon2_token","","",97,null],[12,"tree","","",97,null],[3,"UseRename","","An renamed identifier imported by a `use` item: `HashMap…",null,null],[12,"ident","","",98,null],[12,"as_token","","",98,null],[12,"rename","","",98,null],[3,"File","","A complete file of Rust source code.",null,null],[12,"shebang","","",99,null],[12,"attrs","","",99,null],[12,"items","","",99,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"apostrophe","","",100,null],[12,"ident","","",100,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",101,null],[12,"span","","",101,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",102,null],[12,"bang_token","","",102,null],[12,"delimiter","","",102,null],[12,"tokens","","",102,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",103,null],[12,"brace_token","","",103,null],[12,"variants","","",103,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",104,null],[12,"fields","","",104,null],[12,"semi_token","","",104,null],[3,"DataUnion","","An untagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",105,null],[12,"fields","","",105,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",106,null],[12,"vis","","Visibility of the struct or enum.",106,null],[12,"ident","","Name of the struct or enum.",106,null],[12,"generics","","Generics required to complete the definition.",106,null],[12,"data","","Data within the struct or enum.",106,null],[3,"Block","","A braced block containing Rust statements.",null,null],[12,"brace_token","","",107,null],[12,"stmts","","Statements in a block",107,null],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",null,null],[12,"attrs","","",108,null],[12,"let_token","","",108,null],[12,"pat","","",108,null],[12,"init","","",108,null],[12,"semi_token","","",108,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",109,null],[12,"name","","",109,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize)…",null,null],[12,"attrs","","",110,null],[12,"name","","",110,null],[12,"ty","","",110,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",111,null],[12,"elem","","",111,null],[12,"semi_token","","",111,null],[12,"len","","",111,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"lifetimes","","",112,null],[12,"unsafety","","",112,null],[12,"abi","","",112,null],[12,"fn_token","","",112,null],[12,"paren_token","","",112,null],[12,"inputs","","",112,null],[12,"variadic","","",112,null],[12,"output","","",112,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",113,null],[12,"elem","","",113,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a…",null,null],[12,"impl_token","","",114,null],[12,"bounds","","",114,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler:…",null,null],[12,"underscore_token","","",115,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",116,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",117,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",118,null],[12,"elem","","",118,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with…",null,null],[12,"qself","","",119,null],[12,"path","","",119,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",120,null],[12,"const_token","","",120,null],[12,"mutability","","",120,null],[12,"elem","","",120,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",121,null],[12,"lifetime","","",121,null],[12,"mutability","","",121,null],[12,"elem","","",121,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",122,null],[12,"elem","","",122,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where…",null,null],[12,"dyn_token","","",123,null],[12,"bounds","","",123,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",124,null],[12,"elems","","",124,null],[3,"Variadic","","The variadic argument of a foreign function.",null,null],[12,"attrs","","",125,null],[12,"dots","","",125,null],[3,"FieldPat","","A single field in a struct pattern.",null,null],[12,"attrs","","",126,null],[12,"member","","",126,null],[12,"colon_token","","",126,null],[12,"pat","","",126,null],[3,"PatBox","","A box pattern: `box v`.",null,null],[12,"attrs","","",127,null],[12,"box_token","","",127,null],[12,"pat","","",127,null],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @…",null,null],[12,"attrs","","",128,null],[12,"by_ref","","",128,null],[12,"mutability","","",128,null],[12,"ident","","",128,null],[12,"subpat","","",128,null],[3,"PatLit","","A literal pattern: `0`.",null,null],[12,"attrs","","",129,null],[12,"expr","","",129,null],[3,"PatMacro","","A macro in pattern position.",null,null],[12,"attrs","","",130,null],[12,"mac","","",130,null],[3,"PatOr","","A pattern that matches any one of a set of cases.",null,null],[12,"attrs","","",131,null],[12,"leading_vert","","",131,null],[12,"cases","","",131,null],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified…",null,null],[12,"attrs","","",132,null],[12,"qself","","",132,null],[12,"path","","",132,null],[3,"PatRange","","A range pattern: `1..=2`.",null,null],[12,"attrs","","",133,null],[12,"lo","","",133,null],[12,"limits","","",133,null],[12,"hi","","",133,null],[3,"PatReference","","A reference pattern: `&mut var`.",null,null],[12,"attrs","","",134,null],[12,"and_token","","",134,null],[12,"mutability","","",134,null],[12,"pat","","",134,null],[3,"PatRest","","The dots in a tuple or slice pattern: `[0, 1, ..]`",null,null],[12,"attrs","","",135,null],[12,"dot2_token","","",135,null],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, ref i @ .., y,…",null,null],[12,"attrs","","",136,null],[12,"bracket_token","","",136,null],[12,"elems","","",136,null],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",null,null],[12,"attrs","","",137,null],[12,"path","","",137,null],[12,"brace_token","","",137,null],[12,"fields","","",137,null],[12,"dot2_token","","",137,null],[3,"PatTuple","","A tuple pattern: `(a, b)`.",null,null],[12,"attrs","","",138,null],[12,"paren_token","","",138,null],[12,"elems","","",138,null],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y,…",null,null],[12,"attrs","","",139,null],[12,"path","","",139,null],[12,"pat","","",139,null],[3,"PatType","","A type ascription pattern: `foo: f64`.",null,null],[12,"attrs","","",140,null],[12,"pat","","",140,null],[12,"colon_token","","",140,null],[12,"ty","","",140,null],[3,"PatWild","","A pattern that matches any value: `_`.",null,null],[12,"attrs","","",141,null],[12,"underscore_token","","",141,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>`…",null,null],[12,"colon2_token","","",142,null],[12,"lt_token","","",142,null],[12,"args","","",142,null],[12,"gt_token","","",142,null],[3,"Binding","","A binding (equality constraint) on an associated type:…",null,null],[12,"ident","","",143,null],[12,"eq_token","","",143,null],[12,"ty","","",143,null],[3,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",null,null],[12,"ident","","",144,null],[12,"colon_token","","",144,null],[12,"bounds","","",144,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in…",null,null],[12,"paren_token","","",145,null],[12,"inputs","","`(A, B)`",145,null],[12,"output","","`C`",145,null],[3,"Path","","A path at which a named item is exported:…",null,null],[12,"leading_colon","","",146,null],[12,"segments","","",146,null],[3,"PathSegment","","A segment of a path together with any path arguments on…",null,null],[12,"ident","","",147,null],[12,"arguments","","",147,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T…",null,null],[12,"lt_token","","",148,null],[12,"ty","","",148,null],[12,"position","","",148,null],[12,"as_token","","",148,null],[12,"gt_token","","",148,null],[3,"Error","","Error returned when a Syn parser cannot parse the input…",null,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and…",null,null],[13,"Outer","","",149,null],[13,"Inner","","",149,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Path","","",150,null],[13,"List","","A structured list within an attribute, like `derive(Copy,…",150,null],[13,"NameValue","","A name-value pair within an attribute, like `feature =…",150,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in…",151,null],[13,"Lit","","A Rust literal, like the `\"new_name\"` in…",151,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point…",152,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as…",152,null],[13,"Unit","","Unit struct or unit variant such as `None`.",152,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or…",null,null],[13,"Public","","A public visibility level: `pub`.",153,null],[13,"Crate","","A crate-level visibility: `crate`.",153,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or…",153,null],[13,"Inherited","","An inherited visibility, which usually means private.",153,null],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",null,null],[13,"Type","","A type argument.",154,null],[13,"Const","","A const expression. Must be inside of a block.",154,null],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",155,null],[13,"Closed","","Inclusive at the beginning and end.",155,null],[4,"Expr","","A Rust expression.",null,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",156,null],[13,"Assign","","An assignment expression: `a = compute()`.",156,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",156,null],[13,"Async","","An async block: `async { ... }`.",156,null],[13,"Await","","An await expression: `fut.await`.",156,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",156,null],[13,"Block","","A blocked scope: `{ ... }`.",156,null],[13,"Box","","A box expression: `box f`.",156,null],[13,"Break","","A `break`, with an optional label to break and an optional…",156,null],[13,"Call","","A function call expression: `invoke(a, b)`.",156,null],[13,"Cast","","A cast expression: `foo as f64`.",156,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",156,null],[13,"Continue","","A `continue`, with an optional label.",156,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple…",156,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",156,null],[13,"Group","","An expression contained within invisible delimiters.",156,null],[13,"If","","An `if` expression with an optional `else` block: `if expr…",156,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",156,null],[13,"Let","","A `let` guard: `let Some(x) = opt`.",156,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",156,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",156,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",156,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {}…",156,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",156,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",156,null],[13,"Path","","A path like `std::mem::replace` possibly containing…",156,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",156,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",156,null],[13,"Repeat","","An array literal constructed from one repeated element:…",156,null],[13,"Return","","A `return`, with an optional value to be returned.",156,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",156,null],[13,"Try","","A try-expression: `expr?`.",156,null],[13,"TryBlock","","A try block: `try { ... }`.",156,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",156,null],[13,"Type","","A type ascription expression: `foo: f64`.",156,null],[13,"Unary","","A unary operation: `!x`, `*x`.",156,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",156,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",156,null],[13,"While","","A while loop: `while expr { ... }`.",156,null],[13,"Yield","","A yield expression: `yield expr`.",156,null],[4,"Member","","A struct or tuple struct field accessed in a struct…",null,null],[13,"Named","","A named field like `self.x`.",157,null],[13,"Unnamed","","An unnamed field like `self.0`.",157,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T:…",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",158,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",158,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",158,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the…",null,null],[13,"None","","",159,null],[13,"Maybe","","",159,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",160,null],[13,"Lifetime","","",160,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T:…",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>:…",161,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",161,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",161,null],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn…",null,null],[13,"Receiver","","The `self` argument of an associated method, whether taken…",162,null],[13,"Typed","","A function argument accepted by pattern and type.",162,null],[4,"ForeignItem","","An item within an `extern` block.",null,null],[13,"Fn","","A foreign function in an `extern` block.",163,null],[13,"Static","","A foreign static item in an `extern` block: `static ext:…",163,null],[13,"Type","","A foreign type in an `extern` block: `type void`.",163,null],[13,"Macro","","A macro invocation within an extern block.",163,null],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",163,null],[4,"ImplItem","","An item within an impl block.",null,null],[13,"Const","","An associated constant within an impl block.",164,null],[13,"Method","","A method within an impl block.",164,null],[13,"Type","","An associated type within an impl block.",164,null],[13,"Macro","","A macro invocation within an impl block.",164,null],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",164,null],[4,"Item","","Things that can appear directly inside of a module or scope.",null,null],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",165,null],[13,"Enum","","An enum definition: `enum Foo<A, B> { A(A), B(B) }`.",165,null],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",165,null],[13,"Fn","","A free-standing function: `fn process(n: usize) ->…",165,null],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",165,null],[13,"Impl","","An impl block providing trait or associated items:…",165,null],[13,"Macro","","A macro invocation, which includes `macro_rules!`…",165,null],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro`…",165,null],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",165,null],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",165,null],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",165,null],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",165,null],[13,"TraitAlias","","A trait alias: `pub trait SharableIterator = Iterator +…",165,null],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T,…",165,null],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",165,null],[13,"Use","","A use declaration: `use std::collections::HashMap`.",165,null],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",165,null],[4,"TraitItem","","An item declaration within the definition of a trait.",null,null],[13,"Const","","An associated constant within the definition of a trait.",166,null],[13,"Method","","A trait method within the definition of a trait.",166,null],[13,"Type","","An associated type within the definition of a trait.",166,null],[13,"Macro","","A macro invocation within the definition of a trait.",166,null],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by…",166,null],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as…",null,null],[13,"Path","","A path prefix of imports in a `use` item: `std::...`.",167,null],[13,"Name","","An identifier imported by a `use` item: `HashMap`.",167,null],[13,"Rename","","An renamed identifier imported by a `use` item: `HashMap…",167,null],[13,"Glob","","A glob import in a `use` item: `*`.",167,null],[13,"Group","","A braced group of imports in a `use` item: `{A, B, C}`.",167,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",168,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",168,null],[13,"Byte","","A byte literal: `b'f'`.",168,null],[13,"Char","","A character literal: `'a'`.",168,null],[13,"Int","","An integer literal: `1` or `1u16`.",168,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",168,null],[13,"Bool","","A boolean literal: `true` or `false`.",168,null],[13,"Verbatim","","A raw token literal not interpreted by Syn.",168,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a…",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",169,null],[13,"Raw","","A raw string like `r##\"data\"##`.",169,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or…",null,null],[13,"Paren","","",170,null],[13,"Brace","","",170,null],[13,"Bracket","","",170,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",171,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",171,null],[13,"Union","","An untagged union input to a `proc_macro_derive` macro.",171,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",172,null],[13,"Sub","","The `-` operator (subtraction)",172,null],[13,"Mul","","The `*` operator (multiplication)",172,null],[13,"Div","","The `/` operator (division)",172,null],[13,"Rem","","The `%` operator (modulus)",172,null],[13,"And","","The `&&` operator (logical and)",172,null],[13,"Or","","The `||` operator (logical or)",172,null],[13,"BitXor","","The `^` operator (bitwise xor)",172,null],[13,"BitAnd","","The `&` operator (bitwise and)",172,null],[13,"BitOr","","The `|` operator (bitwise or)",172,null],[13,"Shl","","The `<<` operator (shift left)",172,null],[13,"Shr","","The `>>` operator (shift right)",172,null],[13,"Eq","","The `==` operator (equality)",172,null],[13,"Lt","","The `<` operator (less than)",172,null],[13,"Le","","The `<=` operator (less than or equal to)",172,null],[13,"Ne","","The `!=` operator (not equal to)",172,null],[13,"Ge","","The `>=` operator (greater than or equal to)",172,null],[13,"Gt","","The `>` operator (greater than)",172,null],[13,"AddEq","","The `+=` operator",172,null],[13,"SubEq","","The `-=` operator",172,null],[13,"MulEq","","The `*=` operator",172,null],[13,"DivEq","","The `/=` operator",172,null],[13,"RemEq","","The `%=` operator",172,null],[13,"BitXorEq","","The `^=` operator",172,null],[13,"BitAndEq","","The `&=` operator",172,null],[13,"BitOrEq","","The `|=` operator",172,null],[13,"ShlEq","","The `<<=` operator",172,null],[13,"ShrEq","","The `>>=` operator",172,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",173,null],[13,"Not","","The `!` operator for logical inversion",173,null],[13,"Neg","","The `-` operator for negation",173,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",174,null],[13,"Item","","An item definition.",174,null],[13,"Expr","","Expr without trailing semicolon.",174,null],[13,"Semi","","Expression with trailing semicolon.",174,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",175,null],[13,"Type","","A particular type is returned.",175,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Array","","A fixed size array type: `[T; n]`.",176,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",176,null],[13,"Group","","A type contained within invisible delimiters.",176,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a…",176,null],[13,"Infer","","Indication that a type should be inferred by the compiler:…",176,null],[13,"Macro","","A macro in the type position.",176,null],[13,"Never","","The never type: `!`.",176,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",176,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with…",176,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",176,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",176,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",176,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where…",176,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",176,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",176,null],[4,"Pat","","A pattern in a local binding, function signature, match…",null,null],[13,"Box","","A box pattern: `box v`.",177,null],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @…",177,null],[13,"Lit","","A literal pattern: `0`.",177,null],[13,"Macro","","A macro in pattern position.",177,null],[13,"Or","","A pattern that matches any one of a set of cases.",177,null],[13,"Path","","A path pattern like `Color::Red`, optionally qualified…",177,null],[13,"Range","","A range pattern: `1..=2`.",177,null],[13,"Reference","","A reference pattern: `&mut var`.",177,null],[13,"Rest","","The dots in a tuple or slice pattern: `[0, 1, ..]`",177,null],[13,"Slice","","A dynamically sized slice pattern: `[a, b, ref i @ .., y,…",177,null],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",177,null],[13,"Tuple","","A tuple pattern: `(a, b)`.",177,null],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y,…",177,null],[13,"Type","","A type ascription pattern: `foo: f64`.",177,null],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",177,null],[13,"Wild","","A pattern that matches any value: `_`.",177,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item =…",null,null],[13,"Lifetime","","A lifetime argument.",178,null],[13,"Type","","A type argument.",178,null],[13,"Binding","","A binding (equality constraint) on an associated type: the…",178,null],[13,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",178,null],[13,"Const","","A const expression. Must be inside of a block.",178,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path…",null,null],[13,"None","","",179,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",179,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",179,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree…",null,[[["tokenstream"]],[["parse"],["result"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax…",null,[[["tokenstream"]],[["parse"],["result"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree…",null,[[["str"]],[["parse"],["result"]]]],[5,"parse_file","","Parse the content of a file of Rust code.",null,[[["str"]],[["file"],["result",["file"]]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and…",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"spans","","",180,null],[3,"Abstract","","`abstract`",null,null],[12,"span","","",181,null],[3,"As","","`as`",null,null],[12,"span","","",182,null],[3,"Async","","`async`",null,null],[12,"span","","",183,null],[3,"Auto","","`auto`",null,null],[12,"span","","",184,null],[3,"Await","","`await`",null,null],[12,"span","","",185,null],[3,"Become","","`become`",null,null],[12,"span","","",186,null],[3,"Box","","`box`",null,null],[12,"span","","",187,null],[3,"Break","","`break`",null,null],[12,"span","","",188,null],[3,"Const","","`const`",null,null],[12,"span","","",189,null],[3,"Continue","","`continue`",null,null],[12,"span","","",190,null],[3,"Crate","","`crate`",null,null],[12,"span","","",191,null],[3,"Default","","`default`",null,null],[12,"span","","",192,null],[3,"Do","","`do`",null,null],[12,"span","","",193,null],[3,"Dyn","","`dyn`",null,null],[12,"span","","",194,null],[3,"Else","","`else`",null,null],[12,"span","","",195,null],[3,"Enum","","`enum`",null,null],[12,"span","","",196,null],[3,"Extern","","`extern`",null,null],[12,"span","","",197,null],[3,"Final","","`final`",null,null],[12,"span","","",198,null],[3,"Fn","","`fn`",null,null],[12,"span","","",199,null],[3,"For","","`for`",null,null],[12,"span","","",200,null],[3,"If","","`if`",null,null],[12,"span","","",201,null],[3,"Impl","","`impl`",null,null],[12,"span","","",202,null],[3,"In","","`in`",null,null],[12,"span","","",203,null],[3,"Let","","`let`",null,null],[12,"span","","",204,null],[3,"Loop","","`loop`",null,null],[12,"span","","",205,null],[3,"Macro","","`macro`",null,null],[12,"span","","",206,null],[3,"Match","","`match`",null,null],[12,"span","","",207,null],[3,"Mod","","`mod`",null,null],[12,"span","","",208,null],[3,"Move","","`move`",null,null],[12,"span","","",209,null],[3,"Mut","","`mut`",null,null],[12,"span","","",210,null],[3,"Override","","`override`",null,null],[12,"span","","",211,null],[3,"Priv","","`priv`",null,null],[12,"span","","",212,null],[3,"Pub","","`pub`",null,null],[12,"span","","",213,null],[3,"Ref","","`ref`",null,null],[12,"span","","",214,null],[3,"Return","","`return`",null,null],[12,"span","","",215,null],[3,"SelfType","","`Self`",null,null],[12,"span","","",216,null],[3,"SelfValue","","`self`",null,null],[12,"span","","",217,null],[3,"Static","","`static`",null,null],[12,"span","","",218,null],[3,"Struct","","`struct`",null,null],[12,"span","","",219,null],[3,"Super","","`super`",null,null],[12,"span","","",220,null],[3,"Trait","","`trait`",null,null],[12,"span","","",221,null],[3,"Try","","`try`",null,null],[12,"span","","",222,null],[3,"Type","","`type`",null,null],[12,"span","","",223,null],[3,"Typeof","","`typeof`",null,null],[12,"span","","",224,null],[3,"Union","","`union`",null,null],[12,"span","","",225,null],[3,"Unsafe","","`unsafe`",null,null],[12,"span","","",226,null],[3,"Unsized","","`unsized`",null,null],[12,"span","","",227,null],[3,"Use","","`use`",null,null],[12,"span","","",228,null],[3,"Virtual","","`virtual`",null,null],[12,"span","","",229,null],[3,"Where","","`where`",null,null],[12,"span","","",230,null],[3,"While","","`while`",null,null],[12,"span","","",231,null],[3,"Yield","","`yield`",null,null],[12,"span","","",232,null],[3,"Add","","`+`",null,null],[12,"spans","","",233,null],[3,"AddEq","","`+=`",null,null],[12,"spans","","",234,null],[3,"And","","`&`",null,null],[12,"spans","","",235,null],[3,"AndAnd","","`&&`",null,null],[12,"spans","","",236,null],[3,"AndEq","","`&=`",null,null],[12,"spans","","",237,null],[3,"At","","`@`",null,null],[12,"spans","","",238,null],[3,"Bang","","`!`",null,null],[12,"spans","","",239,null],[3,"Caret","","`^`",null,null],[12,"spans","","",240,null],[3,"CaretEq","","`^=`",null,null],[12,"spans","","",241,null],[3,"Colon","","`:`",null,null],[12,"spans","","",242,null],[3,"Colon2","","`::`",null,null],[12,"spans","","",243,null],[3,"Comma","","`,`",null,null],[12,"spans","","",244,null],[3,"Div","","`/`",null,null],[12,"spans","","",245,null],[3,"DivEq","","`/=`",null,null],[12,"spans","","",246,null],[3,"Dollar","","`$`",null,null],[12,"spans","","",247,null],[3,"Dot","","`.`",null,null],[12,"spans","","",248,null],[3,"Dot2","","`..`",null,null],[12,"spans","","",249,null],[3,"Dot3","","`...`",null,null],[12,"spans","","",250,null],[3,"DotDotEq","","`..=`",null,null],[12,"spans","","",251,null],[3,"Eq","","`=`",null,null],[12,"spans","","",252,null],[3,"EqEq","","`==`",null,null],[12,"spans","","",253,null],[3,"Ge","","`>=`",null,null],[12,"spans","","",254,null],[3,"Gt","","`>`",null,null],[12,"spans","","",255,null],[3,"Le","","`<=`",null,null],[12,"spans","","",256,null],[3,"Lt","","`<`",null,null],[12,"spans","","",257,null],[3,"MulEq","","`*=`",null,null],[12,"spans","","",258,null],[3,"Ne","","`!=`",null,null],[12,"spans","","",259,null],[3,"Or","","`|`",null,null],[12,"spans","","",260,null],[3,"OrEq","","`|=`",null,null],[12,"spans","","",261,null],[3,"OrOr","","`||`",null,null],[12,"spans","","",262,null],[3,"Pound","","`#`",null,null],[12,"spans","","",263,null],[3,"Question","","`?`",null,null],[12,"spans","","",264,null],[3,"RArrow","","`->`",null,null],[12,"spans","","",265,null],[3,"LArrow","","`<-`",null,null],[12,"spans","","",266,null],[3,"Rem","","`%`",null,null],[12,"spans","","",267,null],[3,"RemEq","","`%=`",null,null],[12,"spans","","",268,null],[3,"FatArrow","","`=>`",null,null],[12,"spans","","",269,null],[3,"Semi","","`;`",null,null],[12,"spans","","",270,null],[3,"Shl","","`<<`",null,null],[12,"spans","","",271,null],[3,"ShlEq","","`<<=`",null,null],[12,"spans","","",272,null],[3,"Shr","","`>>`",null,null],[12,"spans","","",273,null],[3,"ShrEq","","`>>=`",null,null],[12,"spans","","",274,null],[3,"Star","","`*`",null,null],[12,"spans","","",275,null],[3,"Sub","","`-`",null,null],[12,"spans","","",276,null],[3,"SubEq","","`-=`",null,null],[12,"spans","","",277,null],[3,"Tilde","","`~`",null,null],[12,"spans","","",278,null],[3,"Brace","","`{...}`",null,null],[12,"span","","",279,null],[3,"Bracket","","`[...]`",null,null],[12,"span","","",280,null],[3,"Paren","","`(...)`",null,null],[12,"span","","",281,null],[3,"Group","","None-delimited group",null,null],[12,"span","","",282,null],[8,"Token","","Marker trait for types that represent single tokens.",null,null],[11,"surround","","",279,[[["tokenstream"],["self"],["f"]]]],[11,"surround","","",280,[[["tokenstream"],["self"],["f"]]]],[11,"surround","","",281,[[["tokenstream"],["self"],["f"]]]],[11,"surround","","",282,[[["tokenstream"],["self"],["f"]]]],[11,"parse_meta","syn","Parses the content of the attribute, consisting of the…",0,[[["self"]],[["result",["meta"]],["meta"]]]],[11,"parse_args","","Parse the arguments to the attribute as a syntax tree.",0,[[["self"]],[["parse"],["result"]]]],[11,"parse_args_with","","Parse the arguments to the attribute using the given parser.",0,[[["parser"],["self"]],["result"]]],[11,"parse_outer","","Parses zero or more outer attributes from the stream.",0,[[["parsestream"]],[["result",["vec"]],["vec"]]]],[11,"parse_inner","","Parses zero or more inner attributes from the stream.",0,[[["parsestream"]],[["result",["vec"]],["vec"]]]],[11,"path","","Returns the identifier that begins this structured meta…",150,[[["self"]],["path"]]],[11,"parse_named","","Parses a named (braced struct) field.",3,[[["parsestream"]],["result"]]],[11,"parse_unnamed","","Parses an unnamed (tuple struct) field.",3,[[["parsestream"]],["result"]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this…",152,[[["self"]],[["field"],["iter",["field"]]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items…",152,[[["self"]],[["field"],["itermut",["field"]]]]],[11,"len","","Returns the number of fields.",152,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if there are zero fields.",152,[[["self"]],["bool"]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type…",56,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type…",56,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime…",56,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the…",56,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant…",56,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the…",56,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one…",56,[[["self"]],["whereclause"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for…",56,[[["self"]]]],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like…",283,[[["self"]],["turbofish"]]],[11,"new","","",57,[[["lifetime"]],["self"]]],[11,"receiver","","A method's `self` receiver, such as `&self` or `self:…",89,[[["self"]],[["option",["fnarg"]],["fnarg"]]]],[11,"lifetime","","",88,[[["self"]],[["option",["lifetime"]],["lifetime"]]]],[11,"new","","Panics",100,[[["str"],["span"]],["self"]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",168,[[["literal"]],["self"]]],[11,"new","","",284,[[["str"],["span"]],["self"]]],[11,"value","","",284,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string…",284,[[["self"]],[["parse"],["result"]]]],[11,"parse_with","","Invoke parser on the content of this string literal.",284,[[["parser"],["self"]],["result"]]],[11,"span","","",284,[[["self"]],["span"]]],[11,"set_span","","",284,[[["self"],["span"]]]],[11,"suffix","","",284,[[["self"]],["str"]]],[11,"new","","",285,[[["span"]],["self"]]],[11,"value","","",285,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"span","","",285,[[["self"]],["span"]]],[11,"set_span","","",285,[[["self"],["span"]]]],[11,"new","","",286,[[["span"],["u8"]],["self"]]],[11,"value","","",286,[[["self"]],["u8"]]],[11,"span","","",286,[[["self"]],["span"]]],[11,"set_span","","",286,[[["self"],["span"]]]],[11,"new","","",287,[[["char"],["span"]],["self"]]],[11,"value","","",287,[[["self"]],["char"]]],[11,"span","","",287,[[["self"]],["span"]]],[11,"set_span","","",287,[[["self"],["span"]]]],[11,"new","","",288,[[["str"],["span"]],["self"]]],[11,"base10_digits","","",288,[[["self"]],["str"]]],[11,"base10_parse","","Parses the literal into a selected number type.",288,[[["self"]],["result"]]],[11,"suffix","","",288,[[["self"]],["str"]]],[11,"span","","",288,[[["self"]],["span"]]],[11,"set_span","","",288,[[["self"],["span"]]]],[11,"new","","",289,[[["str"],["span"]],["self"]]],[11,"base10_digits","","",289,[[["self"]],["str"]]],[11,"base10_parse","","",289,[[["self"]],["result"]]],[11,"suffix","","",289,[[["self"]],["str"]]],[11,"span","","",289,[[["self"]],["span"]]],[11,"set_span","","",289,[[["self"],["span"]]]],[11,"parse_body","","Parse the tokens within the macro invocation's delimiters…",102,[[["self"]],[["parse"],["result"]]]],[11,"parse_body_with","","Parse the tokens within the macro invocation's delimiters…",102,[[["parser"],["self"]],["result"]]],[11,"parse_within","","Parse the body of a block as zero or more statements,…",107,[[["parsestream"]],[["vec",["stmt"]],["result",["vec"]]]]],[11,"without_plus","","In some positions, types may not contain the `+`…",176,[[["parsestream"]],["result"]]],[11,"without_plus","","",175,[[["parsestream"]],["result"]]],[11,"parse","","",175,[[["bool"],["parsestream"]],["result"]]],[11,"without_plus","","",123,[[["parsestream"]],["result"]]],[11,"parse","","",123,[[["bool"],["parsestream"]],["result"]]],[11,"parse_mod_style","","Parse a `Path` containing no path arguments on any of its…",146,[[["parsestream"]],["result"]]],[11,"is_ident","","Determines whether this is a path of length 1 equal to the…",146,[[["i"],["self"]],["bool"]]],[11,"get_ident","","If this path consists of a single ident, returns the ident.",146,[[["self"]],[["ident"],["option",["ident"]]]]],[11,"is_empty","","",179,[[["self"]],["bool"]]],[0,"buffer","","A stably addressed token buffer supporting efficient…",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times,…",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the…",290,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the…",290,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer…",290,[[["self"]],["cursor"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",291,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end…",291,[[],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given…",291,[[["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along…",291,[[],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along…",291,[[],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along…",291,[[],["option"]]],[11,"lifetime","","If the cursor is pointing at a `Lifetime`, returns it…",291,[[],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into…",291,[[],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it…",291,[[],["option"]]],[11,"span","","Returns the `Span` of the current token, or…",291,[[],["span"]]],[0,"ext","syn","Extension traits to provide parsing methods on foreign…",null,null],[8,"IdentExt","syn::ext","Additional methods for `Ident` not provided by proc-macro2…",null,null],[10,"parse_any","","Parses any identifier including keywords.",292,[[["parsestream"]],["result"]]],[18,"peek_any","","Peeks any identifier including keywords. Usage:…",292,null],[10,"unraw","","Strips the raw marker `r#`, if any, from the beginning of…",292,[[["self"]],["ident"]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by…",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T`…",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut…",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its…",null,null],[13,"Punctuated","","",293,null],[13,"End","","",293,null],[11,"new","","Creates an empty punctuated sequence.",294,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty,…",294,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated…",294,[[["self"]],["usize"]]],[11,"first","","Borrows the first element in this sequence.",294,[[["self"]],[["t"],["option"]]]],[11,"first_mut","","Mutably borrows the first element in this sequence.",294,[[["self"]],[["option"],["t"]]]],[11,"last","","Borrows the last element in this sequence.",294,[[["self"]],[["t"],["option"]]]],[11,"last_mut","","Mutably borrows the last element in this sequence.",294,[[["self"]],[["option"],["t"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of…",294,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree…",294,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as…",294,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as…",294,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as…",294,[[],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated…",294,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this…",294,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or…",294,[[["self"]],[["pair"],["option",["pair"]]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a…",294,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it…",294,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated…",294,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",294,[[["self"],["usize"],["t"]]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by…",294,[[["parsestream"]],["result"]]],[11,"parse_terminated_with","","Parses zero or more occurrences of `T` using the given…",294,[[["parsestream"]],["result"]]],[11,"parse_separated_nonempty","","Parses one or more occurrences of `T` separated by…",294,[[["parsestream"]],["result"]]],[11,"parse_separated_nonempty_with","","Parses one or more occurrences of `T` using the given…",294,[[["parsestream"]],["result"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair,…",293,[[],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",293,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated…",293,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless…",293,[[["self"]],[["option"],["p"]]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an…",293,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree…",293,[[]]],[0,"spanned","syn","A trait that can provide the `Span` of the complete…",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete…",null,null],[10,"span","","Returns a `Span` covering the complete contents of this…",295,[[["self"]],["span"]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax…",null,null],[5,"visit_abi","syn::visit","",null,[[["abi"],["v"]]]],[5,"visit_angle_bracketed_generic_arguments","","",null,[[["anglebracketedgenericarguments"],["v"]]]],[5,"visit_arm","","",null,[[["arm"],["v"]]]],[5,"visit_attr_style","","",null,[[["v"],["attrstyle"]]]],[5,"visit_attribute","","",null,[[["v"],["attribute"]]]],[5,"visit_bare_fn_arg","","",null,[[["barefnarg"],["v"]]]],[5,"visit_bin_op","","",null,[[["binop"],["v"]]]],[5,"visit_binding","","",null,[[["binding"],["v"]]]],[5,"visit_block","","",null,[[["v"],["block"]]]],[5,"visit_bound_lifetimes","","",null,[[["boundlifetimes"],["v"]]]],[5,"visit_const_param","","",null,[[["constparam"],["v"]]]],[5,"visit_constraint","","",null,[[["v"],["constraint"]]]],[5,"visit_data","","",null,[[["data"],["v"]]]],[5,"visit_data_enum","","",null,[[["v"],["dataenum"]]]],[5,"visit_data_struct","","",null,[[["datastruct"],["v"]]]],[5,"visit_data_union","","",null,[[["v"],["dataunion"]]]],[5,"visit_derive_input","","",null,[[["v"],["deriveinput"]]]],[5,"visit_expr","","",null,[[["v"],["expr"]]]],[5,"visit_expr_array","","",null,[[["exprarray"],["v"]]]],[5,"visit_expr_assign","","",null,[[["v"],["exprassign"]]]],[5,"visit_expr_assign_op","","",null,[[["exprassignop"],["v"]]]],[5,"visit_expr_async","","",null,[[["exprasync"],["v"]]]],[5,"visit_expr_await","","",null,[[["exprawait"],["v"]]]],[5,"visit_expr_binary","","",null,[[["exprbinary"],["v"]]]],[5,"visit_expr_block","","",null,[[["v"],["exprblock"]]]],[5,"visit_expr_box","","",null,[[["v"],["exprbox"]]]],[5,"visit_expr_break","","",null,[[["v"],["exprbreak"]]]],[5,"visit_expr_call","","",null,[[["exprcall"],["v"]]]],[5,"visit_expr_cast","","",null,[[["v"],["exprcast"]]]],[5,"visit_expr_closure","","",null,[[["v"],["exprclosure"]]]],[5,"visit_expr_continue","","",null,[[["exprcontinue"],["v"]]]],[5,"visit_expr_field","","",null,[[["exprfield"],["v"]]]],[5,"visit_expr_for_loop","","",null,[[["exprforloop"],["v"]]]],[5,"visit_expr_group","","",null,[[["v"],["exprgroup"]]]],[5,"visit_expr_if","","",null,[[["exprif"],["v"]]]],[5,"visit_expr_index","","",null,[[["exprindex"],["v"]]]],[5,"visit_expr_let","","",null,[[["v"],["exprlet"]]]],[5,"visit_expr_lit","","",null,[[["v"],["exprlit"]]]],[5,"visit_expr_loop","","",null,[[["v"],["exprloop"]]]],[5,"visit_expr_macro","","",null,[[["v"],["exprmacro"]]]],[5,"visit_expr_match","","",null,[[["v"],["exprmatch"]]]],[5,"visit_expr_method_call","","",null,[[["v"],["exprmethodcall"]]]],[5,"visit_expr_paren","","",null,[[["v"],["exprparen"]]]],[5,"visit_expr_path","","",null,[[["exprpath"],["v"]]]],[5,"visit_expr_range","","",null,[[["exprrange"],["v"]]]],[5,"visit_expr_reference","","",null,[[["v"],["exprreference"]]]],[5,"visit_expr_repeat","","",null,[[["exprrepeat"],["v"]]]],[5,"visit_expr_return","","",null,[[["v"],["exprreturn"]]]],[5,"visit_expr_struct","","",null,[[["v"],["exprstruct"]]]],[5,"visit_expr_try","","",null,[[["exprtry"],["v"]]]],[5,"visit_expr_try_block","","",null,[[["exprtryblock"],["v"]]]],[5,"visit_expr_tuple","","",null,[[["exprtuple"],["v"]]]],[5,"visit_expr_type","","",null,[[["exprtype"],["v"]]]],[5,"visit_expr_unary","","",null,[[["v"],["exprunary"]]]],[5,"visit_expr_unsafe","","",null,[[["v"],["exprunsafe"]]]],[5,"visit_expr_while","","",null,[[["exprwhile"],["v"]]]],[5,"visit_expr_yield","","",null,[[["expryield"],["v"]]]],[5,"visit_field","","",null,[[["v"],["field"]]]],[5,"visit_field_pat","","",null,[[["v"],["fieldpat"]]]],[5,"visit_field_value","","",null,[[["fieldvalue"],["v"]]]],[5,"visit_fields","","",null,[[["v"],["fields"]]]],[5,"visit_fields_named","","",null,[[["v"],["fieldsnamed"]]]],[5,"visit_fields_unnamed","","",null,[[["fieldsunnamed"],["v"]]]],[5,"visit_file","","",null,[[["file"],["v"]]]],[5,"visit_fn_arg","","",null,[[["v"],["fnarg"]]]],[5,"visit_foreign_item","","",null,[[["foreignitem"],["v"]]]],[5,"visit_foreign_item_fn","","",null,[[["foreignitemfn"],["v"]]]],[5,"visit_foreign_item_macro","","",null,[[["v"],["foreignitemmacro"]]]],[5,"visit_foreign_item_static","","",null,[[["v"],["foreignitemstatic"]]]],[5,"visit_foreign_item_type","","",null,[[["foreignitemtype"],["v"]]]],[5,"visit_generic_argument","","",null,[[["genericargument"],["v"]]]],[5,"visit_generic_method_argument","","",null,[[["v"],["genericmethodargument"]]]],[5,"visit_generic_param","","",null,[[["v"],["genericparam"]]]],[5,"visit_generics","","",null,[[["v"],["generics"]]]],[5,"visit_ident","","",null,[[["v"],["ident"]]]],[5,"visit_impl_item","","",null,[[["implitem"],["v"]]]],[5,"visit_impl_item_const","","",null,[[["v"],["implitemconst"]]]],[5,"visit_impl_item_macro","","",null,[[["v"],["implitemmacro"]]]],[5,"visit_impl_item_method","","",null,[[["v"],["implitemmethod"]]]],[5,"visit_impl_item_type","","",null,[[["v"],["implitemtype"]]]],[5,"visit_index","","",null,[[["v"],["index"]]]],[5,"visit_item","","",null,[[["item"],["v"]]]],[5,"visit_item_const","","",null,[[["itemconst"],["v"]]]],[5,"visit_item_enum","","",null,[[["itemenum"],["v"]]]],[5,"visit_item_extern_crate","","",null,[[["itemexterncrate"],["v"]]]],[5,"visit_item_fn","","",null,[[["itemfn"],["v"]]]],[5,"visit_item_foreign_mod","","",null,[[["itemforeignmod"],["v"]]]],[5,"visit_item_impl","","",null,[[["v"],["itemimpl"]]]],[5,"visit_item_macro","","",null,[[["itemmacro"],["v"]]]],[5,"visit_item_macro2","","",null,[[["itemmacro2"],["v"]]]],[5,"visit_item_mod","","",null,[[["itemmod"],["v"]]]],[5,"visit_item_static","","",null,[[["v"],["itemstatic"]]]],[5,"visit_item_struct","","",null,[[["v"],["itemstruct"]]]],[5,"visit_item_trait","","",null,[[["itemtrait"],["v"]]]],[5,"visit_item_trait_alias","","",null,[[["v"],["itemtraitalias"]]]],[5,"visit_item_type","","",null,[[["v"],["itemtype"]]]],[5,"visit_item_union","","",null,[[["v"],["itemunion"]]]],[5,"visit_item_use","","",null,[[["itemuse"],["v"]]]],[5,"visit_label","","",null,[[["label"],["v"]]]],[5,"visit_lifetime","","",null,[[["lifetime"],["v"]]]],[5,"visit_lifetime_def","","",null,[[["v"],["lifetimedef"]]]],[5,"visit_lit","","",null,[[["lit"],["v"]]]],[5,"visit_lit_bool","","",null,[[["v"],["litbool"]]]],[5,"visit_lit_byte","","",null,[[["v"],["litbyte"]]]],[5,"visit_lit_byte_str","","",null,[[["v"],["litbytestr"]]]],[5,"visit_lit_char","","",null,[[["litchar"],["v"]]]],[5,"visit_lit_float","","",null,[[["v"],["litfloat"]]]],[5,"visit_lit_int","","",null,[[["litint"],["v"]]]],[5,"visit_lit_str","","",null,[[["v"],["litstr"]]]],[5,"visit_local","","",null,[[["v"],["local"]]]],[5,"visit_macro","","",null,[[["macro"],["v"]]]],[5,"visit_macro_delimiter","","",null,[[["macrodelimiter"],["v"]]]],[5,"visit_member","","",null,[[["member"],["v"]]]],[5,"visit_meta","","",null,[[["v"],["meta"]]]],[5,"visit_meta_list","","",null,[[["metalist"],["v"]]]],[5,"visit_meta_name_value","","",null,[[["v"],["metanamevalue"]]]],[5,"visit_method_turbofish","","",null,[[["methodturbofish"],["v"]]]],[5,"visit_nested_meta","","",null,[[["v"],["nestedmeta"]]]],[5,"visit_parenthesized_generic_arguments","","",null,[[["v"],["parenthesizedgenericarguments"]]]],[5,"visit_pat","","",null,[[["v"],["pat"]]]],[5,"visit_pat_box","","",null,[[["patbox"],["v"]]]],[5,"visit_pat_ident","","",null,[[["patident"],["v"]]]],[5,"visit_pat_lit","","",null,[[["v"],["patlit"]]]],[5,"visit_pat_macro","","",null,[[["patmacro"],["v"]]]],[5,"visit_pat_or","","",null,[[["v"],["pator"]]]],[5,"visit_pat_path","","",null,[[["v"],["patpath"]]]],[5,"visit_pat_range","","",null,[[["v"],["patrange"]]]],[5,"visit_pat_reference","","",null,[[["v"],["patreference"]]]],[5,"visit_pat_rest","","",null,[[["patrest"],["v"]]]],[5,"visit_pat_slice","","",null,[[["patslice"],["v"]]]],[5,"visit_pat_struct","","",null,[[["patstruct"],["v"]]]],[5,"visit_pat_tuple","","",null,[[["v"],["pattuple"]]]],[5,"visit_pat_tuple_struct","","",null,[[["v"],["pattuplestruct"]]]],[5,"visit_pat_type","","",null,[[["pattype"],["v"]]]],[5,"visit_pat_wild","","",null,[[["patwild"],["v"]]]],[5,"visit_path","","",null,[[["v"],["path"]]]],[5,"visit_path_arguments","","",null,[[["v"],["patharguments"]]]],[5,"visit_path_segment","","",null,[[["v"],["pathsegment"]]]],[5,"visit_predicate_eq","","",null,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime","","",null,[[["predicatelifetime"],["v"]]]],[5,"visit_predicate_type","","",null,[[["v"],["predicatetype"]]]],[5,"visit_qself","","",null,[[["qself"],["v"]]]],[5,"visit_range_limits","","",null,[[["v"],["rangelimits"]]]],[5,"visit_receiver","","",null,[[["v"],["receiver"]]]],[5,"visit_return_type","","",null,[[["returntype"],["v"]]]],[5,"visit_signature","","",null,[[["signature"],["v"]]]],[5,"visit_span","","",null,[[["span"],["v"]]]],[5,"visit_stmt","","",null,[[["v"],["stmt"]]]],[5,"visit_trait_bound","","",null,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier","","",null,[[["traitboundmodifier"],["v"]]]],[5,"visit_trait_item","","",null,[[["traititem"],["v"]]]],[5,"visit_trait_item_const","","",null,[[["v"],["traititemconst"]]]],[5,"visit_trait_item_macro","","",null,[[["v"],["traititemmacro"]]]],[5,"visit_trait_item_method","","",null,[[["v"],["traititemmethod"]]]],[5,"visit_trait_item_type","","",null,[[["traititemtype"],["v"]]]],[5,"visit_type","","",null,[[["v"],["type"]]]],[5,"visit_type_array","","",null,[[["typearray"],["v"]]]],[5,"visit_type_bare_fn","","",null,[[["typebarefn"],["v"]]]],[5,"visit_type_group","","",null,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait","","",null,[[["typeimpltrait"],["v"]]]],[5,"visit_type_infer","","",null,[[["v"],["typeinfer"]]]],[5,"visit_type_macro","","",null,[[["typemacro"],["v"]]]],[5,"visit_type_never","","",null,[[["typenever"],["v"]]]],[5,"visit_type_param","","",null,[[["typeparam"],["v"]]]],[5,"visit_type_param_bound","","",null,[[["v"],["typeparambound"]]]],[5,"visit_type_paren","","",null,[[["typeparen"],["v"]]]],[5,"visit_type_path","","",null,[[["v"],["typepath"]]]],[5,"visit_type_ptr","","",null,[[["v"],["typeptr"]]]],[5,"visit_type_reference","","",null,[[["typereference"],["v"]]]],[5,"visit_type_slice","","",null,[[["typeslice"],["v"]]]],[5,"visit_type_trait_object","","",null,[[["v"],["typetraitobject"]]]],[5,"visit_type_tuple","","",null,[[["typetuple"],["v"]]]],[5,"visit_un_op","","",null,[[["v"],["unop"]]]],[5,"visit_use_glob","","",null,[[["useglob"],["v"]]]],[5,"visit_use_group","","",null,[[["v"],["usegroup"]]]],[5,"visit_use_name","","",null,[[["usename"],["v"]]]],[5,"visit_use_path","","",null,[[["usepath"],["v"]]]],[5,"visit_use_rename","","",null,[[["userename"],["v"]]]],[5,"visit_use_tree","","",null,[[["v"],["usetree"]]]],[5,"visit_variadic","","",null,[[["variadic"],["v"]]]],[5,"visit_variant","","",null,[[["v"],["variant"]]]],[5,"visit_vis_crate","","",null,[[["v"],["viscrate"]]]],[5,"visit_vis_public","","",null,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted","","",null,[[["visrestricted"],["v"]]]],[5,"visit_visibility","","",null,[[["visibility"],["v"]]]],[5,"visit_where_clause","","",null,[[["v"],["whereclause"]]]],[5,"visit_where_predicate","","",null,[[["wherepredicate"],["v"]]]],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax…",null,null],[11,"visit_abi","","",296,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",296,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arm","","",296,[[["self"],["arm"]]]],[11,"visit_attr_style","","",296,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",296,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",296,[[["self"],["barefnarg"]]]],[11,"visit_bin_op","","",296,[[["self"],["binop"]]]],[11,"visit_binding","","",296,[[["self"],["binding"]]]],[11,"visit_block","","",296,[[["self"],["block"]]]],[11,"visit_bound_lifetimes","","",296,[[["boundlifetimes"],["self"]]]],[11,"visit_const_param","","",296,[[["constparam"],["self"]]]],[11,"visit_constraint","","",296,[[["self"],["constraint"]]]],[11,"visit_data","","",296,[[["data"],["self"]]]],[11,"visit_data_enum","","",296,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",296,[[["datastruct"],["self"]]]],[11,"visit_data_union","","",296,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",296,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",296,[[["self"],["expr"]]]],[11,"visit_expr_array","","",296,[[["exprarray"],["self"]]]],[11,"visit_expr_assign","","",296,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op","","",296,[[["exprassignop"],["self"]]]],[11,"visit_expr_async","","",296,[[["self"],["exprasync"]]]],[11,"visit_expr_await","","",296,[[["self"],["exprawait"]]]],[11,"visit_expr_binary","","",296,[[["self"],["exprbinary"]]]],[11,"visit_expr_block","","",296,[[["self"],["exprblock"]]]],[11,"visit_expr_box","","",296,[[["self"],["exprbox"]]]],[11,"visit_expr_break","","",296,[[["self"],["exprbreak"]]]],[11,"visit_expr_call","","",296,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",296,[[["self"],["exprcast"]]]],[11,"visit_expr_closure","","",296,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue","","",296,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field","","",296,[[["exprfield"],["self"]]]],[11,"visit_expr_for_loop","","",296,[[["exprforloop"],["self"]]]],[11,"visit_expr_group","","",296,[[["self"],["exprgroup"]]]],[11,"visit_expr_if","","",296,[[["exprif"],["self"]]]],[11,"visit_expr_index","","",296,[[["self"],["exprindex"]]]],[11,"visit_expr_let","","",296,[[["self"],["exprlet"]]]],[11,"visit_expr_lit","","",296,[[["self"],["exprlit"]]]],[11,"visit_expr_loop","","",296,[[["self"],["exprloop"]]]],[11,"visit_expr_macro","","",296,[[["self"],["exprmacro"]]]],[11,"visit_expr_match","","",296,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call","","",296,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren","","",296,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",296,[[["exprpath"],["self"]]]],[11,"visit_expr_range","","",296,[[["exprrange"],["self"]]]],[11,"visit_expr_reference","","",296,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat","","",296,[[["exprrepeat"],["self"]]]],[11,"visit_expr_return","","",296,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct","","",296,[[["self"],["exprstruct"]]]],[11,"visit_expr_try","","",296,[[["exprtry"],["self"]]]],[11,"visit_expr_try_block","","",296,[[["exprtryblock"],["self"]]]],[11,"visit_expr_tuple","","",296,[[["exprtuple"],["self"]]]],[11,"visit_expr_type","","",296,[[["exprtype"],["self"]]]],[11,"visit_expr_unary","","",296,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe","","",296,[[["self"],["exprunsafe"]]]],[11,"visit_expr_while","","",296,[[["self"],["exprwhile"]]]],[11,"visit_expr_yield","","",296,[[["expryield"],["self"]]]],[11,"visit_field","","",296,[[["self"],["field"]]]],[11,"visit_field_pat","","",296,[[["self"],["fieldpat"]]]],[11,"visit_field_value","","",296,[[["self"],["fieldvalue"]]]],[11,"visit_fields","","",296,[[["self"],["fields"]]]],[11,"visit_fields_named","","",296,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",296,[[["fieldsunnamed"],["self"]]]],[11,"visit_file","","",296,[[["self"],["file"]]]],[11,"visit_fn_arg","","",296,[[["self"],["fnarg"]]]],[11,"visit_foreign_item","","",296,[[["foreignitem"],["self"]]]],[11,"visit_foreign_item_fn","","",296,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_macro","","",296,[[["self"],["foreignitemmacro"]]]],[11,"visit_foreign_item_static","","",296,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type","","",296,[[["foreignitemtype"],["self"]]]],[11,"visit_generic_argument","","",296,[[["self"],["genericargument"]]]],[11,"visit_generic_method_argument","","",296,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param","","",296,[[["self"],["genericparam"]]]],[11,"visit_generics","","",296,[[["self"],["generics"]]]],[11,"visit_ident","","",296,[[["self"],["ident"]]]],[11,"visit_impl_item","","",296,[[["self"],["implitem"]]]],[11,"visit_impl_item_const","","",296,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_macro","","",296,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method","","",296,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type","","",296,[[["self"],["implitemtype"]]]],[11,"visit_index","","",296,[[["self"],["index"]]]],[11,"visit_item","","",296,[[["self"],["item"]]]],[11,"visit_item_const","","",296,[[["self"],["itemconst"]]]],[11,"visit_item_enum","","",296,[[["self"],["itemenum"]]]],[11,"visit_item_extern_crate","","",296,[[["self"],["itemexterncrate"]]]],[11,"visit_item_fn","","",296,[[["itemfn"],["self"]]]],[11,"visit_item_foreign_mod","","",296,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl","","",296,[[["self"],["itemimpl"]]]],[11,"visit_item_macro","","",296,[[["itemmacro"],["self"]]]],[11,"visit_item_macro2","","",296,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod","","",296,[[["itemmod"],["self"]]]],[11,"visit_item_static","","",296,[[["self"],["itemstatic"]]]],[11,"visit_item_struct","","",296,[[["self"],["itemstruct"]]]],[11,"visit_item_trait","","",296,[[["itemtrait"],["self"]]]],[11,"visit_item_trait_alias","","",296,[[["self"],["itemtraitalias"]]]],[11,"visit_item_type","","",296,[[["self"],["itemtype"]]]],[11,"visit_item_union","","",296,[[["self"],["itemunion"]]]],[11,"visit_item_use","","",296,[[["self"],["itemuse"]]]],[11,"visit_label","","",296,[[["label"],["self"]]]],[11,"visit_lifetime","","",296,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",296,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",296,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",296,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",296,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",296,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",296,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",296,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",296,[[["litint"],["self"]]]],[11,"visit_lit_str","","",296,[[["self"],["litstr"]]]],[11,"visit_local","","",296,[[["self"],["local"]]]],[11,"visit_macro","","",296,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",296,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",296,[[["member"],["self"]]]],[11,"visit_meta","","",296,[[["self"],["meta"]]]],[11,"visit_meta_list","","",296,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",296,[[["self"],["metanamevalue"]]]],[11,"visit_method_turbofish","","",296,[[["methodturbofish"],["self"]]]],[11,"visit_nested_meta","","",296,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",296,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat","","",296,[[["self"],["pat"]]]],[11,"visit_pat_box","","",296,[[["self"],["patbox"]]]],[11,"visit_pat_ident","","",296,[[["self"],["patident"]]]],[11,"visit_pat_lit","","",296,[[["self"],["patlit"]]]],[11,"visit_pat_macro","","",296,[[["patmacro"],["self"]]]],[11,"visit_pat_or","","",296,[[["self"],["pator"]]]],[11,"visit_pat_path","","",296,[[["self"],["patpath"]]]],[11,"visit_pat_range","","",296,[[["self"],["patrange"]]]],[11,"visit_pat_reference","","",296,[[["self"],["patreference"]]]],[11,"visit_pat_rest","","",296,[[["patrest"],["self"]]]],[11,"visit_pat_slice","","",296,[[["self"],["patslice"]]]],[11,"visit_pat_struct","","",296,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple","","",296,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct","","",296,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_type","","",296,[[["pattype"],["self"]]]],[11,"visit_pat_wild","","",296,[[["self"],["patwild"]]]],[11,"visit_path","","",296,[[["self"],["path"]]]],[11,"visit_path_arguments","","",296,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",296,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",296,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",296,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",296,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",296,[[["qself"],["self"]]]],[11,"visit_range_limits","","",296,[[["self"],["rangelimits"]]]],[11,"visit_receiver","","",296,[[["self"],["receiver"]]]],[11,"visit_return_type","","",296,[[["self"],["returntype"]]]],[11,"visit_signature","","",296,[[["self"],["signature"]]]],[11,"visit_span","","",296,[[["self"],["span"]]]],[11,"visit_stmt","","",296,[[["self"],["stmt"]]]],[11,"visit_trait_bound","","",296,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",296,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item","","",296,[[["self"],["traititem"]]]],[11,"visit_trait_item_const","","",296,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro","","",296,[[["self"],["traititemmacro"]]]],[11,"visit_trait_item_method","","",296,[[["self"],["traititemmethod"]]]],[11,"visit_trait_item_type","","",296,[[["traititemtype"],["self"]]]],[11,"visit_type","","",296,[[["self"],["type"]]]],[11,"visit_type_array","","",296,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",296,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",296,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",296,[[["typeimpltrait"],["self"]]]],[11,"visit_type_infer","","",296,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",296,[[["typemacro"],["self"]]]],[11,"visit_type_never","","",296,[[["typenever"],["self"]]]],[11,"visit_type_param","","",296,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",296,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",296,[[["typeparen"],["self"]]]],[11,"visit_type_path","","",296,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",296,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",296,[[["typereference"],["self"]]]],[11,"visit_type_slice","","",296,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",296,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",296,[[["typetuple"],["self"]]]],[11,"visit_un_op","","",296,[[["self"],["unop"]]]],[11,"visit_use_glob","","",296,[[["useglob"],["self"]]]],[11,"visit_use_group","","",296,[[["self"],["usegroup"]]]],[11,"visit_use_name","","",296,[[["self"],["usename"]]]],[11,"visit_use_path","","",296,[[["self"],["usepath"]]]],[11,"visit_use_rename","","",296,[[["userename"],["self"]]]],[11,"visit_use_tree","","",296,[[["self"],["usetree"]]]],[11,"visit_variadic","","",296,[[["self"],["variadic"]]]],[11,"visit_variant","","",296,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",296,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",296,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",296,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",296,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",296,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",296,[[["self"],["wherepredicate"]]]],[0,"parse","syn","Parsing interface for parsing a token stream into a syntax…",null,null],[3,"Error","syn::parse","Error returned when a Syn parser cannot parse the input…",null,null],[3,"Lookahead1","","Support for checking the next token in a stream to decide…",null,null],[3,"ParseBuffer","","Cursor position within a buffered token stream.",null,null],[3,"StepCursor","","Cursor state associated with speculative parsing.",null,null],[3,"Nothing","","An empty syntax tree node that consumes no tokens when…",null,null],[0,"discouraged","","Extensions to the parsing API with niche applicability.",null,null],[8,"Speculative","syn::parse::discouraged","Extensions to the `ParseStream` API to support speculative…",null,null],[10,"advance_to","","Advance this parse stream to the position of a forked…",297,[[["self"]]]],[6,"Result","syn::parse","The result of a Syn parser.",null,null],[6,"ParseStream","","Input to a Syn parser function.",null,null],[8,"Peek","","Types that can be parsed by looking at just one token.",null,null],[8,"Parse","","Parsing interface implemented by all types that can be…",null,null],[10,"parse","","",298,[[["parsestream"]],["result"]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax…",null,null],[16,"Output","","",299,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax…",299,[[["tokenstream"]],["result"]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree…",299,[[["tokenstream"]],["result"]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree…",299,[[["str"]],["result"]]],[11,"error","","Triggers an error at the current position of the parse…",300,[[["display"]],["error"]]],[11,"parse","","Parses a syntax tree node of type `T`, advancing the…",301,[[["self"]],[["parse"],["result"]]]],[11,"call","","Calls the given parser function to parse a syntax tree…",301,[[["self"]],["result"]]],[11,"peek","","Looks at the next token in the parse stream to determine…",301,[[["self"],["peek"]],["bool"]]],[11,"peek2","","Looks at the second-next token in the parse stream.",301,[[["self"],["peek"]],["bool"]]],[11,"peek3","","Looks at the third-next token in the parse stream.",301,[[["self"],["peek"]],["bool"]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by…",301,[[["self"]],[["result",["punctuated"]],["punctuated"]]]],[11,"is_empty","","Returns whether there are tokens remaining in this stream.",301,[[["self"]],["bool"]]],[11,"lookahead1","","Constructs a helper for peeking at the next token in this…",301,[[["self"]],["lookahead1"]]],[11,"fork","","Forks a parse stream so that parsing tokens out of either…",301,[[["self"]],["self"]]],[11,"error","","Triggers an error at the current position of the parse…",301,[[["self"],["display"]],["error"]]],[11,"step","","Speculatively parses tokens from this parse stream,…",301,[[["self"],["f"]],["result"]]],[11,"span","","Returns the `Span` of the next token in the parse stream,…",301,[[["self"]],["span"]]],[11,"cursor","","Provides low-level access to the token representation…",301,[[["self"]],["cursor"]]],[11,"new","syn","Usually the [`ParseStream::error`] method will be used…",302,[[["display"],["span"]],["self"]]],[11,"new_spanned","","Creates an error with the specified message spanning the…",302,[[["totokens"],["display"]],["self"]]],[11,"span","","The source location of the error.",302,[[["self"]],["span"]]],[11,"to_compile_error","","Render the error as an invocation of [`compile_error!`].",302,[[["self"]],["tokenstream"]]],[11,"combine","","Add another error message to self such that when…",302,[[["self"],["error"]]]],[6,"AttributeArgs","","Conventional argument type associated with an invocation…",null,null],[6,"Result","","The result of a Syn parser.",null,null],[14,"parenthesized","","Parse a set of parentheses and expose their content to…",null,null],[14,"braced","","Parse a set of curly braces and expose their content to…",null,null],[14,"bracketed","","Parse a set of square brackets and expose their content to…",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type…",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the…",null,null],[14,"parse_macro_input","","Parse the input TokenStream of a macro, triggering a…",null,null],[14,"custom_keyword","","Define a type that supports parsing and printing a given…",null,null],[14,"custom_punctuation","","Define a type that supports parsing and printing a…",null,null],[11,"peek","","",303,[[["cursor"]],["bool"]]],[11,"display","","",303,[[],["str"]]],[11,"span","","",303,[[["self"]],["span"]]],[11,"from","","",303,[[["t"]],["t"]]],[11,"into","","",303,[[],["u"]]],[11,"to_owned","","",303,[[["self"]],["t"]]],[11,"clone_into","","",303,[[["self"],["t"]]]],[11,"to_string","","",303,[[["self"]],["string"]]],[11,"try_from","","",303,[[["u"]],["result"]]],[11,"try_into","","",303,[[],["result"]]],[11,"borrow","","",303,[[["self"]],["t"]]],[11,"borrow_mut","","",303,[[["self"]],["t"]]],[11,"type_id","","",303,[[["self"]],["typeid"]]],[11,"span","","",0,[[["self"]],["span"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"span","","",1,[[["self"]],["span"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"span","","",2,[[["self"]],["span"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"span","","",3,[[["self"]],["span"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"span","","",4,[[["self"]],["span"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"span","","",5,[[["self"]],["span"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"span","","",6,[[["self"]],["span"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"span","","",7,[[["self"]],["span"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"span","","",8,[[["self"]],["span"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"span","","",9,[[["self"]],["span"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"span","","",10,[[["self"]],["span"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"span","","",11,[[["self"]],["span"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"span","","",12,[[["self"]],["span"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"span","","",13,[[["self"]],["span"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"span","","",14,[[["self"]],["span"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"span","","",15,[[["self"]],["span"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"span","","",16,[[["self"]],["span"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"span","","",17,[[["self"]],["span"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"span","","",18,[[["self"]],["span"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"span","","",19,[[["self"]],["span"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"span","","",20,[[["self"]],["span"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"span","","",21,[[["self"]],["span"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"span","","",22,[[["self"]],["span"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"span","","",23,[[["self"]],["span"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"span","","",24,[[["self"]],["span"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"span","","",25,[[["self"]],["span"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"span","","",26,[[["self"]],["span"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"span","","",27,[[["self"]],["span"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"span","","",28,[[["self"]],["span"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"span","","",29,[[["self"]],["span"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"span","","",30,[[["self"]],["span"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"span","","",31,[[["self"]],["span"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"span","","",32,[[["self"]],["span"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"span","","",34,[[["self"]],["span"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"span","","",35,[[["self"]],["span"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"span","","",36,[[["self"]],["span"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"span","","",37,[[["self"]],["span"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"span","","",38,[[["self"]],["span"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"span","","",39,[[["self"]],["span"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"span","","",40,[[["self"]],["span"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"span","","",41,[[["self"]],["span"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"span","","",42,[[["self"]],["span"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"span","","",43,[[["self"]],["span"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"span","","",44,[[["self"]],["span"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"span","","",45,[[["self"]],["span"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"span","","",46,[[["self"]],["span"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"span","","",47,[[["self"]],["span"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"span","","",48,[[["self"]],["span"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"span","","",49,[[["self"]],["span"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"span","","",50,[[["self"]],["span"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"span","","",51,[[["self"]],["span"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"span","","",52,[[["self"]],["span"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"span","","",53,[[["self"]],["span"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"span","","",54,[[["self"]],["span"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"span","","",55,[[["self"]],["span"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,[[["self"],["t"]]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"span","","",56,[[["self"]],["span"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"span","","",57,[[["self"]],["span"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"span","","",58,[[["self"]],["span"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,[[["self"],["t"]]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"span","","",59,[[["self"]],["span"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"span","","",60,[[["self"]],["span"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"span","","",61,[[["self"]],["span"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"span","","",62,[[["self"]],["span"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,[[["self"],["t"]]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"span","","",63,[[["self"]],["span"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,[[["self"],["t"]]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"span","","",304,[[["self"]],["span"]]],[11,"from","","",304,[[["t"]],["t"]]],[11,"into","","",304,[[],["u"]]],[11,"to_owned","","",304,[[["self"]],["t"]]],[11,"clone_into","","",304,[[["self"],["t"]]]],[11,"try_from","","",304,[[["u"]],["result"]]],[11,"try_into","","",304,[[],["result"]]],[11,"borrow","","",304,[[["self"]],["t"]]],[11,"borrow_mut","","",304,[[["self"]],["t"]]],[11,"type_id","","",304,[[["self"]],["typeid"]]],[11,"span","","",305,[[["self"]],["span"]]],[11,"from","","",305,[[["t"]],["t"]]],[11,"into","","",305,[[],["u"]]],[11,"to_owned","","",305,[[["self"]],["t"]]],[11,"clone_into","","",305,[[["self"],["t"]]]],[11,"try_from","","",305,[[["u"]],["result"]]],[11,"try_into","","",305,[[],["result"]]],[11,"borrow","","",305,[[["self"]],["t"]]],[11,"borrow_mut","","",305,[[["self"]],["t"]]],[11,"type_id","","",305,[[["self"]],["typeid"]]],[11,"span","","",283,[[["self"]],["span"]]],[11,"from","","",283,[[["t"]],["t"]]],[11,"into","","",283,[[],["u"]]],[11,"to_owned","","",283,[[["self"]],["t"]]],[11,"clone_into","","",283,[[["self"],["t"]]]],[11,"try_from","","",283,[[["u"]],["result"]]],[11,"try_into","","",283,[[],["result"]]],[11,"borrow","","",283,[[["self"]],["t"]]],[11,"borrow_mut","","",283,[[["self"]],["t"]]],[11,"type_id","","",283,[[["self"]],["typeid"]]],[11,"span","","",64,[[["self"]],["span"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,[[["self"],["t"]]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"span","","",65,[[["self"]],["span"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"span","","",66,[[["self"]],["span"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"span","","",67,[[["self"]],["span"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"span","","",68,[[["self"]],["span"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"span","","",69,[[["self"]],["span"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"span","","",70,[[["self"]],["span"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"span","","",71,[[["self"]],["span"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"span","","",72,[[["self"]],["span"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"span","","",73,[[["self"]],["span"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"span","","",74,[[["self"]],["span"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,[[["self"],["t"]]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"span","","",75,[[["self"]],["span"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,[[["self"],["t"]]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"span","","",76,[[["self"]],["span"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,[[["self"],["t"]]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"span","","",77,[[["self"]],["span"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,[[["self"],["t"]]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"span","","",78,[[["self"]],["span"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,[[["self"],["t"]]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"span","","",79,[[["self"]],["span"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,[[["self"],["t"]]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"span","","",80,[[["self"]],["span"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,[[["self"],["t"]]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"span","","",81,[[["self"]],["span"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,[[["self"],["t"]]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"span","","",82,[[["self"]],["span"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,[[["self"],["t"]]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"span","","",83,[[["self"]],["span"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,[[["self"],["t"]]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"span","","",84,[[["self"]],["span"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,[[["self"],["t"]]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"span","","",85,[[["self"]],["span"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,[[["self"],["t"]]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"span","","",86,[[["self"]],["span"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,[[["self"],["t"]]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"span","","",87,[[["self"]],["span"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,[[["self"],["t"]]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"span","","",88,[[["self"]],["span"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,[[["self"],["t"]]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"span","","",89,[[["self"]],["span"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,[[["self"],["t"]]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"try_into","","",89,[[],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"type_id","","",89,[[["self"]],["typeid"]]],[11,"span","","",90,[[["self"]],["span"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,[[["self"],["t"]]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"try_into","","",90,[[],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"type_id","","",90,[[["self"]],["typeid"]]],[11,"span","","",91,[[["self"]],["span"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,[[["self"],["t"]]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"try_into","","",91,[[],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"type_id","","",91,[[["self"]],["typeid"]]],[11,"span","","",92,[[["self"]],["span"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,[[["self"],["t"]]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"span","","",93,[[["self"]],["span"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,[[["self"],["t"]]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"span","","",94,[[["self"]],["span"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,[[["self"],["t"]]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"span","","",95,[[["self"]],["span"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,[[["self"],["t"]]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"span","","",96,[[["self"]],["span"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,[[["self"],["t"]]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"span","","",97,[[["self"]],["span"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,[[["self"],["t"]]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"span","","",98,[[["self"]],["span"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,[[["self"],["t"]]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"span","","",99,[[["self"]],["span"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,[[["self"],["t"]]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"peek","","",100,[[["cursor"]],["bool"]]],[11,"display","","",100,[[],["str"]]],[11,"span","","",100,[[["self"]],["span"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,[[["self"],["t"]]]],[11,"to_string","","",100,[[["self"]],["string"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"peek","","",101,[[["cursor"]],["bool"]]],[11,"display","","",101,[[],["str"]]],[11,"span","","",101,[[["self"]],["span"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,[[["self"],["t"]]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"peek","","",286,[[["cursor"]],["bool"]]],[11,"display","","",286,[[],["str"]]],[11,"span","","",286,[[["self"]],["span"]]],[11,"from","","",286,[[["t"]],["t"]]],[11,"into","","",286,[[],["u"]]],[11,"to_owned","","",286,[[["self"]],["t"]]],[11,"clone_into","","",286,[[["self"],["t"]]]],[11,"try_from","","",286,[[["u"]],["result"]]],[11,"try_into","","",286,[[],["result"]]],[11,"borrow","","",286,[[["self"]],["t"]]],[11,"borrow_mut","","",286,[[["self"]],["t"]]],[11,"type_id","","",286,[[["self"]],["typeid"]]],[11,"peek","","",285,[[["cursor"]],["bool"]]],[11,"display","","",285,[[],["str"]]],[11,"span","","",285,[[["self"]],["span"]]],[11,"from","","",285,[[["t"]],["t"]]],[11,"into","","",285,[[],["u"]]],[11,"to_owned","","",285,[[["self"]],["t"]]],[11,"clone_into","","",285,[[["self"],["t"]]]],[11,"try_from","","",285,[[["u"]],["result"]]],[11,"try_into","","",285,[[],["result"]]],[11,"borrow","","",285,[[["self"]],["t"]]],[11,"borrow_mut","","",285,[[["self"]],["t"]]],[11,"type_id","","",285,[[["self"]],["typeid"]]],[11,"peek","","",287,[[["cursor"]],["bool"]]],[11,"display","","",287,[[],["str"]]],[11,"span","","",287,[[["self"]],["span"]]],[11,"from","","",287,[[["t"]],["t"]]],[11,"into","","",287,[[],["u"]]],[11,"to_owned","","",287,[[["self"]],["t"]]],[11,"clone_into","","",287,[[["self"],["t"]]]],[11,"try_from","","",287,[[["u"]],["result"]]],[11,"try_into","","",287,[[],["result"]]],[11,"borrow","","",287,[[["self"]],["t"]]],[11,"borrow_mut","","",287,[[["self"]],["t"]]],[11,"type_id","","",287,[[["self"]],["typeid"]]],[11,"peek","","",289,[[["cursor"]],["bool"]]],[11,"display","","",289,[[],["str"]]],[11,"span","","",289,[[["self"]],["span"]]],[11,"from","","",289,[[["t"]],["t"]]],[11,"into","","",289,[[],["u"]]],[11,"to_owned","","",289,[[["self"]],["t"]]],[11,"clone_into","","",289,[[["self"],["t"]]]],[11,"to_string","","",289,[[["self"]],["string"]]],[11,"try_from","","",289,[[["u"]],["result"]]],[11,"try_into","","",289,[[],["result"]]],[11,"borrow","","",289,[[["self"]],["t"]]],[11,"borrow_mut","","",289,[[["self"]],["t"]]],[11,"type_id","","",289,[[["self"]],["typeid"]]],[11,"peek","","",288,[[["cursor"]],["bool"]]],[11,"display","","",288,[[],["str"]]],[11,"span","","",288,[[["self"]],["span"]]],[11,"from","","",288,[[["t"]],["t"]]],[11,"into","","",288,[[],["u"]]],[11,"to_owned","","",288,[[["self"]],["t"]]],[11,"clone_into","","",288,[[["self"],["t"]]]],[11,"to_string","","",288,[[["self"]],["string"]]],[11,"try_from","","",288,[[["u"]],["result"]]],[11,"try_into","","",288,[[],["result"]]],[11,"borrow","","",288,[[["self"]],["t"]]],[11,"borrow_mut","","",288,[[["self"]],["t"]]],[11,"type_id","","",288,[[["self"]],["typeid"]]],[11,"peek","","",284,[[["cursor"]],["bool"]]],[11,"display","","",284,[[],["str"]]],[11,"span","","",284,[[["self"]],["span"]]],[11,"from","","",284,[[["t"]],["t"]]],[11,"into","","",284,[[],["u"]]],[11,"to_owned","","",284,[[["self"]],["t"]]],[11,"clone_into","","",284,[[["self"],["t"]]]],[11,"try_from","","",284,[[["u"]],["result"]]],[11,"try_into","","",284,[[],["result"]]],[11,"borrow","","",284,[[["self"]],["t"]]],[11,"borrow_mut","","",284,[[["self"]],["t"]]],[11,"type_id","","",284,[[["self"]],["typeid"]]],[11,"span","","",102,[[["self"]],["span"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,[[["self"],["t"]]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,[[["self"],["t"]]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,[[["self"],["t"]]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,[[["self"],["t"]]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"span","","",106,[[["self"]],["span"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,[[["self"],["t"]]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"span","","",107,[[["self"]],["span"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,[[["self"],["t"]]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"span","","",108,[[["self"]],["span"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,[[["self"],["t"]]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"span","","",109,[[["self"]],["span"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,[[["self"],["t"]]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"span","","",110,[[["self"]],["span"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,[[["self"],["t"]]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"span","","",111,[[["self"]],["span"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,[[["self"],["t"]]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"span","","",112,[[["self"]],["span"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,[[["self"],["t"]]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"try_into","","",112,[[],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"span","","",113,[[["self"]],["span"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,[[["self"],["t"]]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"span","","",114,[[["self"]],["span"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,[[["self"],["t"]]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"span","","",115,[[["self"]],["span"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,[[["self"],["t"]]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"try_into","","",115,[[],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"span","","",116,[[["self"]],["span"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,[[["self"],["t"]]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"span","","",117,[[["self"]],["span"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,[[["self"],["t"]]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"try_into","","",117,[[],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"type_id","","",117,[[["self"]],["typeid"]]],[11,"span","","",118,[[["self"]],["span"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,[[["self"],["t"]]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"try_into","","",118,[[],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"type_id","","",118,[[["self"]],["typeid"]]],[11,"span","","",119,[[["self"]],["span"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,[[["self"],["t"]]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"try_into","","",119,[[],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"type_id","","",119,[[["self"]],["typeid"]]],[11,"span","","",120,[[["self"]],["span"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,[[["self"],["t"]]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"try_into","","",120,[[],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"type_id","","",120,[[["self"]],["typeid"]]],[11,"span","","",121,[[["self"]],["span"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,[[["self"],["t"]]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"try_into","","",121,[[],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"type_id","","",121,[[["self"]],["typeid"]]],[11,"span","","",122,[[["self"]],["span"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,[[["self"],["t"]]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"try_into","","",122,[[],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"type_id","","",122,[[["self"]],["typeid"]]],[11,"span","","",123,[[["self"]],["span"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,[[["self"],["t"]]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"try_into","","",123,[[],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"type_id","","",123,[[["self"]],["typeid"]]],[11,"span","","",124,[[["self"]],["span"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,[[["self"],["t"]]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"try_into","","",124,[[],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"type_id","","",124,[[["self"]],["typeid"]]],[11,"span","","",125,[[["self"]],["span"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,[[["self"],["t"]]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"try_into","","",125,[[],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"type_id","","",125,[[["self"]],["typeid"]]],[11,"span","","",126,[[["self"]],["span"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,[[["self"],["t"]]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"try_into","","",126,[[],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"type_id","","",126,[[["self"]],["typeid"]]],[11,"span","","",127,[[["self"]],["span"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,[[["self"],["t"]]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"try_into","","",127,[[],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"type_id","","",127,[[["self"]],["typeid"]]],[11,"span","","",128,[[["self"]],["span"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,[[["self"],["t"]]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"try_into","","",128,[[],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"type_id","","",128,[[["self"]],["typeid"]]],[11,"span","","",129,[[["self"]],["span"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,[[["self"],["t"]]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"try_into","","",129,[[],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"type_id","","",129,[[["self"]],["typeid"]]],[11,"span","","",130,[[["self"]],["span"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,[[["self"],["t"]]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"try_into","","",130,[[],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"type_id","","",130,[[["self"]],["typeid"]]],[11,"span","","",131,[[["self"]],["span"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,[[["self"],["t"]]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"try_into","","",131,[[],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"type_id","","",131,[[["self"]],["typeid"]]],[11,"span","","",132,[[["self"]],["span"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,[[["self"],["t"]]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"try_into","","",132,[[],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"type_id","","",132,[[["self"]],["typeid"]]],[11,"span","","",133,[[["self"]],["span"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,[[["self"],["t"]]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"try_into","","",133,[[],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"type_id","","",133,[[["self"]],["typeid"]]],[11,"span","","",134,[[["self"]],["span"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,[[["self"],["t"]]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"try_into","","",134,[[],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"type_id","","",134,[[["self"]],["typeid"]]],[11,"span","","",135,[[["self"]],["span"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,[[["self"],["t"]]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"try_into","","",135,[[],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"type_id","","",135,[[["self"]],["typeid"]]],[11,"span","","",136,[[["self"]],["span"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[],["u"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,[[["self"],["t"]]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"try_into","","",136,[[],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"type_id","","",136,[[["self"]],["typeid"]]],[11,"span","","",137,[[["self"]],["span"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[],["u"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,[[["self"],["t"]]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"try_into","","",137,[[],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"type_id","","",137,[[["self"]],["typeid"]]],[11,"span","","",138,[[["self"]],["span"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[],["u"]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,[[["self"],["t"]]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"try_into","","",138,[[],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"type_id","","",138,[[["self"]],["typeid"]]],[11,"span","","",139,[[["self"]],["span"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[],["u"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,[[["self"],["t"]]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"try_into","","",139,[[],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"type_id","","",139,[[["self"]],["typeid"]]],[11,"span","","",140,[[["self"]],["span"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[],["u"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,[[["self"],["t"]]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"try_into","","",140,[[],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"type_id","","",140,[[["self"]],["typeid"]]],[11,"span","","",141,[[["self"]],["span"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[],["u"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,[[["self"],["t"]]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"try_into","","",141,[[],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"type_id","","",141,[[["self"]],["typeid"]]],[11,"span","","",142,[[["self"]],["span"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[],["u"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,[[["self"],["t"]]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"try_into","","",142,[[],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"type_id","","",142,[[["self"]],["typeid"]]],[11,"span","","",143,[[["self"]],["span"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[],["u"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,[[["self"],["t"]]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"try_into","","",143,[[],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"type_id","","",143,[[["self"]],["typeid"]]],[11,"span","","",144,[[["self"]],["span"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[],["u"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,[[["self"],["t"]]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"try_into","","",144,[[],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"type_id","","",144,[[["self"]],["typeid"]]],[11,"span","","",145,[[["self"]],["span"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[],["u"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,[[["self"],["t"]]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"try_into","","",145,[[],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"type_id","","",145,[[["self"]],["typeid"]]],[11,"span","","",146,[[["self"]],["span"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[],["u"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,[[["self"],["t"]]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"try_into","","",146,[[],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"type_id","","",146,[[["self"]],["typeid"]]],[11,"span","","",147,[[["self"]],["span"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[],["u"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,[[["self"],["t"]]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"try_into","","",147,[[],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"type_id","","",147,[[["self"]],["typeid"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[],["u"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,[[["self"],["t"]]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"try_into","","",148,[[],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"type_id","","",148,[[["self"]],["typeid"]]],[11,"from","","",302,[[["t"]],["t"]]],[11,"into","","",302,[[],["u"]]],[11,"into_iter","","",302,[[],["i"]]],[11,"to_owned","","",302,[[["self"]],["t"]]],[11,"clone_into","","",302,[[["self"],["t"]]]],[11,"to_string","","",302,[[["self"]],["string"]]],[11,"try_from","","",302,[[["u"]],["result"]]],[11,"try_into","","",302,[[],["result"]]],[11,"borrow","","",302,[[["self"]],["t"]]],[11,"borrow_mut","","",302,[[["self"]],["t"]]],[11,"type_id","","",302,[[["self"]],["typeid"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[],["u"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,[[["self"],["t"]]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"try_into","","",149,[[],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"type_id","","",149,[[["self"]],["typeid"]]],[11,"span","","",150,[[["self"]],["span"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[],["u"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,[[["self"],["t"]]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"try_into","","",150,[[],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"type_id","","",150,[[["self"]],["typeid"]]],[11,"span","","",151,[[["self"]],["span"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,[[["self"],["t"]]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"try_into","","",151,[[],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"type_id","","",151,[[["self"]],["typeid"]]],[11,"span","","",152,[[["self"]],["span"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"into","","",152,[[],["u"]]],[11,"into_iter","","",152,[[],["i"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,[[["self"],["t"]]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"try_into","","",152,[[],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"type_id","","",152,[[["self"]],["typeid"]]],[11,"span","","",153,[[["self"]],["span"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[],["u"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,[[["self"],["t"]]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"try_into","","",153,[[],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"type_id","","",153,[[["self"]],["typeid"]]],[11,"span","","",154,[[["self"]],["span"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[],["u"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,[[["self"],["t"]]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"try_into","","",154,[[],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"type_id","","",154,[[["self"]],["typeid"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[],["u"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,[[["self"],["t"]]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"try_into","","",155,[[],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"type_id","","",155,[[["self"]],["typeid"]]],[11,"span","","",156,[[["self"]],["span"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[],["u"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,[[["self"],["t"]]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"try_into","","",156,[[],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"type_id","","",156,[[["self"]],["typeid"]]],[11,"span","","",157,[[["self"]],["span"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[],["u"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,[[["self"],["t"]]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"try_into","","",157,[[],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"type_id","","",157,[[["self"]],["typeid"]]],[11,"span","","",158,[[["self"]],["span"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[],["u"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,[[["self"],["t"]]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"try_into","","",158,[[],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"type_id","","",158,[[["self"]],["typeid"]]],[11,"span","","",159,[[["self"]],["span"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,[[["self"],["t"]]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"try_into","","",159,[[],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"type_id","","",159,[[["self"]],["typeid"]]],[11,"span","","",160,[[["self"]],["span"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[],["u"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,[[["self"],["t"]]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"try_into","","",160,[[],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"type_id","","",160,[[["self"]],["typeid"]]],[11,"span","","",161,[[["self"]],["span"]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"into","","",161,[[],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,[[["self"],["t"]]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"try_into","","",161,[[],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"type_id","","",161,[[["self"]],["typeid"]]],[11,"span","","",162,[[["self"]],["span"]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,[[["self"],["t"]]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"try_into","","",162,[[],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"type_id","","",162,[[["self"]],["typeid"]]],[11,"span","","",163,[[["self"]],["span"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[],["u"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,[[["self"],["t"]]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"try_into","","",163,[[],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"type_id","","",163,[[["self"]],["typeid"]]],[11,"span","","",164,[[["self"]],["span"]]],[11,"from","","",164,[[["t"]],["t"]]],[11,"into","","",164,[[],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,[[["self"],["t"]]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"try_into","","",164,[[],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"type_id","","",164,[[["self"]],["typeid"]]],[11,"span","","",165,[[["self"]],["span"]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"into","","",165,[[],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,[[["self"],["t"]]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"try_into","","",165,[[],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"type_id","","",165,[[["self"]],["typeid"]]],[11,"span","","",166,[[["self"]],["span"]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"into","","",166,[[],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,[[["self"],["t"]]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"try_into","","",166,[[],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"type_id","","",166,[[["self"]],["typeid"]]],[11,"span","","",167,[[["self"]],["span"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into","","",167,[[],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,[[["self"],["t"]]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"try_into","","",167,[[],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"type_id","","",167,[[["self"]],["typeid"]]],[11,"peek","","",168,[[["cursor"]],["bool"]]],[11,"display","","",168,[[],["str"]]],[11,"span","","",168,[[["self"]],["span"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,[[["self"],["t"]]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"try_into","","",168,[[],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"type_id","","",168,[[["self"]],["typeid"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"into","","",169,[[],["u"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,[[["self"],["t"]]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"try_into","","",169,[[],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"type_id","","",169,[[["self"]],["typeid"]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"into","","",170,[[],["u"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,[[["self"],["t"]]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"try_into","","",170,[[],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"type_id","","",170,[[["self"]],["typeid"]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"into","","",171,[[],["u"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,[[["self"],["t"]]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"try_into","","",171,[[],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"type_id","","",171,[[["self"]],["typeid"]]],[11,"span","","",172,[[["self"]],["span"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"into","","",172,[[],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,[[["self"],["t"]]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"try_into","","",172,[[],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"type_id","","",172,[[["self"]],["typeid"]]],[11,"span","","",173,[[["self"]],["span"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"into","","",173,[[],["u"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,[[["self"],["t"]]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"try_into","","",173,[[],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"type_id","","",173,[[["self"]],["typeid"]]],[11,"span","","",174,[[["self"]],["span"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"into","","",174,[[],["u"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,[[["self"],["t"]]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"try_into","","",174,[[],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"type_id","","",174,[[["self"]],["typeid"]]],[11,"span","","",175,[[["self"]],["span"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"into","","",175,[[],["u"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,[[["self"],["t"]]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"try_into","","",175,[[],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"type_id","","",175,[[["self"]],["typeid"]]],[11,"span","","",176,[[["self"]],["span"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"into","","",176,[[],["u"]]],[11,"to_owned","","",176,[[["self"]],["t"]]],[11,"clone_into","","",176,[[["self"],["t"]]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"try_into","","",176,[[],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"type_id","","",176,[[["self"]],["typeid"]]],[11,"span","","",177,[[["self"]],["span"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"into","","",177,[[],["u"]]],[11,"to_owned","","",177,[[["self"]],["t"]]],[11,"clone_into","","",177,[[["self"],["t"]]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"try_into","","",177,[[],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"type_id","","",177,[[["self"]],["typeid"]]],[11,"span","","",178,[[["self"]],["span"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"into","","",178,[[],["u"]]],[11,"to_owned","","",178,[[["self"]],["t"]]],[11,"clone_into","","",178,[[["self"],["t"]]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"try_into","","",178,[[],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"type_id","","",178,[[["self"]],["typeid"]]],[11,"span","","",179,[[["self"]],["span"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"into","","",179,[[],["u"]]],[11,"to_owned","","",179,[[["self"]],["t"]]],[11,"clone_into","","",179,[[["self"],["t"]]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"try_into","","",179,[[],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"type_id","","",179,[[["self"]],["typeid"]]],[11,"peek","syn::token","",180,[[["cursor"]],["bool"]]],[11,"display","","",180,[[],["str"]]],[11,"span","","",180,[[["self"]],["span"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"into","","",180,[[],["u"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,[[["self"],["t"]]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"try_into","","",180,[[],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"type_id","","",180,[[["self"]],["typeid"]]],[11,"peek","","",181,[[["cursor"]],["bool"]]],[11,"display","","",181,[[],["str"]]],[11,"span","","",181,[[["self"]],["span"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"into","","",181,[[],["u"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,[[["self"],["t"]]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"try_into","","",181,[[],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"type_id","","",181,[[["self"]],["typeid"]]],[11,"peek","","",182,[[["cursor"]],["bool"]]],[11,"display","","",182,[[],["str"]]],[11,"span","","",182,[[["self"]],["span"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"into","","",182,[[],["u"]]],[11,"to_owned","","",182,[[["self"]],["t"]]],[11,"clone_into","","",182,[[["self"],["t"]]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"try_into","","",182,[[],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"type_id","","",182,[[["self"]],["typeid"]]],[11,"peek","","",183,[[["cursor"]],["bool"]]],[11,"display","","",183,[[],["str"]]],[11,"span","","",183,[[["self"]],["span"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into","","",183,[[],["u"]]],[11,"to_owned","","",183,[[["self"]],["t"]]],[11,"clone_into","","",183,[[["self"],["t"]]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"try_into","","",183,[[],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"type_id","","",183,[[["self"]],["typeid"]]],[11,"peek","","",184,[[["cursor"]],["bool"]]],[11,"display","","",184,[[],["str"]]],[11,"span","","",184,[[["self"]],["span"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"into","","",184,[[],["u"]]],[11,"to_owned","","",184,[[["self"]],["t"]]],[11,"clone_into","","",184,[[["self"],["t"]]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"try_into","","",184,[[],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"type_id","","",184,[[["self"]],["typeid"]]],[11,"peek","","",185,[[["cursor"]],["bool"]]],[11,"display","","",185,[[],["str"]]],[11,"span","","",185,[[["self"]],["span"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"into","","",185,[[],["u"]]],[11,"to_owned","","",185,[[["self"]],["t"]]],[11,"clone_into","","",185,[[["self"],["t"]]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"try_into","","",185,[[],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"type_id","","",185,[[["self"]],["typeid"]]],[11,"peek","","",186,[[["cursor"]],["bool"]]],[11,"display","","",186,[[],["str"]]],[11,"span","","",186,[[["self"]],["span"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"into","","",186,[[],["u"]]],[11,"to_owned","","",186,[[["self"]],["t"]]],[11,"clone_into","","",186,[[["self"],["t"]]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"try_into","","",186,[[],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"type_id","","",186,[[["self"]],["typeid"]]],[11,"peek","","",187,[[["cursor"]],["bool"]]],[11,"display","","",187,[[],["str"]]],[11,"span","","",187,[[["self"]],["span"]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"into","","",187,[[],["u"]]],[11,"to_owned","","",187,[[["self"]],["t"]]],[11,"clone_into","","",187,[[["self"],["t"]]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"try_into","","",187,[[],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"type_id","","",187,[[["self"]],["typeid"]]],[11,"peek","","",188,[[["cursor"]],["bool"]]],[11,"display","","",188,[[],["str"]]],[11,"span","","",188,[[["self"]],["span"]]],[11,"from","","",188,[[["t"]],["t"]]],[11,"into","","",188,[[],["u"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,[[["self"],["t"]]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"try_into","","",188,[[],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"type_id","","",188,[[["self"]],["typeid"]]],[11,"peek","","",189,[[["cursor"]],["bool"]]],[11,"display","","",189,[[],["str"]]],[11,"span","","",189,[[["self"]],["span"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"into","","",189,[[],["u"]]],[11,"to_owned","","",189,[[["self"]],["t"]]],[11,"clone_into","","",189,[[["self"],["t"]]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"try_into","","",189,[[],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"type_id","","",189,[[["self"]],["typeid"]]],[11,"peek","","",190,[[["cursor"]],["bool"]]],[11,"display","","",190,[[],["str"]]],[11,"span","","",190,[[["self"]],["span"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into","","",190,[[],["u"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,[[["self"],["t"]]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"try_into","","",190,[[],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"type_id","","",190,[[["self"]],["typeid"]]],[11,"peek","","",191,[[["cursor"]],["bool"]]],[11,"display","","",191,[[],["str"]]],[11,"span","","",191,[[["self"]],["span"]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"into","","",191,[[],["u"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,[[["self"],["t"]]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"try_into","","",191,[[],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"type_id","","",191,[[["self"]],["typeid"]]],[11,"peek","","",192,[[["cursor"]],["bool"]]],[11,"display","","",192,[[],["str"]]],[11,"span","","",192,[[["self"]],["span"]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"into","","",192,[[],["u"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,[[["self"],["t"]]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"try_into","","",192,[[],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"type_id","","",192,[[["self"]],["typeid"]]],[11,"peek","","",193,[[["cursor"]],["bool"]]],[11,"display","","",193,[[],["str"]]],[11,"span","","",193,[[["self"]],["span"]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"into","","",193,[[],["u"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,[[["self"],["t"]]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"try_into","","",193,[[],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"type_id","","",193,[[["self"]],["typeid"]]],[11,"peek","","",194,[[["cursor"]],["bool"]]],[11,"display","","",194,[[],["str"]]],[11,"span","","",194,[[["self"]],["span"]]],[11,"from","","",194,[[["t"]],["t"]]],[11,"into","","",194,[[],["u"]]],[11,"to_owned","","",194,[[["self"]],["t"]]],[11,"clone_into","","",194,[[["self"],["t"]]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"try_into","","",194,[[],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"type_id","","",194,[[["self"]],["typeid"]]],[11,"peek","","",195,[[["cursor"]],["bool"]]],[11,"display","","",195,[[],["str"]]],[11,"span","","",195,[[["self"]],["span"]]],[11,"from","","",195,[[["t"]],["t"]]],[11,"into","","",195,[[],["u"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,[[["self"],["t"]]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"try_into","","",195,[[],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"type_id","","",195,[[["self"]],["typeid"]]],[11,"peek","","",196,[[["cursor"]],["bool"]]],[11,"display","","",196,[[],["str"]]],[11,"span","","",196,[[["self"]],["span"]]],[11,"from","","",196,[[["t"]],["t"]]],[11,"into","","",196,[[],["u"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,[[["self"],["t"]]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"try_into","","",196,[[],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"type_id","","",196,[[["self"]],["typeid"]]],[11,"peek","","",197,[[["cursor"]],["bool"]]],[11,"display","","",197,[[],["str"]]],[11,"span","","",197,[[["self"]],["span"]]],[11,"from","","",197,[[["t"]],["t"]]],[11,"into","","",197,[[],["u"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,[[["self"],["t"]]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"try_into","","",197,[[],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"type_id","","",197,[[["self"]],["typeid"]]],[11,"peek","","",198,[[["cursor"]],["bool"]]],[11,"display","","",198,[[],["str"]]],[11,"span","","",198,[[["self"]],["span"]]],[11,"from","","",198,[[["t"]],["t"]]],[11,"into","","",198,[[],["u"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,[[["self"],["t"]]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"try_into","","",198,[[],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"type_id","","",198,[[["self"]],["typeid"]]],[11,"peek","","",199,[[["cursor"]],["bool"]]],[11,"display","","",199,[[],["str"]]],[11,"span","","",199,[[["self"]],["span"]]],[11,"from","","",199,[[["t"]],["t"]]],[11,"into","","",199,[[],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,[[["self"],["t"]]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"try_into","","",199,[[],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"type_id","","",199,[[["self"]],["typeid"]]],[11,"peek","","",200,[[["cursor"]],["bool"]]],[11,"display","","",200,[[],["str"]]],[11,"span","","",200,[[["self"]],["span"]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"into","","",200,[[],["u"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,[[["self"],["t"]]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"try_into","","",200,[[],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"type_id","","",200,[[["self"]],["typeid"]]],[11,"peek","","",201,[[["cursor"]],["bool"]]],[11,"display","","",201,[[],["str"]]],[11,"span","","",201,[[["self"]],["span"]]],[11,"from","","",201,[[["t"]],["t"]]],[11,"into","","",201,[[],["u"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,[[["self"],["t"]]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"try_into","","",201,[[],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"type_id","","",201,[[["self"]],["typeid"]]],[11,"peek","","",202,[[["cursor"]],["bool"]]],[11,"display","","",202,[[],["str"]]],[11,"span","","",202,[[["self"]],["span"]]],[11,"from","","",202,[[["t"]],["t"]]],[11,"into","","",202,[[],["u"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,[[["self"],["t"]]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"try_into","","",202,[[],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"type_id","","",202,[[["self"]],["typeid"]]],[11,"peek","","",203,[[["cursor"]],["bool"]]],[11,"display","","",203,[[],["str"]]],[11,"span","","",203,[[["self"]],["span"]]],[11,"from","","",203,[[["t"]],["t"]]],[11,"into","","",203,[[],["u"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,[[["self"],["t"]]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"try_into","","",203,[[],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"type_id","","",203,[[["self"]],["typeid"]]],[11,"peek","","",204,[[["cursor"]],["bool"]]],[11,"display","","",204,[[],["str"]]],[11,"span","","",204,[[["self"]],["span"]]],[11,"from","","",204,[[["t"]],["t"]]],[11,"into","","",204,[[],["u"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,[[["self"],["t"]]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"try_into","","",204,[[],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"type_id","","",204,[[["self"]],["typeid"]]],[11,"peek","","",205,[[["cursor"]],["bool"]]],[11,"display","","",205,[[],["str"]]],[11,"span","","",205,[[["self"]],["span"]]],[11,"from","","",205,[[["t"]],["t"]]],[11,"into","","",205,[[],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,[[["self"],["t"]]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"try_into","","",205,[[],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"type_id","","",205,[[["self"]],["typeid"]]],[11,"peek","","",206,[[["cursor"]],["bool"]]],[11,"display","","",206,[[],["str"]]],[11,"span","","",206,[[["self"]],["span"]]],[11,"from","","",206,[[["t"]],["t"]]],[11,"into","","",206,[[],["u"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,[[["self"],["t"]]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"try_into","","",206,[[],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"type_id","","",206,[[["self"]],["typeid"]]],[11,"peek","","",207,[[["cursor"]],["bool"]]],[11,"display","","",207,[[],["str"]]],[11,"span","","",207,[[["self"]],["span"]]],[11,"from","","",207,[[["t"]],["t"]]],[11,"into","","",207,[[],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,[[["self"],["t"]]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"try_into","","",207,[[],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"type_id","","",207,[[["self"]],["typeid"]]],[11,"peek","","",208,[[["cursor"]],["bool"]]],[11,"display","","",208,[[],["str"]]],[11,"span","","",208,[[["self"]],["span"]]],[11,"from","","",208,[[["t"]],["t"]]],[11,"into","","",208,[[],["u"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,[[["self"],["t"]]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"try_into","","",208,[[],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"type_id","","",208,[[["self"]],["typeid"]]],[11,"peek","","",209,[[["cursor"]],["bool"]]],[11,"display","","",209,[[],["str"]]],[11,"span","","",209,[[["self"]],["span"]]],[11,"from","","",209,[[["t"]],["t"]]],[11,"into","","",209,[[],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,[[["self"],["t"]]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"try_into","","",209,[[],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"type_id","","",209,[[["self"]],["typeid"]]],[11,"peek","","",210,[[["cursor"]],["bool"]]],[11,"display","","",210,[[],["str"]]],[11,"span","","",210,[[["self"]],["span"]]],[11,"from","","",210,[[["t"]],["t"]]],[11,"into","","",210,[[],["u"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,[[["self"],["t"]]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"try_into","","",210,[[],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"type_id","","",210,[[["self"]],["typeid"]]],[11,"peek","","",211,[[["cursor"]],["bool"]]],[11,"display","","",211,[[],["str"]]],[11,"span","","",211,[[["self"]],["span"]]],[11,"from","","",211,[[["t"]],["t"]]],[11,"into","","",211,[[],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,[[["self"],["t"]]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"try_into","","",211,[[],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"type_id","","",211,[[["self"]],["typeid"]]],[11,"peek","","",212,[[["cursor"]],["bool"]]],[11,"display","","",212,[[],["str"]]],[11,"span","","",212,[[["self"]],["span"]]],[11,"from","","",212,[[["t"]],["t"]]],[11,"into","","",212,[[],["u"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,[[["self"],["t"]]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"try_into","","",212,[[],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"type_id","","",212,[[["self"]],["typeid"]]],[11,"peek","","",213,[[["cursor"]],["bool"]]],[11,"display","","",213,[[],["str"]]],[11,"span","","",213,[[["self"]],["span"]]],[11,"from","","",213,[[["t"]],["t"]]],[11,"into","","",213,[[],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,[[["self"],["t"]]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"try_into","","",213,[[],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"type_id","","",213,[[["self"]],["typeid"]]],[11,"peek","","",214,[[["cursor"]],["bool"]]],[11,"display","","",214,[[],["str"]]],[11,"span","","",214,[[["self"]],["span"]]],[11,"from","","",214,[[["t"]],["t"]]],[11,"into","","",214,[[],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,[[["self"],["t"]]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"try_into","","",214,[[],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"type_id","","",214,[[["self"]],["typeid"]]],[11,"peek","","",215,[[["cursor"]],["bool"]]],[11,"display","","",215,[[],["str"]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"from","","",215,[[["t"]],["t"]]],[11,"into","","",215,[[],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,[[["self"],["t"]]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"try_into","","",215,[[],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"type_id","","",215,[[["self"]],["typeid"]]],[11,"peek","","",216,[[["cursor"]],["bool"]]],[11,"display","","",216,[[],["str"]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"from","","",216,[[["t"]],["t"]]],[11,"into","","",216,[[],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,[[["self"],["t"]]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"try_into","","",216,[[],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"type_id","","",216,[[["self"]],["typeid"]]],[11,"peek","","",217,[[["cursor"]],["bool"]]],[11,"display","","",217,[[],["str"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"from","","",217,[[["t"]],["t"]]],[11,"into","","",217,[[],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,[[["self"],["t"]]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"try_into","","",217,[[],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"type_id","","",217,[[["self"]],["typeid"]]],[11,"peek","","",218,[[["cursor"]],["bool"]]],[11,"display","","",218,[[],["str"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"from","","",218,[[["t"]],["t"]]],[11,"into","","",218,[[],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,[[["self"],["t"]]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"try_into","","",218,[[],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"type_id","","",218,[[["self"]],["typeid"]]],[11,"peek","","",219,[[["cursor"]],["bool"]]],[11,"display","","",219,[[],["str"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"from","","",219,[[["t"]],["t"]]],[11,"into","","",219,[[],["u"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,[[["self"],["t"]]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"try_into","","",219,[[],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"type_id","","",219,[[["self"]],["typeid"]]],[11,"peek","","",220,[[["cursor"]],["bool"]]],[11,"display","","",220,[[],["str"]]],[11,"span","","",220,[[["self"]],["span"]]],[11,"from","","",220,[[["t"]],["t"]]],[11,"into","","",220,[[],["u"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,[[["self"],["t"]]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"try_into","","",220,[[],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"type_id","","",220,[[["self"]],["typeid"]]],[11,"peek","","",221,[[["cursor"]],["bool"]]],[11,"display","","",221,[[],["str"]]],[11,"span","","",221,[[["self"]],["span"]]],[11,"from","","",221,[[["t"]],["t"]]],[11,"into","","",221,[[],["u"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,[[["self"],["t"]]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"try_into","","",221,[[],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"type_id","","",221,[[["self"]],["typeid"]]],[11,"peek","","",222,[[["cursor"]],["bool"]]],[11,"display","","",222,[[],["str"]]],[11,"span","","",222,[[["self"]],["span"]]],[11,"from","","",222,[[["t"]],["t"]]],[11,"into","","",222,[[],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,[[["self"],["t"]]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"try_into","","",222,[[],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"type_id","","",222,[[["self"]],["typeid"]]],[11,"peek","","",223,[[["cursor"]],["bool"]]],[11,"display","","",223,[[],["str"]]],[11,"span","","",223,[[["self"]],["span"]]],[11,"from","","",223,[[["t"]],["t"]]],[11,"into","","",223,[[],["u"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,[[["self"],["t"]]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"try_into","","",223,[[],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"type_id","","",223,[[["self"]],["typeid"]]],[11,"peek","","",224,[[["cursor"]],["bool"]]],[11,"display","","",224,[[],["str"]]],[11,"span","","",224,[[["self"]],["span"]]],[11,"from","","",224,[[["t"]],["t"]]],[11,"into","","",224,[[],["u"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,[[["self"],["t"]]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"try_into","","",224,[[],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"type_id","","",224,[[["self"]],["typeid"]]],[11,"peek","","",225,[[["cursor"]],["bool"]]],[11,"display","","",225,[[],["str"]]],[11,"span","","",225,[[["self"]],["span"]]],[11,"from","","",225,[[["t"]],["t"]]],[11,"into","","",225,[[],["u"]]],[11,"to_owned","","",225,[[["self"]],["t"]]],[11,"clone_into","","",225,[[["self"],["t"]]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"try_into","","",225,[[],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"type_id","","",225,[[["self"]],["typeid"]]],[11,"peek","","",226,[[["cursor"]],["bool"]]],[11,"display","","",226,[[],["str"]]],[11,"span","","",226,[[["self"]],["span"]]],[11,"from","","",226,[[["t"]],["t"]]],[11,"into","","",226,[[],["u"]]],[11,"to_owned","","",226,[[["self"]],["t"]]],[11,"clone_into","","",226,[[["self"],["t"]]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"try_into","","",226,[[],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"type_id","","",226,[[["self"]],["typeid"]]],[11,"peek","","",227,[[["cursor"]],["bool"]]],[11,"display","","",227,[[],["str"]]],[11,"span","","",227,[[["self"]],["span"]]],[11,"from","","",227,[[["t"]],["t"]]],[11,"into","","",227,[[],["u"]]],[11,"to_owned","","",227,[[["self"]],["t"]]],[11,"clone_into","","",227,[[["self"],["t"]]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"try_into","","",227,[[],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"type_id","","",227,[[["self"]],["typeid"]]],[11,"peek","","",228,[[["cursor"]],["bool"]]],[11,"display","","",228,[[],["str"]]],[11,"span","","",228,[[["self"]],["span"]]],[11,"from","","",228,[[["t"]],["t"]]],[11,"into","","",228,[[],["u"]]],[11,"to_owned","","",228,[[["self"]],["t"]]],[11,"clone_into","","",228,[[["self"],["t"]]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"try_into","","",228,[[],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"type_id","","",228,[[["self"]],["typeid"]]],[11,"peek","","",229,[[["cursor"]],["bool"]]],[11,"display","","",229,[[],["str"]]],[11,"span","","",229,[[["self"]],["span"]]],[11,"from","","",229,[[["t"]],["t"]]],[11,"into","","",229,[[],["u"]]],[11,"to_owned","","",229,[[["self"]],["t"]]],[11,"clone_into","","",229,[[["self"],["t"]]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"try_into","","",229,[[],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"type_id","","",229,[[["self"]],["typeid"]]],[11,"peek","","",230,[[["cursor"]],["bool"]]],[11,"display","","",230,[[],["str"]]],[11,"span","","",230,[[["self"]],["span"]]],[11,"from","","",230,[[["t"]],["t"]]],[11,"into","","",230,[[],["u"]]],[11,"to_owned","","",230,[[["self"]],["t"]]],[11,"clone_into","","",230,[[["self"],["t"]]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"try_into","","",230,[[],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"type_id","","",230,[[["self"]],["typeid"]]],[11,"peek","","",231,[[["cursor"]],["bool"]]],[11,"display","","",231,[[],["str"]]],[11,"span","","",231,[[["self"]],["span"]]],[11,"from","","",231,[[["t"]],["t"]]],[11,"into","","",231,[[],["u"]]],[11,"to_owned","","",231,[[["self"]],["t"]]],[11,"clone_into","","",231,[[["self"],["t"]]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"try_into","","",231,[[],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"type_id","","",231,[[["self"]],["typeid"]]],[11,"peek","","",232,[[["cursor"]],["bool"]]],[11,"display","","",232,[[],["str"]]],[11,"span","","",232,[[["self"]],["span"]]],[11,"from","","",232,[[["t"]],["t"]]],[11,"into","","",232,[[],["u"]]],[11,"to_owned","","",232,[[["self"]],["t"]]],[11,"clone_into","","",232,[[["self"],["t"]]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"try_into","","",232,[[],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"type_id","","",232,[[["self"]],["typeid"]]],[11,"peek","","",233,[[["cursor"]],["bool"]]],[11,"display","","",233,[[],["str"]]],[11,"span","","",233,[[["self"]],["span"]]],[11,"from","","",233,[[["t"]],["t"]]],[11,"into","","",233,[[],["u"]]],[11,"to_owned","","",233,[[["self"]],["t"]]],[11,"clone_into","","",233,[[["self"],["t"]]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"try_into","","",233,[[],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"type_id","","",233,[[["self"]],["typeid"]]],[11,"peek","","",234,[[["cursor"]],["bool"]]],[11,"display","","",234,[[],["str"]]],[11,"span","","",234,[[["self"]],["span"]]],[11,"from","","",234,[[["t"]],["t"]]],[11,"into","","",234,[[],["u"]]],[11,"to_owned","","",234,[[["self"]],["t"]]],[11,"clone_into","","",234,[[["self"],["t"]]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"try_into","","",234,[[],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"type_id","","",234,[[["self"]],["typeid"]]],[11,"peek","","",235,[[["cursor"]],["bool"]]],[11,"display","","",235,[[],["str"]]],[11,"span","","",235,[[["self"]],["span"]]],[11,"from","","",235,[[["t"]],["t"]]],[11,"into","","",235,[[],["u"]]],[11,"to_owned","","",235,[[["self"]],["t"]]],[11,"clone_into","","",235,[[["self"],["t"]]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"try_into","","",235,[[],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"type_id","","",235,[[["self"]],["typeid"]]],[11,"peek","","",236,[[["cursor"]],["bool"]]],[11,"display","","",236,[[],["str"]]],[11,"span","","",236,[[["self"]],["span"]]],[11,"from","","",236,[[["t"]],["t"]]],[11,"into","","",236,[[],["u"]]],[11,"to_owned","","",236,[[["self"]],["t"]]],[11,"clone_into","","",236,[[["self"],["t"]]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"try_into","","",236,[[],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"type_id","","",236,[[["self"]],["typeid"]]],[11,"peek","","",237,[[["cursor"]],["bool"]]],[11,"display","","",237,[[],["str"]]],[11,"span","","",237,[[["self"]],["span"]]],[11,"from","","",237,[[["t"]],["t"]]],[11,"into","","",237,[[],["u"]]],[11,"to_owned","","",237,[[["self"]],["t"]]],[11,"clone_into","","",237,[[["self"],["t"]]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"try_into","","",237,[[],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"type_id","","",237,[[["self"]],["typeid"]]],[11,"peek","","",238,[[["cursor"]],["bool"]]],[11,"display","","",238,[[],["str"]]],[11,"span","","",238,[[["self"]],["span"]]],[11,"from","","",238,[[["t"]],["t"]]],[11,"into","","",238,[[],["u"]]],[11,"to_owned","","",238,[[["self"]],["t"]]],[11,"clone_into","","",238,[[["self"],["t"]]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"try_into","","",238,[[],["result"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"type_id","","",238,[[["self"]],["typeid"]]],[11,"peek","","",239,[[["cursor"]],["bool"]]],[11,"display","","",239,[[],["str"]]],[11,"span","","",239,[[["self"]],["span"]]],[11,"from","","",239,[[["t"]],["t"]]],[11,"into","","",239,[[],["u"]]],[11,"to_owned","","",239,[[["self"]],["t"]]],[11,"clone_into","","",239,[[["self"],["t"]]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"try_into","","",239,[[],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"type_id","","",239,[[["self"]],["typeid"]]],[11,"peek","","",240,[[["cursor"]],["bool"]]],[11,"display","","",240,[[],["str"]]],[11,"span","","",240,[[["self"]],["span"]]],[11,"from","","",240,[[["t"]],["t"]]],[11,"into","","",240,[[],["u"]]],[11,"to_owned","","",240,[[["self"]],["t"]]],[11,"clone_into","","",240,[[["self"],["t"]]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"try_into","","",240,[[],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"type_id","","",240,[[["self"]],["typeid"]]],[11,"peek","","",241,[[["cursor"]],["bool"]]],[11,"display","","",241,[[],["str"]]],[11,"span","","",241,[[["self"]],["span"]]],[11,"from","","",241,[[["t"]],["t"]]],[11,"into","","",241,[[],["u"]]],[11,"to_owned","","",241,[[["self"]],["t"]]],[11,"clone_into","","",241,[[["self"],["t"]]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"try_into","","",241,[[],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"type_id","","",241,[[["self"]],["typeid"]]],[11,"peek","","",242,[[["cursor"]],["bool"]]],[11,"display","","",242,[[],["str"]]],[11,"span","","",242,[[["self"]],["span"]]],[11,"from","","",242,[[["t"]],["t"]]],[11,"into","","",242,[[],["u"]]],[11,"to_owned","","",242,[[["self"]],["t"]]],[11,"clone_into","","",242,[[["self"],["t"]]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"try_into","","",242,[[],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"type_id","","",242,[[["self"]],["typeid"]]],[11,"peek","","",243,[[["cursor"]],["bool"]]],[11,"display","","",243,[[],["str"]]],[11,"span","","",243,[[["self"]],["span"]]],[11,"from","","",243,[[["t"]],["t"]]],[11,"into","","",243,[[],["u"]]],[11,"to_owned","","",243,[[["self"]],["t"]]],[11,"clone_into","","",243,[[["self"],["t"]]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"try_into","","",243,[[],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"type_id","","",243,[[["self"]],["typeid"]]],[11,"peek","","",244,[[["cursor"]],["bool"]]],[11,"display","","",244,[[],["str"]]],[11,"span","","",244,[[["self"]],["span"]]],[11,"from","","",244,[[["t"]],["t"]]],[11,"into","","",244,[[],["u"]]],[11,"to_owned","","",244,[[["self"]],["t"]]],[11,"clone_into","","",244,[[["self"],["t"]]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"try_into","","",244,[[],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"type_id","","",244,[[["self"]],["typeid"]]],[11,"peek","","",245,[[["cursor"]],["bool"]]],[11,"display","","",245,[[],["str"]]],[11,"span","","",245,[[["self"]],["span"]]],[11,"from","","",245,[[["t"]],["t"]]],[11,"into","","",245,[[],["u"]]],[11,"to_owned","","",245,[[["self"]],["t"]]],[11,"clone_into","","",245,[[["self"],["t"]]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"try_into","","",245,[[],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"type_id","","",245,[[["self"]],["typeid"]]],[11,"peek","","",246,[[["cursor"]],["bool"]]],[11,"display","","",246,[[],["str"]]],[11,"span","","",246,[[["self"]],["span"]]],[11,"from","","",246,[[["t"]],["t"]]],[11,"into","","",246,[[],["u"]]],[11,"to_owned","","",246,[[["self"]],["t"]]],[11,"clone_into","","",246,[[["self"],["t"]]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"try_into","","",246,[[],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"type_id","","",246,[[["self"]],["typeid"]]],[11,"peek","","",247,[[["cursor"]],["bool"]]],[11,"display","","",247,[[],["str"]]],[11,"span","","",247,[[["self"]],["span"]]],[11,"from","","",247,[[["t"]],["t"]]],[11,"into","","",247,[[],["u"]]],[11,"to_owned","","",247,[[["self"]],["t"]]],[11,"clone_into","","",247,[[["self"],["t"]]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"try_into","","",247,[[],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"type_id","","",247,[[["self"]],["typeid"]]],[11,"peek","","",248,[[["cursor"]],["bool"]]],[11,"display","","",248,[[],["str"]]],[11,"span","","",248,[[["self"]],["span"]]],[11,"from","","",248,[[["t"]],["t"]]],[11,"into","","",248,[[],["u"]]],[11,"to_owned","","",248,[[["self"]],["t"]]],[11,"clone_into","","",248,[[["self"],["t"]]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"try_into","","",248,[[],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"type_id","","",248,[[["self"]],["typeid"]]],[11,"peek","","",249,[[["cursor"]],["bool"]]],[11,"display","","",249,[[],["str"]]],[11,"span","","",249,[[["self"]],["span"]]],[11,"from","","",249,[[["t"]],["t"]]],[11,"into","","",249,[[],["u"]]],[11,"to_owned","","",249,[[["self"]],["t"]]],[11,"clone_into","","",249,[[["self"],["t"]]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"try_into","","",249,[[],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"type_id","","",249,[[["self"]],["typeid"]]],[11,"peek","","",250,[[["cursor"]],["bool"]]],[11,"display","","",250,[[],["str"]]],[11,"span","","",250,[[["self"]],["span"]]],[11,"from","","",250,[[["t"]],["t"]]],[11,"into","","",250,[[],["u"]]],[11,"to_owned","","",250,[[["self"]],["t"]]],[11,"clone_into","","",250,[[["self"],["t"]]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"try_into","","",250,[[],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"type_id","","",250,[[["self"]],["typeid"]]],[11,"peek","","",251,[[["cursor"]],["bool"]]],[11,"display","","",251,[[],["str"]]],[11,"span","","",251,[[["self"]],["span"]]],[11,"from","","",251,[[["t"]],["t"]]],[11,"into","","",251,[[],["u"]]],[11,"to_owned","","",251,[[["self"]],["t"]]],[11,"clone_into","","",251,[[["self"],["t"]]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"try_into","","",251,[[],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"type_id","","",251,[[["self"]],["typeid"]]],[11,"peek","","",252,[[["cursor"]],["bool"]]],[11,"display","","",252,[[],["str"]]],[11,"span","","",252,[[["self"]],["span"]]],[11,"from","","",252,[[["t"]],["t"]]],[11,"into","","",252,[[],["u"]]],[11,"to_owned","","",252,[[["self"]],["t"]]],[11,"clone_into","","",252,[[["self"],["t"]]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"try_into","","",252,[[],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"type_id","","",252,[[["self"]],["typeid"]]],[11,"peek","","",253,[[["cursor"]],["bool"]]],[11,"display","","",253,[[],["str"]]],[11,"span","","",253,[[["self"]],["span"]]],[11,"from","","",253,[[["t"]],["t"]]],[11,"into","","",253,[[],["u"]]],[11,"to_owned","","",253,[[["self"]],["t"]]],[11,"clone_into","","",253,[[["self"],["t"]]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"try_into","","",253,[[],["result"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"type_id","","",253,[[["self"]],["typeid"]]],[11,"peek","","",254,[[["cursor"]],["bool"]]],[11,"display","","",254,[[],["str"]]],[11,"span","","",254,[[["self"]],["span"]]],[11,"from","","",254,[[["t"]],["t"]]],[11,"into","","",254,[[],["u"]]],[11,"to_owned","","",254,[[["self"]],["t"]]],[11,"clone_into","","",254,[[["self"],["t"]]]],[11,"try_from","","",254,[[["u"]],["result"]]],[11,"try_into","","",254,[[],["result"]]],[11,"borrow","","",254,[[["self"]],["t"]]],[11,"borrow_mut","","",254,[[["self"]],["t"]]],[11,"type_id","","",254,[[["self"]],["typeid"]]],[11,"peek","","",255,[[["cursor"]],["bool"]]],[11,"display","","",255,[[],["str"]]],[11,"span","","",255,[[["self"]],["span"]]],[11,"from","","",255,[[["t"]],["t"]]],[11,"into","","",255,[[],["u"]]],[11,"to_owned","","",255,[[["self"]],["t"]]],[11,"clone_into","","",255,[[["self"],["t"]]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"try_into","","",255,[[],["result"]]],[11,"borrow","","",255,[[["self"]],["t"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"type_id","","",255,[[["self"]],["typeid"]]],[11,"peek","","",256,[[["cursor"]],["bool"]]],[11,"display","","",256,[[],["str"]]],[11,"span","","",256,[[["self"]],["span"]]],[11,"from","","",256,[[["t"]],["t"]]],[11,"into","","",256,[[],["u"]]],[11,"to_owned","","",256,[[["self"]],["t"]]],[11,"clone_into","","",256,[[["self"],["t"]]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"try_into","","",256,[[],["result"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"type_id","","",256,[[["self"]],["typeid"]]],[11,"peek","","",257,[[["cursor"]],["bool"]]],[11,"display","","",257,[[],["str"]]],[11,"span","","",257,[[["self"]],["span"]]],[11,"from","","",257,[[["t"]],["t"]]],[11,"into","","",257,[[],["u"]]],[11,"to_owned","","",257,[[["self"]],["t"]]],[11,"clone_into","","",257,[[["self"],["t"]]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"try_into","","",257,[[],["result"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"type_id","","",257,[[["self"]],["typeid"]]],[11,"peek","","",258,[[["cursor"]],["bool"]]],[11,"display","","",258,[[],["str"]]],[11,"span","","",258,[[["self"]],["span"]]],[11,"from","","",258,[[["t"]],["t"]]],[11,"into","","",258,[[],["u"]]],[11,"to_owned","","",258,[[["self"]],["t"]]],[11,"clone_into","","",258,[[["self"],["t"]]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"try_into","","",258,[[],["result"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"type_id","","",258,[[["self"]],["typeid"]]],[11,"peek","","",259,[[["cursor"]],["bool"]]],[11,"display","","",259,[[],["str"]]],[11,"span","","",259,[[["self"]],["span"]]],[11,"from","","",259,[[["t"]],["t"]]],[11,"into","","",259,[[],["u"]]],[11,"to_owned","","",259,[[["self"]],["t"]]],[11,"clone_into","","",259,[[["self"],["t"]]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"try_into","","",259,[[],["result"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"type_id","","",259,[[["self"]],["typeid"]]],[11,"peek","","",260,[[["cursor"]],["bool"]]],[11,"display","","",260,[[],["str"]]],[11,"span","","",260,[[["self"]],["span"]]],[11,"from","","",260,[[["t"]],["t"]]],[11,"into","","",260,[[],["u"]]],[11,"to_owned","","",260,[[["self"]],["t"]]],[11,"clone_into","","",260,[[["self"],["t"]]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"try_into","","",260,[[],["result"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"type_id","","",260,[[["self"]],["typeid"]]],[11,"peek","","",261,[[["cursor"]],["bool"]]],[11,"display","","",261,[[],["str"]]],[11,"span","","",261,[[["self"]],["span"]]],[11,"from","","",261,[[["t"]],["t"]]],[11,"into","","",261,[[],["u"]]],[11,"to_owned","","",261,[[["self"]],["t"]]],[11,"clone_into","","",261,[[["self"],["t"]]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"try_into","","",261,[[],["result"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"type_id","","",261,[[["self"]],["typeid"]]],[11,"peek","","",262,[[["cursor"]],["bool"]]],[11,"display","","",262,[[],["str"]]],[11,"span","","",262,[[["self"]],["span"]]],[11,"from","","",262,[[["t"]],["t"]]],[11,"into","","",262,[[],["u"]]],[11,"to_owned","","",262,[[["self"]],["t"]]],[11,"clone_into","","",262,[[["self"],["t"]]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"try_into","","",262,[[],["result"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"type_id","","",262,[[["self"]],["typeid"]]],[11,"peek","","",263,[[["cursor"]],["bool"]]],[11,"display","","",263,[[],["str"]]],[11,"span","","",263,[[["self"]],["span"]]],[11,"from","","",263,[[["t"]],["t"]]],[11,"into","","",263,[[],["u"]]],[11,"to_owned","","",263,[[["self"]],["t"]]],[11,"clone_into","","",263,[[["self"],["t"]]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"try_into","","",263,[[],["result"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"type_id","","",263,[[["self"]],["typeid"]]],[11,"peek","","",264,[[["cursor"]],["bool"]]],[11,"display","","",264,[[],["str"]]],[11,"span","","",264,[[["self"]],["span"]]],[11,"from","","",264,[[["t"]],["t"]]],[11,"into","","",264,[[],["u"]]],[11,"to_owned","","",264,[[["self"]],["t"]]],[11,"clone_into","","",264,[[["self"],["t"]]]],[11,"try_from","","",264,[[["u"]],["result"]]],[11,"try_into","","",264,[[],["result"]]],[11,"borrow","","",264,[[["self"]],["t"]]],[11,"borrow_mut","","",264,[[["self"]],["t"]]],[11,"type_id","","",264,[[["self"]],["typeid"]]],[11,"peek","","",265,[[["cursor"]],["bool"]]],[11,"display","","",265,[[],["str"]]],[11,"span","","",265,[[["self"]],["span"]]],[11,"from","","",265,[[["t"]],["t"]]],[11,"into","","",265,[[],["u"]]],[11,"to_owned","","",265,[[["self"]],["t"]]],[11,"clone_into","","",265,[[["self"],["t"]]]],[11,"try_from","","",265,[[["u"]],["result"]]],[11,"try_into","","",265,[[],["result"]]],[11,"borrow","","",265,[[["self"]],["t"]]],[11,"borrow_mut","","",265,[[["self"]],["t"]]],[11,"type_id","","",265,[[["self"]],["typeid"]]],[11,"peek","","",266,[[["cursor"]],["bool"]]],[11,"display","","",266,[[],["str"]]],[11,"span","","",266,[[["self"]],["span"]]],[11,"from","","",266,[[["t"]],["t"]]],[11,"into","","",266,[[],["u"]]],[11,"to_owned","","",266,[[["self"]],["t"]]],[11,"clone_into","","",266,[[["self"],["t"]]]],[11,"try_from","","",266,[[["u"]],["result"]]],[11,"try_into","","",266,[[],["result"]]],[11,"borrow","","",266,[[["self"]],["t"]]],[11,"borrow_mut","","",266,[[["self"]],["t"]]],[11,"type_id","","",266,[[["self"]],["typeid"]]],[11,"peek","","",267,[[["cursor"]],["bool"]]],[11,"display","","",267,[[],["str"]]],[11,"span","","",267,[[["self"]],["span"]]],[11,"from","","",267,[[["t"]],["t"]]],[11,"into","","",267,[[],["u"]]],[11,"to_owned","","",267,[[["self"]],["t"]]],[11,"clone_into","","",267,[[["self"],["t"]]]],[11,"try_from","","",267,[[["u"]],["result"]]],[11,"try_into","","",267,[[],["result"]]],[11,"borrow","","",267,[[["self"]],["t"]]],[11,"borrow_mut","","",267,[[["self"]],["t"]]],[11,"type_id","","",267,[[["self"]],["typeid"]]],[11,"peek","","",268,[[["cursor"]],["bool"]]],[11,"display","","",268,[[],["str"]]],[11,"span","","",268,[[["self"]],["span"]]],[11,"from","","",268,[[["t"]],["t"]]],[11,"into","","",268,[[],["u"]]],[11,"to_owned","","",268,[[["self"]],["t"]]],[11,"clone_into","","",268,[[["self"],["t"]]]],[11,"try_from","","",268,[[["u"]],["result"]]],[11,"try_into","","",268,[[],["result"]]],[11,"borrow","","",268,[[["self"]],["t"]]],[11,"borrow_mut","","",268,[[["self"]],["t"]]],[11,"type_id","","",268,[[["self"]],["typeid"]]],[11,"peek","","",269,[[["cursor"]],["bool"]]],[11,"display","","",269,[[],["str"]]],[11,"span","","",269,[[["self"]],["span"]]],[11,"from","","",269,[[["t"]],["t"]]],[11,"into","","",269,[[],["u"]]],[11,"to_owned","","",269,[[["self"]],["t"]]],[11,"clone_into","","",269,[[["self"],["t"]]]],[11,"try_from","","",269,[[["u"]],["result"]]],[11,"try_into","","",269,[[],["result"]]],[11,"borrow","","",269,[[["self"]],["t"]]],[11,"borrow_mut","","",269,[[["self"]],["t"]]],[11,"type_id","","",269,[[["self"]],["typeid"]]],[11,"peek","","",270,[[["cursor"]],["bool"]]],[11,"display","","",270,[[],["str"]]],[11,"span","","",270,[[["self"]],["span"]]],[11,"from","","",270,[[["t"]],["t"]]],[11,"into","","",270,[[],["u"]]],[11,"to_owned","","",270,[[["self"]],["t"]]],[11,"clone_into","","",270,[[["self"],["t"]]]],[11,"try_from","","",270,[[["u"]],["result"]]],[11,"try_into","","",270,[[],["result"]]],[11,"borrow","","",270,[[["self"]],["t"]]],[11,"borrow_mut","","",270,[[["self"]],["t"]]],[11,"type_id","","",270,[[["self"]],["typeid"]]],[11,"peek","","",271,[[["cursor"]],["bool"]]],[11,"display","","",271,[[],["str"]]],[11,"span","","",271,[[["self"]],["span"]]],[11,"from","","",271,[[["t"]],["t"]]],[11,"into","","",271,[[],["u"]]],[11,"to_owned","","",271,[[["self"]],["t"]]],[11,"clone_into","","",271,[[["self"],["t"]]]],[11,"try_from","","",271,[[["u"]],["result"]]],[11,"try_into","","",271,[[],["result"]]],[11,"borrow","","",271,[[["self"]],["t"]]],[11,"borrow_mut","","",271,[[["self"]],["t"]]],[11,"type_id","","",271,[[["self"]],["typeid"]]],[11,"peek","","",272,[[["cursor"]],["bool"]]],[11,"display","","",272,[[],["str"]]],[11,"span","","",272,[[["self"]],["span"]]],[11,"from","","",272,[[["t"]],["t"]]],[11,"into","","",272,[[],["u"]]],[11,"to_owned","","",272,[[["self"]],["t"]]],[11,"clone_into","","",272,[[["self"],["t"]]]],[11,"try_from","","",272,[[["u"]],["result"]]],[11,"try_into","","",272,[[],["result"]]],[11,"borrow","","",272,[[["self"]],["t"]]],[11,"borrow_mut","","",272,[[["self"]],["t"]]],[11,"type_id","","",272,[[["self"]],["typeid"]]],[11,"peek","","",273,[[["cursor"]],["bool"]]],[11,"display","","",273,[[],["str"]]],[11,"span","","",273,[[["self"]],["span"]]],[11,"from","","",273,[[["t"]],["t"]]],[11,"into","","",273,[[],["u"]]],[11,"to_owned","","",273,[[["self"]],["t"]]],[11,"clone_into","","",273,[[["self"],["t"]]]],[11,"try_from","","",273,[[["u"]],["result"]]],[11,"try_into","","",273,[[],["result"]]],[11,"borrow","","",273,[[["self"]],["t"]]],[11,"borrow_mut","","",273,[[["self"]],["t"]]],[11,"type_id","","",273,[[["self"]],["typeid"]]],[11,"peek","","",274,[[["cursor"]],["bool"]]],[11,"display","","",274,[[],["str"]]],[11,"span","","",274,[[["self"]],["span"]]],[11,"from","","",274,[[["t"]],["t"]]],[11,"into","","",274,[[],["u"]]],[11,"to_owned","","",274,[[["self"]],["t"]]],[11,"clone_into","","",274,[[["self"],["t"]]]],[11,"try_from","","",274,[[["u"]],["result"]]],[11,"try_into","","",274,[[],["result"]]],[11,"borrow","","",274,[[["self"]],["t"]]],[11,"borrow_mut","","",274,[[["self"]],["t"]]],[11,"type_id","","",274,[[["self"]],["typeid"]]],[11,"peek","","",275,[[["cursor"]],["bool"]]],[11,"display","","",275,[[],["str"]]],[11,"span","","",275,[[["self"]],["span"]]],[11,"from","","",275,[[["t"]],["t"]]],[11,"into","","",275,[[],["u"]]],[11,"to_owned","","",275,[[["self"]],["t"]]],[11,"clone_into","","",275,[[["self"],["t"]]]],[11,"try_from","","",275,[[["u"]],["result"]]],[11,"try_into","","",275,[[],["result"]]],[11,"borrow","","",275,[[["self"]],["t"]]],[11,"borrow_mut","","",275,[[["self"]],["t"]]],[11,"type_id","","",275,[[["self"]],["typeid"]]],[11,"peek","","",276,[[["cursor"]],["bool"]]],[11,"display","","",276,[[],["str"]]],[11,"span","","",276,[[["self"]],["span"]]],[11,"from","","",276,[[["t"]],["t"]]],[11,"into","","",276,[[],["u"]]],[11,"to_owned","","",276,[[["self"]],["t"]]],[11,"clone_into","","",276,[[["self"],["t"]]]],[11,"try_from","","",276,[[["u"]],["result"]]],[11,"try_into","","",276,[[],["result"]]],[11,"borrow","","",276,[[["self"]],["t"]]],[11,"borrow_mut","","",276,[[["self"]],["t"]]],[11,"type_id","","",276,[[["self"]],["typeid"]]],[11,"peek","","",277,[[["cursor"]],["bool"]]],[11,"display","","",277,[[],["str"]]],[11,"span","","",277,[[["self"]],["span"]]],[11,"from","","",277,[[["t"]],["t"]]],[11,"into","","",277,[[],["u"]]],[11,"to_owned","","",277,[[["self"]],["t"]]],[11,"clone_into","","",277,[[["self"],["t"]]]],[11,"try_from","","",277,[[["u"]],["result"]]],[11,"try_into","","",277,[[],["result"]]],[11,"borrow","","",277,[[["self"]],["t"]]],[11,"borrow_mut","","",277,[[["self"]],["t"]]],[11,"type_id","","",277,[[["self"]],["typeid"]]],[11,"peek","","",278,[[["cursor"]],["bool"]]],[11,"display","","",278,[[],["str"]]],[11,"span","","",278,[[["self"]],["span"]]],[11,"from","","",278,[[["t"]],["t"]]],[11,"into","","",278,[[],["u"]]],[11,"to_owned","","",278,[[["self"]],["t"]]],[11,"clone_into","","",278,[[["self"],["t"]]]],[11,"try_from","","",278,[[["u"]],["result"]]],[11,"try_into","","",278,[[],["result"]]],[11,"borrow","","",278,[[["self"]],["t"]]],[11,"borrow_mut","","",278,[[["self"]],["t"]]],[11,"type_id","","",278,[[["self"]],["typeid"]]],[11,"peek","","",279,[[["cursor"]],["bool"]]],[11,"display","","",279,[[],["str"]]],[11,"from","","",279,[[["t"]],["t"]]],[11,"into","","",279,[[],["u"]]],[11,"to_owned","","",279,[[["self"]],["t"]]],[11,"clone_into","","",279,[[["self"],["t"]]]],[11,"try_from","","",279,[[["u"]],["result"]]],[11,"try_into","","",279,[[],["result"]]],[11,"borrow","","",279,[[["self"]],["t"]]],[11,"borrow_mut","","",279,[[["self"]],["t"]]],[11,"type_id","","",279,[[["self"]],["typeid"]]],[11,"peek","","",280,[[["cursor"]],["bool"]]],[11,"display","","",280,[[],["str"]]],[11,"from","","",280,[[["t"]],["t"]]],[11,"into","","",280,[[],["u"]]],[11,"to_owned","","",280,[[["self"]],["t"]]],[11,"clone_into","","",280,[[["self"],["t"]]]],[11,"try_from","","",280,[[["u"]],["result"]]],[11,"try_into","","",280,[[],["result"]]],[11,"borrow","","",280,[[["self"]],["t"]]],[11,"borrow_mut","","",280,[[["self"]],["t"]]],[11,"type_id","","",280,[[["self"]],["typeid"]]],[11,"peek","","",281,[[["cursor"]],["bool"]]],[11,"display","","",281,[[],["str"]]],[11,"from","","",281,[[["t"]],["t"]]],[11,"into","","",281,[[],["u"]]],[11,"to_owned","","",281,[[["self"]],["t"]]],[11,"clone_into","","",281,[[["self"],["t"]]]],[11,"try_from","","",281,[[["u"]],["result"]]],[11,"try_into","","",281,[[],["result"]]],[11,"borrow","","",281,[[["self"]],["t"]]],[11,"borrow_mut","","",281,[[["self"]],["t"]]],[11,"type_id","","",281,[[["self"]],["typeid"]]],[11,"peek","","",282,[[["cursor"]],["bool"]]],[11,"display","","",282,[[],["str"]]],[11,"from","","",282,[[["t"]],["t"]]],[11,"into","","",282,[[],["u"]]],[11,"to_owned","","",282,[[["self"]],["t"]]],[11,"clone_into","","",282,[[["self"],["t"]]]],[11,"try_from","","",282,[[["u"]],["result"]]],[11,"try_into","","",282,[[],["result"]]],[11,"borrow","","",282,[[["self"]],["t"]]],[11,"borrow_mut","","",282,[[["self"]],["t"]]],[11,"type_id","","",282,[[["self"]],["typeid"]]],[11,"from","syn::buffer","",290,[[["t"]],["t"]]],[11,"into","","",290,[[],["u"]]],[11,"try_from","","",290,[[["u"]],["result"]]],[11,"try_into","","",290,[[],["result"]]],[11,"borrow","","",290,[[["self"]],["t"]]],[11,"borrow_mut","","",290,[[["self"]],["t"]]],[11,"type_id","","",290,[[["self"]],["typeid"]]],[11,"from","","",291,[[["t"]],["t"]]],[11,"into","","",291,[[],["u"]]],[11,"to_owned","","",291,[[["self"]],["t"]]],[11,"clone_into","","",291,[[["self"],["t"]]]],[11,"try_from","","",291,[[["u"]],["result"]]],[11,"try_into","","",291,[[],["result"]]],[11,"borrow","","",291,[[["self"]],["t"]]],[11,"borrow_mut","","",291,[[["self"]],["t"]]],[11,"type_id","","",291,[[["self"]],["typeid"]]],[11,"span","syn::punctuated","",294,[[["self"]],["span"]]],[11,"from","","",294,[[["t"]],["t"]]],[11,"into","","",294,[[],["u"]]],[11,"into_iter","","",294,[[],["i"]]],[11,"to_owned","","",294,[[["self"]],["t"]]],[11,"clone_into","","",294,[[["self"],["t"]]]],[11,"try_from","","",294,[[["u"]],["result"]]],[11,"try_into","","",294,[[],["result"]]],[11,"borrow","","",294,[[["self"]],["t"]]],[11,"borrow_mut","","",294,[[["self"]],["t"]]],[11,"type_id","","",294,[[["self"]],["typeid"]]],[11,"from","","",306,[[["t"]],["t"]]],[11,"into","","",306,[[],["u"]]],[11,"into_iter","","",306,[[],["i"]]],[11,"to_owned","","",306,[[["self"]],["t"]]],[11,"clone_into","","",306,[[["self"],["t"]]]],[11,"try_from","","",306,[[["u"]],["result"]]],[11,"try_into","","",306,[[],["result"]]],[11,"borrow","","",306,[[["self"]],["t"]]],[11,"borrow_mut","","",306,[[["self"]],["t"]]],[11,"type_id","","",306,[[["self"]],["typeid"]]],[11,"from","","",307,[[["t"]],["t"]]],[11,"into","","",307,[[],["u"]]],[11,"into_iter","","",307,[[],["i"]]],[11,"try_from","","",307,[[["u"]],["result"]]],[11,"try_into","","",307,[[],["result"]]],[11,"borrow","","",307,[[["self"]],["t"]]],[11,"borrow_mut","","",307,[[["self"]],["t"]]],[11,"type_id","","",307,[[["self"]],["typeid"]]],[11,"from","","",308,[[["t"]],["t"]]],[11,"into","","",308,[[],["u"]]],[11,"into_iter","","",308,[[],["i"]]],[11,"to_owned","","",308,[[["self"]],["t"]]],[11,"clone_into","","",308,[[["self"],["t"]]]],[11,"try_from","","",308,[[["u"]],["result"]]],[11,"try_into","","",308,[[],["result"]]],[11,"borrow","","",308,[[["self"]],["t"]]],[11,"borrow_mut","","",308,[[["self"]],["t"]]],[11,"type_id","","",308,[[["self"]],["typeid"]]],[11,"from","","",309,[[["t"]],["t"]]],[11,"into","","",309,[[],["u"]]],[11,"into_iter","","",309,[[],["i"]]],[11,"to_owned","","",309,[[["self"]],["t"]]],[11,"clone_into","","",309,[[["self"],["t"]]]],[11,"try_from","","",309,[[["u"]],["result"]]],[11,"try_into","","",309,[[],["result"]]],[11,"borrow","","",309,[[["self"]],["t"]]],[11,"borrow_mut","","",309,[[["self"]],["t"]]],[11,"type_id","","",309,[[["self"]],["typeid"]]],[11,"from","","",310,[[["t"]],["t"]]],[11,"into","","",310,[[],["u"]]],[11,"into_iter","","",310,[[],["i"]]],[11,"to_owned","","",310,[[["self"]],["t"]]],[11,"clone_into","","",310,[[["self"],["t"]]]],[11,"try_from","","",310,[[["u"]],["result"]]],[11,"try_into","","",310,[[],["result"]]],[11,"borrow","","",310,[[["self"]],["t"]]],[11,"borrow_mut","","",310,[[["self"]],["t"]]],[11,"type_id","","",310,[[["self"]],["typeid"]]],[11,"from","","",311,[[["t"]],["t"]]],[11,"into","","",311,[[],["u"]]],[11,"into_iter","","",311,[[],["i"]]],[11,"try_from","","",311,[[["u"]],["result"]]],[11,"try_into","","",311,[[],["result"]]],[11,"borrow","","",311,[[["self"]],["t"]]],[11,"borrow_mut","","",311,[[["self"]],["t"]]],[11,"type_id","","",311,[[["self"]],["typeid"]]],[11,"span","","",293,[[["self"]],["span"]]],[11,"from","","",293,[[["t"]],["t"]]],[11,"into","","",293,[[],["u"]]],[11,"to_owned","","",293,[[["self"]],["t"]]],[11,"clone_into","","",293,[[["self"],["t"]]]],[11,"try_from","","",293,[[["u"]],["result"]]],[11,"try_into","","",293,[[],["result"]]],[11,"borrow","","",293,[[["self"]],["t"]]],[11,"borrow_mut","","",293,[[["self"]],["t"]]],[11,"type_id","","",293,[[["self"]],["typeid"]]],[11,"from","syn::parse","",312,[[["t"]],["t"]]],[11,"into","","",312,[[],["u"]]],[11,"try_from","","",312,[[["u"]],["result"]]],[11,"try_into","","",312,[[],["result"]]],[11,"borrow","","",312,[[["self"]],["t"]]],[11,"borrow_mut","","",312,[[["self"]],["t"]]],[11,"type_id","","",312,[[["self"]],["typeid"]]],[11,"from","","",301,[[["t"]],["t"]]],[11,"into","","",301,[[],["u"]]],[11,"to_string","","",301,[[["self"]],["string"]]],[11,"try_from","","",301,[[["u"]],["result"]]],[11,"try_into","","",301,[[],["result"]]],[11,"borrow","","",301,[[["self"]],["t"]]],[11,"borrow_mut","","",301,[[["self"]],["t"]]],[11,"type_id","","",301,[[["self"]],["typeid"]]],[11,"from","","",300,[[["t"]],["t"]]],[11,"into","","",300,[[],["u"]]],[11,"to_owned","","",300,[[["self"]],["t"]]],[11,"clone_into","","",300,[[["self"],["t"]]]],[11,"try_from","","",300,[[["u"]],["result"]]],[11,"try_into","","",300,[[],["result"]]],[11,"borrow","","",300,[[["self"]],["t"]]],[11,"borrow_mut","","",300,[[["self"]],["t"]]],[11,"type_id","","",300,[[["self"]],["typeid"]]],[11,"from","","",313,[[["t"]],["t"]]],[11,"into","","",313,[[],["u"]]],[11,"try_from","","",313,[[["u"]],["result"]]],[11,"try_into","","",313,[[],["result"]]],[11,"borrow","","",313,[[["self"]],["t"]]],[11,"borrow_mut","","",313,[[["self"]],["t"]]],[11,"type_id","","",313,[[["self"]],["typeid"]]],[11,"fmt","syn","",303,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",303,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"cmp","","",303,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",303,[[["self"],["h"]]]],[11,"clone","","",303,[[["self"]],["ident"]]],[11,"eq","","",303,[[["self"],["ident"]],["bool"]]],[11,"eq","","",303,[[["t"],["self"]],["bool"]]],[11,"partial_cmp","","",303,[[["self"],["ident"]],[["ordering"],["option",["ordering"]]]]],[11,"to_tokens","","",303,[[["self"],["tokenstream"]]]],[11,"span","","",303,[[["self"]],[["option",["span"]],["span"]]]],[11,"fmt","","",303,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"peek","","",100,[[["cursor"]],["bool"]]],[11,"display","","",100,[[],["str"]]],[11,"peek","","",168,[[["cursor"]],["bool"]]],[11,"display","","",168,[[],["str"]]],[11,"peek","","",284,[[["cursor"]],["bool"]]],[11,"display","","",284,[[],["str"]]],[11,"peek","","",285,[[["cursor"]],["bool"]]],[11,"display","","",285,[[],["str"]]],[11,"peek","","",286,[[["cursor"]],["bool"]]],[11,"display","","",286,[[],["str"]]],[11,"peek","","",287,[[["cursor"]],["bool"]]],[11,"display","","",287,[[],["str"]]],[11,"peek","","",288,[[["cursor"]],["bool"]]],[11,"display","","",288,[[],["str"]]],[11,"peek","","",289,[[["cursor"]],["bool"]]],[11,"display","","",289,[[],["str"]]],[11,"peek","","",101,[[["cursor"]],["bool"]]],[11,"display","","",101,[[],["str"]]],[11,"peek","syn::token","",180,[[["cursor"]],["bool"]]],[11,"display","","",180,[[],["str"]]],[11,"peek","","",281,[[["cursor"]],["bool"]]],[11,"display","","",281,[[],["str"]]],[11,"peek","","",279,[[["cursor"]],["bool"]]],[11,"display","","",279,[[],["str"]]],[11,"peek","","",280,[[["cursor"]],["bool"]]],[11,"display","","",280,[[],["str"]]],[11,"peek","","",282,[[["cursor"]],["bool"]]],[11,"display","","",282,[[],["str"]]],[11,"peek","","",181,[[["cursor"]],["bool"]]],[11,"display","","",181,[[],["str"]]],[11,"peek","","",182,[[["cursor"]],["bool"]]],[11,"display","","",182,[[],["str"]]],[11,"peek","","",183,[[["cursor"]],["bool"]]],[11,"display","","",183,[[],["str"]]],[11,"peek","","",184,[[["cursor"]],["bool"]]],[11,"display","","",184,[[],["str"]]],[11,"peek","","",185,[[["cursor"]],["bool"]]],[11,"display","","",185,[[],["str"]]],[11,"peek","","",186,[[["cursor"]],["bool"]]],[11,"display","","",186,[[],["str"]]],[11,"peek","","",187,[[["cursor"]],["bool"]]],[11,"display","","",187,[[],["str"]]],[11,"peek","","",188,[[["cursor"]],["bool"]]],[11,"display","","",188,[[],["str"]]],[11,"peek","","",189,[[["cursor"]],["bool"]]],[11,"display","","",189,[[],["str"]]],[11,"peek","","",190,[[["cursor"]],["bool"]]],[11,"display","","",190,[[],["str"]]],[11,"peek","","",191,[[["cursor"]],["bool"]]],[11,"display","","",191,[[],["str"]]],[11,"peek","","",192,[[["cursor"]],["bool"]]],[11,"display","","",192,[[],["str"]]],[11,"peek","","",193,[[["cursor"]],["bool"]]],[11,"display","","",193,[[],["str"]]],[11,"peek","","",194,[[["cursor"]],["bool"]]],[11,"display","","",194,[[],["str"]]],[11,"peek","","",195,[[["cursor"]],["bool"]]],[11,"display","","",195,[[],["str"]]],[11,"peek","","",196,[[["cursor"]],["bool"]]],[11,"display","","",196,[[],["str"]]],[11,"peek","","",197,[[["cursor"]],["bool"]]],[11,"display","","",197,[[],["str"]]],[11,"peek","","",198,[[["cursor"]],["bool"]]],[11,"display","","",198,[[],["str"]]],[11,"peek","","",199,[[["cursor"]],["bool"]]],[11,"display","","",199,[[],["str"]]],[11,"peek","","",200,[[["cursor"]],["bool"]]],[11,"display","","",200,[[],["str"]]],[11,"peek","","",201,[[["cursor"]],["bool"]]],[11,"display","","",201,[[],["str"]]],[11,"peek","","",202,[[["cursor"]],["bool"]]],[11,"display","","",202,[[],["str"]]],[11,"peek","","",203,[[["cursor"]],["bool"]]],[11,"display","","",203,[[],["str"]]],[11,"peek","","",204,[[["cursor"]],["bool"]]],[11,"display","","",204,[[],["str"]]],[11,"peek","","",205,[[["cursor"]],["bool"]]],[11,"display","","",205,[[],["str"]]],[11,"peek","","",206,[[["cursor"]],["bool"]]],[11,"display","","",206,[[],["str"]]],[11,"peek","","",207,[[["cursor"]],["bool"]]],[11,"display","","",207,[[],["str"]]],[11,"peek","","",208,[[["cursor"]],["bool"]]],[11,"display","","",208,[[],["str"]]],[11,"peek","","",209,[[["cursor"]],["bool"]]],[11,"display","","",209,[[],["str"]]],[11,"peek","","",210,[[["cursor"]],["bool"]]],[11,"display","","",210,[[],["str"]]],[11,"peek","","",211,[[["cursor"]],["bool"]]],[11,"display","","",211,[[],["str"]]],[11,"peek","","",212,[[["cursor"]],["bool"]]],[11,"display","","",212,[[],["str"]]],[11,"peek","","",213,[[["cursor"]],["bool"]]],[11,"display","","",213,[[],["str"]]],[11,"peek","","",214,[[["cursor"]],["bool"]]],[11,"display","","",214,[[],["str"]]],[11,"peek","","",215,[[["cursor"]],["bool"]]],[11,"display","","",215,[[],["str"]]],[11,"peek","","",216,[[["cursor"]],["bool"]]],[11,"display","","",216,[[],["str"]]],[11,"peek","","",217,[[["cursor"]],["bool"]]],[11,"display","","",217,[[],["str"]]],[11,"peek","","",218,[[["cursor"]],["bool"]]],[11,"display","","",218,[[],["str"]]],[11,"peek","","",219,[[["cursor"]],["bool"]]],[11,"display","","",219,[[],["str"]]],[11,"peek","","",220,[[["cursor"]],["bool"]]],[11,"display","","",220,[[],["str"]]],[11,"peek","","",221,[[["cursor"]],["bool"]]],[11,"display","","",221,[[],["str"]]],[11,"peek","","",222,[[["cursor"]],["bool"]]],[11,"display","","",222,[[],["str"]]],[11,"peek","","",223,[[["cursor"]],["bool"]]],[11,"display","","",223,[[],["str"]]],[11,"peek","","",224,[[["cursor"]],["bool"]]],[11,"display","","",224,[[],["str"]]],[11,"peek","","",225,[[["cursor"]],["bool"]]],[11,"display","","",225,[[],["str"]]],[11,"peek","","",226,[[["cursor"]],["bool"]]],[11,"display","","",226,[[],["str"]]],[11,"peek","","",227,[[["cursor"]],["bool"]]],[11,"display","","",227,[[],["str"]]],[11,"peek","","",228,[[["cursor"]],["bool"]]],[11,"display","","",228,[[],["str"]]],[11,"peek","","",229,[[["cursor"]],["bool"]]],[11,"display","","",229,[[],["str"]]],[11,"peek","","",230,[[["cursor"]],["bool"]]],[11,"display","","",230,[[],["str"]]],[11,"peek","","",231,[[["cursor"]],["bool"]]],[11,"display","","",231,[[],["str"]]],[11,"peek","","",232,[[["cursor"]],["bool"]]],[11,"display","","",232,[[],["str"]]],[11,"peek","","",233,[[["cursor"]],["bool"]]],[11,"display","","",233,[[],["str"]]],[11,"peek","","",234,[[["cursor"]],["bool"]]],[11,"display","","",234,[[],["str"]]],[11,"peek","","",235,[[["cursor"]],["bool"]]],[11,"display","","",235,[[],["str"]]],[11,"peek","","",236,[[["cursor"]],["bool"]]],[11,"display","","",236,[[],["str"]]],[11,"peek","","",237,[[["cursor"]],["bool"]]],[11,"display","","",237,[[],["str"]]],[11,"peek","","",238,[[["cursor"]],["bool"]]],[11,"display","","",238,[[],["str"]]],[11,"peek","","",239,[[["cursor"]],["bool"]]],[11,"display","","",239,[[],["str"]]],[11,"peek","","",240,[[["cursor"]],["bool"]]],[11,"display","","",240,[[],["str"]]],[11,"peek","","",241,[[["cursor"]],["bool"]]],[11,"display","","",241,[[],["str"]]],[11,"peek","","",242,[[["cursor"]],["bool"]]],[11,"display","","",242,[[],["str"]]],[11,"peek","","",243,[[["cursor"]],["bool"]]],[11,"display","","",243,[[],["str"]]],[11,"peek","","",244,[[["cursor"]],["bool"]]],[11,"display","","",244,[[],["str"]]],[11,"peek","","",245,[[["cursor"]],["bool"]]],[11,"display","","",245,[[],["str"]]],[11,"peek","","",246,[[["cursor"]],["bool"]]],[11,"display","","",246,[[],["str"]]],[11,"peek","","",247,[[["cursor"]],["bool"]]],[11,"display","","",247,[[],["str"]]],[11,"peek","","",248,[[["cursor"]],["bool"]]],[11,"display","","",248,[[],["str"]]],[11,"peek","","",249,[[["cursor"]],["bool"]]],[11,"display","","",249,[[],["str"]]],[11,"peek","","",250,[[["cursor"]],["bool"]]],[11,"display","","",250,[[],["str"]]],[11,"peek","","",251,[[["cursor"]],["bool"]]],[11,"display","","",251,[[],["str"]]],[11,"peek","","",252,[[["cursor"]],["bool"]]],[11,"display","","",252,[[],["str"]]],[11,"peek","","",253,[[["cursor"]],["bool"]]],[11,"display","","",253,[[],["str"]]],[11,"peek","","",254,[[["cursor"]],["bool"]]],[11,"display","","",254,[[],["str"]]],[11,"peek","","",255,[[["cursor"]],["bool"]]],[11,"display","","",255,[[],["str"]]],[11,"peek","","",256,[[["cursor"]],["bool"]]],[11,"display","","",256,[[],["str"]]],[11,"peek","","",257,[[["cursor"]],["bool"]]],[11,"display","","",257,[[],["str"]]],[11,"peek","","",258,[[["cursor"]],["bool"]]],[11,"display","","",258,[[],["str"]]],[11,"peek","","",259,[[["cursor"]],["bool"]]],[11,"display","","",259,[[],["str"]]],[11,"peek","","",260,[[["cursor"]],["bool"]]],[11,"display","","",260,[[],["str"]]],[11,"peek","","",261,[[["cursor"]],["bool"]]],[11,"display","","",261,[[],["str"]]],[11,"peek","","",262,[[["cursor"]],["bool"]]],[11,"display","","",262,[[],["str"]]],[11,"peek","","",263,[[["cursor"]],["bool"]]],[11,"display","","",263,[[],["str"]]],[11,"peek","","",264,[[["cursor"]],["bool"]]],[11,"display","","",264,[[],["str"]]],[11,"peek","","",265,[[["cursor"]],["bool"]]],[11,"display","","",265,[[],["str"]]],[11,"peek","","",266,[[["cursor"]],["bool"]]],[11,"display","","",266,[[],["str"]]],[11,"peek","","",267,[[["cursor"]],["bool"]]],[11,"display","","",267,[[],["str"]]],[11,"peek","","",268,[[["cursor"]],["bool"]]],[11,"display","","",268,[[],["str"]]],[11,"peek","","",269,[[["cursor"]],["bool"]]],[11,"display","","",269,[[],["str"]]],[11,"peek","","",270,[[["cursor"]],["bool"]]],[11,"display","","",270,[[],["str"]]],[11,"peek","","",271,[[["cursor"]],["bool"]]],[11,"display","","",271,[[],["str"]]],[11,"peek","","",272,[[["cursor"]],["bool"]]],[11,"display","","",272,[[],["str"]]],[11,"peek","","",273,[[["cursor"]],["bool"]]],[11,"display","","",273,[[],["str"]]],[11,"peek","","",274,[[["cursor"]],["bool"]]],[11,"display","","",274,[[],["str"]]],[11,"peek","","",275,[[["cursor"]],["bool"]]],[11,"display","","",275,[[],["str"]]],[11,"peek","","",276,[[["cursor"]],["bool"]]],[11,"display","","",276,[[],["str"]]],[11,"peek","","",277,[[["cursor"]],["bool"]]],[11,"display","","",277,[[],["str"]]],[11,"peek","","",278,[[["cursor"]],["bool"]]],[11,"display","","",278,[[],["str"]]],[11,"peek","syn","",303,[[["cursor"]],["bool"]]],[11,"display","","",303,[[],["str"]]],[11,"parse_any","","",303,[[["parsestream"]],["result"]]],[11,"unraw","","",303,[[["self"]],["ident"]]],[11,"advance_to","syn::parse","",301,[[["self"]]]],[11,"parse","syn::token","",180,[[["parsestream"]],["result"]]],[11,"parse","","",181,[[["parsestream"]],["result"]]],[11,"parse","","",182,[[["parsestream"]],["result"]]],[11,"parse","","",183,[[["parsestream"]],["result"]]],[11,"parse","","",184,[[["parsestream"]],["result"]]],[11,"parse","","",185,[[["parsestream"]],["result"]]],[11,"parse","","",186,[[["parsestream"]],["result"]]],[11,"parse","","",187,[[["parsestream"]],["result"]]],[11,"parse","","",188,[[["parsestream"]],["result"]]],[11,"parse","","",189,[[["parsestream"]],["result"]]],[11,"parse","","",190,[[["parsestream"]],["result"]]],[11,"parse","","",191,[[["parsestream"]],["result"]]],[11,"parse","","",192,[[["parsestream"]],["result"]]],[11,"parse","","",193,[[["parsestream"]],["result"]]],[11,"parse","","",194,[[["parsestream"]],["result"]]],[11,"parse","","",195,[[["parsestream"]],["result"]]],[11,"parse","","",196,[[["parsestream"]],["result"]]],[11,"parse","","",197,[[["parsestream"]],["result"]]],[11,"parse","","",198,[[["parsestream"]],["result"]]],[11,"parse","","",199,[[["parsestream"]],["result"]]],[11,"parse","","",200,[[["parsestream"]],["result"]]],[11,"parse","","",201,[[["parsestream"]],["result"]]],[11,"parse","","",202,[[["parsestream"]],["result"]]],[11,"parse","","",203,[[["parsestream"]],["result"]]],[11,"parse","","",204,[[["parsestream"]],["result"]]],[11,"parse","","",205,[[["parsestream"]],["result"]]],[11,"parse","","",206,[[["parsestream"]],["result"]]],[11,"parse","","",207,[[["parsestream"]],["result"]]],[11,"parse","","",208,[[["parsestream"]],["result"]]],[11,"parse","","",209,[[["parsestream"]],["result"]]],[11,"parse","","",210,[[["parsestream"]],["result"]]],[11,"parse","","",211,[[["parsestream"]],["result"]]],[11,"parse","","",212,[[["parsestream"]],["result"]]],[11,"parse","","",213,[[["parsestream"]],["result"]]],[11,"parse","","",214,[[["parsestream"]],["result"]]],[11,"parse","","",215,[[["parsestream"]],["result"]]],[11,"parse","","",216,[[["parsestream"]],["result"]]],[11,"parse","","",217,[[["parsestream"]],["result"]]],[11,"parse","","",218,[[["parsestream"]],["result"]]],[11,"parse","","",219,[[["parsestream"]],["result"]]],[11,"parse","","",220,[[["parsestream"]],["result"]]],[11,"parse","","",221,[[["parsestream"]],["result"]]],[11,"parse","","",222,[[["parsestream"]],["result"]]],[11,"parse","","",223,[[["parsestream"]],["result"]]],[11,"parse","","",224,[[["parsestream"]],["result"]]],[11,"parse","","",225,[[["parsestream"]],["result"]]],[11,"parse","","",226,[[["parsestream"]],["result"]]],[11,"parse","","",227,[[["parsestream"]],["result"]]],[11,"parse","","",228,[[["parsestream"]],["result"]]],[11,"parse","","",229,[[["parsestream"]],["result"]]],[11,"parse","","",230,[[["parsestream"]],["result"]]],[11,"parse","","",231,[[["parsestream"]],["result"]]],[11,"parse","","",232,[[["parsestream"]],["result"]]],[11,"parse","","",233,[[["parsestream"]],["result"]]],[11,"parse","","",234,[[["parsestream"]],["result"]]],[11,"parse","","",235,[[["parsestream"]],["result"]]],[11,"parse","","",236,[[["parsestream"]],["result"]]],[11,"parse","","",237,[[["parsestream"]],["result"]]],[11,"parse","","",238,[[["parsestream"]],["result"]]],[11,"parse","","",239,[[["parsestream"]],["result"]]],[11,"parse","","",240,[[["parsestream"]],["result"]]],[11,"parse","","",241,[[["parsestream"]],["result"]]],[11,"parse","","",242,[[["parsestream"]],["result"]]],[11,"parse","","",243,[[["parsestream"]],["result"]]],[11,"parse","","",244,[[["parsestream"]],["result"]]],[11,"parse","","",245,[[["parsestream"]],["result"]]],[11,"parse","","",246,[[["parsestream"]],["result"]]],[11,"parse","","",247,[[["parsestream"]],["result"]]],[11,"parse","","",248,[[["parsestream"]],["result"]]],[11,"parse","","",249,[[["parsestream"]],["result"]]],[11,"parse","","",250,[[["parsestream"]],["result"]]],[11,"parse","","",251,[[["parsestream"]],["result"]]],[11,"parse","","",252,[[["parsestream"]],["result"]]],[11,"parse","","",253,[[["parsestream"]],["result"]]],[11,"parse","","",254,[[["parsestream"]],["result"]]],[11,"parse","","",255,[[["parsestream"]],["result"]]],[11,"parse","","",256,[[["parsestream"]],["result"]]],[11,"parse","","",257,[[["parsestream"]],["result"]]],[11,"parse","","",258,[[["parsestream"]],["result"]]],[11,"parse","","",259,[[["parsestream"]],["result"]]],[11,"parse","","",260,[[["parsestream"]],["result"]]],[11,"parse","","",261,[[["parsestream"]],["result"]]],[11,"parse","","",262,[[["parsestream"]],["result"]]],[11,"parse","","",263,[[["parsestream"]],["result"]]],[11,"parse","","",264,[[["parsestream"]],["result"]]],[11,"parse","","",265,[[["parsestream"]],["result"]]],[11,"parse","","",266,[[["parsestream"]],["result"]]],[11,"parse","","",267,[[["parsestream"]],["result"]]],[11,"parse","","",268,[[["parsestream"]],["result"]]],[11,"parse","","",269,[[["parsestream"]],["result"]]],[11,"parse","","",270,[[["parsestream"]],["result"]]],[11,"parse","","",271,[[["parsestream"]],["result"]]],[11,"parse","","",272,[[["parsestream"]],["result"]]],[11,"parse","","",273,[[["parsestream"]],["result"]]],[11,"parse","","",274,[[["parsestream"]],["result"]]],[11,"parse","","",275,[[["parsestream"]],["result"]]],[11,"parse","","",276,[[["parsestream"]],["result"]]],[11,"parse","","",277,[[["parsestream"]],["result"]]],[11,"parse","","",278,[[["parsestream"]],["result"]]],[11,"parse","syn","",303,[[["parsestream"]],["result"]]],[11,"parse","","",150,[[["parsestream"]],["result"]]],[11,"parse","","",1,[[["parsestream"]],["result"]]],[11,"parse","","",2,[[["parsestream"]],["result"]]],[11,"parse","","",151,[[["parsestream"]],["result"]]],[11,"parse","","",6,[[["parsestream"]],["result"]]],[11,"parse","","",4,[[["parsestream"]],["result"]]],[11,"parse","","",5,[[["parsestream"]],["result"]]],[11,"parse","","",153,[[["parsestream"]],["result"]]],[11,"parse","","",156,[[["parsestream"]],["result"]]],[11,"parse","","",33,[[["parsestream"]],["result"]]],[11,"parse","","",30,[[["parsestream"]],["result"]]],[11,"parse","","",28,[[["parsestream"]],["result"]]],[11,"parse","","",34,[[["parsestream"]],["result"]]],[11,"parse","","",36,[[["parsestream"]],["result"]]],[11,"parse","","",21,[[["parsestream"]],["result"]]],[11,"parse","","",14,[[["parsestream"]],["result"]]],[11,"parse","","",23,[[["parsestream"]],["result"]]],[11,"parse","","",37,[[["parsestream"]],["result"]]],[11,"parse","","",47,[[["parsestream"]],["result"]]],[11,"parse","","",19,[[["parsestream"]],["result"]]],[11,"parse","","",49,[[["parsestream"]],["result"]]],[11,"parse","","",24,[[["parsestream"]],["result"]]],[11,"parse","","",48,[[["parsestream"]],["result"]]],[11,"parse","","",32,[[["parsestream"]],["result"]]],[11,"parse","","",25,[[["parsestream"]],["result"]]],[11,"parse","","",50,[[["parsestream"]],["result"]]],[11,"parse","","",20,[[["parsestream"]],["result"]]],[11,"parse","","",15,[[["parsestream"]],["result"]]],[11,"parse","","",16,[[["parsestream"]],["result"]]],[11,"parse","","",27,[[["parsestream"]],["result"]]],[11,"parse","","",31,[[["parsestream"]],["result"]]],[11,"parse","","",40,[[["parsestream"]],["result"]]],[11,"parse","","",41,[[["parsestream"]],["result"]]],[11,"parse","","",22,[[["parsestream"]],["result"]]],[11,"parse","","",26,[[["parsestream"]],["result"]]],[11,"parse","","",43,[[["parsestream"]],["result"]]],[11,"parse","","",35,[[["parsestream"]],["result"]]],[11,"parse","","",44,[[["parsestream"]],["result"]]],[11,"parse","","",42,[[["parsestream"]],["result"]]],[11,"parse","","",38,[[["parsestream"]],["result"]]],[11,"parse","","",45,[[["parsestream"]],["result"]]],[11,"parse","","",17,[[["parsestream"]],["result"]]],[11,"parse","","",46,[[["parsestream"]],["result"]]],[11,"parse","","",52,[[["parsestream"]],["result"]]],[11,"parse","","",51,[[["parsestream"]],["result"]]],[11,"parse","","",12,[[["parsestream"]],["result"]]],[11,"parse","","",11,[[["parsestream"]],["result"]]],[11,"parse","","",155,[[["parsestream"]],["result"]]],[11,"parse","","",39,[[["parsestream"]],["result"]]],[11,"parse","","",157,[[["parsestream"]],["result"]]],[11,"parse","","",10,[[["parsestream"]],[["result",["arm"]],["arm"]]]],[11,"parse","","",53,[[["parsestream"]],["result"]]],[11,"parse","","",56,[[["parsestream"]],["result"]]],[11,"parse","","",158,[[["parsestream"]],["result"]]],[11,"parse","","",57,[[["parsestream"]],["result"]]],[11,"parse","","",54,[[["parsestream"]],["result"]]],[11,"parse","","",62,[[["parsestream"]],["result"]]],[11,"parse","","",160,[[["parsestream"]],["result"]]],[11,"parse","","",61,[[["parsestream"]],["result"]]],[11,"parse","","",159,[[["parsestream"]],["result"]]],[11,"parse","","",55,[[["parsestream"]],["result"]]],[11,"parse","","",63,[[["parsestream"]],["result"]]],[11,"parse","","",161,[[["parsestream"]],["result"]]],[11,"parse","","",165,[[["parsestream"]],["result"]]],[11,"parse","","",78,[[["parsestream"]],["result"]]],[11,"parse","","",79,[[["parsestream"]],["result"]]],[11,"parse","","",74,[[["parsestream"]],["result"]]],[11,"parse","","",87,[[["parsestream"]],["result"]]],[11,"parse","","",167,[[["parsestream"]],[["result",["usetree"]],["usetree"]]]],[11,"parse","","",81,[[["parsestream"]],["result"]]],[11,"parse","","",72,[[["parsestream"]],["result"]]],[11,"parse","","",75,[[["parsestream"]],["result"]]],[11,"parse","","",162,[[["parsestream"]],["result"]]],[11,"parse","","",88,[[["parsestream"]],["result"]]],[11,"parse","","",80,[[["parsestream"]],["result"]]],[11,"parse","","",76,[[["parsestream"]],["result"]]],[11,"parse","","",163,[[["parsestream"]],["result"]]],[11,"parse","","",64,[[["parsestream"]],["result"]]],[11,"parse","","",66,[[["parsestream"]],["result"]]],[11,"parse","","",67,[[["parsestream"]],["result"]]],[11,"parse","","",65,[[["parsestream"]],["result"]]],[11,"parse","","",85,[[["parsestream"]],["result"]]],[11,"parse","","",82,[[["parsestream"]],["result"]]],[11,"parse","","",73,[[["parsestream"]],["result"]]],[11,"parse","","",86,[[["parsestream"]],["result"]]],[11,"parse","","",83,[[["parsestream"]],["result"]]],[11,"parse","","",84,[[["parsestream"]],["result"]]],[11,"parse","","",166,[[["parsestream"]],["result"]]],[11,"parse","","",90,[[["parsestream"]],["result"]]],[11,"parse","","",92,[[["parsestream"]],["result"]]],[11,"parse","","",93,[[["parsestream"]],["result"]]],[11,"parse","","",91,[[["parsestream"]],["result"]]],[11,"parse","","",77,[[["parsestream"]],["result"]]],[11,"parse","","",164,[[["parsestream"]],["result"]]],[11,"parse","","",68,[[["parsestream"]],["result"]]],[11,"parse","","",70,[[["parsestream"]],["result"]]],[11,"parse","","",71,[[["parsestream"]],["result"]]],[11,"parse","","",69,[[["parsestream"]],["result"]]],[11,"parse","","",99,[[["parsestream"]],["result"]]],[11,"parse","","",100,[[["parsestream"]],["result"]]],[11,"parse","","",168,[[["parsestream"]],["result"]]],[11,"parse","","",284,[[["parsestream"]],["result"]]],[11,"parse","","",285,[[["parsestream"]],["result"]]],[11,"parse","","",286,[[["parsestream"]],["result"]]],[11,"parse","","",287,[[["parsestream"]],["result"]]],[11,"parse","","",288,[[["parsestream"]],["result"]]],[11,"parse","","",289,[[["parsestream"]],["result"]]],[11,"parse","","",101,[[["parsestream"]],["result"]]],[11,"parse","","",102,[[["parsestream"]],["result"]]],[11,"parse","","",106,[[["parsestream"]],["result"]]],[11,"parse","","",172,[[["parsestream"]],["result"]]],[11,"parse","","",173,[[["parsestream"]],["result"]]],[11,"parse","","",107,[[["parsestream"]],["result"]]],[11,"parse","","",174,[[["parsestream"]],["result"]]],[11,"parse","","",176,[[["parsestream"]],["result"]]],[11,"parse","","",122,[[["parsestream"]],["result"]]],[11,"parse","","",111,[[["parsestream"]],["result"]]],[11,"parse","","",120,[[["parsestream"]],["result"]]],[11,"parse","","",121,[[["parsestream"]],["result"]]],[11,"parse","","",112,[[["parsestream"]],["result"]]],[11,"parse","","",117,[[["parsestream"]],["result"]]],[11,"parse","","",115,[[["parsestream"]],["result"]]],[11,"parse","","",124,[[["parsestream"]],["result"]]],[11,"parse","","",116,[[["parsestream"]],["result"]]],[11,"parse","","",119,[[["parsestream"]],["result"]]],[11,"parse","","",175,[[["parsestream"]],["result"]]],[11,"parse","","",123,[[["parsestream"]],["result"]]],[11,"parse","","",114,[[["parsestream"]],["result"]]],[11,"parse","","",113,[[["parsestream"]],["result"]]],[11,"parse","","",118,[[["parsestream"]],["result"]]],[11,"parse","","",110,[[["parsestream"]],["result"]]],[11,"parse","","",109,[[["parsestream"]],["result"]]],[11,"parse","","",177,[[["parsestream"]],["result"]]],[11,"parse","","",146,[[["parsestream"]],["result"]]],[11,"parse","","",178,[[["parsestream"]],["result"]]],[11,"parse","","",142,[[["parsestream"]],["result"]]],[11,"parse","","",145,[[["parsestream"]],["result"]]],[11,"parse","","",147,[[["parsestream"]],["result"]]],[11,"parse","","",143,[[["parsestream"]],["result"]]],[11,"parse","","",144,[[["parsestream"]],["result"]]],[11,"parse","syn::parse","",313,[[["parsestream"]],["result"]]],[11,"drop","","",301,[[["self"]]]],[11,"from","syn","",303,[[["selfvalue"]],["ident"]]],[11,"from","","",303,[[["selftype"]],["ident"]]],[11,"from","","",303,[[["super"]],["ident"]]],[11,"from","","",303,[[["crate"]],["ident"]]],[11,"from","","",303,[[["extern"]],["ident"]]],[11,"from","","",303,[[["underscore"]],["ident"]]],[11,"from","","",150,[[["path"]],["meta"]]],[11,"from","","",150,[[["metalist"]],["meta"]]],[11,"from","","",150,[[["metanamevalue"]],["meta"]]],[11,"from","","",151,[[["meta"]],["nestedmeta"]]],[11,"from","","",151,[[["lit"]],["nestedmeta"]]],[11,"from","","",152,[[["fieldsnamed"]],["fields"]]],[11,"from","","",152,[[["fieldsunnamed"]],["fields"]]],[11,"from","","",153,[[["vispublic"]],["visibility"]]],[11,"from","","",153,[[["viscrate"]],["visibility"]]],[11,"from","","",153,[[["visrestricted"]],["visibility"]]],[11,"from","","",156,[[["exprarray"]],["expr"]]],[11,"from","","",156,[[["exprassign"]],["expr"]]],[11,"from","","",156,[[["exprassignop"]],["expr"]]],[11,"from","","",156,[[["exprasync"]],["expr"]]],[11,"from","","",156,[[["exprawait"]],["expr"]]],[11,"from","","",156,[[["exprbinary"]],["expr"]]],[11,"from","","",156,[[["exprblock"]],["expr"]]],[11,"from","","",156,[[["exprbox"]],["expr"]]],[11,"from","","",156,[[["exprbreak"]],["expr"]]],[11,"from","","",156,[[["exprcall"]],["expr"]]],[11,"from","","",156,[[["exprcast"]],["expr"]]],[11,"from","","",156,[[["exprclosure"]],["expr"]]],[11,"from","","",156,[[["exprcontinue"]],["expr"]]],[11,"from","","",156,[[["exprfield"]],["expr"]]],[11,"from","","",156,[[["exprforloop"]],["expr"]]],[11,"from","","",156,[[["exprgroup"]],["expr"]]],[11,"from","","",156,[[["exprif"]],["expr"]]],[11,"from","","",156,[[["exprindex"]],["expr"]]],[11,"from","","",156,[[["exprlet"]],["expr"]]],[11,"from","","",156,[[["exprlit"]],["expr"]]],[11,"from","","",156,[[["exprloop"]],["expr"]]],[11,"from","","",156,[[["exprmacro"]],["expr"]]],[11,"from","","",156,[[["exprmatch"]],["expr"]]],[11,"from","","",156,[[["exprmethodcall"]],["expr"]]],[11,"from","","",156,[[["exprparen"]],["expr"]]],[11,"from","","",156,[[["exprpath"]],["expr"]]],[11,"from","","",156,[[["exprrange"]],["expr"]]],[11,"from","","",156,[[["exprreference"]],["expr"]]],[11,"from","","",156,[[["exprrepeat"]],["expr"]]],[11,"from","","",156,[[["exprreturn"]],["expr"]]],[11,"from","","",156,[[["exprstruct"]],["expr"]]],[11,"from","","",156,[[["exprtry"]],["expr"]]],[11,"from","","",156,[[["exprtryblock"]],["expr"]]],[11,"from","","",156,[[["exprtuple"]],["expr"]]],[11,"from","","",156,[[["exprtype"]],["expr"]]],[11,"from","","",156,[[["exprunary"]],["expr"]]],[11,"from","","",156,[[["exprunsafe"]],["expr"]]],[11,"from","","",156,[[["exprwhile"]],["expr"]]],[11,"from","","",156,[[["expryield"]],["expr"]]],[11,"from","","",53,[[["usize"]],["index"]]],[11,"from","","",158,[[["typeparam"]],["genericparam"]]],[11,"from","","",158,[[["lifetimedef"]],["genericparam"]]],[11,"from","","",158,[[["constparam"]],["genericparam"]]],[11,"from","","",62,[[["ident"]],["self"]]],[11,"from","","",160,[[["traitbound"]],["typeparambound"]]],[11,"from","","",160,[[["lifetime"]],["typeparambound"]]],[11,"from","","",161,[[["predicatetype"]],["wherepredicate"]]],[11,"from","","",161,[[["predicatelifetime"]],["wherepredicate"]]],[11,"from","","",161,[[["predicateeq"]],["wherepredicate"]]],[11,"from","","",165,[[["itemconst"]],["item"]]],[11,"from","","",165,[[["itemenum"]],["item"]]],[11,"from","","",165,[[["itemexterncrate"]],["item"]]],[11,"from","","",165,[[["itemfn"]],["item"]]],[11,"from","","",165,[[["itemforeignmod"]],["item"]]],[11,"from","","",165,[[["itemimpl"]],["item"]]],[11,"from","","",165,[[["itemmacro"]],["item"]]],[11,"from","","",165,[[["itemmacro2"]],["item"]]],[11,"from","","",165,[[["itemmod"]],["item"]]],[11,"from","","",165,[[["itemstatic"]],["item"]]],[11,"from","","",165,[[["itemstruct"]],["item"]]],[11,"from","","",165,[[["itemtrait"]],["item"]]],[11,"from","","",165,[[["itemtraitalias"]],["item"]]],[11,"from","","",165,[[["itemtype"]],["item"]]],[11,"from","","",165,[[["itemunion"]],["item"]]],[11,"from","","",165,[[["itemuse"]],["item"]]],[11,"from","","",165,[[["deriveinput"]],["item"]]],[11,"from","","",106,[[["itemstruct"]],["deriveinput"]]],[11,"from","","",106,[[["itemenum"]],["deriveinput"]]],[11,"from","","",106,[[["itemunion"]],["deriveinput"]]],[11,"from","","",167,[[["usepath"]],["usetree"]]],[11,"from","","",167,[[["usename"]],["usetree"]]],[11,"from","","",167,[[["userename"]],["usetree"]]],[11,"from","","",167,[[["useglob"]],["usetree"]]],[11,"from","","",167,[[["usegroup"]],["usetree"]]],[11,"from","","",163,[[["foreignitemfn"]],["foreignitem"]]],[11,"from","","",163,[[["foreignitemstatic"]],["foreignitem"]]],[11,"from","","",163,[[["foreignitemtype"]],["foreignitem"]]],[11,"from","","",163,[[["foreignitemmacro"]],["foreignitem"]]],[11,"from","","",166,[[["traititemconst"]],["traititem"]]],[11,"from","","",166,[[["traititemmethod"]],["traititem"]]],[11,"from","","",166,[[["traititemtype"]],["traititem"]]],[11,"from","","",166,[[["traititemmacro"]],["traititem"]]],[11,"from","","",164,[[["implitemconst"]],["implitem"]]],[11,"from","","",164,[[["implitemmethod"]],["implitem"]]],[11,"from","","",164,[[["implitemtype"]],["implitem"]]],[11,"from","","",164,[[["implitemmacro"]],["implitem"]]],[11,"from","","",162,[[["receiver"]],["fnarg"]]],[11,"from","","",162,[[["pattype"]],["fnarg"]]],[11,"from","","",168,[[["litstr"]],["lit"]]],[11,"from","","",168,[[["litbytestr"]],["lit"]]],[11,"from","","",168,[[["litbyte"]],["lit"]]],[11,"from","","",168,[[["litchar"]],["lit"]]],[11,"from","","",168,[[["litint"]],["lit"]]],[11,"from","","",168,[[["litfloat"]],["lit"]]],[11,"from","","",168,[[["litbool"]],["lit"]]],[11,"from","","",288,[[["literal"]],["self"]]],[11,"from","","",289,[[["literal"]],["self"]]],[11,"from","","",171,[[["datastruct"]],["data"]]],[11,"from","","",171,[[["dataenum"]],["data"]]],[11,"from","","",171,[[["dataunion"]],["data"]]],[11,"from","","",176,[[["typearray"]],["type"]]],[11,"from","","",176,[[["typebarefn"]],["type"]]],[11,"from","","",176,[[["typegroup"]],["type"]]],[11,"from","","",176,[[["typeimpltrait"]],["type"]]],[11,"from","","",176,[[["typeinfer"]],["type"]]],[11,"from","","",176,[[["typemacro"]],["type"]]],[11,"from","","",176,[[["typenever"]],["type"]]],[11,"from","","",176,[[["typeparen"]],["type"]]],[11,"from","","",176,[[["typepath"]],["type"]]],[11,"from","","",176,[[["typeptr"]],["type"]]],[11,"from","","",176,[[["typereference"]],["type"]]],[11,"from","","",176,[[["typeslice"]],["type"]]],[11,"from","","",176,[[["typetraitobject"]],["type"]]],[11,"from","","",176,[[["typetuple"]],["type"]]],[11,"from","","",177,[[["patbox"]],["pat"]]],[11,"from","","",177,[[["patident"]],["pat"]]],[11,"from","","",177,[[["patlit"]],["pat"]]],[11,"from","","",177,[[["patmacro"]],["pat"]]],[11,"from","","",177,[[["pator"]],["pat"]]],[11,"from","","",177,[[["patpath"]],["pat"]]],[11,"from","","",177,[[["patrange"]],["pat"]]],[11,"from","","",177,[[["patreference"]],["pat"]]],[11,"from","","",177,[[["patrest"]],["pat"]]],[11,"from","","",177,[[["patslice"]],["pat"]]],[11,"from","","",177,[[["patstruct"]],["pat"]]],[11,"from","","",177,[[["pattuple"]],["pat"]]],[11,"from","","",177,[[["pattuplestruct"]],["pat"]]],[11,"from","","",177,[[["pattype"]],["pat"]]],[11,"from","","",177,[[["patwild"]],["pat"]]],[11,"from","","",146,[[["t"]],["self"]]],[11,"from","","",147,[[["t"]],["self"]]],[11,"from","","",302,[[["lexerror"]],["self"]]],[11,"next_back","syn::punctuated","",306,[[["self"]],["option"]]],[11,"next_back","","",307,[[["self"]],["option"]]],[11,"next_back","","",308,[[["self"]],["option"]]],[11,"next_back","","",309,[[["self"]],["option"]]],[11,"next_back","","",310,[[["self"]],["option"]]],[11,"next_back","","",311,[[["self"]],["option"]]],[11,"len","","",306,[[["self"]],["usize"]]],[11,"len","","",307,[[["self"]],["usize"]]],[11,"len","","",308,[[["self"]],["usize"]]],[11,"len","","",309,[[["self"]],["usize"]]],[11,"len","","",310,[[["self"]],["usize"]]],[11,"len","","",311,[[["self"]],["usize"]]],[11,"extend","","",294,[[["intoiterator"],["self"]]]],[11,"extend","","",294,[[["self"],["intoiterator"]]]],[11,"into_iter","syn","",152,[[]]],[11,"into_iter","syn::punctuated","",294,[[]]],[11,"into_iter","syn","",302,[[]]],[11,"next","syn::punctuated","",306,[[["self"]],["option"]]],[11,"size_hint","","",306,[[["self"]]]],[11,"next","","",307,[[["self"]],["option"]]],[11,"size_hint","","",307,[[["self"]]]],[11,"next","","",308,[[["self"]],["option"]]],[11,"size_hint","","",308,[[["self"]]]],[11,"next","","",309,[[["self"]],["option"]]],[11,"size_hint","","",309,[[["self"]]]],[11,"next","","",310,[[["self"]],["option"]]],[11,"size_hint","","",310,[[["self"]]]],[11,"next","","",311,[[["self"]],["option"]]],[11,"size_hint","","",311,[[["self"]]]],[11,"clone","syn::token","",180,[[["self"]],["underscore"]]],[11,"clone","","",181,[[["self"]],["abstract"]]],[11,"clone","","",182,[[["self"]],["as"]]],[11,"clone","","",183,[[["self"]],["async"]]],[11,"clone","","",184,[[["self"]],["auto"]]],[11,"clone","","",185,[[["self"]],["await"]]],[11,"clone","","",186,[[["self"]],["become"]]],[11,"clone","","",187,[[["self"]],["box"]]],[11,"clone","","",188,[[["self"]],["break"]]],[11,"clone","","",189,[[["self"]],["const"]]],[11,"clone","","",190,[[["self"]],["continue"]]],[11,"clone","","",191,[[["self"]],["crate"]]],[11,"clone","","",192,[[["self"]],["default"]]],[11,"clone","","",193,[[["self"]],["do"]]],[11,"clone","","",194,[[["self"]],["dyn"]]],[11,"clone","","",195,[[["self"]],["else"]]],[11,"clone","","",196,[[["self"]],["enum"]]],[11,"clone","","",197,[[["self"]],["extern"]]],[11,"clone","","",198,[[["self"]],["final"]]],[11,"clone","","",199,[[["self"]],["fn"]]],[11,"clone","","",200,[[["self"]],["for"]]],[11,"clone","","",201,[[["self"]],["if"]]],[11,"clone","","",202,[[["self"]],["impl"]]],[11,"clone","","",203,[[["self"]],["in"]]],[11,"clone","","",204,[[["self"]],["let"]]],[11,"clone","","",205,[[["self"]],["loop"]]],[11,"clone","","",206,[[["self"]],["macro"]]],[11,"clone","","",207,[[["self"]],["match"]]],[11,"clone","","",208,[[["self"]],["mod"]]],[11,"clone","","",209,[[["self"]],["move"]]],[11,"clone","","",210,[[["self"]],["mut"]]],[11,"clone","","",211,[[["self"]],["override"]]],[11,"clone","","",212,[[["self"]],["priv"]]],[11,"clone","","",213,[[["self"]],["pub"]]],[11,"clone","","",214,[[["self"]],["ref"]]],[11,"clone","","",215,[[["self"]],["return"]]],[11,"clone","","",216,[[["self"]],["selftype"]]],[11,"clone","","",217,[[["self"]],["selfvalue"]]],[11,"clone","","",218,[[["self"]],["static"]]],[11,"clone","","",219,[[["self"]],["struct"]]],[11,"clone","","",220,[[["self"]],["super"]]],[11,"clone","","",221,[[["self"]],["trait"]]],[11,"clone","","",222,[[["self"]],["try"]]],[11,"clone","","",223,[[["self"]],["type"]]],[11,"clone","","",224,[[["self"]],["typeof"]]],[11,"clone","","",225,[[["self"]],["union"]]],[11,"clone","","",226,[[["self"]],["unsafe"]]],[11,"clone","","",227,[[["self"]],["unsized"]]],[11,"clone","","",228,[[["self"]],["use"]]],[11,"clone","","",229,[[["self"]],["virtual"]]],[11,"clone","","",230,[[["self"]],["where"]]],[11,"clone","","",231,[[["self"]],["while"]]],[11,"clone","","",232,[[["self"]],["yield"]]],[11,"clone","","",233,[[["self"]],["add"]]],[11,"clone","","",234,[[["self"]],["addeq"]]],[11,"clone","","",235,[[["self"]],["and"]]],[11,"clone","","",236,[[["self"]],["andand"]]],[11,"clone","","",237,[[["self"]],["andeq"]]],[11,"clone","","",238,[[["self"]],["at"]]],[11,"clone","","",239,[[["self"]],["bang"]]],[11,"clone","","",240,[[["self"]],["caret"]]],[11,"clone","","",241,[[["self"]],["careteq"]]],[11,"clone","","",242,[[["self"]],["colon"]]],[11,"clone","","",243,[[["self"]],["colon2"]]],[11,"clone","","",244,[[["self"]],["comma"]]],[11,"clone","","",245,[[["self"]],["div"]]],[11,"clone","","",246,[[["self"]],["diveq"]]],[11,"clone","","",247,[[["self"]],["dollar"]]],[11,"clone","","",248,[[["self"]],["dot"]]],[11,"clone","","",249,[[["self"]],["dot2"]]],[11,"clone","","",250,[[["self"]],["dot3"]]],[11,"clone","","",251,[[["self"]],["dotdoteq"]]],[11,"clone","","",252,[[["self"]],["eq"]]],[11,"clone","","",253,[[["self"]],["eqeq"]]],[11,"clone","","",254,[[["self"]],["ge"]]],[11,"clone","","",255,[[["self"]],["gt"]]],[11,"clone","","",256,[[["self"]],["le"]]],[11,"clone","","",257,[[["self"]],["lt"]]],[11,"clone","","",258,[[["self"]],["muleq"]]],[11,"clone","","",259,[[["self"]],["ne"]]],[11,"clone","","",260,[[["self"]],["or"]]],[11,"clone","","",261,[[["self"]],["oreq"]]],[11,"clone","","",262,[[["self"]],["oror"]]],[11,"clone","","",263,[[["self"]],["pound"]]],[11,"clone","","",264,[[["self"]],["question"]]],[11,"clone","","",265,[[["self"]],["rarrow"]]],[11,"clone","","",266,[[["self"]],["larrow"]]],[11,"clone","","",267,[[["self"]],["rem"]]],[11,"clone","","",268,[[["self"]],["remeq"]]],[11,"clone","","",269,[[["self"]],["fatarrow"]]],[11,"clone","","",270,[[["self"]],["semi"]]],[11,"clone","","",271,[[["self"]],["shl"]]],[11,"clone","","",272,[[["self"]],["shleq"]]],[11,"clone","","",273,[[["self"]],["shr"]]],[11,"clone","","",274,[[["self"]],["shreq"]]],[11,"clone","","",275,[[["self"]],["star"]]],[11,"clone","","",276,[[["self"]],["sub"]]],[11,"clone","","",277,[[["self"]],["subeq"]]],[11,"clone","","",278,[[["self"]],["tilde"]]],[11,"clone","","",279,[[["self"]],["brace"]]],[11,"clone","","",280,[[["self"]],["bracket"]]],[11,"clone","","",281,[[["self"]],["paren"]]],[11,"clone","","",282,[[["self"]],["group"]]],[11,"clone","syn","",0,[[["self"]],["attribute"]]],[11,"clone","","",149,[[["self"]],["attrstyle"]]],[11,"clone","","",150,[[["self"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"clone","","",151,[[["self"]],["nestedmeta"]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",152,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",153,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"clone","","",156,[[["self"]],["expr"]]],[11,"clone","","",14,[[["self"]],["exprarray"]]],[11,"clone","","",15,[[["self"]],["exprassign"]]],[11,"clone","","",16,[[["self"]],["exprassignop"]]],[11,"clone","","",17,[[["self"]],["exprasync"]]],[11,"clone","","",18,[[["self"]],["exprawait"]]],[11,"clone","","",19,[[["self"]],["exprbinary"]]],[11,"clone","","",20,[[["self"]],["exprblock"]]],[11,"clone","","",21,[[["self"]],["exprbox"]]],[11,"clone","","",22,[[["self"]],["exprbreak"]]],[11,"clone","","",23,[[["self"]],["exprcall"]]],[11,"clone","","",24,[[["self"]],["exprcast"]]],[11,"clone","","",25,[[["self"]],["exprclosure"]]],[11,"clone","","",26,[[["self"]],["exprcontinue"]]],[11,"clone","","",27,[[["self"]],["exprfield"]]],[11,"clone","","",28,[[["self"]],["exprforloop"]]],[11,"clone","","",29,[[["self"]],["exprgroup"]]],[11,"clone","","",30,[[["self"]],["exprif"]]],[11,"clone","","",31,[[["self"]],["exprindex"]]],[11,"clone","","",32,[[["self"]],["exprlet"]]],[11,"clone","","",33,[[["self"]],["exprlit"]]],[11,"clone","","",34,[[["self"]],["exprloop"]]],[11,"clone","","",35,[[["self"]],["exprmacro"]]],[11,"clone","","",36,[[["self"]],["exprmatch"]]],[11,"clone","","",37,[[["self"]],["exprmethodcall"]]],[11,"clone","","",38,[[["self"]],["exprparen"]]],[11,"clone","","",39,[[["self"]],["exprpath"]]],[11,"clone","","",40,[[["self"]],["exprrange"]]],[11,"clone","","",41,[[["self"]],["exprreference"]]],[11,"clone","","",42,[[["self"]],["exprrepeat"]]],[11,"clone","","",43,[[["self"]],["exprreturn"]]],[11,"clone","","",44,[[["self"]],["exprstruct"]]],[11,"clone","","",45,[[["self"]],["exprtry"]]],[11,"clone","","",46,[[["self"]],["exprtryblock"]]],[11,"clone","","",47,[[["self"]],["exprtuple"]]],[11,"clone","","",48,[[["self"]],["exprtype"]]],[11,"clone","","",49,[[["self"]],["exprunary"]]],[11,"clone","","",50,[[["self"]],["exprunsafe"]]],[11,"clone","","",51,[[["self"]],["exprwhile"]]],[11,"clone","","",52,[[["self"]],["expryield"]]],[11,"clone","","",157,[[["self"]],["member"]]],[11,"clone","","",53,[[["self"]],["index"]]],[11,"clone","","",13,[[["self"]],["methodturbofish"]]],[11,"clone","","",154,[[["self"]],["genericmethodargument"]]],[11,"clone","","",11,[[["self"]],["fieldvalue"]]],[11,"clone","","",12,[[["self"]],["label"]]],[11,"clone","","",10,[[["self"]],["arm"]]],[11,"clone","","",155,[[["self"]],["rangelimits"]]],[11,"clone","","",56,[[["self"]],["generics"]]],[11,"clone","","",158,[[["self"]],["genericparam"]]],[11,"clone","","",62,[[["self"]],["typeparam"]]],[11,"clone","","",57,[[["self"]],["lifetimedef"]]],[11,"clone","","",55,[[["self"]],["constparam"]]],[11,"clone","","",304,[[["self"]],["implgenerics"]]],[11,"clone","","",283,[[["self"]],["typegenerics"]]],[11,"clone","","",305,[[["self"]],["turbofish"]]],[11,"clone","","",54,[[["self"]],["boundlifetimes"]]],[11,"clone","","",160,[[["self"]],["typeparambound"]]],[11,"clone","","",61,[[["self"]],["traitbound"]]],[11,"clone","","",159,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",63,[[["self"]],["whereclause"]]],[11,"clone","","",161,[[["self"]],["wherepredicate"]]],[11,"clone","","",60,[[["self"]],["predicatetype"]]],[11,"clone","","",59,[[["self"]],["predicatelifetime"]]],[11,"clone","","",58,[[["self"]],["predicateeq"]]],[11,"clone","","",165,[[["self"]],["item"]]],[11,"clone","","",72,[[["self"]],["itemconst"]]],[11,"clone","","",73,[[["self"]],["itemenum"]]],[11,"clone","","",74,[[["self"]],["itemexterncrate"]]],[11,"clone","","",75,[[["self"]],["itemfn"]]],[11,"clone","","",76,[[["self"]],["itemforeignmod"]]],[11,"clone","","",77,[[["self"]],["itemimpl"]]],[11,"clone","","",78,[[["self"]],["itemmacro"]]],[11,"clone","","",79,[[["self"]],["itemmacro2"]]],[11,"clone","","",80,[[["self"]],["itemmod"]]],[11,"clone","","",81,[[["self"]],["itemstatic"]]],[11,"clone","","",82,[[["self"]],["itemstruct"]]],[11,"clone","","",83,[[["self"]],["itemtrait"]]],[11,"clone","","",84,[[["self"]],["itemtraitalias"]]],[11,"clone","","",85,[[["self"]],["itemtype"]]],[11,"clone","","",86,[[["self"]],["itemunion"]]],[11,"clone","","",87,[[["self"]],["itemuse"]]],[11,"clone","","",167,[[["self"]],["usetree"]]],[11,"clone","","",97,[[["self"]],["usepath"]]],[11,"clone","","",96,[[["self"]],["usename"]]],[11,"clone","","",98,[[["self"]],["userename"]]],[11,"clone","","",94,[[["self"]],["useglob"]]],[11,"clone","","",95,[[["self"]],["usegroup"]]],[11,"clone","","",163,[[["self"]],["foreignitem"]]],[11,"clone","","",64,[[["self"]],["foreignitemfn"]]],[11,"clone","","",66,[[["self"]],["foreignitemstatic"]]],[11,"clone","","",67,[[["self"]],["foreignitemtype"]]],[11,"clone","","",65,[[["self"]],["foreignitemmacro"]]],[11,"clone","","",166,[[["self"]],["traititem"]]],[11,"clone","","",90,[[["self"]],["traititemconst"]]],[11,"clone","","",92,[[["self"]],["traititemmethod"]]],[11,"clone","","",93,[[["self"]],["traititemtype"]]],[11,"clone","","",91,[[["self"]],["traititemmacro"]]],[11,"clone","","",164,[[["self"]],["implitem"]]],[11,"clone","","",68,[[["self"]],["implitemconst"]]],[11,"clone","","",70,[[["self"]],["implitemmethod"]]],[11,"clone","","",71,[[["self"]],["implitemtype"]]],[11,"clone","","",69,[[["self"]],["implitemmacro"]]],[11,"clone","","",89,[[["self"]],["signature"]]],[11,"clone","","",162,[[["self"]],["fnarg"]]],[11,"clone","","",88,[[["self"]],["receiver"]]],[11,"clone","","",99,[[["self"]],["file"]]],[11,"clone","","",100,[[["self"]],["lifetime"]]],[11,"clone","","",168,[[["self"]],["lit"]]],[11,"clone","","",284,[[["self"]],["litstr"]]],[11,"clone","","",285,[[["self"]],["litbytestr"]]],[11,"clone","","",286,[[["self"]],["litbyte"]]],[11,"clone","","",287,[[["self"]],["litchar"]]],[11,"clone","","",288,[[["self"]],["litint"]]],[11,"clone","","",289,[[["self"]],["litfloat"]]],[11,"clone","","",101,[[["self"]],["litbool"]]],[11,"clone","","",169,[[["self"]],["strstyle"]]],[11,"clone","","",102,[[["self"]],["macro"]]],[11,"clone","","",170,[[["self"]],["macrodelimiter"]]],[11,"clone","","",106,[[["self"]],["deriveinput"]]],[11,"clone","","",171,[[["self"]],["data"]]],[11,"clone","","",104,[[["self"]],["datastruct"]]],[11,"clone","","",103,[[["self"]],["dataenum"]]],[11,"clone","","",105,[[["self"]],["dataunion"]]],[11,"clone","","",172,[[["self"]],["binop"]]],[11,"clone","","",173,[[["self"]],["unop"]]],[11,"clone","","",107,[[["self"]],["block"]]],[11,"clone","","",174,[[["self"]],["stmt"]]],[11,"clone","","",108,[[["self"]],["local"]]],[11,"clone","","",176,[[["self"]],["type"]]],[11,"clone","","",111,[[["self"]],["typearray"]]],[11,"clone","","",112,[[["self"]],["typebarefn"]]],[11,"clone","","",113,[[["self"]],["typegroup"]]],[11,"clone","","",114,[[["self"]],["typeimpltrait"]]],[11,"clone","","",115,[[["self"]],["typeinfer"]]],[11,"clone","","",116,[[["self"]],["typemacro"]]],[11,"clone","","",117,[[["self"]],["typenever"]]],[11,"clone","","",118,[[["self"]],["typeparen"]]],[11,"clone","","",119,[[["self"]],["typepath"]]],[11,"clone","","",120,[[["self"]],["typeptr"]]],[11,"clone","","",121,[[["self"]],["typereference"]]],[11,"clone","","",122,[[["self"]],["typeslice"]]],[11,"clone","","",123,[[["self"]],["typetraitobject"]]],[11,"clone","","",124,[[["self"]],["typetuple"]]],[11,"clone","","",109,[[["self"]],["abi"]]],[11,"clone","","",110,[[["self"]],["barefnarg"]]],[11,"clone","","",125,[[["self"]],["variadic"]]],[11,"clone","","",175,[[["self"]],["returntype"]]],[11,"clone","","",177,[[["self"]],["pat"]]],[11,"clone","","",127,[[["self"]],["patbox"]]],[11,"clone","","",128,[[["self"]],["patident"]]],[11,"clone","","",129,[[["self"]],["patlit"]]],[11,"clone","","",130,[[["self"]],["patmacro"]]],[11,"clone","","",131,[[["self"]],["pator"]]],[11,"clone","","",132,[[["self"]],["patpath"]]],[11,"clone","","",133,[[["self"]],["patrange"]]],[11,"clone","","",134,[[["self"]],["patreference"]]],[11,"clone","","",135,[[["self"]],["patrest"]]],[11,"clone","","",136,[[["self"]],["patslice"]]],[11,"clone","","",137,[[["self"]],["patstruct"]]],[11,"clone","","",138,[[["self"]],["pattuple"]]],[11,"clone","","",139,[[["self"]],["pattuplestruct"]]],[11,"clone","","",140,[[["self"]],["pattype"]]],[11,"clone","","",141,[[["self"]],["patwild"]]],[11,"clone","","",126,[[["self"]],["fieldpat"]]],[11,"clone","","",146,[[["self"]],["path"]]],[11,"clone","","",147,[[["self"]],["pathsegment"]]],[11,"clone","","",179,[[["self"]],["patharguments"]]],[11,"clone","","",178,[[["self"]],["genericargument"]]],[11,"clone","","",142,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",143,[[["self"]],["binding"]]],[11,"clone","","",144,[[["self"]],["constraint"]]],[11,"clone","","",145,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",148,[[["self"]],["qself"]]],[11,"clone","syn::buffer","",291,[[["self"]],["cursor"]]],[11,"clone","syn::punctuated","",294,[[["self"]],["punctuated"]]],[11,"clone","","",306,[[["self"]],["self"]]],[11,"clone","","",308,[[["self"]],["intopairs"]]],[11,"clone","","",309,[[["self"]],["intoiter"]]],[11,"clone","","",310,[[["self"]],["self"]]],[11,"clone","","",293,[[["self"]],["pair"]]],[11,"clone","syn::parse","",300,[[["self"]],["stepcursor"]]],[11,"clone","syn","",302,[[["self"]],["error"]]],[11,"default","syn::token","",180,[[],["self"]]],[11,"default","","",181,[[],["self"]]],[11,"default","","",182,[[],["self"]]],[11,"default","","",183,[[],["self"]]],[11,"default","","",184,[[],["self"]]],[11,"default","","",185,[[],["self"]]],[11,"default","","",186,[[],["self"]]],[11,"default","","",187,[[],["self"]]],[11,"default","","",188,[[],["self"]]],[11,"default","","",189,[[],["self"]]],[11,"default","","",190,[[],["self"]]],[11,"default","","",191,[[],["self"]]],[11,"default","","",192,[[],["self"]]],[11,"default","","",193,[[],["self"]]],[11,"default","","",194,[[],["self"]]],[11,"default","","",195,[[],["self"]]],[11,"default","","",196,[[],["self"]]],[11,"default","","",197,[[],["self"]]],[11,"default","","",198,[[],["self"]]],[11,"default","","",199,[[],["self"]]],[11,"default","","",200,[[],["self"]]],[11,"default","","",201,[[],["self"]]],[11,"default","","",202,[[],["self"]]],[11,"default","","",203,[[],["self"]]],[11,"default","","",204,[[],["self"]]],[11,"default","","",205,[[],["self"]]],[11,"default","","",206,[[],["self"]]],[11,"default","","",207,[[],["self"]]],[11,"default","","",208,[[],["self"]]],[11,"default","","",209,[[],["self"]]],[11,"default","","",210,[[],["self"]]],[11,"default","","",211,[[],["self"]]],[11,"default","","",212,[[],["self"]]],[11,"default","","",213,[[],["self"]]],[11,"default","","",214,[[],["self"]]],[11,"default","","",215,[[],["self"]]],[11,"default","","",216,[[],["self"]]],[11,"default","","",217,[[],["self"]]],[11,"default","","",218,[[],["self"]]],[11,"default","","",219,[[],["self"]]],[11,"default","","",220,[[],["self"]]],[11,"default","","",221,[[],["self"]]],[11,"default","","",222,[[],["self"]]],[11,"default","","",223,[[],["self"]]],[11,"default","","",224,[[],["self"]]],[11,"default","","",225,[[],["self"]]],[11,"default","","",226,[[],["self"]]],[11,"default","","",227,[[],["self"]]],[11,"default","","",228,[[],["self"]]],[11,"default","","",229,[[],["self"]]],[11,"default","","",230,[[],["self"]]],[11,"default","","",231,[[],["self"]]],[11,"default","","",232,[[],["self"]]],[11,"default","","",233,[[],["self"]]],[11,"default","","",234,[[],["self"]]],[11,"default","","",235,[[],["self"]]],[11,"default","","",236,[[],["self"]]],[11,"default","","",237,[[],["self"]]],[11,"default","","",238,[[],["self"]]],[11,"default","","",239,[[],["self"]]],[11,"default","","",240,[[],["self"]]],[11,"default","","",241,[[],["self"]]],[11,"default","","",242,[[],["self"]]],[11,"default","","",243,[[],["self"]]],[11,"default","","",244,[[],["self"]]],[11,"default","","",245,[[],["self"]]],[11,"default","","",246,[[],["self"]]],[11,"default","","",247,[[],["self"]]],[11,"default","","",248,[[],["self"]]],[11,"default","","",249,[[],["self"]]],[11,"default","","",250,[[],["self"]]],[11,"default","","",251,[[],["self"]]],[11,"default","","",252,[[],["self"]]],[11,"default","","",253,[[],["self"]]],[11,"default","","",254,[[],["self"]]],[11,"default","","",255,[[],["self"]]],[11,"default","","",256,[[],["self"]]],[11,"default","","",257,[[],["self"]]],[11,"default","","",258,[[],["self"]]],[11,"default","","",259,[[],["self"]]],[11,"default","","",260,[[],["self"]]],[11,"default","","",261,[[],["self"]]],[11,"default","","",262,[[],["self"]]],[11,"default","","",263,[[],["self"]]],[11,"default","","",264,[[],["self"]]],[11,"default","","",265,[[],["self"]]],[11,"default","","",266,[[],["self"]]],[11,"default","","",267,[[],["self"]]],[11,"default","","",268,[[],["self"]]],[11,"default","","",269,[[],["self"]]],[11,"default","","",270,[[],["self"]]],[11,"default","","",271,[[],["self"]]],[11,"default","","",272,[[],["self"]]],[11,"default","","",273,[[],["self"]]],[11,"default","","",274,[[],["self"]]],[11,"default","","",275,[[],["self"]]],[11,"default","","",276,[[],["self"]]],[11,"default","","",277,[[],["self"]]],[11,"default","","",278,[[],["self"]]],[11,"default","","",279,[[],["self"]]],[11,"default","","",280,[[],["self"]]],[11,"default","","",281,[[],["self"]]],[11,"default","","",282,[[],["self"]]],[11,"default","syn","",56,[[],["generics"]]],[11,"default","","",54,[[],["boundlifetimes"]]],[11,"default","","",179,[[],["self"]]],[11,"default","syn::punctuated","",294,[[],["self"]]],[11,"cmp","syn","",100,[[["self"],["lifetime"]],["ordering"]]],[11,"eq","syn::token","",180,[[["underscore"],["self"]],["bool"]]],[11,"eq","","",181,[[["abstract"],["self"]],["bool"]]],[11,"eq","","",182,[[["as"],["self"]],["bool"]]],[11,"eq","","",183,[[["async"],["self"]],["bool"]]],[11,"eq","","",184,[[["auto"],["self"]],["bool"]]],[11,"eq","","",185,[[["self"],["await"]],["bool"]]],[11,"eq","","",186,[[["become"],["self"]],["bool"]]],[11,"eq","","",187,[[["box"],["self"]],["bool"]]],[11,"eq","","",188,[[["break"],["self"]],["bool"]]],[11,"eq","","",189,[[["const"],["self"]],["bool"]]],[11,"eq","","",190,[[["self"],["continue"]],["bool"]]],[11,"eq","","",191,[[["self"],["crate"]],["bool"]]],[11,"eq","","",192,[[["self"],["default"]],["bool"]]],[11,"eq","","",193,[[["do"],["self"]],["bool"]]],[11,"eq","","",194,[[["dyn"],["self"]],["bool"]]],[11,"eq","","",195,[[["else"],["self"]],["bool"]]],[11,"eq","","",196,[[["enum"],["self"]],["bool"]]],[11,"eq","","",197,[[["self"],["extern"]],["bool"]]],[11,"eq","","",198,[[["final"],["self"]],["bool"]]],[11,"eq","","",199,[[["fn"],["self"]],["bool"]]],[11,"eq","","",200,[[["self"],["for"]],["bool"]]],[11,"eq","","",201,[[["self"],["if"]],["bool"]]],[11,"eq","","",202,[[["impl"],["self"]],["bool"]]],[11,"eq","","",203,[[["in"],["self"]],["bool"]]],[11,"eq","","",204,[[["self"],["let"]],["bool"]]],[11,"eq","","",205,[[["self"],["loop"]],["bool"]]],[11,"eq","","",206,[[["self"],["macro"]],["bool"]]],[11,"eq","","",207,[[["self"],["match"]],["bool"]]],[11,"eq","","",208,[[["self"],["mod"]],["bool"]]],[11,"eq","","",209,[[["self"],["move"]],["bool"]]],[11,"eq","","",210,[[["self"],["mut"]],["bool"]]],[11,"eq","","",211,[[["self"],["override"]],["bool"]]],[11,"eq","","",212,[[["self"],["priv"]],["bool"]]],[11,"eq","","",213,[[["pub"],["self"]],["bool"]]],[11,"eq","","",214,[[["ref"],["self"]],["bool"]]],[11,"eq","","",215,[[["self"],["return"]],["bool"]]],[11,"eq","","",216,[[["self"],["selftype"]],["bool"]]],[11,"eq","","",217,[[["selfvalue"],["self"]],["bool"]]],[11,"eq","","",218,[[["static"],["self"]],["bool"]]],[11,"eq","","",219,[[["self"],["struct"]],["bool"]]],[11,"eq","","",220,[[["self"],["super"]],["bool"]]],[11,"eq","","",221,[[["trait"],["self"]],["bool"]]],[11,"eq","","",222,[[["self"],["try"]],["bool"]]],[11,"eq","","",223,[[["type"],["self"]],["bool"]]],[11,"eq","","",224,[[["typeof"],["self"]],["bool"]]],[11,"eq","","",225,[[["union"],["self"]],["bool"]]],[11,"eq","","",226,[[["unsafe"],["self"]],["bool"]]],[11,"eq","","",227,[[["self"],["unsized"]],["bool"]]],[11,"eq","","",228,[[["self"],["use"]],["bool"]]],[11,"eq","","",229,[[["virtual"],["self"]],["bool"]]],[11,"eq","","",230,[[["self"],["where"]],["bool"]]],[11,"eq","","",231,[[["while"],["self"]],["bool"]]],[11,"eq","","",232,[[["self"],["yield"]],["bool"]]],[11,"eq","","",233,[[["self"],["add"]],["bool"]]],[11,"eq","","",234,[[["addeq"],["self"]],["bool"]]],[11,"eq","","",235,[[["self"],["and"]],["bool"]]],[11,"eq","","",236,[[["self"],["andand"]],["bool"]]],[11,"eq","","",237,[[["andeq"],["self"]],["bool"]]],[11,"eq","","",238,[[["self"],["at"]],["bool"]]],[11,"eq","","",239,[[["bang"],["self"]],["bool"]]],[11,"eq","","",240,[[["self"],["caret"]],["bool"]]],[11,"eq","","",241,[[["careteq"],["self"]],["bool"]]],[11,"eq","","",242,[[["colon"],["self"]],["bool"]]],[11,"eq","","",243,[[["colon2"],["self"]],["bool"]]],[11,"eq","","",244,[[["self"],["comma"]],["bool"]]],[11,"eq","","",245,[[["self"],["div"]],["bool"]]],[11,"eq","","",246,[[["self"],["diveq"]],["bool"]]],[11,"eq","","",247,[[["dollar"],["self"]],["bool"]]],[11,"eq","","",248,[[["self"],["dot"]],["bool"]]],[11,"eq","","",249,[[["self"],["dot2"]],["bool"]]],[11,"eq","","",250,[[["dot3"],["self"]],["bool"]]],[11,"eq","","",251,[[["self"],["dotdoteq"]],["bool"]]],[11,"eq","","",252,[[["self"],["eq"]],["bool"]]],[11,"eq","","",253,[[["self"],["eqeq"]],["bool"]]],[11,"eq","","",254,[[["self"],["ge"]],["bool"]]],[11,"eq","","",255,[[["self"],["gt"]],["bool"]]],[11,"eq","","",256,[[["self"],["le"]],["bool"]]],[11,"eq","","",257,[[["lt"],["self"]],["bool"]]],[11,"eq","","",258,[[["self"],["muleq"]],["bool"]]],[11,"eq","","",259,[[["ne"],["self"]],["bool"]]],[11,"eq","","",260,[[["self"],["or"]],["bool"]]],[11,"eq","","",261,[[["oreq"],["self"]],["bool"]]],[11,"eq","","",262,[[["self"],["oror"]],["bool"]]],[11,"eq","","",263,[[["self"],["pound"]],["bool"]]],[11,"eq","","",264,[[["self"],["question"]],["bool"]]],[11,"eq","","",265,[[["rarrow"],["self"]],["bool"]]],[11,"eq","","",266,[[["self"],["larrow"]],["bool"]]],[11,"eq","","",267,[[["self"],["rem"]],["bool"]]],[11,"eq","","",268,[[["self"],["remeq"]],["bool"]]],[11,"eq","","",269,[[["self"],["fatarrow"]],["bool"]]],[11,"eq","","",270,[[["self"],["semi"]],["bool"]]],[11,"eq","","",271,[[["shl"],["self"]],["bool"]]],[11,"eq","","",272,[[["self"],["shleq"]],["bool"]]],[11,"eq","","",273,[[["self"],["shr"]],["bool"]]],[11,"eq","","",274,[[["shreq"],["self"]],["bool"]]],[11,"eq","","",275,[[["self"],["star"]],["bool"]]],[11,"eq","","",276,[[["self"],["sub"]],["bool"]]],[11,"eq","","",277,[[["self"],["subeq"]],["bool"]]],[11,"eq","","",278,[[["self"],["tilde"]],["bool"]]],[11,"eq","","",279,[[["brace"],["self"]],["bool"]]],[11,"eq","","",280,[[["bracket"],["self"]],["bool"]]],[11,"eq","","",281,[[["paren"],["self"]],["bool"]]],[11,"eq","","",282,[[["group"],["self"]],["bool"]]],[11,"eq","syn","",0,[[["self"]],["bool"]]],[11,"eq","","",149,[[["self"],["attrstyle"]],["bool"]]],[11,"ne","","",149,[[["self"],["attrstyle"]],["bool"]]],[11,"eq","","",150,[[["meta"],["self"]],["bool"]]],[11,"ne","","",150,[[["meta"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["metalist"]],["bool"]]],[11,"ne","","",1,[[["self"],["metalist"]],["bool"]]],[11,"eq","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"ne","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"eq","","",151,[[["nestedmeta"],["self"]],["bool"]]],[11,"ne","","",151,[[["nestedmeta"],["self"]],["bool"]]],[11,"eq","","",6,[[["variant"],["self"]],["bool"]]],[11,"ne","","",6,[[["variant"],["self"]],["bool"]]],[11,"eq","","",152,[[["self"],["fields"]],["bool"]]],[11,"ne","","",152,[[["self"],["fields"]],["bool"]]],[11,"eq","","",4,[[["fieldsnamed"],["self"]],["bool"]]],[11,"ne","","",4,[[["fieldsnamed"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"ne","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"eq","","",3,[[["field"],["self"]],["bool"]]],[11,"ne","","",3,[[["field"],["self"]],["bool"]]],[11,"eq","","",153,[[["self"],["visibility"]],["bool"]]],[11,"ne","","",153,[[["self"],["visibility"]],["bool"]]],[11,"eq","","",8,[[["vispublic"],["self"]],["bool"]]],[11,"ne","","",8,[[["vispublic"],["self"]],["bool"]]],[11,"eq","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"ne","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"eq","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"ne","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"eq","","",14,[[["exprarray"],["self"]],["bool"]]],[11,"ne","","",14,[[["exprarray"],["self"]],["bool"]]],[11,"eq","","",15,[[["exprassign"],["self"]],["bool"]]],[11,"ne","","",15,[[["exprassign"],["self"]],["bool"]]],[11,"eq","","",16,[[["self"],["exprassignop"]],["bool"]]],[11,"ne","","",16,[[["self"],["exprassignop"]],["bool"]]],[11,"eq","","",17,[[["exprasync"],["self"]],["bool"]]],[11,"ne","","",17,[[["exprasync"],["self"]],["bool"]]],[11,"eq","","",18,[[["self"],["exprawait"]],["bool"]]],[11,"ne","","",18,[[["self"],["exprawait"]],["bool"]]],[11,"eq","","",19,[[["exprbinary"],["self"]],["bool"]]],[11,"ne","","",19,[[["exprbinary"],["self"]],["bool"]]],[11,"eq","","",20,[[["exprblock"],["self"]],["bool"]]],[11,"ne","","",20,[[["exprblock"],["self"]],["bool"]]],[11,"eq","","",21,[[["self"],["exprbox"]],["bool"]]],[11,"ne","","",21,[[["self"],["exprbox"]],["bool"]]],[11,"eq","","",22,[[["self"],["exprbreak"]],["bool"]]],[11,"ne","","",22,[[["self"],["exprbreak"]],["bool"]]],[11,"eq","","",23,[[["self"],["exprcall"]],["bool"]]],[11,"ne","","",23,[[["self"],["exprcall"]],["bool"]]],[11,"eq","","",24,[[["self"],["exprcast"]],["bool"]]],[11,"ne","","",24,[[["self"],["exprcast"]],["bool"]]],[11,"eq","","",25,[[["self"],["exprclosure"]],["bool"]]],[11,"ne","","",25,[[["self"],["exprclosure"]],["bool"]]],[11,"eq","","",26,[[["exprcontinue"],["self"]],["bool"]]],[11,"ne","","",26,[[["exprcontinue"],["self"]],["bool"]]],[11,"eq","","",27,[[["exprfield"],["self"]],["bool"]]],[11,"ne","","",27,[[["exprfield"],["self"]],["bool"]]],[11,"eq","","",28,[[["exprforloop"],["self"]],["bool"]]],[11,"ne","","",28,[[["exprforloop"],["self"]],["bool"]]],[11,"eq","","",29,[[["self"],["exprgroup"]],["bool"]]],[11,"ne","","",29,[[["self"],["exprgroup"]],["bool"]]],[11,"eq","","",30,[[["self"],["exprif"]],["bool"]]],[11,"ne","","",30,[[["self"],["exprif"]],["bool"]]],[11,"eq","","",31,[[["exprindex"],["self"]],["bool"]]],[11,"ne","","",31,[[["exprindex"],["self"]],["bool"]]],[11,"eq","","",32,[[["self"],["exprlet"]],["bool"]]],[11,"ne","","",32,[[["self"],["exprlet"]],["bool"]]],[11,"eq","","",33,[[["self"],["exprlit"]],["bool"]]],[11,"ne","","",33,[[["self"],["exprlit"]],["bool"]]],[11,"eq","","",34,[[["exprloop"],["self"]],["bool"]]],[11,"ne","","",34,[[["exprloop"],["self"]],["bool"]]],[11,"eq","","",35,[[["self"],["exprmacro"]],["bool"]]],[11,"ne","","",35,[[["self"],["exprmacro"]],["bool"]]],[11,"eq","","",36,[[["exprmatch"],["self"]],["bool"]]],[11,"ne","","",36,[[["exprmatch"],["self"]],["bool"]]],[11,"eq","","",37,[[["self"],["exprmethodcall"]],["bool"]]],[11,"ne","","",37,[[["self"],["exprmethodcall"]],["bool"]]],[11,"eq","","",38,[[["self"],["exprparen"]],["bool"]]],[11,"ne","","",38,[[["self"],["exprparen"]],["bool"]]],[11,"eq","","",39,[[["self"],["exprpath"]],["bool"]]],[11,"ne","","",39,[[["self"],["exprpath"]],["bool"]]],[11,"eq","","",40,[[["exprrange"],["self"]],["bool"]]],[11,"ne","","",40,[[["exprrange"],["self"]],["bool"]]],[11,"eq","","",41,[[["self"],["exprreference"]],["bool"]]],[11,"ne","","",41,[[["self"],["exprreference"]],["bool"]]],[11,"eq","","",42,[[["exprrepeat"],["self"]],["bool"]]],[11,"ne","","",42,[[["exprrepeat"],["self"]],["bool"]]],[11,"eq","","",43,[[["exprreturn"],["self"]],["bool"]]],[11,"ne","","",43,[[["exprreturn"],["self"]],["bool"]]],[11,"eq","","",44,[[["self"],["exprstruct"]],["bool"]]],[11,"ne","","",44,[[["self"],["exprstruct"]],["bool"]]],[11,"eq","","",45,[[["self"],["exprtry"]],["bool"]]],[11,"ne","","",45,[[["self"],["exprtry"]],["bool"]]],[11,"eq","","",46,[[["exprtryblock"],["self"]],["bool"]]],[11,"ne","","",46,[[["exprtryblock"],["self"]],["bool"]]],[11,"eq","","",47,[[["exprtuple"],["self"]],["bool"]]],[11,"ne","","",47,[[["exprtuple"],["self"]],["bool"]]],[11,"eq","","",48,[[["self"],["exprtype"]],["bool"]]],[11,"ne","","",48,[[["self"],["exprtype"]],["bool"]]],[11,"eq","","",49,[[["self"],["exprunary"]],["bool"]]],[11,"ne","","",49,[[["self"],["exprunary"]],["bool"]]],[11,"eq","","",50,[[["self"],["exprunsafe"]],["bool"]]],[11,"ne","","",50,[[["self"],["exprunsafe"]],["bool"]]],[11,"eq","","",51,[[["self"],["exprwhile"]],["bool"]]],[11,"ne","","",51,[[["self"],["exprwhile"]],["bool"]]],[11,"eq","","",52,[[["expryield"],["self"]],["bool"]]],[11,"ne","","",52,[[["expryield"],["self"]],["bool"]]],[11,"eq","","",156,[[["self"]],["bool"]]],[11,"eq","","",157,[[["member"],["self"]],["bool"]]],[11,"ne","","",157,[[["member"],["self"]],["bool"]]],[11,"eq","","",53,[[["self"]],["bool"]]],[11,"eq","","",13,[[["self"],["methodturbofish"]],["bool"]]],[11,"ne","","",13,[[["self"],["methodturbofish"]],["bool"]]],[11,"eq","","",154,[[["self"],["genericmethodargument"]],["bool"]]],[11,"ne","","",154,[[["self"],["genericmethodargument"]],["bool"]]],[11,"eq","","",11,[[["self"],["fieldvalue"]],["bool"]]],[11,"ne","","",11,[[["self"],["fieldvalue"]],["bool"]]],[11,"eq","","",12,[[["self"],["label"]],["bool"]]],[11,"ne","","",12,[[["self"],["label"]],["bool"]]],[11,"eq","","",10,[[["self"],["arm"]],["bool"]]],[11,"ne","","",10,[[["self"],["arm"]],["bool"]]],[11,"eq","","",155,[[["rangelimits"],["self"]],["bool"]]],[11,"ne","","",155,[[["rangelimits"],["self"]],["bool"]]],[11,"eq","","",56,[[["self"],["generics"]],["bool"]]],[11,"ne","","",56,[[["self"],["generics"]],["bool"]]],[11,"eq","","",158,[[["self"],["genericparam"]],["bool"]]],[11,"ne","","",158,[[["self"],["genericparam"]],["bool"]]],[11,"eq","","",62,[[["typeparam"],["self"]],["bool"]]],[11,"ne","","",62,[[["typeparam"],["self"]],["bool"]]],[11,"eq","","",57,[[["lifetimedef"],["self"]],["bool"]]],[11,"ne","","",57,[[["lifetimedef"],["self"]],["bool"]]],[11,"eq","","",55,[[["self"],["constparam"]],["bool"]]],[11,"ne","","",55,[[["self"],["constparam"]],["bool"]]],[11,"eq","","",304,[[["implgenerics"],["self"]],["bool"]]],[11,"ne","","",304,[[["implgenerics"],["self"]],["bool"]]],[11,"eq","","",283,[[["typegenerics"],["self"]],["bool"]]],[11,"ne","","",283,[[["typegenerics"],["self"]],["bool"]]],[11,"eq","","",305,[[["turbofish"],["self"]],["bool"]]],[11,"ne","","",305,[[["turbofish"],["self"]],["bool"]]],[11,"eq","","",54,[[["boundlifetimes"],["self"]],["bool"]]],[11,"ne","","",54,[[["boundlifetimes"],["self"]],["bool"]]],[11,"eq","","",160,[[["typeparambound"],["self"]],["bool"]]],[11,"ne","","",160,[[["typeparambound"],["self"]],["bool"]]],[11,"eq","","",61,[[["traitbound"],["self"]],["bool"]]],[11,"ne","","",61,[[["traitbound"],["self"]],["bool"]]],[11,"eq","","",159,[[["traitboundmodifier"],["self"]],["bool"]]],[11,"ne","","",159,[[["traitboundmodifier"],["self"]],["bool"]]],[11,"eq","","",63,[[["whereclause"],["self"]],["bool"]]],[11,"ne","","",63,[[["whereclause"],["self"]],["bool"]]],[11,"eq","","",161,[[["wherepredicate"],["self"]],["bool"]]],[11,"ne","","",161,[[["wherepredicate"],["self"]],["bool"]]],[11,"eq","","",60,[[["self"],["predicatetype"]],["bool"]]],[11,"ne","","",60,[[["self"],["predicatetype"]],["bool"]]],[11,"eq","","",59,[[["self"],["predicatelifetime"]],["bool"]]],[11,"ne","","",59,[[["self"],["predicatelifetime"]],["bool"]]],[11,"eq","","",58,[[["self"],["predicateeq"]],["bool"]]],[11,"ne","","",58,[[["self"],["predicateeq"]],["bool"]]],[11,"eq","","",72,[[["self"],["itemconst"]],["bool"]]],[11,"ne","","",72,[[["self"],["itemconst"]],["bool"]]],[11,"eq","","",73,[[["itemenum"],["self"]],["bool"]]],[11,"ne","","",73,[[["itemenum"],["self"]],["bool"]]],[11,"eq","","",74,[[["self"],["itemexterncrate"]],["bool"]]],[11,"ne","","",74,[[["self"],["itemexterncrate"]],["bool"]]],[11,"eq","","",75,[[["self"],["itemfn"]],["bool"]]],[11,"ne","","",75,[[["self"],["itemfn"]],["bool"]]],[11,"eq","","",76,[[["self"],["itemforeignmod"]],["bool"]]],[11,"ne","","",76,[[["self"],["itemforeignmod"]],["bool"]]],[11,"eq","","",77,[[["self"],["itemimpl"]],["bool"]]],[11,"ne","","",77,[[["self"],["itemimpl"]],["bool"]]],[11,"eq","","",78,[[["self"],["itemmacro"]],["bool"]]],[11,"ne","","",78,[[["self"],["itemmacro"]],["bool"]]],[11,"eq","","",80,[[["self"],["itemmod"]],["bool"]]],[11,"ne","","",80,[[["self"],["itemmod"]],["bool"]]],[11,"eq","","",81,[[["self"],["itemstatic"]],["bool"]]],[11,"ne","","",81,[[["self"],["itemstatic"]],["bool"]]],[11,"eq","","",82,[[["self"],["itemstruct"]],["bool"]]],[11,"ne","","",82,[[["self"],["itemstruct"]],["bool"]]],[11,"eq","","",83,[[["itemtrait"],["self"]],["bool"]]],[11,"ne","","",83,[[["itemtrait"],["self"]],["bool"]]],[11,"eq","","",84,[[["self"],["itemtraitalias"]],["bool"]]],[11,"ne","","",84,[[["self"],["itemtraitalias"]],["bool"]]],[11,"eq","","",85,[[["itemtype"],["self"]],["bool"]]],[11,"ne","","",85,[[["itemtype"],["self"]],["bool"]]],[11,"eq","","",86,[[["self"],["itemunion"]],["bool"]]],[11,"ne","","",86,[[["self"],["itemunion"]],["bool"]]],[11,"eq","","",87,[[["itemuse"],["self"]],["bool"]]],[11,"ne","","",87,[[["itemuse"],["self"]],["bool"]]],[11,"eq","","",165,[[["self"]],["bool"]]],[11,"eq","","",79,[[["self"]],["bool"]]],[11,"eq","","",167,[[["usetree"],["self"]],["bool"]]],[11,"ne","","",167,[[["usetree"],["self"]],["bool"]]],[11,"eq","","",97,[[["self"],["usepath"]],["bool"]]],[11,"ne","","",97,[[["self"],["usepath"]],["bool"]]],[11,"eq","","",96,[[["usename"],["self"]],["bool"]]],[11,"ne","","",96,[[["usename"],["self"]],["bool"]]],[11,"eq","","",98,[[["self"],["userename"]],["bool"]]],[11,"ne","","",98,[[["self"],["userename"]],["bool"]]],[11,"eq","","",94,[[["useglob"],["self"]],["bool"]]],[11,"ne","","",94,[[["useglob"],["self"]],["bool"]]],[11,"eq","","",95,[[["self"],["usegroup"]],["bool"]]],[11,"ne","","",95,[[["self"],["usegroup"]],["bool"]]],[11,"eq","","",64,[[["self"],["foreignitemfn"]],["bool"]]],[11,"ne","","",64,[[["self"],["foreignitemfn"]],["bool"]]],[11,"eq","","",66,[[["foreignitemstatic"],["self"]],["bool"]]],[11,"ne","","",66,[[["foreignitemstatic"],["self"]],["bool"]]],[11,"eq","","",67,[[["foreignitemtype"],["self"]],["bool"]]],[11,"ne","","",67,[[["foreignitemtype"],["self"]],["bool"]]],[11,"eq","","",65,[[["foreignitemmacro"],["self"]],["bool"]]],[11,"ne","","",65,[[["foreignitemmacro"],["self"]],["bool"]]],[11,"eq","","",163,[[["self"]],["bool"]]],[11,"eq","","",90,[[["traititemconst"],["self"]],["bool"]]],[11,"ne","","",90,[[["traititemconst"],["self"]],["bool"]]],[11,"eq","","",92,[[["traititemmethod"],["self"]],["bool"]]],[11,"ne","","",92,[[["traititemmethod"],["self"]],["bool"]]],[11,"eq","","",93,[[["traititemtype"],["self"]],["bool"]]],[11,"ne","","",93,[[["traititemtype"],["self"]],["bool"]]],[11,"eq","","",91,[[["self"],["traititemmacro"]],["bool"]]],[11,"ne","","",91,[[["self"],["traititemmacro"]],["bool"]]],[11,"eq","","",166,[[["self"]],["bool"]]],[11,"eq","","",68,[[["implitemconst"],["self"]],["bool"]]],[11,"ne","","",68,[[["implitemconst"],["self"]],["bool"]]],[11,"eq","","",70,[[["implitemmethod"],["self"]],["bool"]]],[11,"ne","","",70,[[["implitemmethod"],["self"]],["bool"]]],[11,"eq","","",71,[[["self"],["implitemtype"]],["bool"]]],[11,"ne","","",71,[[["self"],["implitemtype"]],["bool"]]],[11,"eq","","",69,[[["self"],["implitemmacro"]],["bool"]]],[11,"ne","","",69,[[["self"],["implitemmacro"]],["bool"]]],[11,"eq","","",164,[[["self"]],["bool"]]],[11,"eq","","",89,[[["signature"],["self"]],["bool"]]],[11,"ne","","",89,[[["signature"],["self"]],["bool"]]],[11,"eq","","",162,[[["fnarg"],["self"]],["bool"]]],[11,"ne","","",162,[[["fnarg"],["self"]],["bool"]]],[11,"eq","","",88,[[["receiver"],["self"]],["bool"]]],[11,"ne","","",88,[[["receiver"],["self"]],["bool"]]],[11,"eq","","",99,[[["file"],["self"]],["bool"]]],[11,"ne","","",99,[[["file"],["self"]],["bool"]]],[11,"eq","","",100,[[["self"],["lifetime"]],["bool"]]],[11,"eq","","",168,[[["self"]],["bool"]]],[11,"eq","","",284,[[["self"]],["bool"]]],[11,"eq","","",285,[[["self"]],["bool"]]],[11,"eq","","",286,[[["self"]],["bool"]]],[11,"eq","","",287,[[["self"]],["bool"]]],[11,"eq","","",288,[[["self"]],["bool"]]],[11,"eq","","",289,[[["self"]],["bool"]]],[11,"eq","","",101,[[["self"]],["bool"]]],[11,"eq","","",169,[[["self"],["strstyle"]],["bool"]]],[11,"ne","","",169,[[["self"],["strstyle"]],["bool"]]],[11,"eq","","",170,[[["macrodelimiter"],["self"]],["bool"]]],[11,"ne","","",170,[[["macrodelimiter"],["self"]],["bool"]]],[11,"eq","","",102,[[["self"]],["bool"]]],[11,"eq","","",106,[[["deriveinput"],["self"]],["bool"]]],[11,"ne","","",106,[[["deriveinput"],["self"]],["bool"]]],[11,"eq","","",171,[[["data"],["self"]],["bool"]]],[11,"ne","","",171,[[["data"],["self"]],["bool"]]],[11,"eq","","",104,[[["self"],["datastruct"]],["bool"]]],[11,"ne","","",104,[[["self"],["datastruct"]],["bool"]]],[11,"eq","","",103,[[["self"],["dataenum"]],["bool"]]],[11,"ne","","",103,[[["self"],["dataenum"]],["bool"]]],[11,"eq","","",105,[[["dataunion"],["self"]],["bool"]]],[11,"ne","","",105,[[["dataunion"],["self"]],["bool"]]],[11,"eq","","",172,[[["binop"],["self"]],["bool"]]],[11,"ne","","",172,[[["binop"],["self"]],["bool"]]],[11,"eq","","",173,[[["unop"],["self"]],["bool"]]],[11,"ne","","",173,[[["unop"],["self"]],["bool"]]],[11,"eq","","",107,[[["self"],["block"]],["bool"]]],[11,"ne","","",107,[[["self"],["block"]],["bool"]]],[11,"eq","","",174,[[["self"],["stmt"]],["bool"]]],[11,"ne","","",174,[[["self"],["stmt"]],["bool"]]],[11,"eq","","",108,[[["local"],["self"]],["bool"]]],[11,"ne","","",108,[[["local"],["self"]],["bool"]]],[11,"eq","","",111,[[["typearray"],["self"]],["bool"]]],[11,"ne","","",111,[[["typearray"],["self"]],["bool"]]],[11,"eq","","",112,[[["typebarefn"],["self"]],["bool"]]],[11,"ne","","",112,[[["typebarefn"],["self"]],["bool"]]],[11,"eq","","",113,[[["self"],["typegroup"]],["bool"]]],[11,"ne","","",113,[[["self"],["typegroup"]],["bool"]]],[11,"eq","","",114,[[["typeimpltrait"],["self"]],["bool"]]],[11,"ne","","",114,[[["typeimpltrait"],["self"]],["bool"]]],[11,"eq","","",115,[[["self"],["typeinfer"]],["bool"]]],[11,"ne","","",115,[[["self"],["typeinfer"]],["bool"]]],[11,"eq","","",116,[[["self"],["typemacro"]],["bool"]]],[11,"ne","","",116,[[["self"],["typemacro"]],["bool"]]],[11,"eq","","",117,[[["self"],["typenever"]],["bool"]]],[11,"ne","","",117,[[["self"],["typenever"]],["bool"]]],[11,"eq","","",118,[[["self"],["typeparen"]],["bool"]]],[11,"ne","","",118,[[["self"],["typeparen"]],["bool"]]],[11,"eq","","",119,[[["typepath"],["self"]],["bool"]]],[11,"ne","","",119,[[["typepath"],["self"]],["bool"]]],[11,"eq","","",120,[[["typeptr"],["self"]],["bool"]]],[11,"ne","","",120,[[["typeptr"],["self"]],["bool"]]],[11,"eq","","",121,[[["typereference"],["self"]],["bool"]]],[11,"ne","","",121,[[["typereference"],["self"]],["bool"]]],[11,"eq","","",122,[[["typeslice"],["self"]],["bool"]]],[11,"ne","","",122,[[["typeslice"],["self"]],["bool"]]],[11,"eq","","",123,[[["typetraitobject"],["self"]],["bool"]]],[11,"ne","","",123,[[["typetraitobject"],["self"]],["bool"]]],[11,"eq","","",124,[[["self"],["typetuple"]],["bool"]]],[11,"ne","","",124,[[["self"],["typetuple"]],["bool"]]],[11,"eq","","",176,[[["self"]],["bool"]]],[11,"eq","","",109,[[["abi"],["self"]],["bool"]]],[11,"ne","","",109,[[["abi"],["self"]],["bool"]]],[11,"eq","","",110,[[["barefnarg"],["self"]],["bool"]]],[11,"ne","","",110,[[["barefnarg"],["self"]],["bool"]]],[11,"eq","","",125,[[["self"],["variadic"]],["bool"]]],[11,"ne","","",125,[[["self"],["variadic"]],["bool"]]],[11,"eq","","",175,[[["returntype"],["self"]],["bool"]]],[11,"ne","","",175,[[["returntype"],["self"]],["bool"]]],[11,"eq","","",127,[[["patbox"],["self"]],["bool"]]],[11,"ne","","",127,[[["patbox"],["self"]],["bool"]]],[11,"eq","","",128,[[["self"],["patident"]],["bool"]]],[11,"ne","","",128,[[["self"],["patident"]],["bool"]]],[11,"eq","","",129,[[["self"],["patlit"]],["bool"]]],[11,"ne","","",129,[[["self"],["patlit"]],["bool"]]],[11,"eq","","",130,[[["patmacro"],["self"]],["bool"]]],[11,"ne","","",130,[[["patmacro"],["self"]],["bool"]]],[11,"eq","","",131,[[["self"],["pator"]],["bool"]]],[11,"ne","","",131,[[["self"],["pator"]],["bool"]]],[11,"eq","","",132,[[["patpath"],["self"]],["bool"]]],[11,"ne","","",132,[[["patpath"],["self"]],["bool"]]],[11,"eq","","",133,[[["self"],["patrange"]],["bool"]]],[11,"ne","","",133,[[["self"],["patrange"]],["bool"]]],[11,"eq","","",134,[[["self"],["patreference"]],["bool"]]],[11,"ne","","",134,[[["self"],["patreference"]],["bool"]]],[11,"eq","","",135,[[["self"],["patrest"]],["bool"]]],[11,"ne","","",135,[[["self"],["patrest"]],["bool"]]],[11,"eq","","",136,[[["self"],["patslice"]],["bool"]]],[11,"ne","","",136,[[["self"],["patslice"]],["bool"]]],[11,"eq","","",137,[[["self"],["patstruct"]],["bool"]]],[11,"ne","","",137,[[["self"],["patstruct"]],["bool"]]],[11,"eq","","",138,[[["self"],["pattuple"]],["bool"]]],[11,"ne","","",138,[[["self"],["pattuple"]],["bool"]]],[11,"eq","","",139,[[["self"],["pattuplestruct"]],["bool"]]],[11,"ne","","",139,[[["self"],["pattuplestruct"]],["bool"]]],[11,"eq","","",140,[[["self"],["pattype"]],["bool"]]],[11,"ne","","",140,[[["self"],["pattype"]],["bool"]]],[11,"eq","","",141,[[["patwild"],["self"]],["bool"]]],[11,"ne","","",141,[[["patwild"],["self"]],["bool"]]],[11,"eq","","",126,[[["self"],["fieldpat"]],["bool"]]],[11,"ne","","",126,[[["self"],["fieldpat"]],["bool"]]],[11,"eq","","",177,[[["self"]],["bool"]]],[11,"eq","","",146,[[["self"],["path"]],["bool"]]],[11,"ne","","",146,[[["self"],["path"]],["bool"]]],[11,"eq","","",147,[[["self"],["pathsegment"]],["bool"]]],[11,"ne","","",147,[[["self"],["pathsegment"]],["bool"]]],[11,"eq","","",179,[[["patharguments"],["self"]],["bool"]]],[11,"ne","","",179,[[["patharguments"],["self"]],["bool"]]],[11,"eq","","",178,[[["genericargument"],["self"]],["bool"]]],[11,"ne","","",178,[[["genericargument"],["self"]],["bool"]]],[11,"eq","","",142,[[["anglebracketedgenericarguments"],["self"]],["bool"]]],[11,"ne","","",142,[[["anglebracketedgenericarguments"],["self"]],["bool"]]],[11,"eq","","",143,[[["binding"],["self"]],["bool"]]],[11,"ne","","",143,[[["binding"],["self"]],["bool"]]],[11,"eq","","",144,[[["constraint"],["self"]],["bool"]]],[11,"ne","","",144,[[["constraint"],["self"]],["bool"]]],[11,"eq","","",145,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"ne","","",145,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"eq","","",148,[[["self"],["qself"]],["bool"]]],[11,"ne","","",148,[[["self"],["qself"]],["bool"]]],[11,"eq","syn::buffer","",291,[[["cursor"],["self"]],["bool"]]],[11,"ne","","",291,[[["cursor"],["self"]],["bool"]]],[11,"eq","syn::punctuated","",294,[[["punctuated"],["self"]],["bool"]]],[11,"ne","","",294,[[["punctuated"],["self"]],["bool"]]],[11,"partial_cmp","syn","",100,[[["self"],["lifetime"]],[["option",["ordering"]],["ordering"]]]],[11,"deref","syn::token","",180,[[["self"]]]],[11,"deref","","",233,[[["self"]]]],[11,"deref","","",235,[[["self"]]]],[11,"deref","","",238,[[["self"]]]],[11,"deref","","",239,[[["self"]]]],[11,"deref","","",240,[[["self"]]]],[11,"deref","","",242,[[["self"]]]],[11,"deref","","",244,[[["self"]]]],[11,"deref","","",245,[[["self"]]]],[11,"deref","","",247,[[["self"]]]],[11,"deref","","",248,[[["self"]]]],[11,"deref","","",252,[[["self"]]]],[11,"deref","","",255,[[["self"]]]],[11,"deref","","",257,[[["self"]]]],[11,"deref","","",260,[[["self"]]]],[11,"deref","","",263,[[["self"]]]],[11,"deref","","",264,[[["self"]]]],[11,"deref","","",267,[[["self"]]]],[11,"deref","","",270,[[["self"]]]],[11,"deref","","",275,[[["self"]]]],[11,"deref","","",276,[[["self"]]]],[11,"deref","","",278,[[["self"]]]],[11,"deref","syn::parse","",300,[[["self"]]]],[11,"deref_mut","syn::token","",180,[[["self"]]]],[11,"deref_mut","","",233,[[["self"]]]],[11,"deref_mut","","",235,[[["self"]]]],[11,"deref_mut","","",238,[[["self"]]]],[11,"deref_mut","","",239,[[["self"]]]],[11,"deref_mut","","",240,[[["self"]]]],[11,"deref_mut","","",242,[[["self"]]]],[11,"deref_mut","","",244,[[["self"]]]],[11,"deref_mut","","",245,[[["self"]]]],[11,"deref_mut","","",247,[[["self"]]]],[11,"deref_mut","","",248,[[["self"]]]],[11,"deref_mut","","",252,[[["self"]]]],[11,"deref_mut","","",255,[[["self"]]]],[11,"deref_mut","","",257,[[["self"]]]],[11,"deref_mut","","",260,[[["self"]]]],[11,"deref_mut","","",263,[[["self"]]]],[11,"deref_mut","","",264,[[["self"]]]],[11,"deref_mut","","",267,[[["self"]]]],[11,"deref_mut","","",270,[[["self"]]]],[11,"deref_mut","","",275,[[["self"]]]],[11,"deref_mut","","",276,[[["self"]]]],[11,"deref_mut","","",278,[[["self"]]]],[11,"fmt","","",180,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",181,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",182,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",183,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",184,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",185,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",186,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",187,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",188,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",189,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",190,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",191,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",192,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",193,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",194,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",195,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",196,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",197,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",198,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",199,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",200,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",201,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",202,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",203,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",204,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",205,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",206,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",207,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",208,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",209,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",210,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",211,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",212,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",213,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",214,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",215,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",216,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",217,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",218,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",219,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",220,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",221,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",222,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",223,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",224,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",225,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",226,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",227,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",228,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",229,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",230,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",231,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",232,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",233,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",234,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",235,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",236,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",237,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",238,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",239,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",240,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",241,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",242,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",243,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",244,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",245,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",246,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",247,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",248,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",249,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",250,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",251,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",252,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",253,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",254,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",255,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",256,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",257,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",258,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",259,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",260,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",261,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",262,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",263,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",264,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",265,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",266,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",267,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",268,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",269,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",270,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",271,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",272,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",273,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",274,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",275,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",276,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",277,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",278,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",279,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",280,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",281,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",282,[[["formatter"],["self"]],["result"]]],[11,"fmt","syn","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",149,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",150,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",151,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",152,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",153,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",156,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",44,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",50,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",51,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",52,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",157,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",154,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",155,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",56,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",158,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",62,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",57,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",55,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",304,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",283,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",305,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",54,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",160,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",61,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",159,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",63,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",161,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",60,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",59,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",58,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",165,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",72,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",73,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",74,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",75,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",76,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",77,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",78,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",79,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",80,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",81,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",82,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",83,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",84,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",85,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",86,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",87,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",167,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",97,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",96,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",98,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",94,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",95,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",163,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",64,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",66,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",67,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",65,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",166,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",90,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",92,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",93,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",91,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",164,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",68,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",70,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",71,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",69,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",89,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",162,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",88,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",99,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",100,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",168,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",284,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",285,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",286,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",287,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",288,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",289,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",101,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",169,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",102,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",170,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",106,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",171,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",104,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",103,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",105,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",172,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",173,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",107,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",174,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",108,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",176,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",111,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",112,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",113,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",114,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",115,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",116,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",117,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",118,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",119,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",120,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",121,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",122,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",123,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",124,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",109,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",110,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",125,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",175,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",177,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",127,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",128,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",129,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",130,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",131,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",132,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",133,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",134,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",135,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",136,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",137,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",138,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",139,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",140,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",141,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",126,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",146,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",147,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",179,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",178,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",142,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",143,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",144,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",145,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",148,[[["formatter"],["self"]],["result"]]],[11,"fmt","syn::punctuated","",294,[[["formatter"],["self"]],["result"]]],[11,"fmt","syn::parse","",301,[[["formatter"],["self"]],["result"]]],[11,"fmt","syn","",302,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",100,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",288,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",289,[[["formatter"],["self"]],["result"]]],[11,"fmt","syn::parse","",301,[[["formatter"],["self"]],["result"]]],[11,"fmt","syn","",302,[[["formatter"],["self"]],["result"]]],[11,"index","syn::punctuated","",294,[[["self"],["usize"]]]],[11,"index_mut","","",294,[[["self"],["usize"]]]],[11,"hash","syn::token","",180,[[["self"],["h"]]]],[11,"hash","","",181,[[["self"],["h"]]]],[11,"hash","","",182,[[["self"],["h"]]]],[11,"hash","","",183,[[["self"],["h"]]]],[11,"hash","","",184,[[["self"],["h"]]]],[11,"hash","","",185,[[["self"],["h"]]]],[11,"hash","","",186,[[["self"],["h"]]]],[11,"hash","","",187,[[["self"],["h"]]]],[11,"hash","","",188,[[["self"],["h"]]]],[11,"hash","","",189,[[["self"],["h"]]]],[11,"hash","","",190,[[["self"],["h"]]]],[11,"hash","","",191,[[["self"],["h"]]]],[11,"hash","","",192,[[["self"],["h"]]]],[11,"hash","","",193,[[["self"],["h"]]]],[11,"hash","","",194,[[["self"],["h"]]]],[11,"hash","","",195,[[["self"],["h"]]]],[11,"hash","","",196,[[["self"],["h"]]]],[11,"hash","","",197,[[["self"],["h"]]]],[11,"hash","","",198,[[["self"],["h"]]]],[11,"hash","","",199,[[["self"],["h"]]]],[11,"hash","","",200,[[["self"],["h"]]]],[11,"hash","","",201,[[["self"],["h"]]]],[11,"hash","","",202,[[["self"],["h"]]]],[11,"hash","","",203,[[["self"],["h"]]]],[11,"hash","","",204,[[["self"],["h"]]]],[11,"hash","","",205,[[["self"],["h"]]]],[11,"hash","","",206,[[["self"],["h"]]]],[11,"hash","","",207,[[["self"],["h"]]]],[11,"hash","","",208,[[["self"],["h"]]]],[11,"hash","","",209,[[["self"],["h"]]]],[11,"hash","","",210,[[["self"],["h"]]]],[11,"hash","","",211,[[["self"],["h"]]]],[11,"hash","","",212,[[["self"],["h"]]]],[11,"hash","","",213,[[["self"],["h"]]]],[11,"hash","","",214,[[["self"],["h"]]]],[11,"hash","","",215,[[["self"],["h"]]]],[11,"hash","","",216,[[["self"],["h"]]]],[11,"hash","","",217,[[["self"],["h"]]]],[11,"hash","","",218,[[["self"],["h"]]]],[11,"hash","","",219,[[["self"],["h"]]]],[11,"hash","","",220,[[["self"],["h"]]]],[11,"hash","","",221,[[["self"],["h"]]]],[11,"hash","","",222,[[["self"],["h"]]]],[11,"hash","","",223,[[["self"],["h"]]]],[11,"hash","","",224,[[["self"],["h"]]]],[11,"hash","","",225,[[["self"],["h"]]]],[11,"hash","","",226,[[["self"],["h"]]]],[11,"hash","","",227,[[["self"],["h"]]]],[11,"hash","","",228,[[["self"],["h"]]]],[11,"hash","","",229,[[["self"],["h"]]]],[11,"hash","","",230,[[["self"],["h"]]]],[11,"hash","","",231,[[["self"],["h"]]]],[11,"hash","","",232,[[["self"],["h"]]]],[11,"hash","","",233,[[["self"],["h"]]]],[11,"hash","","",234,[[["self"],["h"]]]],[11,"hash","","",235,[[["self"],["h"]]]],[11,"hash","","",236,[[["self"],["h"]]]],[11,"hash","","",237,[[["self"],["h"]]]],[11,"hash","","",238,[[["self"],["h"]]]],[11,"hash","","",239,[[["self"],["h"]]]],[11,"hash","","",240,[[["self"],["h"]]]],[11,"hash","","",241,[[["self"],["h"]]]],[11,"hash","","",242,[[["self"],["h"]]]],[11,"hash","","",243,[[["self"],["h"]]]],[11,"hash","","",244,[[["self"],["h"]]]],[11,"hash","","",245,[[["self"],["h"]]]],[11,"hash","","",246,[[["self"],["h"]]]],[11,"hash","","",247,[[["self"],["h"]]]],[11,"hash","","",248,[[["self"],["h"]]]],[11,"hash","","",249,[[["self"],["h"]]]],[11,"hash","","",250,[[["self"],["h"]]]],[11,"hash","","",251,[[["self"],["h"]]]],[11,"hash","","",252,[[["self"],["h"]]]],[11,"hash","","",253,[[["self"],["h"]]]],[11,"hash","","",254,[[["self"],["h"]]]],[11,"hash","","",255,[[["self"],["h"]]]],[11,"hash","","",256,[[["self"],["h"]]]],[11,"hash","","",257,[[["self"],["h"]]]],[11,"hash","","",258,[[["self"],["h"]]]],[11,"hash","","",259,[[["self"],["h"]]]],[11,"hash","","",260,[[["self"],["h"]]]],[11,"hash","","",261,[[["self"],["h"]]]],[11,"hash","","",262,[[["self"],["h"]]]],[11,"hash","","",263,[[["self"],["h"]]]],[11,"hash","","",264,[[["self"],["h"]]]],[11,"hash","","",265,[[["self"],["h"]]]],[11,"hash","","",266,[[["self"],["h"]]]],[11,"hash","","",267,[[["self"],["h"]]]],[11,"hash","","",268,[[["self"],["h"]]]],[11,"hash","","",269,[[["self"],["h"]]]],[11,"hash","","",270,[[["self"],["h"]]]],[11,"hash","","",271,[[["self"],["h"]]]],[11,"hash","","",272,[[["self"],["h"]]]],[11,"hash","","",273,[[["self"],["h"]]]],[11,"hash","","",274,[[["self"],["h"]]]],[11,"hash","","",275,[[["self"],["h"]]]],[11,"hash","","",276,[[["self"],["h"]]]],[11,"hash","","",277,[[["self"],["h"]]]],[11,"hash","","",278,[[["self"],["h"]]]],[11,"hash","","",279,[[["self"],["h"]]]],[11,"hash","","",280,[[["self"],["h"]]]],[11,"hash","","",281,[[["self"],["h"]]]],[11,"hash","","",282,[[["self"],["h"]]]],[11,"hash","syn","",0,[[["self"],["h"]]]],[11,"hash","","",149,[[["self"],["__h"]]]],[11,"hash","","",150,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","","",151,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"hash","","",152,[[["self"],["__h"]]]],[11,"hash","","",4,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","","",153,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"hash","","",14,[[["self"],["__h"]]]],[11,"hash","","",15,[[["self"],["__h"]]]],[11,"hash","","",16,[[["self"],["__h"]]]],[11,"hash","","",17,[[["self"],["__h"]]]],[11,"hash","","",18,[[["self"],["__h"]]]],[11,"hash","","",19,[[["self"],["__h"]]]],[11,"hash","","",20,[[["self"],["__h"]]]],[11,"hash","","",21,[[["self"],["__h"]]]],[11,"hash","","",22,[[["self"],["__h"]]]],[11,"hash","","",23,[[["self"],["__h"]]]],[11,"hash","","",24,[[["self"],["__h"]]]],[11,"hash","","",25,[[["self"],["__h"]]]],[11,"hash","","",26,[[["self"],["__h"]]]],[11,"hash","","",27,[[["self"],["__h"]]]],[11,"hash","","",28,[[["self"],["__h"]]]],[11,"hash","","",29,[[["self"],["__h"]]]],[11,"hash","","",30,[[["self"],["__h"]]]],[11,"hash","","",31,[[["self"],["__h"]]]],[11,"hash","","",32,[[["self"],["__h"]]]],[11,"hash","","",33,[[["self"],["__h"]]]],[11,"hash","","",34,[[["self"],["__h"]]]],[11,"hash","","",35,[[["self"],["__h"]]]],[11,"hash","","",36,[[["self"],["__h"]]]],[11,"hash","","",37,[[["self"],["__h"]]]],[11,"hash","","",38,[[["self"],["__h"]]]],[11,"hash","","",39,[[["self"],["__h"]]]],[11,"hash","","",40,[[["self"],["__h"]]]],[11,"hash","","",41,[[["self"],["__h"]]]],[11,"hash","","",42,[[["self"],["__h"]]]],[11,"hash","","",43,[[["self"],["__h"]]]],[11,"hash","","",44,[[["self"],["__h"]]]],[11,"hash","","",45,[[["self"],["__h"]]]],[11,"hash","","",46,[[["self"],["__h"]]]],[11,"hash","","",47,[[["self"],["__h"]]]],[11,"hash","","",48,[[["self"],["__h"]]]],[11,"hash","","",49,[[["self"],["__h"]]]],[11,"hash","","",50,[[["self"],["__h"]]]],[11,"hash","","",51,[[["self"],["__h"]]]],[11,"hash","","",52,[[["self"],["__h"]]]],[11,"hash","","",156,[[["self"],["h"]]]],[11,"hash","","",157,[[["self"],["__h"]]]],[11,"hash","","",53,[[["self"],["h"]]]],[11,"hash","","",13,[[["self"],["__h"]]]],[11,"hash","","",154,[[["self"],["__h"]]]],[11,"hash","","",11,[[["self"],["__h"]]]],[11,"hash","","",12,[[["self"],["__h"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","","",155,[[["self"],["__h"]]]],[11,"hash","","",56,[[["self"],["__h"]]]],[11,"hash","","",158,[[["self"],["__h"]]]],[11,"hash","","",62,[[["self"],["__h"]]]],[11,"hash","","",57,[[["self"],["__h"]]]],[11,"hash","","",55,[[["self"],["__h"]]]],[11,"hash","","",304,[[["self"],["__h"]]]],[11,"hash","","",283,[[["self"],["__h"]]]],[11,"hash","","",305,[[["self"],["__h"]]]],[11,"hash","","",54,[[["self"],["__h"]]]],[11,"hash","","",160,[[["self"],["__h"]]]],[11,"hash","","",61,[[["self"],["__h"]]]],[11,"hash","","",159,[[["self"],["__h"]]]],[11,"hash","","",63,[[["self"],["__h"]]]],[11,"hash","","",161,[[["self"],["__h"]]]],[11,"hash","","",60,[[["self"],["__h"]]]],[11,"hash","","",59,[[["self"],["__h"]]]],[11,"hash","","",58,[[["self"],["__h"]]]],[11,"hash","","",72,[[["self"],["__h"]]]],[11,"hash","","",73,[[["self"],["__h"]]]],[11,"hash","","",74,[[["self"],["__h"]]]],[11,"hash","","",75,[[["self"],["__h"]]]],[11,"hash","","",76,[[["self"],["__h"]]]],[11,"hash","","",77,[[["self"],["__h"]]]],[11,"hash","","",78,[[["self"],["__h"]]]],[11,"hash","","",80,[[["self"],["__h"]]]],[11,"hash","","",81,[[["self"],["__h"]]]],[11,"hash","","",82,[[["self"],["__h"]]]],[11,"hash","","",83,[[["self"],["__h"]]]],[11,"hash","","",84,[[["self"],["__h"]]]],[11,"hash","","",85,[[["self"],["__h"]]]],[11,"hash","","",86,[[["self"],["__h"]]]],[11,"hash","","",87,[[["self"],["__h"]]]],[11,"hash","","",165,[[["self"],["h"]]]],[11,"hash","","",79,[[["self"],["h"]]]],[11,"hash","","",167,[[["self"],["__h"]]]],[11,"hash","","",97,[[["self"],["__h"]]]],[11,"hash","","",96,[[["self"],["__h"]]]],[11,"hash","","",98,[[["self"],["__h"]]]],[11,"hash","","",94,[[["self"],["__h"]]]],[11,"hash","","",95,[[["self"],["__h"]]]],[11,"hash","","",64,[[["self"],["__h"]]]],[11,"hash","","",66,[[["self"],["__h"]]]],[11,"hash","","",67,[[["self"],["__h"]]]],[11,"hash","","",65,[[["self"],["__h"]]]],[11,"hash","","",163,[[["self"],["h"]]]],[11,"hash","","",90,[[["self"],["__h"]]]],[11,"hash","","",92,[[["self"],["__h"]]]],[11,"hash","","",93,[[["self"],["__h"]]]],[11,"hash","","",91,[[["self"],["__h"]]]],[11,"hash","","",166,[[["self"],["h"]]]],[11,"hash","","",68,[[["self"],["__h"]]]],[11,"hash","","",70,[[["self"],["__h"]]]],[11,"hash","","",71,[[["self"],["__h"]]]],[11,"hash","","",69,[[["self"],["__h"]]]],[11,"hash","","",164,[[["self"],["h"]]]],[11,"hash","","",89,[[["self"],["__h"]]]],[11,"hash","","",162,[[["self"],["__h"]]]],[11,"hash","","",88,[[["self"],["__h"]]]],[11,"hash","","",99,[[["self"],["__h"]]]],[11,"hash","","",100,[[["self"],["h"]]]],[11,"hash","","",168,[[["self"],["h"]]]],[11,"hash","","",284,[[["self"],["h"]]]],[11,"hash","","",285,[[["self"],["h"]]]],[11,"hash","","",286,[[["self"],["h"]]]],[11,"hash","","",287,[[["self"],["h"]]]],[11,"hash","","",288,[[["self"],["h"]]]],[11,"hash","","",289,[[["self"],["h"]]]],[11,"hash","","",101,[[["self"],["h"]]]],[11,"hash","","",169,[[["self"],["__h"]]]],[11,"hash","","",170,[[["self"],["__h"]]]],[11,"hash","","",102,[[["self"],["h"]]]],[11,"hash","","",106,[[["self"],["__h"]]]],[11,"hash","","",171,[[["self"],["__h"]]]],[11,"hash","","",104,[[["self"],["__h"]]]],[11,"hash","","",103,[[["self"],["__h"]]]],[11,"hash","","",105,[[["self"],["__h"]]]],[11,"hash","","",172,[[["self"],["__h"]]]],[11,"hash","","",173,[[["self"],["__h"]]]],[11,"hash","","",107,[[["self"],["__h"]]]],[11,"hash","","",174,[[["self"],["__h"]]]],[11,"hash","","",108,[[["self"],["__h"]]]],[11,"hash","","",111,[[["self"],["__h"]]]],[11,"hash","","",112,[[["self"],["__h"]]]],[11,"hash","","",113,[[["self"],["__h"]]]],[11,"hash","","",114,[[["self"],["__h"]]]],[11,"hash","","",115,[[["self"],["__h"]]]],[11,"hash","","",116,[[["self"],["__h"]]]],[11,"hash","","",117,[[["self"],["__h"]]]],[11,"hash","","",118,[[["self"],["__h"]]]],[11,"hash","","",119,[[["self"],["__h"]]]],[11,"hash","","",120,[[["self"],["__h"]]]],[11,"hash","","",121,[[["self"],["__h"]]]],[11,"hash","","",122,[[["self"],["__h"]]]],[11,"hash","","",123,[[["self"],["__h"]]]],[11,"hash","","",124,[[["self"],["__h"]]]],[11,"hash","","",176,[[["self"],["h"]]]],[11,"hash","","",109,[[["self"],["__h"]]]],[11,"hash","","",110,[[["self"],["__h"]]]],[11,"hash","","",125,[[["self"],["__h"]]]],[11,"hash","","",175,[[["self"],["__h"]]]],[11,"hash","","",127,[[["self"],["__h"]]]],[11,"hash","","",128,[[["self"],["__h"]]]],[11,"hash","","",129,[[["self"],["__h"]]]],[11,"hash","","",130,[[["self"],["__h"]]]],[11,"hash","","",131,[[["self"],["__h"]]]],[11,"hash","","",132,[[["self"],["__h"]]]],[11,"hash","","",133,[[["self"],["__h"]]]],[11,"hash","","",134,[[["self"],["__h"]]]],[11,"hash","","",135,[[["self"],["__h"]]]],[11,"hash","","",136,[[["self"],["__h"]]]],[11,"hash","","",137,[[["self"],["__h"]]]],[11,"hash","","",138,[[["self"],["__h"]]]],[11,"hash","","",139,[[["self"],["__h"]]]],[11,"hash","","",140,[[["self"],["__h"]]]],[11,"hash","","",141,[[["self"],["__h"]]]],[11,"hash","","",126,[[["self"],["__h"]]]],[11,"hash","","",177,[[["self"],["h"]]]],[11,"hash","","",146,[[["self"],["__h"]]]],[11,"hash","","",147,[[["self"],["__h"]]]],[11,"hash","","",179,[[["self"],["__h"]]]],[11,"hash","","",178,[[["self"],["__h"]]]],[11,"hash","","",142,[[["self"],["__h"]]]],[11,"hash","","",143,[[["self"],["__h"]]]],[11,"hash","","",144,[[["self"],["__h"]]]],[11,"hash","","",145,[[["self"],["__h"]]]],[11,"hash","","",148,[[["self"],["__h"]]]],[11,"hash","syn::punctuated","",294,[[["self"],["__h"]]]],[11,"from_iter","","",294,[[["intoiterator"]],["self"]]],[11,"from_iter","","",294,[[["intoiterator"]],["self"]]],[11,"description","syn","",302,[[["self"]],["str"]]],[11,"to_tokens","syn::token","",180,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",181,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",182,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",183,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",184,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",185,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",186,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",187,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",188,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",189,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",190,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",191,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",192,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",193,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",194,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",195,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",196,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",197,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",198,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",199,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",200,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",201,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",202,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",203,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",204,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",205,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",206,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",207,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",208,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",209,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",210,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",211,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",212,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",213,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",214,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",215,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",216,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",217,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",218,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",219,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",220,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",221,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",222,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",223,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",224,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",225,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",226,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",227,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",228,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",229,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",230,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",231,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",232,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",233,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",234,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",235,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",236,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",237,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",238,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",239,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",240,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",241,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",242,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",243,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",244,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",245,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",246,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",247,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",248,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",249,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",250,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",251,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",252,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",253,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",254,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",255,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",256,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",257,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",258,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",259,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",260,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",261,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",262,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",263,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",264,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",265,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",266,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",267,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",268,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",269,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",270,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",271,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",272,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",273,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",274,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",275,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",276,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",277,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",278,[[["tokenstream"],["self"]]]],[11,"to_tokens","syn","",150,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",151,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",0,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",1,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",2,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",152,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",153,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",6,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",4,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",5,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",3,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",8,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",7,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",9,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",156,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",21,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",14,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",23,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",37,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",13,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",154,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",47,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",19,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",49,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",33,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",24,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",48,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",32,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",30,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",51,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",28,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",34,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",36,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",17,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",18,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",46,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",52,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",25,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",50,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",20,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",15,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",16,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",27,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",157,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",53,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",31,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",40,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",39,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",41,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",22,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",26,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",43,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",35,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",44,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",42,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",29,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",38,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",45,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",12,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",11,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",10,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",158,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",160,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",161,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",56,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",304,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",283,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",305,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",54,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",57,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",62,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",61,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",159,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",55,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",63,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",60,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",59,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",58,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",165,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",167,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",163,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",166,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",164,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",162,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",74,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",87,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",81,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",72,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",75,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",80,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",76,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",85,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",73,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",82,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",86,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",83,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",84,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",77,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",78,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",79,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",97,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",96,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",98,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",94,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",95,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",90,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",92,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",93,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",91,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",68,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",70,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",71,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",69,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",64,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",66,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",67,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",65,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",89,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",88,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",99,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",100,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",168,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",284,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",285,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",286,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",287,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",288,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",289,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",101,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",102,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",106,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",172,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",173,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",107,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",174,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",108,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",176,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",122,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",111,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",120,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",121,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",112,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",117,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",124,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",119,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",123,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",114,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",113,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",118,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",115,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",116,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",175,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",110,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",125,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",109,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",177,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",141,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",128,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",137,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",139,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",140,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",132,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",138,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",127,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",134,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",135,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",129,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",133,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",136,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",130,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",131,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",126,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",146,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",147,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",179,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",178,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",142,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",143,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",144,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",145,[[["tokenstream"],["self"]]]],[11,"to_tokens","syn::punctuated","",294,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",293,[[["tokenstream"],["self"]]]],[11,"fmt","syn","",157,[[["formatter"],["self"]],["result"]]],[11,"span","","",157,[[["self"]],[["option",["span"]],["span"]]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"span","","",53,[[["self"]],[["option",["span"]],["span"]]]],[11,"new","","Creates a new `Ident` with the given `string` as well as…",303,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",303,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its…",303,[[["self"],["span"]]]],[11,"visit_abi","syn::visit","",296,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",296,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arm","","",296,[[["self"],["arm"]]]],[11,"visit_attr_style","","",296,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",296,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",296,[[["self"],["barefnarg"]]]],[11,"visit_bin_op","","",296,[[["self"],["binop"]]]],[11,"visit_binding","","",296,[[["self"],["binding"]]]],[11,"visit_block","","",296,[[["self"],["block"]]]],[11,"visit_bound_lifetimes","","",296,[[["boundlifetimes"],["self"]]]],[11,"visit_const_param","","",296,[[["constparam"],["self"]]]],[11,"visit_constraint","","",296,[[["self"],["constraint"]]]],[11,"visit_data","","",296,[[["data"],["self"]]]],[11,"visit_data_enum","","",296,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",296,[[["datastruct"],["self"]]]],[11,"visit_data_union","","",296,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",296,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",296,[[["self"],["expr"]]]],[11,"visit_expr_array","","",296,[[["exprarray"],["self"]]]],[11,"visit_expr_assign","","",296,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op","","",296,[[["exprassignop"],["self"]]]],[11,"visit_expr_async","","",296,[[["self"],["exprasync"]]]],[11,"visit_expr_await","","",296,[[["self"],["exprawait"]]]],[11,"visit_expr_binary","","",296,[[["self"],["exprbinary"]]]],[11,"visit_expr_block","","",296,[[["self"],["exprblock"]]]],[11,"visit_expr_box","","",296,[[["self"],["exprbox"]]]],[11,"visit_expr_break","","",296,[[["self"],["exprbreak"]]]],[11,"visit_expr_call","","",296,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",296,[[["self"],["exprcast"]]]],[11,"visit_expr_closure","","",296,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue","","",296,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field","","",296,[[["exprfield"],["self"]]]],[11,"visit_expr_for_loop","","",296,[[["exprforloop"],["self"]]]],[11,"visit_expr_group","","",296,[[["self"],["exprgroup"]]]],[11,"visit_expr_if","","",296,[[["exprif"],["self"]]]],[11,"visit_expr_index","","",296,[[["self"],["exprindex"]]]],[11,"visit_expr_let","","",296,[[["self"],["exprlet"]]]],[11,"visit_expr_lit","","",296,[[["self"],["exprlit"]]]],[11,"visit_expr_loop","","",296,[[["self"],["exprloop"]]]],[11,"visit_expr_macro","","",296,[[["self"],["exprmacro"]]]],[11,"visit_expr_match","","",296,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call","","",296,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren","","",296,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",296,[[["exprpath"],["self"]]]],[11,"visit_expr_range","","",296,[[["exprrange"],["self"]]]],[11,"visit_expr_reference","","",296,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat","","",296,[[["exprrepeat"],["self"]]]],[11,"visit_expr_return","","",296,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct","","",296,[[["self"],["exprstruct"]]]],[11,"visit_expr_try","","",296,[[["exprtry"],["self"]]]],[11,"visit_expr_try_block","","",296,[[["exprtryblock"],["self"]]]],[11,"visit_expr_tuple","","",296,[[["exprtuple"],["self"]]]],[11,"visit_expr_type","","",296,[[["exprtype"],["self"]]]],[11,"visit_expr_unary","","",296,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe","","",296,[[["self"],["exprunsafe"]]]],[11,"visit_expr_while","","",296,[[["self"],["exprwhile"]]]],[11,"visit_expr_yield","","",296,[[["expryield"],["self"]]]],[11,"visit_field","","",296,[[["self"],["field"]]]],[11,"visit_field_pat","","",296,[[["self"],["fieldpat"]]]],[11,"visit_field_value","","",296,[[["self"],["fieldvalue"]]]],[11,"visit_fields","","",296,[[["self"],["fields"]]]],[11,"visit_fields_named","","",296,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",296,[[["fieldsunnamed"],["self"]]]],[11,"visit_file","","",296,[[["self"],["file"]]]],[11,"visit_fn_arg","","",296,[[["self"],["fnarg"]]]],[11,"visit_foreign_item","","",296,[[["foreignitem"],["self"]]]],[11,"visit_foreign_item_fn","","",296,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_macro","","",296,[[["self"],["foreignitemmacro"]]]],[11,"visit_foreign_item_static","","",296,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type","","",296,[[["foreignitemtype"],["self"]]]],[11,"visit_generic_argument","","",296,[[["self"],["genericargument"]]]],[11,"visit_generic_method_argument","","",296,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param","","",296,[[["self"],["genericparam"]]]],[11,"visit_generics","","",296,[[["self"],["generics"]]]],[11,"visit_ident","","",296,[[["self"],["ident"]]]],[11,"visit_impl_item","","",296,[[["self"],["implitem"]]]],[11,"visit_impl_item_const","","",296,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_macro","","",296,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method","","",296,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type","","",296,[[["self"],["implitemtype"]]]],[11,"visit_index","","",296,[[["self"],["index"]]]],[11,"visit_item","","",296,[[["self"],["item"]]]],[11,"visit_item_const","","",296,[[["self"],["itemconst"]]]],[11,"visit_item_enum","","",296,[[["self"],["itemenum"]]]],[11,"visit_item_extern_crate","","",296,[[["self"],["itemexterncrate"]]]],[11,"visit_item_fn","","",296,[[["itemfn"],["self"]]]],[11,"visit_item_foreign_mod","","",296,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl","","",296,[[["self"],["itemimpl"]]]],[11,"visit_item_macro","","",296,[[["itemmacro"],["self"]]]],[11,"visit_item_macro2","","",296,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod","","",296,[[["itemmod"],["self"]]]],[11,"visit_item_static","","",296,[[["self"],["itemstatic"]]]],[11,"visit_item_struct","","",296,[[["self"],["itemstruct"]]]],[11,"visit_item_trait","","",296,[[["itemtrait"],["self"]]]],[11,"visit_item_trait_alias","","",296,[[["self"],["itemtraitalias"]]]],[11,"visit_item_type","","",296,[[["self"],["itemtype"]]]],[11,"visit_item_union","","",296,[[["self"],["itemunion"]]]],[11,"visit_item_use","","",296,[[["self"],["itemuse"]]]],[11,"visit_label","","",296,[[["label"],["self"]]]],[11,"visit_lifetime","","",296,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",296,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",296,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",296,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",296,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",296,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",296,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",296,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",296,[[["litint"],["self"]]]],[11,"visit_lit_str","","",296,[[["self"],["litstr"]]]],[11,"visit_local","","",296,[[["self"],["local"]]]],[11,"visit_macro","","",296,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",296,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",296,[[["member"],["self"]]]],[11,"visit_meta","","",296,[[["self"],["meta"]]]],[11,"visit_meta_list","","",296,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",296,[[["self"],["metanamevalue"]]]],[11,"visit_method_turbofish","","",296,[[["methodturbofish"],["self"]]]],[11,"visit_nested_meta","","",296,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",296,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat","","",296,[[["self"],["pat"]]]],[11,"visit_pat_box","","",296,[[["self"],["patbox"]]]],[11,"visit_pat_ident","","",296,[[["self"],["patident"]]]],[11,"visit_pat_lit","","",296,[[["self"],["patlit"]]]],[11,"visit_pat_macro","","",296,[[["patmacro"],["self"]]]],[11,"visit_pat_or","","",296,[[["self"],["pator"]]]],[11,"visit_pat_path","","",296,[[["self"],["patpath"]]]],[11,"visit_pat_range","","",296,[[["self"],["patrange"]]]],[11,"visit_pat_reference","","",296,[[["self"],["patreference"]]]],[11,"visit_pat_rest","","",296,[[["patrest"],["self"]]]],[11,"visit_pat_slice","","",296,[[["self"],["patslice"]]]],[11,"visit_pat_struct","","",296,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple","","",296,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct","","",296,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_type","","",296,[[["pattype"],["self"]]]],[11,"visit_pat_wild","","",296,[[["self"],["patwild"]]]],[11,"visit_path","","",296,[[["self"],["path"]]]],[11,"visit_path_arguments","","",296,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",296,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",296,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",296,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",296,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",296,[[["qself"],["self"]]]],[11,"visit_range_limits","","",296,[[["self"],["rangelimits"]]]],[11,"visit_receiver","","",296,[[["self"],["receiver"]]]],[11,"visit_return_type","","",296,[[["self"],["returntype"]]]],[11,"visit_signature","","",296,[[["self"],["signature"]]]],[11,"visit_span","","",296,[[["self"],["span"]]]],[11,"visit_stmt","","",296,[[["self"],["stmt"]]]],[11,"visit_trait_bound","","",296,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",296,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item","","",296,[[["self"],["traititem"]]]],[11,"visit_trait_item_const","","",296,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro","","",296,[[["self"],["traititemmacro"]]]],[11,"visit_trait_item_method","","",296,[[["self"],["traititemmethod"]]]],[11,"visit_trait_item_type","","",296,[[["traititemtype"],["self"]]]],[11,"visit_type","","",296,[[["self"],["type"]]]],[11,"visit_type_array","","",296,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",296,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",296,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",296,[[["typeimpltrait"],["self"]]]],[11,"visit_type_infer","","",296,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",296,[[["typemacro"],["self"]]]],[11,"visit_type_never","","",296,[[["typenever"],["self"]]]],[11,"visit_type_param","","",296,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",296,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",296,[[["typeparen"],["self"]]]],[11,"visit_type_path","","",296,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",296,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",296,[[["typereference"],["self"]]]],[11,"visit_type_slice","","",296,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",296,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",296,[[["typetuple"],["self"]]]],[11,"visit_un_op","","",296,[[["self"],["unop"]]]],[11,"visit_use_glob","","",296,[[["useglob"],["self"]]]],[11,"visit_use_group","","",296,[[["self"],["usegroup"]]]],[11,"visit_use_name","","",296,[[["self"],["usename"]]]],[11,"visit_use_path","","",296,[[["self"],["usepath"]]]],[11,"visit_use_rename","","",296,[[["userename"],["self"]]]],[11,"visit_use_tree","","",296,[[["self"],["usetree"]]]],[11,"visit_variadic","","",296,[[["self"],["variadic"]]]],[11,"visit_variant","","",296,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",296,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",296,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",296,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",296,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",296,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",296,[[["self"],["wherepredicate"]]]],[11,"peek","syn::parse","Looks at the next token in the parse stream to determine…",312,[[["self"],["peek"]],["bool"]]],[11,"error","","Triggers an error at the current position of the parse…",312,[[],["error"]]]],"p":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"Arm"],[3,"FieldValue"],[3,"Label"],[3,"MethodTurbofish"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"ForeignItemFn"],[3,"ForeignItemMacro"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ImplItemConst"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"Receiver"],[3,"Signature"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"UseGlob"],[3,"UseGroup"],[3,"UseName"],[3,"UsePath"],[3,"UseRename"],[3,"File"],[3,"Lifetime"],[3,"LitBool"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Block"],[3,"Local"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Variadic"],[3,"FieldPat"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatReference"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"GenericMethodArgument"],[4,"RangeLimits"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FnArg"],[4,"ForeignItem"],[4,"ImplItem"],[4,"Item"],[4,"TraitItem"],[4,"UseTree"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"Stmt"],[4,"ReturnType"],[4,"Type"],[4,"Pat"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"TypeGenerics"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[4,"Pair"],[3,"Punctuated"],[8,"Spanned"],[8,"Visit"],[8,"Speculative"],[8,"Parse"],[8,"Parser"],[3,"StepCursor"],[3,"ParseBuffer"],[3,"Error"],[3,"Ident"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Lookahead1"],[3,"Nothing"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser…","i":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is…",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid…",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the…",0,[[],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the…",0,[[],["bool"]]]],"p":[[8,"UnicodeXID"]]};
searchIndex["wasi_common"] = {"doc":"","i":[[3,"WasiCtx","wasi_common","",null,null],[3,"WasiCtxBuilder","","A builder allowing customizable construction of `WasiCtx`…",null,null],[4,"VirtualDirEntry","","",null,null],[13,"Directory","","",0,null],[13,"File","","",0,null],[5,"preopen_dir","","",null,[[["asref",["path"]],["path"]],[["result",["file"]],["file"]]]],[11,"new","","Builder for a new `WasiCtx`.",1,[[],["self"]]],[11,"args","","Add arguments to the command-line arguments list.",1,[[["self"]],["self"]]],[11,"arg","","Add an argument to the command-line arguments list.",1,[[["self"],["asref"]],["self"]]],[11,"inherit_args","","Inherit the command-line arguments from the host process.",1,[[["self"]],["self"]]],[11,"inherit_stdin","","Inherit stdin from the host process.",1,[[["self"]],["self"]]],[11,"inherit_stdout","","Inherit stdout from the host process.",1,[[["self"]],["self"]]],[11,"inherit_stderr","","Inherit stdout from the host process.",1,[[["self"]],["self"]]],[11,"inherit_stdio","","Inherit the stdin, stdout, and stderr streams from the…",1,[[["self"]],["self"]]],[11,"inherit_env","","Inherit the environment variables from the host process.",1,[[["self"]],["self"]]],[11,"env","","Add an entry to the environment.",1,[[["asref"],["self"]],["self"]]],[11,"envs","","Add entries to the environment.",1,[[["self"]],["self"]]],[11,"stdin","","Provide a File to use as stdin",1,[[["self"],["file"]],["self"]]],[11,"stdout","","Provide a File to use as stdout",1,[[["self"],["file"]],["self"]]],[11,"stderr","","Provide a File to use as stderr",1,[[["self"],["file"]],["self"]]],[11,"preopened_dir","","Add a preopened directory.",1,[[["path"],["self"],["asref",["path"]],["file"]],["self"]]],[11,"preopened_virt","","Add a preopened virtual directory.",1,[[["virtualdirentry"],["path"],["self"],["asref",["path"]]],["self"]]],[11,"build","","Build a `WasiCtx`, consuming this `WasiCtxBuilder`.",1,[[["self"]],[["wasictxbuildererror"],["wasictx"],["result",["wasictx","wasictxbuildererror"]]]]],[11,"new","","Make a new `WasiCtx` with some default settings.",2,[[],[["result",["wasictxbuildererror"]],["wasictxbuildererror"]]]],[0,"fs","","A very experimental module modeled providing a high-level…",null,null],[3,"Dir","wasi_common::fs","A reference to an open directory on the filesystem.",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[3,"DirEntry","","Entries returned by the ReadDir iterator.",null,null],[3,"File","","A reference to an open file on the filesystem.",null,null],[3,"FileType","","A structure representing a type of file with accessors for…",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a…",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[11,"from_raw_wasi_fd","","Constructs a new instance of `Self` from the given raw…",3,[[["wasictx"],["__wasi_fd_t"]],["self"]]],[11,"open_file","","Attempts to open a file in read-only mode.",3,[[["self"],["asref",["path"]],["path"]],[["file"],["result",["file"]]]]],[11,"open_file_with","","Opens a file at `path` with the options specified by `self`.",3,[[["openoptions"],["path"],["self"],["asref",["path"]]],[["file"],["result",["file"]]]]],[11,"open_dir","","Attempts to open a directory.",3,[[["self"],["asref",["path"]],["path"]],["result"]]],[11,"create_file","","Opens a file in write-only mode.",3,[[["self"],["asref",["path"]],["path"]],[["file"],["result",["file"]]]]],[11,"read","","Returns an iterator over the entries within a directory.",3,[[["self"]],[["readdir"],["result",["readdir"]]]]],[11,"into_read","","Consumes self and returns an iterator over the entries…",3,[[],["readdir"]]],[11,"read_file","","Read the entire contents of a file into a bytes vector.",3,[[["self"],["asref",["path"]],["path"]],[["vec",["u8"]],["result",["vec"]]]]],[11,"read_dir","","Returns an iterator over the entries within a directory.",3,[[["self"],["asref",["path"]],["path"]],[["readdir"],["result",["readdir"]]]]],[11,"new","","Creates a new set of options with default mode/security…",4,[[],["self"]]],[11,"recursive","","Indicates that directories should be created recursively,…",4,[[["self"],["bool"]],["self"]]],[11,"create","","Creates the specified directory with the options…",4,[[["path"],["self"],["asref",["path"]]],["result"]]],[11,"metadata","","Returns the metadata for the file that this entry points at.",5,[[["self"]],[["metadata"],["result",["metadata"]]]]],[11,"file_type","","Returns the file type for the file that this entry points…",5,[[["self"]],[["result",["filetype"]],["filetype"]]]],[11,"file_name","","Returns the bare file name of this directory entry without…",5,[[["self"]],["string"]]],[11,"from_raw_wasi_fd","","Constructs a new instance of `Self` from the given raw…",6,[[["wasictx"],["__wasi_fd_t"]],["self"]]],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",6,[[["self"]],["wasiresult"]]],[11,"sync_data","","This function is similar to `sync_all`, except that it may…",6,[[["self"]],["wasiresult"]]],[11,"set_len","","Truncates or extends the underlying file, updating the…",6,[[["self"],["u64"]],["wasiresult"]]],[11,"metadata","","Queries metadata about the underlying file.",6,[[["self"]],[["metadata"],["wasiresult",["metadata"]]]]],[11,"is_dir","","Tests whether this file type represents a directory.",7,[[["self"]],["bool"]]],[11,"is_file","","Tests whether this file type represents a regular file.",7,[[["self"]],["bool"]]],[11,"is_symlink","","Tests whether this file type represents a symbolic link.",7,[[["self"]],["bool"]]],[11,"file_type","","Returns the file type for this metadata.",8,[[["self"]],["filetype"]]],[11,"is_dir","","Returns true if this metadata is for a directory.",8,[[["self"]],["bool"]]],[11,"is_file","","Returns true if this metadata is for a regular file.",8,[[["self"]],["bool"]]],[11,"len","","Returns the size of the file, in bytes, this metadata is…",8,[[["self"]],["u64"]]],[11,"permissions","","Returns the permissions of the file this metadata is for.",8,[[["self"]],["permissions"]]],[11,"modified","","Returns the last modification time listed in this metadata.",8,[[["self"]],[["result",["systemtime"]],["systemtime"]]]],[11,"accessed","","Returns the last access time of this metadata.",8,[[["self"]],[["result",["systemtime"]],["systemtime"]]]],[11,"created","","Returns the creation time listed in this metadata.",8,[[["self"]],[["result",["systemtime"]],["systemtime"]]]],[11,"new","","Creates a blank new set of options ready for configuration.",9,[[],["self"]]],[11,"read","","Sets the option for read access.",9,[[["self"],["bool"]],["self"]]],[11,"write","","Sets the option for write access.",9,[[["self"],["bool"]],["self"]]],[11,"append","","Sets the option for the append mode.",9,[[["self"],["bool"]],["self"]]],[11,"truncate","","Sets the option for truncating a previous file.",9,[[["self"],["bool"]],["self"]]],[11,"create","","Sets the option to create a new file.",9,[[["self"],["bool"]],["self"]]],[11,"create_new","","Sets the option to always create a new file.",9,[[["self"],["bool"]],["self"]]],[11,"readonly","","Returns true if these permissions describe a readonly…",10,[[["self"]],["bool"]]],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",10,[[["self"],["bool"]]]],[11,"from_raw_wasi_fd","","Constructs a new instance of `Self` from the given raw…",11,[[["__wasi_fd_t"]],["self"]]],[0,"old","wasi_common","",null,null],[0,"snapshot_0","wasi_common::old","",null,null],[3,"WasiCtx","wasi_common::old::snapshot_0","",null,null],[3,"WasiCtxBuilder","","A builder allowing customizable construction of `WasiCtx`…",null,null],[11,"new","","Builder for a new `WasiCtx`.",12,[[],["self"]]],[11,"args","","Add arguments to the command-line arguments list.",12,[[],["self"]]],[11,"arg","","Add an argument to the command-line arguments list.",12,[[["asref"]],["self"]]],[11,"inherit_args","","Inherit the command-line arguments from the host process.",12,[[],["self"]]],[11,"inherit_stdio","","Inherit the stdin, stdout, and stderr streams from the…",12,[[],["self"]]],[11,"inherit_env","","Inherit the environment variables from the host process.",12,[[],["self"]]],[11,"env","","Add an entry to the environment.",12,[[["asref"]],["self"]]],[11,"envs","","Add entries to the environment.",12,[[],["self"]]],[11,"stdin","","Provide a File to use as stdin",12,[[["file"]],["self"]]],[11,"stdout","","Provide a File to use as stdout",12,[[["file"]],["self"]]],[11,"stderr","","Provide a File to use as stderr",12,[[["file"]],["self"]]],[11,"preopened_dir","","Add a preopened directory.",12,[[["path"],["asref",["path"]],["file"]],["self"]]],[11,"build","","Build a `WasiCtx`, consuming this `WasiCtxBuilder`.",12,[[],[["result",["wasictx","wasictxbuildererror"]],["wasictxbuildererror"],["wasictx"]]]],[11,"new","","Make a new `WasiCtx` with some default settings.",13,[[],[["result",["wasictxbuildererror"]],["wasictxbuildererror"]]]],[0,"wasi","","Types and constants shared between 32-bit and 64-bit wasi.…",null,null],[3,"__wasi_dirent_t","wasi_common::old::snapshot_0::wasi","",null,null],[12,"d_next","","",14,null],[12,"d_ino","","",14,null],[12,"d_namlen","","",14,null],[12,"d_type","","",14,null],[3,"__wasi_fdstat_t","","",null,null],[12,"fs_filetype","","",15,null],[12,"fs_flags","","",15,null],[12,"fs_rights_base","","",15,null],[12,"fs_rights_inheriting","","",15,null],[3,"__wasi_filestat_t","","",null,null],[12,"dev","","",16,null],[12,"ino","","",16,null],[12,"filetype","","",16,null],[12,"nlink","","",16,null],[12,"size","","",16,null],[12,"atim","","",16,null],[12,"mtim","","",16,null],[12,"ctim","","",16,null],[3,"__wasi_event_fd_readwrite_t","","",null,null],[12,"nbytes","","",17,null],[12,"flags","","",17,null],[3,"__wasi_event_t","","",null,null],[12,"userdata","","",18,null],[12,"error","","",18,null],[12,"type","","",18,null],[12,"fd_readwrite","","",18,null],[3,"__wasi_subscription_clock_t","","",null,null],[12,"identifier","","",19,null],[12,"id","","",19,null],[12,"timeout","","",19,null],[12,"precision","","",19,null],[12,"flags","","",19,null],[3,"__wasi_subscription_fd_readwrite_t","","",null,null],[12,"file_descriptor","","",20,null],[3,"__wasi_subscription_u_t","","",null,null],[12,"tag","","",21,null],[12,"u","","",21,null],[3,"__wasi_subscription_t","","",null,null],[12,"userdata","","",22,null],[12,"u","","",22,null],[19,"__wasi_subscription_u_u_t","","",null,null],[12,"clock","","",23,null],[12,"fd_read","","",23,null],[12,"fd_write","","",23,null],[4,"WasiError","","",null,null],[13,"ESUCCESS","","",24,null],[13,"E2BIG","","",24,null],[13,"EACCES","","",24,null],[13,"EADDRINUSE","","",24,null],[13,"EADDRNOTAVAIL","","",24,null],[13,"EAFNOSUPPORT","","",24,null],[13,"EAGAIN","","",24,null],[13,"EALREADY","","",24,null],[13,"EBADF","","",24,null],[13,"EBADMSG","","",24,null],[13,"EBUSY","","",24,null],[13,"ECANCELED","","",24,null],[13,"ECHILD","","",24,null],[13,"ECONNABORTED","","",24,null],[13,"ECONNREFUSED","","",24,null],[13,"ECONNRESET","","",24,null],[13,"EDEADLK","","",24,null],[13,"EDESTADDRREQ","","",24,null],[13,"EDOM","","",24,null],[13,"EDQUOT","","",24,null],[13,"EEXIST","","",24,null],[13,"EFAULT","","",24,null],[13,"EFBIG","","",24,null],[13,"EHOSTUNREACH","","",24,null],[13,"EIDRM","","",24,null],[13,"EILSEQ","","",24,null],[13,"EINPROGRESS","","",24,null],[13,"EINTR","","",24,null],[13,"EINVAL","","",24,null],[13,"EIO","","",24,null],[13,"EISCONN","","",24,null],[13,"EISDIR","","",24,null],[13,"ELOOP","","",24,null],[13,"EMFILE","","",24,null],[13,"EMLINK","","",24,null],[13,"EMSGSIZE","","",24,null],[13,"EMULTIHOP","","",24,null],[13,"ENAMETOOLONG","","",24,null],[13,"ENETDOWN","","",24,null],[13,"ENETRESET","","",24,null],[13,"ENETUNREACH","","",24,null],[13,"ENFILE","","",24,null],[13,"ENOBUFS","","",24,null],[13,"ENODEV","","",24,null],[13,"ENOENT","","",24,null],[13,"ENOEXEC","","",24,null],[13,"ENOLCK","","",24,null],[13,"ENOLINK","","",24,null],[13,"ENOMEM","","",24,null],[13,"ENOMSG","","",24,null],[13,"ENOPROTOOPT","","",24,null],[13,"ENOSPC","","",24,null],[13,"ENOSYS","","",24,null],[13,"ENOTCONN","","",24,null],[13,"ENOTDIR","","",24,null],[13,"ENOTEMPTY","","",24,null],[13,"ENOTRECOVERABLE","","",24,null],[13,"ENOTSOCK","","",24,null],[13,"ENOTSUP","","",24,null],[13,"ENOTTY","","",24,null],[13,"ENXIO","","",24,null],[13,"EOVERFLOW","","",24,null],[13,"EOWNERDEAD","","",24,null],[13,"EPERM","","",24,null],[13,"EPIPE","","",24,null],[13,"EPROTO","","",24,null],[13,"EPROTONOSUPPORT","","",24,null],[13,"EPROTOTYPE","","",24,null],[13,"ERANGE","","",24,null],[13,"EROFS","","",24,null],[13,"ESPIPE","","",24,null],[13,"ESRCH","","",24,null],[13,"ESTALE","","",24,null],[13,"ETIMEDOUT","","",24,null],[13,"ETXTBSY","","",24,null],[13,"EXDEV","","",24,null],[13,"ENOTCAPABLE","","",24,null],[5,"strerror","","",null,[[["__wasi_errno_t"]],["str"]]],[5,"whence_to_str","","",null,[[["__wasi_whence_t"]],["str"]]],[6,"__wasi_filesize_t","","",null,null],[6,"__wasi_timestamp_t","","",null,null],[6,"__wasi_clockid_t","","",null,null],[6,"__wasi_errno_t","","",null,null],[6,"__wasi_rights_t","","",null,null],[6,"__wasi_fd_t","","",null,null],[6,"__wasi_filedelta_t","","",null,null],[6,"__wasi_whence_t","","",null,null],[6,"__wasi_dircookie_t","","",null,null],[6,"__wasi_dirnamlen_t","","",null,null],[6,"__wasi_inode_t","","",null,null],[6,"__wasi_filetype_t","","",null,null],[6,"__wasi_advice_t","","",null,null],[6,"__wasi_fdflags_t","","",null,null],[6,"__wasi_device_t","","",null,null],[6,"__wasi_fstflags_t","","",null,null],[6,"__wasi_lookupflags_t","","",null,null],[6,"__wasi_oflags_t","","",null,null],[6,"__wasi_linkcount_t","","",null,null],[6,"__wasi_userdata_t","","",null,null],[6,"__wasi_eventtype_t","","",null,null],[6,"__wasi_eventrwflags_t","","",null,null],[6,"__wasi_subclockflags_t","","",null,null],[6,"__wasi_exitcode_t","","",null,null],[6,"__wasi_signal_t","","",null,null],[6,"__wasi_riflags_t","","",null,null],[6,"__wasi_roflags_t","","",null,null],[6,"__wasi_siflags_t","","",null,null],[6,"__wasi_sdflags_t","","",null,null],[6,"__wasi_preopentype_t","","",null,null],[6,"WasiResult","","",null,null],[17,"__WASI_CLOCKID_REALTIME","","",null,null],[17,"__WASI_CLOCKID_MONOTONIC","","",null,null],[17,"__WASI_CLOCKID_PROCESS_CPUTIME_ID","","",null,null],[17,"__WASI_CLOCKID_THREAD_CPUTIME_ID","","",null,null],[17,"__WASI_ERRNO_SUCCESS","","",null,null],[17,"__WASI_ERRNO_2BIG","","",null,null],[17,"__WASI_ERRNO_ACCES","","",null,null],[17,"__WASI_ERRNO_ADDRINUSE","","",null,null],[17,"__WASI_ERRNO_ADDRNOTAVAIL","","",null,null],[17,"__WASI_ERRNO_AFNOSUPPORT","","",null,null],[17,"__WASI_ERRNO_AGAIN","","",null,null],[17,"__WASI_ERRNO_ALREADY","","",null,null],[17,"__WASI_ERRNO_BADF","","",null,null],[17,"__WASI_ERRNO_BADMSG","","",null,null],[17,"__WASI_ERRNO_BUSY","","",null,null],[17,"__WASI_ERRNO_CANCELED","","",null,null],[17,"__WASI_ERRNO_CHILD","","",null,null],[17,"__WASI_ERRNO_CONNABORTED","","",null,null],[17,"__WASI_ERRNO_CONNREFUSED","","",null,null],[17,"__WASI_ERRNO_CONNRESET","","",null,null],[17,"__WASI_ERRNO_DEADLK","","",null,null],[17,"__WASI_ERRNO_DESTADDRREQ","","",null,null],[17,"__WASI_ERRNO_DOM","","",null,null],[17,"__WASI_ERRNO_DQUOT","","",null,null],[17,"__WASI_ERRNO_EXIST","","",null,null],[17,"__WASI_ERRNO_FAULT","","",null,null],[17,"__WASI_ERRNO_FBIG","","",null,null],[17,"__WASI_ERRNO_HOSTUNREACH","","",null,null],[17,"__WASI_ERRNO_IDRM","","",null,null],[17,"__WASI_ERRNO_ILSEQ","","",null,null],[17,"__WASI_ERRNO_INPROGRESS","","",null,null],[17,"__WASI_ERRNO_INTR","","",null,null],[17,"__WASI_ERRNO_INVAL","","",null,null],[17,"__WASI_ERRNO_IO","","",null,null],[17,"__WASI_ERRNO_ISCONN","","",null,null],[17,"__WASI_ERRNO_ISDIR","","",null,null],[17,"__WASI_ERRNO_LOOP","","",null,null],[17,"__WASI_ERRNO_MFILE","","",null,null],[17,"__WASI_ERRNO_MLINK","","",null,null],[17,"__WASI_ERRNO_MSGSIZE","","",null,null],[17,"__WASI_ERRNO_MULTIHOP","","",null,null],[17,"__WASI_ERRNO_NAMETOOLONG","","",null,null],[17,"__WASI_ERRNO_NETDOWN","","",null,null],[17,"__WASI_ERRNO_NETRESET","","",null,null],[17,"__WASI_ERRNO_NETUNREACH","","",null,null],[17,"__WASI_ERRNO_NFILE","","",null,null],[17,"__WASI_ERRNO_NOBUFS","","",null,null],[17,"__WASI_ERRNO_NODEV","","",null,null],[17,"__WASI_ERRNO_NOENT","","",null,null],[17,"__WASI_ERRNO_NOEXEC","","",null,null],[17,"__WASI_ERRNO_NOLCK","","",null,null],[17,"__WASI_ERRNO_NOLINK","","",null,null],[17,"__WASI_ERRNO_NOMEM","","",null,null],[17,"__WASI_ERRNO_NOMSG","","",null,null],[17,"__WASI_ERRNO_NOPROTOOPT","","",null,null],[17,"__WASI_ERRNO_NOSPC","","",null,null],[17,"__WASI_ERRNO_NOSYS","","",null,null],[17,"__WASI_ERRNO_NOTCONN","","",null,null],[17,"__WASI_ERRNO_NOTDIR","","",null,null],[17,"__WASI_ERRNO_NOTEMPTY","","",null,null],[17,"__WASI_ERRNO_NOTRECOVERABLE","","",null,null],[17,"__WASI_ERRNO_NOTSOCK","","",null,null],[17,"__WASI_ERRNO_NOTSUP","","",null,null],[17,"__WASI_ERRNO_NOTTY","","",null,null],[17,"__WASI_ERRNO_NXIO","","",null,null],[17,"__WASI_ERRNO_OVERFLOW","","",null,null],[17,"__WASI_ERRNO_OWNERDEAD","","",null,null],[17,"__WASI_ERRNO_PERM","","",null,null],[17,"__WASI_ERRNO_PIPE","","",null,null],[17,"__WASI_ERRNO_PROTO","","",null,null],[17,"__WASI_ERRNO_PROTONOSUPPORT","","",null,null],[17,"__WASI_ERRNO_PROTOTYPE","","",null,null],[17,"__WASI_ERRNO_RANGE","","",null,null],[17,"__WASI_ERRNO_ROFS","","",null,null],[17,"__WASI_ERRNO_SPIPE","","",null,null],[17,"__WASI_ERRNO_SRCH","","",null,null],[17,"__WASI_ERRNO_STALE","","",null,null],[17,"__WASI_ERRNO_TIMEDOUT","","",null,null],[17,"__WASI_ERRNO_TXTBSY","","",null,null],[17,"__WASI_ERRNO_XDEV","","",null,null],[17,"__WASI_ERRNO_NOTCAPABLE","","",null,null],[17,"__WASI_RIGHTS_FD_DATASYNC","","",null,null],[17,"__WASI_RIGHTS_FD_READ","","",null,null],[17,"__WASI_RIGHTS_FD_SEEK","","",null,null],[17,"__WASI_RIGHTS_FD_FDSTAT_SET_FLAGS","","",null,null],[17,"__WASI_RIGHTS_FD_SYNC","","",null,null],[17,"__WASI_RIGHTS_FD_TELL","","",null,null],[17,"__WASI_RIGHTS_FD_WRITE","","",null,null],[17,"__WASI_RIGHTS_FD_ADVISE","","",null,null],[17,"__WASI_RIGHTS_FD_ALLOCATE","","",null,null],[17,"__WASI_RIGHTS_PATH_CREATE_DIRECTORY","","",null,null],[17,"__WASI_RIGHTS_PATH_CREATE_FILE","","",null,null],[17,"__WASI_RIGHTS_PATH_LINK_SOURCE","","",null,null],[17,"__WASI_RIGHTS_PATH_LINK_TARGET","","",null,null],[17,"__WASI_RIGHTS_PATH_OPEN","","",null,null],[17,"__WASI_RIGHTS_FD_READDIR","","",null,null],[17,"__WASI_RIGHTS_PATH_READLINK","","",null,null],[17,"__WASI_RIGHTS_PATH_RENAME_SOURCE","","",null,null],[17,"__WASI_RIGHTS_PATH_RENAME_TARGET","","",null,null],[17,"__WASI_RIGHTS_PATH_FILESTAT_GET","","",null,null],[17,"__WASI_RIGHTS_PATH_FILESTAT_SET_SIZE","","",null,null],[17,"__WASI_RIGHTS_PATH_FILESTAT_SET_TIMES","","",null,null],[17,"__WASI_RIGHTS_FD_FILESTAT_GET","","",null,null],[17,"__WASI_RIGHTS_FD_FILESTAT_SET_SIZE","","",null,null],[17,"__WASI_RIGHTS_FD_FILESTAT_SET_TIMES","","",null,null],[17,"__WASI_RIGHTS_PATH_SYMLINK","","",null,null],[17,"__WASI_RIGHTS_PATH_REMOVE_DIRECTORY","","",null,null],[17,"__WASI_RIGHTS_PATH_UNLINK_FILE","","",null,null],[17,"__WASI_RIGHTS_POLL_FD_READWRITE","","",null,null],[17,"__WASI_RIGHTS_SOCK_SHUTDOWN","","",null,null],[17,"__WASI_WHENCE_CUR","","",null,null],[17,"__WASI_WHENCE_END","","",null,null],[17,"__WASI_WHENCE_SET","","",null,null],[17,"__WASI_FILETYPE_UNKNOWN","","",null,null],[17,"__WASI_FILETYPE_BLOCK_DEVICE","","",null,null],[17,"__WASI_FILETYPE_CHARACTER_DEVICE","","",null,null],[17,"__WASI_FILETYPE_DIRECTORY","","",null,null],[17,"__WASI_FILETYPE_REGULAR_FILE","","",null,null],[17,"__WASI_FILETYPE_SOCKET_DGRAM","","",null,null],[17,"__WASI_FILETYPE_SOCKET_STREAM","","",null,null],[17,"__WASI_FILETYPE_SYMBOLIC_LINK","","",null,null],[17,"__WASI_ADVICE_NORMAL","","",null,null],[17,"__WASI_ADVICE_SEQUENTIAL","","",null,null],[17,"__WASI_ADVICE_RANDOM","","",null,null],[17,"__WASI_ADVICE_WILLNEED","","",null,null],[17,"__WASI_ADVICE_DONTNEED","","",null,null],[17,"__WASI_ADVICE_NOREUSE","","",null,null],[17,"__WASI_FDFLAGS_APPEND","","",null,null],[17,"__WASI_FDFLAGS_DSYNC","","",null,null],[17,"__WASI_FDFLAGS_NONBLOCK","","",null,null],[17,"__WASI_FDFLAGS_RSYNC","","",null,null],[17,"__WASI_FDFLAGS_SYNC","","",null,null],[17,"__WASI_FSTFLAGS_ATIM","","",null,null],[17,"__WASI_FSTFLAGS_ATIM_NOW","","",null,null],[17,"__WASI_FSTFLAGS_MTIM","","",null,null],[17,"__WASI_FSTFLAGS_MTIM_NOW","","",null,null],[17,"__WASI_LOOKUPFLAGS_SYMLINK_FOLLOW","","",null,null],[17,"__WASI_OFLAGS_CREAT","","",null,null],[17,"__WASI_OFLAGS_DIRECTORY","","",null,null],[17,"__WASI_OFLAGS_EXCL","","",null,null],[17,"__WASI_OFLAGS_TRUNC","","",null,null],[17,"__WASI_EVENTTYPE_CLOCK","","",null,null],[17,"__WASI_EVENTTYPE_FD_READ","","",null,null],[17,"__WASI_EVENTTYPE_FD_WRITE","","",null,null],[17,"__WASI_EVENTRWFLAGS_FD_READWRITE_HANGUP","","",null,null],[17,"__WASI_SUBCLOCKFLAGS_SUBSCRIPTION_CLOCK_ABSTIME","","",null,null],[17,"__WASI_SIGNAL_NONE","","",null,null],[17,"__WASI_SIGNAL_HUP","","",null,null],[17,"__WASI_SIGNAL_INT","","",null,null],[17,"__WASI_SIGNAL_QUIT","","",null,null],[17,"__WASI_SIGNAL_ILL","","",null,null],[17,"__WASI_SIGNAL_TRAP","","",null,null],[17,"__WASI_SIGNAL_ABRT","","",null,null],[17,"__WASI_SIGNAL_BUS","","",null,null],[17,"__WASI_SIGNAL_FPE","","",null,null],[17,"__WASI_SIGNAL_KILL","","",null,null],[17,"__WASI_SIGNAL_USR1","","",null,null],[17,"__WASI_SIGNAL_SEGV","","",null,null],[17,"__WASI_SIGNAL_USR2","","",null,null],[17,"__WASI_SIGNAL_PIPE","","",null,null],[17,"__WASI_SIGNAL_ALRM","","",null,null],[17,"__WASI_SIGNAL_TERM","","",null,null],[17,"__WASI_SIGNAL_CHLD","","",null,null],[17,"__WASI_SIGNAL_CONT","","",null,null],[17,"__WASI_SIGNAL_STOP","","",null,null],[17,"__WASI_SIGNAL_TSTP","","",null,null],[17,"__WASI_SIGNAL_TTIN","","",null,null],[17,"__WASI_SIGNAL_TTOU","","",null,null],[17,"__WASI_SIGNAL_URG","","",null,null],[17,"__WASI_SIGNAL_XCPU","","",null,null],[17,"__WASI_SIGNAL_XFSZ","","",null,null],[17,"__WASI_SIGNAL_VTALRM","","",null,null],[17,"__WASI_SIGNAL_PROF","","",null,null],[17,"__WASI_SIGNAL_WINCH","","",null,null],[17,"__WASI_SIGNAL_POLL","","",null,null],[17,"__WASI_SIGNAL_PWR","","",null,null],[17,"__WASI_SIGNAL_SYS","","",null,null],[17,"__WASI_RIFLAGS_RECV_PEEK","","",null,null],[17,"__WASI_RIFLAGS_RECV_WAITALL","","",null,null],[17,"__WASI_ROFLAGS_RECV_DATA_TRUNCATED","","",null,null],[17,"__WASI_SDFLAGS_RD","","",null,null],[17,"__WASI_SDFLAGS_WR","","",null,null],[17,"__WASI_PREOPENTYPE_DIR","","",null,null],[17,"__WASI_DIRCOOKIE_START","","",null,null],[11,"as_raw_errno","","",24,[[],["__wasi_errno_t"]]],[0,"wasi32","wasi_common::old::snapshot_0","Types and constants specific to 32-bit wasi. These are…",null,null],[3,"__wasi_iovec_t","wasi_common::old::snapshot_0::wasi32","",null,null],[12,"buf","","",25,null],[12,"buf_len","","",25,null],[3,"__wasi_ciovec_t","","",null,null],[12,"buf","","",26,null],[12,"buf_len","","",26,null],[3,"__wasi_prestat_dir_t","","",null,null],[12,"pr_name_len","","",27,null],[3,"__wasi_prestat_t","","",null,null],[12,"tag","","",28,null],[12,"u","","",28,null],[19,"__wasi_prestat_u_t","","",null,null],[12,"dir","","",29,null],[6,"uintptr_t","","",null,null],[6,"size_t","","",null,null],[6,"__wasi_size_t","","",null,null],[6,"__wasi_iovec_array_t","","",null,null],[6,"__wasi_ciovec_array_t","","",null,null],[0,"hostcalls","wasi_common::old::snapshot_0","",null,null],[5,"args_get","wasi_common::old::snapshot_0::hostcalls","",null,[[["wasictx"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_args_get","","",null,[[["usize"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"args_sizes_get","","",null,[[["wasictx"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_args_sizes_get","","",null,[[["usize"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"environ_get","","",null,[[["wasictx"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_environ_get","","",null,[[["usize"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"environ_sizes_get","","",null,[[["wasictx"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_environ_sizes_get","","",null,[[["usize"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"clock_res_get","","",null,[[["wasictx"],["__wasi_clockid_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_clock_res_get","","",null,[[["usize"],["__wasi_clockid_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"clock_time_get","","",null,[[["__wasi_timestamp_t"],["wasictx"],["__wasi_clockid_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_clock_time_get","","",null,[[["usize"],["__wasi_timestamp_t"],["__wasi_clockid_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"fd_advise","","",null,[[["__wasi_filesize_t"],["wasictx"],["__wasi_fd_t"],["__wasi_advice_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_advise","","",null,[[["usize"],["__wasi_filesize_t"],["__wasi_fd_t"],["__wasi_advice_t"]],["__wasi_errno_t"]]],[5,"fd_allocate","","",null,[[["__wasi_filesize_t"],["wasictx"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_allocate","","",null,[[["usize"],["__wasi_filesize_t"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_close","","",null,[[["wasictx"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_close","","",null,[[["usize"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_datasync","","",null,[[["wasictx"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_datasync","","",null,[[["usize"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_fdstat_get","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_fdstat_get","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"fd_fdstat_set_flags","","",null,[[["__wasi_fdflags_t"],["wasictx"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_fdstat_set_flags","","",null,[[["usize"],["__wasi_fdflags_t"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_fdstat_set_rights","","",null,[[["wasictx"],["__wasi_fd_t"],["__wasi_rights_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_fdstat_set_rights","","",null,[[["usize"],["__wasi_fd_t"],["__wasi_rights_t"]],["__wasi_errno_t"]]],[5,"fd_filestat_get","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_filestat_get","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"fd_filestat_set_size","","",null,[[["__wasi_filesize_t"],["wasictx"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_filestat_set_size","","",null,[[["usize"],["__wasi_filesize_t"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_filestat_set_times","","",null,[[["__wasi_timestamp_t"],["__wasi_fstflags_t"],["wasictx"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_filestat_set_times","","",null,[[["usize"],["__wasi_timestamp_t"],["__wasi_fd_t"],["__wasi_fstflags_t"]],["__wasi_errno_t"]]],[5,"fd_pread","","",null,[[["size_t"],["__wasi_filesize_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_pread","","",null,[[["size_t"],["uintptr_t"],["usize"],["__wasi_filesize_t"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_prestat_get","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_prestat_get","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"fd_prestat_dir_name","","",null,[[["size_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_prestat_dir_name","","",null,[[["usize"],["__wasi_fd_t"],["size_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"fd_pwrite","","",null,[[["size_t"],["__wasi_filesize_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_pwrite","","",null,[[["size_t"],["uintptr_t"],["usize"],["__wasi_filesize_t"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_read","","",null,[[["size_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_read","","",null,[[["usize"],["__wasi_fd_t"],["size_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"fd_readdir","","",null,[[["size_t"],["__wasi_dircookie_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_readdir","","",null,[[["__wasi_dircookie_t"],["size_t"],["uintptr_t"],["usize"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_renumber","","",null,[[["wasictx"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_renumber","","",null,[[["usize"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_seek","","",null,[[["__wasi_whence_t"],["uintptr_t"],["wasictx"],["__wasi_fd_t"],["__wasi_filedelta_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_seek","","",null,[[["uintptr_t"],["usize"],["__wasi_fd_t"],["__wasi_whence_t"],["__wasi_filedelta_t"]],["__wasi_errno_t"]]],[5,"fd_sync","","",null,[[["wasictx"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_sync","","",null,[[["usize"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_tell","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_tell","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"fd_write","","",null,[[["size_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_fd_write","","",null,[[["usize"],["__wasi_fd_t"],["size_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"path_create_directory","","",null,[[["size_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_path_create_directory","","",null,[[["usize"],["__wasi_fd_t"],["size_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"path_filestat_get","","",null,[[["size_t"],["__wasi_lookupflags_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_path_filestat_get","","",null,[[["size_t"],["uintptr_t"],["usize"],["__wasi_lookupflags_t"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"path_filestat_set_times","","",null,[[["size_t"],["wasictx"],["uintptr_t"],["__wasi_lookupflags_t"],["__wasi_timestamp_t"],["__wasi_fstflags_t"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_path_filestat_set_times","","",null,[[["size_t"],["uintptr_t"],["usize"],["__wasi_lookupflags_t"],["__wasi_timestamp_t"],["__wasi_fd_t"],["__wasi_fstflags_t"]],["__wasi_errno_t"]]],[5,"path_link","","",null,[[["size_t"],["__wasi_lookupflags_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_path_link","","",null,[[["size_t"],["uintptr_t"],["usize"],["__wasi_lookupflags_t"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"path_open","","",null,[[["__wasi_fdflags_t"],["size_t"],["wasictx"],["uintptr_t"],["__wasi_lookupflags_t"],["__wasi_fd_t"],["__wasi_oflags_t"],["__wasi_rights_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_path_open","","",null,[[["__wasi_fdflags_t"],["size_t"],["uintptr_t"],["usize"],["__wasi_lookupflags_t"],["__wasi_fd_t"],["__wasi_oflags_t"],["__wasi_rights_t"]],["__wasi_errno_t"]]],[5,"path_readlink","","",null,[[["size_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_path_readlink","","",null,[[["usize"],["__wasi_fd_t"],["size_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"path_remove_directory","","",null,[[["size_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_path_remove_directory","","",null,[[["usize"],["__wasi_fd_t"],["size_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"path_rename","","",null,[[["size_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_path_rename","","",null,[[["usize"],["__wasi_fd_t"],["size_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"path_symlink","","",null,[[["__wasi_fd_t"],["wasictx"],["size_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_path_symlink","","",null,[[["usize"],["size_t"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"path_unlink_file","","",null,[[["size_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_path_unlink_file","","",null,[[["usize"],["__wasi_fd_t"],["size_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"poll_oneoff","","",null,[[["wasictx"],["size_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_poll_oneoff","","",null,[[["usize"],["size_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"proc_exit","","",null,[[["wasictx"],["__wasi_exitcode_t"]]]],[5,"old_wasi_common_proc_exit","","",null,[[["usize"],["__wasi_exitcode_t"]]]],[5,"proc_raise","","",null,[[["__wasi_signal_t"],["wasictx"]],["__wasi_errno_t"]]],[5,"old_wasi_common_proc_raise","","",null,[[["usize"],["__wasi_signal_t"]],["__wasi_errno_t"]]],[5,"sched_yield","","",null,[[["wasictx"]],["__wasi_errno_t"]]],[5,"old_wasi_common_sched_yield","","",null,[[["usize"]],["__wasi_errno_t"]]],[5,"random_get","","",null,[[["wasictx"],["size_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_random_get","","",null,[[["usize"],["size_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"sock_recv","","",null,[[["size_t"],["__wasi_riflags_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_sock_recv","","",null,[[["__wasi_riflags_t"],["size_t"],["uintptr_t"],["usize"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"sock_send","","",null,[[["size_t"],["__wasi_siflags_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_sock_send","","",null,[[["__wasi_siflags_t"],["size_t"],["uintptr_t"],["usize"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"sock_shutdown","","",null,[[["wasictx"],["__wasi_fd_t"],["__wasi_sdflags_t"]],["__wasi_errno_t"]]],[5,"old_wasi_common_sock_shutdown","","",null,[[["usize"],["__wasi_fd_t"],["__wasi_sdflags_t"]],["__wasi_errno_t"]]],[11,"empty_directory","wasi_common","",0,[[],["self"]]],[0,"wasi","","Types and constants shared between 32-bit and 64-bit wasi.…",null,null],[3,"__wasi_dirent_t","wasi_common::wasi","",null,null],[12,"d_next","","",30,null],[12,"d_ino","","",30,null],[12,"d_namlen","","",30,null],[12,"d_type","","",30,null],[3,"__wasi_fdstat_t","","",null,null],[12,"fs_filetype","","",31,null],[12,"fs_flags","","",31,null],[12,"fs_rights_base","","",31,null],[12,"fs_rights_inheriting","","",31,null],[3,"__wasi_filestat_t","","",null,null],[12,"dev","","",32,null],[12,"ino","","",32,null],[12,"filetype","","",32,null],[12,"nlink","","",32,null],[12,"size","","",32,null],[12,"atim","","",32,null],[12,"mtim","","",32,null],[12,"ctim","","",32,null],[3,"__wasi_event_fd_readwrite_t","","",null,null],[12,"nbytes","","",33,null],[12,"flags","","",33,null],[3,"__wasi_event_t","","",null,null],[12,"userdata","","",34,null],[12,"error","","",34,null],[12,"type","","",34,null],[12,"fd_readwrite","","",34,null],[3,"__wasi_subscription_clock_t","","",null,null],[12,"id","","",35,null],[12,"timeout","","",35,null],[12,"precision","","",35,null],[12,"flags","","",35,null],[3,"__wasi_subscription_fd_readwrite_t","","",null,null],[12,"file_descriptor","","",36,null],[3,"__wasi_subscription_u_t","","",null,null],[12,"tag","","",37,null],[12,"u","","",37,null],[3,"__wasi_subscription_t","","",null,null],[12,"userdata","","",38,null],[12,"u","","",38,null],[19,"__wasi_subscription_u_u_t","","",null,null],[12,"clock","","",39,null],[12,"fd_read","","",39,null],[12,"fd_write","","",39,null],[4,"WasiError","","",null,null],[13,"ESUCCESS","","",40,null],[13,"E2BIG","","",40,null],[13,"EACCES","","",40,null],[13,"EADDRINUSE","","",40,null],[13,"EADDRNOTAVAIL","","",40,null],[13,"EAFNOSUPPORT","","",40,null],[13,"EAGAIN","","",40,null],[13,"EALREADY","","",40,null],[13,"EBADF","","",40,null],[13,"EBADMSG","","",40,null],[13,"EBUSY","","",40,null],[13,"ECANCELED","","",40,null],[13,"ECHILD","","",40,null],[13,"ECONNABORTED","","",40,null],[13,"ECONNREFUSED","","",40,null],[13,"ECONNRESET","","",40,null],[13,"EDEADLK","","",40,null],[13,"EDESTADDRREQ","","",40,null],[13,"EDOM","","",40,null],[13,"EDQUOT","","",40,null],[13,"EEXIST","","",40,null],[13,"EFAULT","","",40,null],[13,"EFBIG","","",40,null],[13,"EHOSTUNREACH","","",40,null],[13,"EIDRM","","",40,null],[13,"EILSEQ","","",40,null],[13,"EINPROGRESS","","",40,null],[13,"EINTR","","",40,null],[13,"EINVAL","","",40,null],[13,"EIO","","",40,null],[13,"EISCONN","","",40,null],[13,"EISDIR","","",40,null],[13,"ELOOP","","",40,null],[13,"EMFILE","","",40,null],[13,"EMLINK","","",40,null],[13,"EMSGSIZE","","",40,null],[13,"EMULTIHOP","","",40,null],[13,"ENAMETOOLONG","","",40,null],[13,"ENETDOWN","","",40,null],[13,"ENETRESET","","",40,null],[13,"ENETUNREACH","","",40,null],[13,"ENFILE","","",40,null],[13,"ENOBUFS","","",40,null],[13,"ENODEV","","",40,null],[13,"ENOENT","","",40,null],[13,"ENOEXEC","","",40,null],[13,"ENOLCK","","",40,null],[13,"ENOLINK","","",40,null],[13,"ENOMEM","","",40,null],[13,"ENOMSG","","",40,null],[13,"ENOPROTOOPT","","",40,null],[13,"ENOSPC","","",40,null],[13,"ENOSYS","","",40,null],[13,"ENOTCONN","","",40,null],[13,"ENOTDIR","","",40,null],[13,"ENOTEMPTY","","",40,null],[13,"ENOTRECOVERABLE","","",40,null],[13,"ENOTSOCK","","",40,null],[13,"ENOTSUP","","",40,null],[13,"ENOTTY","","",40,null],[13,"ENXIO","","",40,null],[13,"EOVERFLOW","","",40,null],[13,"EOWNERDEAD","","",40,null],[13,"EPERM","","",40,null],[13,"EPIPE","","",40,null],[13,"EPROTO","","",40,null],[13,"EPROTONOSUPPORT","","",40,null],[13,"EPROTOTYPE","","",40,null],[13,"ERANGE","","",40,null],[13,"EROFS","","",40,null],[13,"ESPIPE","","",40,null],[13,"ESRCH","","",40,null],[13,"ESTALE","","",40,null],[13,"ETIMEDOUT","","",40,null],[13,"ETXTBSY","","",40,null],[13,"EXDEV","","",40,null],[13,"ENOTCAPABLE","","",40,null],[5,"strerror","","",null,[[["__wasi_errno_t"]],["str"]]],[5,"whence_to_str","","",null,[[["__wasi_whence_t"]],["str"]]],[6,"__wasi_filesize_t","","",null,null],[6,"__wasi_timestamp_t","","",null,null],[6,"__wasi_clockid_t","","",null,null],[6,"__wasi_errno_t","","",null,null],[6,"__wasi_rights_t","","",null,null],[6,"__wasi_fd_t","","",null,null],[6,"__wasi_filedelta_t","","",null,null],[6,"__wasi_whence_t","","",null,null],[6,"__wasi_dircookie_t","","",null,null],[6,"__wasi_dirnamlen_t","","",null,null],[6,"__wasi_inode_t","","",null,null],[6,"__wasi_filetype_t","","",null,null],[6,"__wasi_advice_t","","",null,null],[6,"__wasi_fdflags_t","","",null,null],[6,"__wasi_device_t","","",null,null],[6,"__wasi_fstflags_t","","",null,null],[6,"__wasi_lookupflags_t","","",null,null],[6,"__wasi_oflags_t","","",null,null],[6,"__wasi_linkcount_t","","",null,null],[6,"__wasi_userdata_t","","",null,null],[6,"__wasi_eventtype_t","","",null,null],[6,"__wasi_eventrwflags_t","","",null,null],[6,"__wasi_subclockflags_t","","",null,null],[6,"__wasi_exitcode_t","","",null,null],[6,"__wasi_signal_t","","",null,null],[6,"__wasi_riflags_t","","",null,null],[6,"__wasi_roflags_t","","",null,null],[6,"__wasi_siflags_t","","",null,null],[6,"__wasi_sdflags_t","","",null,null],[6,"__wasi_preopentype_t","","",null,null],[6,"WasiResult","","",null,null],[17,"__WASI_CLOCKID_REALTIME","","",null,null],[17,"__WASI_CLOCKID_MONOTONIC","","",null,null],[17,"__WASI_CLOCKID_PROCESS_CPUTIME_ID","","",null,null],[17,"__WASI_CLOCKID_THREAD_CPUTIME_ID","","",null,null],[17,"__WASI_ERRNO_SUCCESS","","",null,null],[17,"__WASI_ERRNO_2BIG","","",null,null],[17,"__WASI_ERRNO_ACCES","","",null,null],[17,"__WASI_ERRNO_ADDRINUSE","","",null,null],[17,"__WASI_ERRNO_ADDRNOTAVAIL","","",null,null],[17,"__WASI_ERRNO_AFNOSUPPORT","","",null,null],[17,"__WASI_ERRNO_AGAIN","","",null,null],[17,"__WASI_ERRNO_ALREADY","","",null,null],[17,"__WASI_ERRNO_BADF","","",null,null],[17,"__WASI_ERRNO_BADMSG","","",null,null],[17,"__WASI_ERRNO_BUSY","","",null,null],[17,"__WASI_ERRNO_CANCELED","","",null,null],[17,"__WASI_ERRNO_CHILD","","",null,null],[17,"__WASI_ERRNO_CONNABORTED","","",null,null],[17,"__WASI_ERRNO_CONNREFUSED","","",null,null],[17,"__WASI_ERRNO_CONNRESET","","",null,null],[17,"__WASI_ERRNO_DEADLK","","",null,null],[17,"__WASI_ERRNO_DESTADDRREQ","","",null,null],[17,"__WASI_ERRNO_DOM","","",null,null],[17,"__WASI_ERRNO_DQUOT","","",null,null],[17,"__WASI_ERRNO_EXIST","","",null,null],[17,"__WASI_ERRNO_FAULT","","",null,null],[17,"__WASI_ERRNO_FBIG","","",null,null],[17,"__WASI_ERRNO_HOSTUNREACH","","",null,null],[17,"__WASI_ERRNO_IDRM","","",null,null],[17,"__WASI_ERRNO_ILSEQ","","",null,null],[17,"__WASI_ERRNO_INPROGRESS","","",null,null],[17,"__WASI_ERRNO_INTR","","",null,null],[17,"__WASI_ERRNO_INVAL","","",null,null],[17,"__WASI_ERRNO_IO","","",null,null],[17,"__WASI_ERRNO_ISCONN","","",null,null],[17,"__WASI_ERRNO_ISDIR","","",null,null],[17,"__WASI_ERRNO_LOOP","","",null,null],[17,"__WASI_ERRNO_MFILE","","",null,null],[17,"__WASI_ERRNO_MLINK","","",null,null],[17,"__WASI_ERRNO_MSGSIZE","","",null,null],[17,"__WASI_ERRNO_MULTIHOP","","",null,null],[17,"__WASI_ERRNO_NAMETOOLONG","","",null,null],[17,"__WASI_ERRNO_NETDOWN","","",null,null],[17,"__WASI_ERRNO_NETRESET","","",null,null],[17,"__WASI_ERRNO_NETUNREACH","","",null,null],[17,"__WASI_ERRNO_NFILE","","",null,null],[17,"__WASI_ERRNO_NOBUFS","","",null,null],[17,"__WASI_ERRNO_NODEV","","",null,null],[17,"__WASI_ERRNO_NOENT","","",null,null],[17,"__WASI_ERRNO_NOEXEC","","",null,null],[17,"__WASI_ERRNO_NOLCK","","",null,null],[17,"__WASI_ERRNO_NOLINK","","",null,null],[17,"__WASI_ERRNO_NOMEM","","",null,null],[17,"__WASI_ERRNO_NOMSG","","",null,null],[17,"__WASI_ERRNO_NOPROTOOPT","","",null,null],[17,"__WASI_ERRNO_NOSPC","","",null,null],[17,"__WASI_ERRNO_NOSYS","","",null,null],[17,"__WASI_ERRNO_NOTCONN","","",null,null],[17,"__WASI_ERRNO_NOTDIR","","",null,null],[17,"__WASI_ERRNO_NOTEMPTY","","",null,null],[17,"__WASI_ERRNO_NOTRECOVERABLE","","",null,null],[17,"__WASI_ERRNO_NOTSOCK","","",null,null],[17,"__WASI_ERRNO_NOTSUP","","",null,null],[17,"__WASI_ERRNO_NOTTY","","",null,null],[17,"__WASI_ERRNO_NXIO","","",null,null],[17,"__WASI_ERRNO_OVERFLOW","","",null,null],[17,"__WASI_ERRNO_OWNERDEAD","","",null,null],[17,"__WASI_ERRNO_PERM","","",null,null],[17,"__WASI_ERRNO_PIPE","","",null,null],[17,"__WASI_ERRNO_PROTO","","",null,null],[17,"__WASI_ERRNO_PROTONOSUPPORT","","",null,null],[17,"__WASI_ERRNO_PROTOTYPE","","",null,null],[17,"__WASI_ERRNO_RANGE","","",null,null],[17,"__WASI_ERRNO_ROFS","","",null,null],[17,"__WASI_ERRNO_SPIPE","","",null,null],[17,"__WASI_ERRNO_SRCH","","",null,null],[17,"__WASI_ERRNO_STALE","","",null,null],[17,"__WASI_ERRNO_TIMEDOUT","","",null,null],[17,"__WASI_ERRNO_TXTBSY","","",null,null],[17,"__WASI_ERRNO_XDEV","","",null,null],[17,"__WASI_ERRNO_NOTCAPABLE","","",null,null],[17,"__WASI_RIGHTS_FD_DATASYNC","","",null,null],[17,"__WASI_RIGHTS_FD_READ","","",null,null],[17,"__WASI_RIGHTS_FD_SEEK","","",null,null],[17,"__WASI_RIGHTS_FD_FDSTAT_SET_FLAGS","","",null,null],[17,"__WASI_RIGHTS_FD_SYNC","","",null,null],[17,"__WASI_RIGHTS_FD_TELL","","",null,null],[17,"__WASI_RIGHTS_FD_WRITE","","",null,null],[17,"__WASI_RIGHTS_FD_ADVISE","","",null,null],[17,"__WASI_RIGHTS_FD_ALLOCATE","","",null,null],[17,"__WASI_RIGHTS_PATH_CREATE_DIRECTORY","","",null,null],[17,"__WASI_RIGHTS_PATH_CREATE_FILE","","",null,null],[17,"__WASI_RIGHTS_PATH_LINK_SOURCE","","",null,null],[17,"__WASI_RIGHTS_PATH_LINK_TARGET","","",null,null],[17,"__WASI_RIGHTS_PATH_OPEN","","",null,null],[17,"__WASI_RIGHTS_FD_READDIR","","",null,null],[17,"__WASI_RIGHTS_PATH_READLINK","","",null,null],[17,"__WASI_RIGHTS_PATH_RENAME_SOURCE","","",null,null],[17,"__WASI_RIGHTS_PATH_RENAME_TARGET","","",null,null],[17,"__WASI_RIGHTS_PATH_FILESTAT_GET","","",null,null],[17,"__WASI_RIGHTS_PATH_FILESTAT_SET_SIZE","","",null,null],[17,"__WASI_RIGHTS_PATH_FILESTAT_SET_TIMES","","",null,null],[17,"__WASI_RIGHTS_FD_FILESTAT_GET","","",null,null],[17,"__WASI_RIGHTS_FD_FILESTAT_SET_SIZE","","",null,null],[17,"__WASI_RIGHTS_FD_FILESTAT_SET_TIMES","","",null,null],[17,"__WASI_RIGHTS_PATH_SYMLINK","","",null,null],[17,"__WASI_RIGHTS_PATH_REMOVE_DIRECTORY","","",null,null],[17,"__WASI_RIGHTS_PATH_UNLINK_FILE","","",null,null],[17,"__WASI_RIGHTS_POLL_FD_READWRITE","","",null,null],[17,"__WASI_RIGHTS_SOCK_SHUTDOWN","","",null,null],[17,"__WASI_WHENCE_SET","","",null,null],[17,"__WASI_WHENCE_CUR","","",null,null],[17,"__WASI_WHENCE_END","","",null,null],[17,"__WASI_FILETYPE_UNKNOWN","","",null,null],[17,"__WASI_FILETYPE_BLOCK_DEVICE","","",null,null],[17,"__WASI_FILETYPE_CHARACTER_DEVICE","","",null,null],[17,"__WASI_FILETYPE_DIRECTORY","","",null,null],[17,"__WASI_FILETYPE_REGULAR_FILE","","",null,null],[17,"__WASI_FILETYPE_SOCKET_DGRAM","","",null,null],[17,"__WASI_FILETYPE_SOCKET_STREAM","","",null,null],[17,"__WASI_FILETYPE_SYMBOLIC_LINK","","",null,null],[17,"__WASI_ADVICE_NORMAL","","",null,null],[17,"__WASI_ADVICE_SEQUENTIAL","","",null,null],[17,"__WASI_ADVICE_RANDOM","","",null,null],[17,"__WASI_ADVICE_WILLNEED","","",null,null],[17,"__WASI_ADVICE_DONTNEED","","",null,null],[17,"__WASI_ADVICE_NOREUSE","","",null,null],[17,"__WASI_FDFLAGS_APPEND","","",null,null],[17,"__WASI_FDFLAGS_DSYNC","","",null,null],[17,"__WASI_FDFLAGS_NONBLOCK","","",null,null],[17,"__WASI_FDFLAGS_RSYNC","","",null,null],[17,"__WASI_FDFLAGS_SYNC","","",null,null],[17,"__WASI_FSTFLAGS_ATIM","","",null,null],[17,"__WASI_FSTFLAGS_ATIM_NOW","","",null,null],[17,"__WASI_FSTFLAGS_MTIM","","",null,null],[17,"__WASI_FSTFLAGS_MTIM_NOW","","",null,null],[17,"__WASI_LOOKUPFLAGS_SYMLINK_FOLLOW","","",null,null],[17,"__WASI_OFLAGS_CREAT","","",null,null],[17,"__WASI_OFLAGS_DIRECTORY","","",null,null],[17,"__WASI_OFLAGS_EXCL","","",null,null],[17,"__WASI_OFLAGS_TRUNC","","",null,null],[17,"__WASI_EVENTTYPE_CLOCK","","",null,null],[17,"__WASI_EVENTTYPE_FD_READ","","",null,null],[17,"__WASI_EVENTTYPE_FD_WRITE","","",null,null],[17,"__WASI_EVENTRWFLAGS_FD_READWRITE_HANGUP","","",null,null],[17,"__WASI_SUBCLOCKFLAGS_SUBSCRIPTION_CLOCK_ABSTIME","","",null,null],[17,"__WASI_SIGNAL_NONE","","",null,null],[17,"__WASI_SIGNAL_HUP","","",null,null],[17,"__WASI_SIGNAL_INT","","",null,null],[17,"__WASI_SIGNAL_QUIT","","",null,null],[17,"__WASI_SIGNAL_ILL","","",null,null],[17,"__WASI_SIGNAL_TRAP","","",null,null],[17,"__WASI_SIGNAL_ABRT","","",null,null],[17,"__WASI_SIGNAL_BUS","","",null,null],[17,"__WASI_SIGNAL_FPE","","",null,null],[17,"__WASI_SIGNAL_KILL","","",null,null],[17,"__WASI_SIGNAL_USR1","","",null,null],[17,"__WASI_SIGNAL_SEGV","","",null,null],[17,"__WASI_SIGNAL_USR2","","",null,null],[17,"__WASI_SIGNAL_PIPE","","",null,null],[17,"__WASI_SIGNAL_ALRM","","",null,null],[17,"__WASI_SIGNAL_TERM","","",null,null],[17,"__WASI_SIGNAL_CHLD","","",null,null],[17,"__WASI_SIGNAL_CONT","","",null,null],[17,"__WASI_SIGNAL_STOP","","",null,null],[17,"__WASI_SIGNAL_TSTP","","",null,null],[17,"__WASI_SIGNAL_TTIN","","",null,null],[17,"__WASI_SIGNAL_TTOU","","",null,null],[17,"__WASI_SIGNAL_URG","","",null,null],[17,"__WASI_SIGNAL_XCPU","","",null,null],[17,"__WASI_SIGNAL_XFSZ","","",null,null],[17,"__WASI_SIGNAL_VTALRM","","",null,null],[17,"__WASI_SIGNAL_PROF","","",null,null],[17,"__WASI_SIGNAL_WINCH","","",null,null],[17,"__WASI_SIGNAL_POLL","","",null,null],[17,"__WASI_SIGNAL_PWR","","",null,null],[17,"__WASI_SIGNAL_SYS","","",null,null],[17,"__WASI_RIFLAGS_RECV_PEEK","","",null,null],[17,"__WASI_RIFLAGS_RECV_WAITALL","","",null,null],[17,"__WASI_ROFLAGS_RECV_DATA_TRUNCATED","","",null,null],[17,"__WASI_SDFLAGS_RD","","",null,null],[17,"__WASI_SDFLAGS_WR","","",null,null],[17,"__WASI_PREOPENTYPE_DIR","","",null,null],[17,"__WASI_DIRCOOKIE_START","","",null,null],[11,"as_raw_errno","","",40,[[],["__wasi_errno_t"]]],[0,"wasi32","wasi_common","Types and constants specific to 32-bit wasi. These are…",null,null],[3,"__wasi_iovec_t","wasi_common::wasi32","",null,null],[12,"buf","","",41,null],[12,"buf_len","","",41,null],[3,"__wasi_ciovec_t","","",null,null],[12,"buf","","",42,null],[12,"buf_len","","",42,null],[3,"__wasi_prestat_dir_t","","",null,null],[12,"pr_name_len","","",43,null],[3,"__wasi_prestat_t","","",null,null],[12,"tag","","",44,null],[12,"u","","",44,null],[19,"__wasi_prestat_u_t","","",null,null],[12,"dir","","",45,null],[6,"uintptr_t","","",null,null],[6,"size_t","","",null,null],[6,"__wasi_size_t","","",null,null],[6,"__wasi_iovec_array_t","","",null,null],[6,"__wasi_ciovec_array_t","","",null,null],[0,"hostcalls","wasi_common","",null,null],[5,"args_get","wasi_common::hostcalls","",null,[[["wasictx"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"wasi_common_args_get","","",null,[[["usize"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"args_sizes_get","","",null,[[["wasictx"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"wasi_common_args_sizes_get","","",null,[[["usize"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"environ_get","","",null,[[["wasictx"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"wasi_common_environ_get","","",null,[[["usize"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"environ_sizes_get","","",null,[[["wasictx"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"wasi_common_environ_sizes_get","","",null,[[["usize"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"clock_res_get","","",null,[[["__wasi_clockid_t"],["wasictx"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"wasi_common_clock_res_get","","",null,[[["__wasi_clockid_t"],["usize"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"clock_time_get","","",null,[[["__wasi_clockid_t"],["wasictx"],["__wasi_timestamp_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"wasi_common_clock_time_get","","",null,[[["__wasi_clockid_t"],["usize"],["__wasi_timestamp_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"fd_advise","","",null,[[["wasictx"],["__wasi_fd_t"],["__wasi_filesize_t"],["__wasi_advice_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_advise","","",null,[[["usize"],["__wasi_fd_t"],["__wasi_filesize_t"],["__wasi_advice_t"]],["__wasi_errno_t"]]],[5,"fd_allocate","","",null,[[["wasictx"],["__wasi_fd_t"],["__wasi_filesize_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_allocate","","",null,[[["usize"],["__wasi_fd_t"],["__wasi_filesize_t"]],["__wasi_errno_t"]]],[5,"fd_close","","",null,[[["__wasi_fd_t"],["wasictx"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_close","","",null,[[["usize"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_datasync","","",null,[[["__wasi_fd_t"],["wasictx"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_datasync","","",null,[[["usize"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_fdstat_get","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_fdstat_get","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"fd_fdstat_set_flags","","",null,[[["wasictx"],["__wasi_fd_t"],["__wasi_fdflags_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_fdstat_set_flags","","",null,[[["usize"],["__wasi_fd_t"],["__wasi_fdflags_t"]],["__wasi_errno_t"]]],[5,"fd_fdstat_set_rights","","",null,[[["wasictx"],["__wasi_fd_t"],["__wasi_rights_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_fdstat_set_rights","","",null,[[["usize"],["__wasi_fd_t"],["__wasi_rights_t"]],["__wasi_errno_t"]]],[5,"fd_filestat_get","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_filestat_get","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"fd_filestat_set_size","","",null,[[["wasictx"],["__wasi_fd_t"],["__wasi_filesize_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_filestat_set_size","","",null,[[["usize"],["__wasi_fd_t"],["__wasi_filesize_t"]],["__wasi_errno_t"]]],[5,"fd_filestat_set_times","","",null,[[["__wasi_fstflags_t"],["wasictx"],["__wasi_fd_t"],["__wasi_timestamp_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_filestat_set_times","","",null,[[["usize"],["__wasi_fd_t"],["__wasi_timestamp_t"],["__wasi_fstflags_t"]],["__wasi_errno_t"]]],[5,"fd_pread","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"],["__wasi_filesize_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_pread","","",null,[[["__wasi_fd_t"],["size_t"],["usize"],["uintptr_t"],["__wasi_filesize_t"]],["__wasi_errno_t"]]],[5,"fd_prestat_get","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_prestat_get","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"fd_prestat_dir_name","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_prestat_dir_name","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"fd_pwrite","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"],["__wasi_filesize_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_pwrite","","",null,[[["__wasi_fd_t"],["size_t"],["usize"],["uintptr_t"],["__wasi_filesize_t"]],["__wasi_errno_t"]]],[5,"fd_read","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_read","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"fd_readdir","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"],["__wasi_dircookie_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_readdir","","",null,[[["__wasi_fd_t"],["size_t"],["usize"],["uintptr_t"],["__wasi_dircookie_t"]],["__wasi_errno_t"]]],[5,"fd_renumber","","",null,[[["wasictx"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_renumber","","",null,[[["usize"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_seek","","",null,[[["wasictx"],["__wasi_fd_t"],["__wasi_whence_t"],["uintptr_t"],["__wasi_filedelta_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_seek","","",null,[[["usize"],["__wasi_fd_t"],["__wasi_whence_t"],["uintptr_t"],["__wasi_filedelta_t"]],["__wasi_errno_t"]]],[5,"fd_sync","","",null,[[["__wasi_fd_t"],["wasictx"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_sync","","",null,[[["usize"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"fd_tell","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_tell","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"fd_write","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"wasi_common_fd_write","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"path_create_directory","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"wasi_common_path_create_directory","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"path_filestat_get","","",null,[[["__wasi_lookupflags_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"wasi_common_path_filestat_get","","",null,[[["__wasi_fd_t"],["size_t"],["__wasi_lookupflags_t"],["usize"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"path_filestat_set_times","","",null,[[["__wasi_timestamp_t"],["__wasi_fd_t"],["size_t"],["__wasi_lookupflags_t"],["__wasi_fstflags_t"],["wasictx"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"wasi_common_path_filestat_set_times","","",null,[[["__wasi_timestamp_t"],["__wasi_fd_t"],["size_t"],["__wasi_lookupflags_t"],["__wasi_fstflags_t"],["usize"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"path_link","","",null,[[["__wasi_lookupflags_t"],["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"wasi_common_path_link","","",null,[[["__wasi_fd_t"],["size_t"],["__wasi_lookupflags_t"],["usize"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"path_open","","",null,[[["__wasi_oflags_t"],["__wasi_fd_t"],["size_t"],["__wasi_fdflags_t"],["__wasi_lookupflags_t"],["wasictx"],["uintptr_t"],["__wasi_rights_t"]],["__wasi_errno_t"]]],[5,"wasi_common_path_open","","",null,[[["__wasi_oflags_t"],["__wasi_fd_t"],["size_t"],["__wasi_fdflags_t"],["__wasi_lookupflags_t"],["usize"],["uintptr_t"],["__wasi_rights_t"]],["__wasi_errno_t"]]],[5,"path_readlink","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"wasi_common_path_readlink","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"path_remove_directory","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"wasi_common_path_remove_directory","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"path_rename","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"wasi_common_path_rename","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"path_symlink","","",null,[[["wasictx"],["uintptr_t"],["size_t"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"wasi_common_path_symlink","","",null,[[["usize"],["uintptr_t"],["size_t"],["__wasi_fd_t"]],["__wasi_errno_t"]]],[5,"path_unlink_file","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"wasi_common_path_unlink_file","","",null,[[["usize"],["__wasi_fd_t"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"poll_oneoff","","",null,[[["wasictx"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"wasi_common_poll_oneoff","","",null,[[["usize"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"proc_exit","","",null,[[["__wasi_exitcode_t"],["wasictx"]]]],[5,"wasi_common_proc_exit","","",null,[[["usize"],["__wasi_exitcode_t"]]]],[5,"proc_raise","","",null,[[["__wasi_signal_t"],["wasictx"]],["__wasi_errno_t"]]],[5,"wasi_common_proc_raise","","",null,[[["usize"],["__wasi_signal_t"]],["__wasi_errno_t"]]],[5,"sched_yield","","",null,[[["wasictx"]],["__wasi_errno_t"]]],[5,"wasi_common_sched_yield","","",null,[[["usize"]],["__wasi_errno_t"]]],[5,"random_get","","",null,[[["wasictx"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"wasi_common_random_get","","",null,[[["usize"],["uintptr_t"],["size_t"]],["__wasi_errno_t"]]],[5,"sock_recv","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"],["__wasi_riflags_t"]],["__wasi_errno_t"]]],[5,"wasi_common_sock_recv","","",null,[[["__wasi_fd_t"],["size_t"],["usize"],["uintptr_t"],["__wasi_riflags_t"]],["__wasi_errno_t"]]],[5,"sock_send","","",null,[[["wasictx"],["__wasi_fd_t"],["uintptr_t"],["size_t"],["__wasi_siflags_t"]],["__wasi_errno_t"]]],[5,"wasi_common_sock_send","","",null,[[["__wasi_siflags_t"],["__wasi_fd_t"],["size_t"],["usize"],["uintptr_t"]],["__wasi_errno_t"]]],[5,"sock_shutdown","","",null,[[["wasictx"],["__wasi_fd_t"],["__wasi_sdflags_t"]],["__wasi_errno_t"]]],[5,"wasi_common_sock_shutdown","","",null,[[["usize"],["__wasi_fd_t"],["__wasi_sdflags_t"]],["__wasi_errno_t"]]],[8,"FileContents","wasi_common","",null,null],[10,"max_size","","The implementation-defined maximum size of the store…",46,[[["self"]],["__wasi_filesize_t"]]],[10,"size","","The current number of bytes this `FileContents` describes.",46,[[["self"]],["__wasi_filesize_t"]]],[10,"resize","","Resize to hold `new_size` number of bytes, or error if…",46,[[["self"],["__wasi_filesize_t"]],["wasiresult"]]],[10,"pwritev","","Write a list of `IoSlice` starting at `offset`. `offset`…",46,[[["self"],["__wasi_filesize_t"]],[["wasiresult",["usize"]],["usize"]]]],[10,"preadv","","Read from the file from `offset`, filling a list of…",46,[[["__wasi_filesize_t"],["self"]],[["wasiresult",["usize"]],["usize"]]]],[10,"pwrite","","Write contents from `buf` to this file starting at…",46,[[["self"],["__wasi_filesize_t"]],[["wasiresult",["usize"]],["usize"]]]],[10,"pread","","Read from the file at `offset`, filling `buf`. The…",46,[[["__wasi_filesize_t"],["self"]],[["wasiresult",["usize"]],["usize"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","wasi_common::fs","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"into_iter","","",11,[[],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","wasi_common::old::snapshot_0","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","wasi_common::old::snapshot_0::wasi","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","wasi_common::old::snapshot_0::wasi32","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","wasi_common::wasi","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","wasi_common::wasi32","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"drop","wasi_common::fs","",3,[[["self"]]]],[11,"drop","","",6,[[["self"]]]],[11,"from","wasi_common::old::snapshot_0::wasi","",24,[[["error"]],["self"]]],[11,"from","","",24,[[["infallible"]],["self"]]],[11,"from","","",24,[[["tryfrominterror"]],["self"]]],[11,"from","","",24,[[["utf8error"]],["self"]]],[11,"from","wasi_common::wasi","",40,[[["error"]],["self"]]],[11,"from","","",40,[[["infallible"]],["self"]]],[11,"from","","",40,[[["tryfrominterror"]],["self"]]],[11,"from","","",40,[[["utf8error"]],["self"]]],[11,"next","wasi_common::fs","TODO: Not yet implemented.",11,[[["self"]],["option"]]],[11,"clone","","",7,[[["self"]],["filetype"]]],[11,"clone","","",8,[[["self"]],["metadata"]]],[11,"clone","","",10,[[["self"]],["permissions"]]],[11,"clone","wasi_common::old::snapshot_0::wasi","",14,[[["self"]],["__wasi_dirent_t"]]],[11,"clone","","",15,[[["self"]],["__wasi_fdstat_t"]]],[11,"clone","","",16,[[["self"]],["__wasi_filestat_t"]]],[11,"clone","","",17,[[["self"]],["__wasi_event_fd_readwrite_t"]]],[11,"clone","","",18,[[["self"]],["__wasi_event_t"]]],[11,"clone","","",19,[[["self"]],["__wasi_subscription_clock_t"]]],[11,"clone","","",20,[[["self"]],["__wasi_subscription_fd_readwrite_t"]]],[11,"clone","","",23,[[["self"]],["__wasi_subscription_u_u_t"]]],[11,"clone","","",21,[[["self"]],["__wasi_subscription_u_t"]]],[11,"clone","","",22,[[["self"]],["__wasi_subscription_t"]]],[11,"clone","","",24,[[["self"]],["wasierror"]]],[11,"clone","wasi_common::old::snapshot_0::wasi32","",25,[[["self"]],["__wasi_iovec_t"]]],[11,"clone","","",26,[[["self"]],["__wasi_ciovec_t"]]],[11,"clone","","",27,[[["self"]],["__wasi_prestat_dir_t"]]],[11,"clone","","",29,[[["self"]],["__wasi_prestat_u_t"]]],[11,"clone","","",28,[[["self"]],["__wasi_prestat_t"]]],[11,"clone","wasi_common::wasi","",30,[[["self"]],["__wasi_dirent_t"]]],[11,"clone","","",31,[[["self"]],["__wasi_fdstat_t"]]],[11,"clone","","",32,[[["self"]],["__wasi_filestat_t"]]],[11,"clone","","",33,[[["self"]],["__wasi_event_fd_readwrite_t"]]],[11,"clone","","",34,[[["self"]],["__wasi_event_t"]]],[11,"clone","","",35,[[["self"]],["__wasi_subscription_clock_t"]]],[11,"clone","","",36,[[["self"]],["__wasi_subscription_fd_readwrite_t"]]],[11,"clone","","",39,[[["self"]],["__wasi_subscription_u_u_t"]]],[11,"clone","","",37,[[["self"]],["__wasi_subscription_u_t"]]],[11,"clone","","",38,[[["self"]],["__wasi_subscription_t"]]],[11,"clone","","",40,[[["self"]],["wasierror"]]],[11,"clone","wasi_common::wasi32","",41,[[["self"]],["__wasi_iovec_t"]]],[11,"clone","","",42,[[["self"]],["__wasi_ciovec_t"]]],[11,"clone","","",43,[[["self"]],["__wasi_prestat_dir_t"]]],[11,"clone","","",45,[[["self"]],["__wasi_prestat_u_t"]]],[11,"clone","","",44,[[["self"]],["__wasi_prestat_t"]]],[11,"eq","wasi_common::fs","",7,[[["filetype"],["self"]],["bool"]]],[11,"eq","","",10,[[["permissions"],["self"]],["bool"]]],[11,"eq","wasi_common::old::snapshot_0::wasi","",14,[[["__wasi_dirent_t"],["self"]],["bool"]]],[11,"ne","","",14,[[["__wasi_dirent_t"],["self"]],["bool"]]],[11,"eq","","",15,[[["self"],["__wasi_fdstat_t"]],["bool"]]],[11,"ne","","",15,[[["self"],["__wasi_fdstat_t"]],["bool"]]],[11,"eq","","",16,[[["__wasi_filestat_t"],["self"]],["bool"]]],[11,"ne","","",16,[[["__wasi_filestat_t"],["self"]],["bool"]]],[11,"eq","","",17,[[["__wasi_event_fd_readwrite_t"],["self"]],["bool"]]],[11,"ne","","",17,[[["__wasi_event_fd_readwrite_t"],["self"]],["bool"]]],[11,"eq","","",18,[[["__wasi_event_t"],["self"]],["bool"]]],[11,"ne","","",18,[[["__wasi_event_t"],["self"]],["bool"]]],[11,"eq","","",19,[[["__wasi_subscription_clock_t"],["self"]],["bool"]]],[11,"ne","","",19,[[["__wasi_subscription_clock_t"],["self"]],["bool"]]],[11,"eq","","",20,[[["__wasi_subscription_fd_readwrite_t"],["self"]],["bool"]]],[11,"ne","","",20,[[["__wasi_subscription_fd_readwrite_t"],["self"]],["bool"]]],[11,"eq","","",24,[[["self"],["wasierror"]],["bool"]]],[11,"eq","wasi_common::old::snapshot_0::wasi32","",25,[[["self"],["__wasi_iovec_t"]],["bool"]]],[11,"ne","","",25,[[["self"],["__wasi_iovec_t"]],["bool"]]],[11,"eq","","",26,[[["self"],["__wasi_ciovec_t"]],["bool"]]],[11,"ne","","",26,[[["self"],["__wasi_ciovec_t"]],["bool"]]],[11,"eq","","",27,[[["self"],["__wasi_prestat_dir_t"]],["bool"]]],[11,"ne","","",27,[[["self"],["__wasi_prestat_dir_t"]],["bool"]]],[11,"eq","wasi_common::wasi","",30,[[["__wasi_dirent_t"],["self"]],["bool"]]],[11,"ne","","",30,[[["__wasi_dirent_t"],["self"]],["bool"]]],[11,"eq","","",31,[[["__wasi_fdstat_t"],["self"]],["bool"]]],[11,"ne","","",31,[[["__wasi_fdstat_t"],["self"]],["bool"]]],[11,"eq","","",32,[[["__wasi_filestat_t"],["self"]],["bool"]]],[11,"ne","","",32,[[["__wasi_filestat_t"],["self"]],["bool"]]],[11,"eq","","",33,[[["self"],["__wasi_event_fd_readwrite_t"]],["bool"]]],[11,"ne","","",33,[[["self"],["__wasi_event_fd_readwrite_t"]],["bool"]]],[11,"eq","","",34,[[["self"],["__wasi_event_t"]],["bool"]]],[11,"ne","","",34,[[["self"],["__wasi_event_t"]],["bool"]]],[11,"eq","","",35,[[["self"],["__wasi_subscription_clock_t"]],["bool"]]],[11,"ne","","",35,[[["self"],["__wasi_subscription_clock_t"]],["bool"]]],[11,"eq","","",36,[[["self"],["__wasi_subscription_fd_readwrite_t"]],["bool"]]],[11,"ne","","",36,[[["self"],["__wasi_subscription_fd_readwrite_t"]],["bool"]]],[11,"eq","","",40,[[["self"],["wasierror"]],["bool"]]],[11,"eq","wasi_common::wasi32","",41,[[["self"],["__wasi_iovec_t"]],["bool"]]],[11,"ne","","",41,[[["self"],["__wasi_iovec_t"]],["bool"]]],[11,"eq","","",42,[[["__wasi_ciovec_t"],["self"]],["bool"]]],[11,"ne","","",42,[[["__wasi_ciovec_t"],["self"]],["bool"]]],[11,"eq","","",43,[[["self"],["__wasi_prestat_dir_t"]],["bool"]]],[11,"ne","","",43,[[["self"],["__wasi_prestat_dir_t"]],["bool"]]],[11,"fmt","wasi_common","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasi_common::old::snapshot_0","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasi_common::old::snapshot_0::wasi","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasi_common::old::snapshot_0::wasi32","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasi_common::wasi","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasi_common::wasi32","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasi_common::old::snapshot_0::wasi","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasi_common::wasi","",40,[[["formatter"],["self"]],["result"]]],[11,"hash","wasi_common::fs","",7,[[["self"],["__h"]]]],[11,"hash","wasi_common::old::snapshot_0::wasi","",14,[[["self"],["__h"]]]],[11,"hash","","",15,[[["self"],["__h"]]]],[11,"hash","","",16,[[["self"],["__h"]]]],[11,"hash","","",17,[[["self"],["__h"]]]],[11,"hash","","",18,[[["self"],["__h"]]]],[11,"hash","","",19,[[["self"],["__h"]]]],[11,"hash","","",20,[[["self"],["__h"]]]],[11,"hash","wasi_common::old::snapshot_0::wasi32","",25,[[["self"],["__h"]]]],[11,"hash","","",26,[[["self"],["__h"]]]],[11,"hash","","",27,[[["self"],["__h"]]]],[11,"hash","wasi_common::wasi","",30,[[["self"],["__h"]]]],[11,"hash","","",31,[[["self"],["__h"]]]],[11,"hash","","",32,[[["self"],["__h"]]]],[11,"hash","","",33,[[["self"],["__h"]]]],[11,"hash","","",34,[[["self"],["__h"]]]],[11,"hash","","",35,[[["self"],["__h"]]]],[11,"hash","","",36,[[["self"],["__h"]]]],[11,"hash","wasi_common::wasi32","",41,[[["self"],["__h"]]]],[11,"hash","","",42,[[["self"],["__h"]]]],[11,"hash","","",43,[[["self"],["__h"]]]],[11,"read","wasi_common::fs","TODO: Not yet implemented. See the comment in…",6,[[["self"]],[["result",["usize"]],["usize"]]]]],"p":[[4,"VirtualDirEntry"],[3,"WasiCtxBuilder"],[3,"WasiCtx"],[3,"Dir"],[3,"DirBuilder"],[3,"DirEntry"],[3,"File"],[3,"FileType"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"ReadDir"],[3,"WasiCtxBuilder"],[3,"WasiCtx"],[3,"__wasi_dirent_t"],[3,"__wasi_fdstat_t"],[3,"__wasi_filestat_t"],[3,"__wasi_event_fd_readwrite_t"],[3,"__wasi_event_t"],[3,"__wasi_subscription_clock_t"],[3,"__wasi_subscription_fd_readwrite_t"],[3,"__wasi_subscription_u_t"],[3,"__wasi_subscription_t"],[19,"__wasi_subscription_u_u_t"],[4,"WasiError"],[3,"__wasi_iovec_t"],[3,"__wasi_ciovec_t"],[3,"__wasi_prestat_dir_t"],[3,"__wasi_prestat_t"],[19,"__wasi_prestat_u_t"],[3,"__wasi_dirent_t"],[3,"__wasi_fdstat_t"],[3,"__wasi_filestat_t"],[3,"__wasi_event_fd_readwrite_t"],[3,"__wasi_event_t"],[3,"__wasi_subscription_clock_t"],[3,"__wasi_subscription_fd_readwrite_t"],[3,"__wasi_subscription_u_t"],[3,"__wasi_subscription_t"],[19,"__wasi_subscription_u_u_t"],[4,"WasiError"],[3,"__wasi_iovec_t"],[3,"__wasi_ciovec_t"],[3,"__wasi_prestat_dir_t"],[3,"__wasi_prestat_t"],[19,"__wasi_prestat_u_t"],[8,"FileContents"]]};
searchIndex["wasmtime"] = {"doc":"Wasmtime's embedding API","i":[[3,"Global","wasmtime","A WebAssembly `global` value which can be read and written…",null,null],[3,"Table","","A WebAssembly `table`, or an array of values.",null,null],[3,"Memory","","A WebAssembly linear memory.",null,null],[3,"FrameInfo","","Description of a frame in a backtrace for a [`Trap`].",null,null],[3,"Func","","A WebAssembly function which can be called.",null,null],[3,"Instance","","An instantiated WebAssembly module.",null,null],[3,"Module","","A compiled WebAssembly module, ready to be instantiated.",null,null],[3,"HostRef","","Represents a piece of data located in the host environment.",null,null],[3,"Config","","Global configuration options used to create an [`Engine`]…",null,null],[3,"Engine","","An `Engine` which is a global context for compilation and…",null,null],[3,"Store","","A `Store` is a shared cache of information between…",null,null],[3,"Trap","","A struct representing an aborted instruction execution,…",null,null],[3,"Limits","","Limits of tables/memories where the units of the limits…",null,null],[3,"FuncType","","A descriptor for a function in a WebAssembly module.",null,null],[3,"GlobalType","","A WebAssembly global descriptor.",null,null],[3,"TableType","","A descriptor for a table in a WebAssembly module.",null,null],[3,"MemoryType","","A descriptor for a WebAssembly memory type.",null,null],[3,"ImportType","","A descriptor for an imported value into a wasm module.",null,null],[3,"ExportType","","A descriptor for an exported WebAssembly value.",null,null],[4,"Extern","","An external item to a WebAssembly module, or a list of…",null,null],[13,"Func","","A WebAssembly `func` which can be called.",0,null],[13,"Global","","A WebAssembly `global` which acts like a `Cell<T>` of…",0,null],[13,"Table","","A WebAssembly `table` which is an array of `Val` types.",0,null],[13,"Memory","","A WebAssembly linear memory.",0,null],[4,"AnyRef","","Represents an opaque reference to any data within…",null,null],[13,"Null","","A reference to no data.",1,null],[13,"Ref","","A reference to data stored internally in `wasmtime`.",1,null],[13,"Other","","A reference to data located outside of `wasmtime`.",1,null],[4,"OptLevel","","Possible optimization levels for the Cranelift codegen…",null,null],[13,"None","","No optimizations performed, minimizes compilation time by…",2,null],[13,"Speed","","Generates the fastest possible code, but may take longer.",2,null],[13,"SpeedAndSize","","Similar to `speed`, but also performs transformations…",2,null],[4,"Strategy","","Possible Compilation strategies for a wasm module.",null,null],[13,"Auto","","An indicator that the compilation strategy should be…",3,null],[13,"Cranelift","","Currently the default backend, Cranelift aims to be a…",3,null],[13,"Lightbeam","","A single-pass code generator that is faster than Cranelift…",3,null],[4,"Mutability","","Indicator of whether a global is mutable or not",null,null],[13,"Const","","The global is constant and its value does not change",4,null],[13,"Var","","The value of the global can change over time",4,null],[4,"ValType","","A list of all possible value types in WebAssembly.",null,null],[13,"I32","","Signed 32 bit integer.",5,null],[13,"I64","","Signed 64 bit integer.",5,null],[13,"F32","","Floating point 32 bit integer.",5,null],[13,"F64","","Floating point 64 bit integer.",5,null],[13,"V128","","A 128 bit number.",5,null],[13,"AnyRef","","A reference to opaque data in the Wasm instance.",5,null],[13,"FuncRef","","A reference to a Wasm function.",5,null],[4,"ExternType","","A list of all possible types which can be externally…",null,null],[13,"Func","","This external type is the type of a WebAssembly function.",6,null],[13,"Global","","This external type is the type of a WebAssembly global.",6,null],[13,"Table","","This external type is the type of a WebAssembly table.",6,null],[13,"Memory","","This external type is the type of a WebAssembly memory.",6,null],[4,"Val","","Possible runtime values that a WebAssembly module can…",null,null],[13,"I32","","A 32-bit integer",7,null],[13,"I64","","A 64-bit integer",7,null],[13,"F32","","A 32-bit float.",7,null],[13,"F64","","A 64-bit float.",7,null],[13,"AnyRef","","An `anyref` value which can hold opaque data to the wasm…",7,null],[13,"FuncRef","","A first-class reference to a WebAssembly function.",7,null],[13,"V128","","A 128-bit number",7,null],[11,"func","","Returns the underlying `Func`, if this external is a…",0,[[["self"]],[["option",["func"]],["func"]]]],[11,"global","","Returns the underlying `Global`, if this external is a…",0,[[["self"]],[["global"],["option",["global"]]]]],[11,"table","","Returns the underlying `Table`, if this external is a table.",0,[[["self"]],[["table"],["option",["table"]]]]],[11,"memory","","Returns the underlying `Memory`, if this external is a…",0,[[["self"]],[["option",["memory"]],["memory"]]]],[11,"ty","","Returns the type associated with this `Extern`.",0,[[["self"]],["externtype"]]],[11,"new","","Creates a new WebAssembly `global` value with the provide…",8,[[["globaltype"],["val"],["store"]],[["global"],["result",["global"]]]]],[11,"ty","","Returns the underlying type of this `global`.",8,[[["self"]],["globaltype"]]],[11,"get","","Returns the current [`Val`] of this global.",8,[[["self"]],["val"]]],[11,"set","","Attempts to set the current value of this global to [`Val`].",8,[[["val"],["self"]],["result"]]],[11,"new","","Creates a new `Table` with the given parameters.",9,[[["tabletype"],["val"],["store"]],[["result",["table"]],["table"]]]],[11,"ty","","Returns the underlying type of this table, including its…",9,[[["self"]],["tabletype"]]],[11,"get","","Returns the table element value at `index`.",9,[[["u32"],["self"]],[["option",["val"]],["val"]]]],[11,"set","","Writes the `val` provided into `index` within this table.",9,[[["u32"],["self"],["val"]],["result"]]],[11,"size","","Returns the current size of this table.",9,[[["self"]],["u32"]]],[11,"grow","","Grows the size of this table by `delta` more elements,…",9,[[["u32"],["self"],["val"]],[["result",["u32"]],["u32"]]]],[11,"copy","","Copy `len` elements from `src_table[src_index..]` into…",9,[[["u32"],["table"]],["result"]]],[11,"new","","Creates a new WebAssembly memory given the configuration…",10,[[["memorytype"],["store"]],["memory"]]],[11,"ty","","Returns the underlying type of this memory.",10,[[["self"]],["memorytype"]]],[11,"data_unchecked","","Returns this memory as a slice view that can be read…",10,[[["self"]]]],[11,"data_unchecked_mut","","Returns this memory as a slice view that can be read and…",10,[[["self"]]]],[11,"data_ptr","","Returns the base pointer, in the host's address space,…",10,[[["self"]]]],[11,"data_size","","Returns the byte length of this memory.",10,[[["self"]],["usize"]]],[11,"size","","Returns the size, in pages, of this wasm memory.",10,[[["self"]],["u32"]]],[11,"grow","","Grows this WebAssembly memory by `delta` pages.",10,[[["u32"],["self"]],[["result",["u32"]],["u32"]]]],[11,"func_index","","Returns the WebAssembly function index for this frame.",11,[[["self"]],["u32"]]],[11,"module_name","","Returns the identifer of the module that this frame is for.",11,[[["self"]],[["str"],["option",["str"]]]]],[11,"func_name","","Returns a descriptive name of the function for this frame,…",11,[[["self"]],[["str"],["option",["str"]]]]],[11,"new","","Creates a new `Func` with the given arguments, typically…",12,[[["callable"],["functype"],["store"],["rc",["callable"]]],["self"]]],[11,"wrap0","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap1","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap2","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap3","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap4","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap5","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap6","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap7","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap8","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap9","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap10","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap11","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap12","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap13","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap14","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"wrap15","","Creates a new `Func` from the given Rust closure, which…",12,[[["store"],["f"]],["func"]]],[11,"ty","","Returns the underlying wasm type that this `Func` has.",12,[[["self"]],["functype"]]],[11,"param_arity","","Returns the number of parameters that this function takes.",12,[[["self"]],["usize"]]],[11,"result_arity","","Returns the number of results this function produces.",12,[[["self"]],["usize"]]],[11,"call","","Invokes this function with the `params` given, returning…",12,[[["self"]],[["box"],["result",["box","trap"]],["trap"]]]],[11,"get0","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get1","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get2","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get3","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get4","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get5","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get6","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get7","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get8","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get9","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get10","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get11","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get12","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get13","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get14","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"get15","","Extracts a natively-callable object from this `Func`, if…",12,[[["self"]],["result"]]],[11,"new","","Creates a new [`Instance`] from the previously compiled…",13,[[["module"]],[["result",["instance","error"]],["error"],["instance"]]]],[11,"store","","Returns the associated [`Store`] that this `Instance` is…",13,[[["self"]],["store"]]],[11,"module","","Returns the associated [`Module`] that this `Instance`…",13,[[["self"]],["module"]]],[11,"exports","","Returns the list of exported items from this [`Instance`].",13,[[["self"]]]],[11,"get_export","","Looks up an exported [`Extern`] value by name.",13,[[["str"],["self"]],[["option",["extern"]],["extern"]]]],[11,"new","","Creates a new WebAssembly `Module` from the given…",14,[[["store"]],[["result",["module"]],["module"]]]],[11,"new_with_name","","Creates a new WebAssembly `Module` from the given…",14,[[["str"],["store"]],[["result",["module"]],["module"]]]],[11,"from_file","","Creates a new WebAssembly `Module` from the contents of…",14,[[["store"]],[["result",["module"]],["module"]]]],[11,"from_binary","","Creates a new WebAssembly `Module` from the given…",14,[[["store"]],[["result",["module"]],["module"]]]],[11,"from_binary_unchecked","","Creates a new WebAssembly `Module` from the given…",14,[[["store"]],[["result",["module"]],["module"]]]],[11,"validate","","Validates `binary` input data as a WebAssembly binary…",14,[[["store"]],["result"]]],[11,"name","","Returns identifier/name that this [`Module`] has. This…",14,[[["self"]],[["str"],["option",["str"]]]]],[11,"imports","","Returns the list of imports that this [`Module`] has and…",14,[[["self"]]]],[11,"exports","","Returns the list of exports that this [`Module`] has and…",14,[[["self"]]]],[11,"store","","Returns the [`Store`] that this [`Module`] was compiled…",14,[[["self"]],["store"]]],[11,"new","","Creates a new instance of `AnyRef` from `Box<dyn Any>`.",1,[[["any"],["box",["any"]]],["self"]]],[11,"null","","Creates a `Null` reference.",1,[[],["self"]]],[11,"data","","Returns the data stored in the reference if available. #…",1,[[["self"]],[["ref",["box"]],["box",["any"]]]]],[11,"ptr_eq","","Returns true if the two `AnyRef<T>`'s point to the same…",1,[[["self"],["anyref"]],["bool"]]],[11,"host_info","","Returns a mutable reference to the host information if…",1,[[["self"]],[["option",["refmut"]],["refmut",["box"]]]]],[11,"set_host_info","","Sets the host information for an `AnyRef`. # Panics Panics…",1,[[["option",["box"]],["self"],["box",["hostinfo"]]]]],[11,"new","","Creates a new `HostRef<T>` from `T`.",15,[[["t"]],["hostref"]]],[11,"borrow","","Immutably borrows the wrapped data. # Panics Panics if the…",15,[[["self"]],["ref"]]],[11,"borrow_mut","","Mutably borrows the wrapped data. # Panics Panics if the…",15,[[["self"]],["refmut"]]],[11,"ptr_eq","","Returns true if the two `HostRef<T>`'s point to the same…",15,[[["hostref"],["self"]],["bool"]]],[11,"anyref","","Returns an opaque reference to the wrapped data in the…",15,[[["self"]],["anyref"]]],[11,"new","","Creates a new configuration object with the default…",16,[[],["config"]]],[11,"debug_info","","Configures whether DWARF debug information will be emitted…",16,[[["self"],["bool"]],["self"]]],[11,"wasm_threads","","Configures whether the WebAssembly threads proposal will…",16,[[["self"],["bool"]],["self"]]],[11,"wasm_reference_types","","Configures whether the WebAssembly reference types…",16,[[["self"],["bool"]],["self"]]],[11,"wasm_simd","","Configures whether the WebAssembly SIMD proposal will be…",16,[[["self"],["bool"]],["self"]]],[11,"wasm_bulk_memory","","Configures whether the WebAssembly bulk memory operations…",16,[[["self"],["bool"]],["self"]]],[11,"wasm_multi_value","","Configures whether the WebAssembly multi-value proposal…",16,[[["self"],["bool"]],["self"]]],[11,"strategy","","Configures which compilation strategy will be used for…",16,[[["self"],["strategy"]],[["self"],["result"]]]],[11,"profiler","","Creates a default profiler based on the profiling strategy…",16,[[["self"],["profilingstrategy"]],[["self"],["result"]]]],[11,"cranelift_debug_verifier","","Configures whether the debug verifier of Cranelift is…",16,[[["self"],["bool"]],["self"]]],[11,"cranelift_opt_level","","Configures the Cranelift code generator optimization level.",16,[[["self"],["optlevel"]],["self"]]],[11,"cache_config_load","","Loads cache configuration specified at `path`.",16,[[["self"]],[["self"],["result"]]]],[11,"cache_config_load_default","","Loads cache configuration from the system default path.",16,[[["self"]],[["self"],["result"]]]],[11,"new","","Creates a new [`Engine`] with the specified compilation…",17,[[["config"]],["engine"]]],[11,"config","","Returns the configuration settings that this engine is…",17,[[["self"]],["config"]]],[11,"new","","Creates a new store to be associated with the given…",18,[[["engine"]],["store"]]],[11,"engine","","Returns the [`Engine`] that this store is associated with.",18,[[["self"]],["engine"]]],[11,"same","","Returns whether the stores `a` and `b` refer to the same…",18,[[["store"]],["bool"]]],[11,"new","","Creates a new `Trap` with `message`. # Example `let trap =…",19,[[["string"],["into",["string"]]],["self"]]],[11,"message","","Returns a reference the `message` stored in `Trap`.",19,[[["self"]],["str"]]],[11,"trace","","Returns a list of function frames in WebAssembly code that…",19,[[["self"]]]],[11,"new","","Creates a new set of limits with the minimum and maximum…",20,[[["u32"],["option",["u32"]]],["limits"]]],[11,"at_least","","Creates a new `Limits` with the `min` specified and no…",20,[[["u32"]],["limits"]]],[11,"min","","Returns the minimum amount for these limits.",20,[[["self"]],["u32"]]],[11,"max","","Returns the maximum amount for these limits, if specified.",20,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"is_num","","Returns true if `ValType` matches any of the numeric…",5,[[["self"]],["bool"]]],[11,"is_ref","","Returns true if `ValType` matches either of the reference…",5,[[["self"]],["bool"]]],[11,"func","","Attempt to return the underlying type of this external…",6,[[["self"]],[["functype"],["option",["functype"]]]]],[11,"unwrap_func","","Returns the underlying descriptor of this [`ExternType`],…",6,[[["self"]],["functype"]]],[11,"global","","Attempt to return the underlying type of this external…",6,[[["self"]],[["option",["globaltype"]],["globaltype"]]]],[11,"unwrap_global","","Returns the underlying descriptor of this [`ExternType`],…",6,[[["self"]],["globaltype"]]],[11,"table","","Attempt to return the underlying type of this external…",6,[[["self"]],[["tabletype"],["option",["tabletype"]]]]],[11,"unwrap_table","","Returns the underlying descriptor of this [`ExternType`],…",6,[[["self"]],["tabletype"]]],[11,"memory","","Attempt to return the underlying type of this external…",6,[[["self"]],[["option",["memorytype"]],["memorytype"]]]],[11,"unwrap_memory","","Returns the underlying descriptor of this [`ExternType`],…",6,[[["self"]],["memorytype"]]],[11,"new","","Creates a new function descriptor from the given…",21,[[["box"]],["functype"]]],[11,"params","","Returns the list of parameter types for this function.",21,[[["self"]]]],[11,"results","","Returns the list of result types for this function.",21,[[["self"]]]],[11,"new","","Creates a new global descriptor of the specified `content`…",22,[[["mutability"],["valtype"]],["globaltype"]]],[11,"content","","Returns the value type of this global descriptor.",22,[[["self"]],["valtype"]]],[11,"mutability","","Returns whether or not this global is mutable.",22,[[["self"]],["mutability"]]],[11,"new","","Creates a new table descriptor which will contain the…",23,[[["limits"],["valtype"]],["tabletype"]]],[11,"element","","Returns the element value type of this table.",23,[[["self"]],["valtype"]]],[11,"limits","","Returns the limits, in units of elements, of this table.",23,[[["self"]],["limits"]]],[11,"new","","Creates a new descriptor for a WebAssembly memory given…",24,[[["limits"]],["memorytype"]]],[11,"limits","","Returns the limits (in pages) that are configured for this…",24,[[["self"]],["limits"]]],[11,"new","","Creates a new import descriptor which comes from `module`…",25,[[["str"],["externtype"]],["importtype"]]],[11,"module","","Returns the module name that this import is expected to…",25,[[["self"]],["str"]]],[11,"name","","Returns the field name of the module that this import is…",25,[[["self"]],["str"]]],[11,"ty","","Returns the expected type of this import.",25,[[["self"]],["externtype"]]],[11,"new","","Creates a new export which is exported with the given…",26,[[["str"],["externtype"]],["exporttype"]]],[11,"name","","Returns the name by which this export is known by.",26,[[["self"]],["str"]]],[11,"ty","","Returns the type of this export.",26,[[["self"]],["externtype"]]],[11,"null","","Returns a null `anyref` value.",7,[[],["val"]]],[11,"ty","","Returns the corresponding [`ValType`] for this `Val`.",7,[[["self"]],["valtype"]]],[11,"i32","","Attempt to access the underlying value of this `Val`,…",7,[[["self"]],[["option",["i32"]],["i32"]]]],[11,"unwrap_i32","","Returns the underlying value of this `Val`, panicking if…",7,[[["self"]],["i32"]]],[11,"i64","","Attempt to access the underlying value of this `Val`,…",7,[[["self"]],[["option",["i64"]],["i64"]]]],[11,"unwrap_i64","","Returns the underlying value of this `Val`, panicking if…",7,[[["self"]],["i64"]]],[11,"f32","","Attempt to access the underlying value of this `Val`,…",7,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"unwrap_f32","","Returns the underlying value of this `Val`, panicking if…",7,[[["self"]],["f32"]]],[11,"f64","","Attempt to access the underlying value of this `Val`,…",7,[[["self"]],[["option",["f64"]],["f64"]]]],[11,"unwrap_f64","","Returns the underlying value of this `Val`, panicking if…",7,[[["self"]],["f64"]]],[11,"funcref","","Attempt to access the underlying value of this `Val`,…",7,[[["self"]],[["option",["func"]],["func"]]]],[11,"unwrap_funcref","","Returns the underlying value of this `Val`, panicking if…",7,[[["self"]],["func"]]],[11,"v128","","Attempt to access the underlying value of this `Val`,…",7,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"unwrap_v128","","Returns the underlying value of this `Val`, panicking if…",7,[[["self"]],["u128"]]],[11,"anyref","","Attempt to access the underlying value of this `Val`,…",7,[[["self"]],[["anyref"],["option",["anyref"]]]]],[11,"unwrap_anyref","","Returns the underlying value of this `Val`, panicking if…",7,[[["self"]],["anyref"]]],[0,"unix","","Unix-specific extension for the `wasmtime` crate.",null,null],[8,"InstanceExt","wasmtime::unix","Extensions for the [`Instance`] type only available on Unix.",null,null],[10,"set_signal_handler","","The signal handler must be async-signal-safe.",27,[[["self"],["h"]]]],[8,"Callable","wasmtime","A trait representing a function that can be imported and…",null,null],[10,"call","","What is called when the function is invoked in…",28,[[["self"]],[["trap"],["result",["trap"]]]]],[8,"WasmRet","","A trait implemented for types which can be returned from…",null,null],[8,"WasmTy","","A trait implemented for types which can be arguments to…",null,null],[8,"HostInfo","","",null,null],[11,"finalize","","",29,[[["self"]]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"equivalent","","",5,[[["k"],["self"]],["bool"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"set_signal_handler","","",13,[[["self"],["h"]]]],[11,"from","","",0,[[["func"]],["self"]]],[11,"from","","",0,[[["global"]],["self"]]],[11,"from","","",0,[[["memory"]],["self"]]],[11,"from","","",0,[[["table"]],["self"]]],[11,"from","","",7,[[["i32"]],["val"]]],[11,"from","","",7,[[["i64"]],["val"]]],[11,"from","","",7,[[["f32"]],["val"]]],[11,"from","","",7,[[["f64"]],["val"]]],[11,"from","","",7,[[["anyref"]],["val"]]],[11,"from","","",7,[[["func"]],["val"]]],[11,"clone","","",0,[[["self"]],["extern"]]],[11,"clone","","",8,[[["self"]],["global"]]],[11,"clone","","",9,[[["self"]],["table"]]],[11,"clone","","",10,[[["self"]],["memory"]]],[11,"clone","","",12,[[["self"]],["func"]]],[11,"clone","","",13,[[["self"]],["instance"]]],[11,"clone","","",14,[[["self"]],["module"]]],[11,"clone","","",1,[[["self"]],["anyref"]]],[11,"clone","","",15,[[["self"]],["hostref"]]],[11,"clone","","",16,[[["self"]],["config"]]],[11,"clone","","",3,[[["self"]],["strategy"]]],[11,"clone","","",2,[[["self"]],["optlevel"]]],[11,"clone","","",17,[[["self"]],["engine"]]],[11,"clone","","",18,[[["self"]],["store"]]],[11,"clone","","",19,[[["self"]],["trap"]]],[11,"clone","","",4,[[["self"]],["mutability"]]],[11,"clone","","",20,[[["self"]],["limits"]]],[11,"clone","","",5,[[["self"]],["valtype"]]],[11,"clone","","",6,[[["self"]],["externtype"]]],[11,"clone","","",21,[[["self"]],["functype"]]],[11,"clone","","",22,[[["self"]],["globaltype"]]],[11,"clone","","",23,[[["self"]],["tabletype"]]],[11,"clone","","",24,[[["self"]],["memorytype"]]],[11,"clone","","",25,[[["self"]],["importtype"]]],[11,"clone","","",26,[[["self"]],["exporttype"]]],[11,"clone","","",7,[[["self"]],["val"]]],[11,"default","","",16,[[],["config"]]],[11,"default","","",17,[[],["engine"]]],[11,"default","","",18,[[],["store"]]],[11,"eq","","",4,[[["self"],["mutability"]],["bool"]]],[11,"eq","","",5,[[["self"],["valtype"]],["bool"]]],[11,"eq","","",21,[[["functype"],["self"]],["bool"]]],[11,"ne","","",21,[[["functype"],["self"]],["bool"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"finalize","","",29,[[["self"]]]]],"p":[[4,"Extern"],[4,"AnyRef"],[4,"OptLevel"],[4,"Strategy"],[4,"Mutability"],[4,"ValType"],[4,"ExternType"],[4,"Val"],[3,"Global"],[3,"Table"],[3,"Memory"],[3,"FrameInfo"],[3,"Func"],[3,"Instance"],[3,"Module"],[3,"HostRef"],[3,"Config"],[3,"Engine"],[3,"Store"],[3,"Trap"],[3,"Limits"],[3,"FuncType"],[3,"GlobalType"],[3,"TableType"],[3,"MemoryType"],[3,"ImportType"],[3,"ExportType"],[8,"InstanceExt"],[8,"Callable"],[8,"HostInfo"]]};
searchIndex["wasmtime_debug"] = {"doc":"Debug utils for WebAssembly using Cranelift.","i":[[3,"DebugInfoData","wasmtime_debug","",null,null],[12,"dwarf","","",0,null],[12,"name_section","","",0,null],[12,"wasm_file","","",0,null],[3,"WasmFileInfo","","",null,null],[12,"path","","",1,null],[12,"code_section_offset","","",1,null],[12,"funcs","","",1,null],[4,"ResolvedSymbol","","",null,null],[13,"PhysicalAddress","","",2,null],[13,"Reloc","","",2,null],[12,"name","wasmtime_debug::ResolvedSymbol","",3,null],[12,"addend","","",3,null],[5,"read_debuginfo","wasmtime_debug","",null,[[],[["result",["debuginfodata"]],["debuginfodata"]]]],[5,"transform_dwarf","","",null,[[["valuelabelsranges"],["moduleaddressmap"],["modulevmctxinfo"],["targetisa"],["debuginfodata"]],[["result",["dwarf","error"]],["error"],["dwarf"]]]],[5,"emit_dwarf","","",null,[[["frametable"],["artifact"],["option",["frametable"]],["symbolresolver"],["dwarf"]],["result"]]],[5,"emit_debugsections","","",null,[[["valuelabelsranges"],["artifact"],["moduleaddressmap"],["framelayouts"],["modulevmctxinfo"],["targetisa"],["debuginfodata"]],[["result",["error"]],["error"]]]],[5,"emit_debugsections_image","","",null,[[["valuelabelsranges"],["moduleaddressmap"],["framelayouts"],["modulevmctxinfo"],["targetisa"],["debuginfodata"]],[["error"],["vec",["u8"]],["result",["vec","error"]]]]],[8,"SymbolResolver","","",null,null],[10,"resolve_symbol","","",4,[[["i64"],["self"],["usize"]],["resolvedsymbol"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"DebugInfoData"],[3,"WasmFileInfo"],[4,"ResolvedSymbol"],[13,"Reloc"],[8,"SymbolResolver"]]};
searchIndex["wasmtime_environ"] = {"doc":"Standalone environment for WebAssembly using Cranelift.…","i":[[4,"FrameLayoutChange","wasmtime_environ","Change in the frame layout information.",null,null],[13,"CallFrameAddressAt","","Base CallFrameAddress (CFA) pointer moved to different…",0,null],[12,"reg","wasmtime_environ::FrameLayoutChange","CFA register.",1,null],[12,"offset","","CFA offset.",1,null],[13,"RegAt","wasmtime_environ","Register saved at.",0,null],[12,"reg","wasmtime_environ::FrameLayoutChange","Saved register.",2,null],[12,"cfa_offset","","Offset in the frame (offset from CFA).",2,null],[13,"ReturnAddressAt","wasmtime_environ","Return address saved at.",0,null],[12,"cfa_offset","wasmtime_environ::FrameLayoutChange","Offset in the frame (offset from CFA).",3,null],[13,"Preserve","wasmtime_environ","The entire frame layout must be preserved somewhere to be…",0,null],[13,"Restore","","Restore the entire frame layout from a corresponding prior…",0,null],[3,"FunctionAddressMap","","Function and its instructions addresses mappings.",null,null],[12,"instructions","","Instructions maps. The array is sorted by the…",4,null],[12,"start_srcloc","","Function start source location (normally declaration).",4,null],[12,"end_srcloc","","Function end source location.",4,null],[12,"body_offset","","Generated function body offset if applicable, otherwise 0.",4,null],[12,"body_len","","Generated function body length.",4,null],[3,"InstructionAddressMap","","Single source location to generated address mapping.",null,null],[12,"srcloc","","Original source location.",5,null],[12,"code_offset","","Generated instructions offset.",5,null],[12,"code_len","","Generated instructions length.",5,null],[3,"ModuleVmctxInfo","","Module `vmctx` related info.",null,null],[12,"memory_offset","","The memory definition offset in the VMContext structure.",6,null],[12,"stack_slots","","The functions stack slots.",6,null],[3,"CacheConfig","","Global configuration for how the cache is managed",null,null],[3,"Compilation","","The result of compiling a WebAssembly module's functions.",null,null],[3,"CompiledFunction","","Compiled function: machine code body, jump table offsets,…",null,null],[12,"body","","The function body.",7,null],[12,"jt_offsets","","The jump tables offsets (in the body).",7,null],[12,"unwind_info","","The unwind information.",7,null],[3,"CompiledFunctionUnwindInfoReloc","","Relocation entry for unwind info.",null,null],[12,"offset","","Entry offest in the code block.",8,null],[12,"addend","","Entry addend relative to the code block.",8,null],[3,"Relocation","","A record of a relocation to perform.",null,null],[12,"reloc","","The relocation code.",9,null],[12,"reloc_target","","Relocation target.",9,null],[12,"offset","","The offset where to apply the relocation.",9,null],[12,"addend","","The addend to add to the relocation value.",9,null],[3,"TrapInformation","","Information about trap.",null,null],[12,"code_offset","","The offset of the trapping instruction in native code. It…",10,null],[12,"source_loc","","Location of trapping instruction in WebAssembly binary…",10,null],[12,"trap_code","","Code of the trap.",10,null],[3,"FrameLayout","","Frame layout information: call convention and registers…",null,null],[12,"call_conv","","Call convention.",11,null],[12,"initial_commands","","Frame default/initial commands.",11,null],[12,"commands","","Frame commands at specific offset.",11,null],[3,"BuiltinFunctionIndex","","An index type for builtin functions.",null,null],[3,"MemoryPlan","","A WebAssembly linear memory description along with our…",null,null],[12,"memory","","The WebAssembly linear memory description.",12,null],[12,"style","","Our chosen implementation style.",12,null],[12,"offset_guard_size","","Our chosen offset-guard size.",12,null],[3,"Module","","A translated WebAssembly module, excluding the function…",null,null],[12,"id","","A unique identifier (within this process) for this module.",13,null],[12,"local","","Local information about a module which is the bare minimum…",13,null],[12,"imported_funcs","","Names of imported functions, as well as the index of the…",13,null],[12,"imported_tables","","Names of imported tables.",13,null],[12,"imported_memories","","Names of imported memories.",13,null],[12,"imported_globals","","Names of imported globals.",13,null],[12,"exports","","Exported entities.",13,null],[12,"start_func","","The module \"start\" function, if present.",13,null],[12,"table_elements","","WebAssembly table initializers.",13,null],[12,"passive_elements","","WebAssembly passive elements.",13,null],[12,"passive_data","","WebAssembly passive data segments.",13,null],[12,"func_names","","WebAssembly table initializers.",13,null],[3,"ModuleLocal","","Local information known about a wasm module, the bare…",null,null],[12,"signatures","","Unprocessed signatures exactly as provided by…",14,null],[12,"num_imported_funcs","","Number of imported functions in the module.",14,null],[12,"num_imported_tables","","Number of imported tables in the module.",14,null],[12,"num_imported_memories","","Number of imported memories in the module.",14,null],[12,"num_imported_globals","","Number of imported globals in the module.",14,null],[12,"functions","","Types of functions, imported and local.",14,null],[12,"table_plans","","WebAssembly tables.",14,null],[12,"memory_plans","","WebAssembly linear memory plans.",14,null],[12,"globals","","WebAssembly global variables.",14,null],[3,"TableElements","","A WebAssembly table initializer.",null,null],[12,"table_index","","The index of a table to initialize.",15,null],[12,"base","","Optionally, a global variable giving a base index.",15,null],[12,"offset","","The offset to add to the base.",15,null],[12,"elements","","The values to write into the table elements.",15,null],[3,"TablePlan","","A WebAssembly table description along with our chosen…",null,null],[12,"table","","The WebAssembly table description.",16,null],[12,"style","","Our chosen implementation style.",16,null],[3,"DataInitializer","","A data initializer for linear memory.",null,null],[12,"location","","The location where the initialization is to be performed.",17,null],[12,"data","","The initialization data.",17,null],[3,"DataInitializerLocation","","A memory index and offset within that memory where a data…",null,null],[12,"memory_index","","The index of the memory to initialize.",18,null],[12,"base","","Optionally a globalvar base to initialize at.",18,null],[12,"offset","","A constant offset to initialize at.",18,null],[3,"FunctionBodyData","","Contains function data: byte code and its offset in the…",null,null],[12,"data","","Body byte code.",19,null],[12,"module_offset","","Body offset in the module file.",19,null],[3,"ModuleEnvironment","","Object containing the standalone environment information.",null,null],[3,"ModuleTranslation","","The result of translating via `ModuleEnvironment`.…",null,null],[12,"target_config","","Compilation setting flags.",20,null],[12,"module","","Module information.",20,null],[12,"function_body_inputs","","References to the function bodies.",20,null],[12,"data_initializers","","References to the data initializers.",20,null],[12,"tunables","","Tunable parameters.",20,null],[12,"module_translation","","The decoded Wasm types for the module.",20,null],[3,"Tunables","","Tunable parameters for WebAssembly compilation.",null,null],[12,"static_memory_bound","","For static heaps, the size in wasm pages of the heap…",21,null],[12,"static_memory_offset_guard_size","","The size in bytes of the offset guard for static heaps.",21,null],[12,"dynamic_memory_offset_guard_size","","The size in bytes of the offset guard for dynamic heaps.",21,null],[3,"TargetSharedSignatureIndex","","Target specific type for shared signature index.",null,null],[3,"VMOffsets","","This class computes offsets to fields within `VMContext`…",null,null],[12,"pointer_size","","The size in bytes of a pointer on the target.",22,null],[12,"num_signature_ids","","The number of signature declarations in the module.",22,null],[12,"num_imported_functions","","The number of imported functions in the module.",22,null],[12,"num_imported_tables","","The number of imported tables in the module.",22,null],[12,"num_imported_memories","","The number of imported memories in the module.",22,null],[12,"num_imported_globals","","The number of imported globals in the module.",22,null],[12,"num_defined_tables","","The number of defined tables in the module.",22,null],[12,"num_defined_memories","","The number of defined memories in the module.",22,null],[12,"num_defined_globals","","The number of defined globals in the module.",22,null],[4,"ModuleMemoryOffset","","Memory definition offset in the VMContext structure.",null,null],[13,"None","","Not available.",23,null],[13,"Defined","","Offset to the defined memory.",23,null],[13,"Imported","","Offset to the imported memory.",23,null],[4,"CompileError","","An error while compiling WebAssembly to machine code.",null,null],[13,"Wasm","","A wasm translation error occured.",24,null],[13,"Codegen","","A compilation error occured.",24,null],[13,"DebugInfoNotSupported","","A compilation error occured.",24,null],[4,"CompiledFunctionUnwindInfo","","Compiled function unwind information.",null,null],[13,"None","","No info.",25,null],[13,"Windows","","Windows UNWIND_INFO.",25,null],[13,"FrameLayout","","Frame layout info.",25,null],[4,"RelocationTarget","","Destination function. Can be either user function or some…",null,null],[13,"UserFunc","","The user function index.",26,null],[13,"LibCall","","A compiler-generated libcall.",26,null],[13,"JumpTable","","Jump table index.",26,null],[4,"Export","","An entity to export.",null,null],[13,"Function","","Function export.",27,null],[13,"Table","","Table export.",27,null],[13,"Memory","","Memory export.",27,null],[13,"Global","","Global export.",27,null],[4,"MemoryStyle","","Implemenation styles for WebAssembly linear memory.",null,null],[13,"Dynamic","","The actual memory can be resized and moved.",28,null],[13,"Static","","Addresss space is allocated up front.",28,null],[12,"bound","wasmtime_environ::MemoryStyle","The number of mapped and unmapped pages.",29,null],[4,"TableStyle","wasmtime_environ","Implemenation styles for WebAssembly tables.",null,null],[13,"CallerChecksSignature","","Signatures are stored in the table and checked in the…",30,null],[5,"cache_create_new_config","","Creates a new configuration file at specified path, or…",null,[[["option"],["path"],["asref",["path"]],["debug"]],[["pathbuf"],["result",["pathbuf"]]]]],[5,"translate_signature","","Add environment-specific function parameters.",null,[[["signature"],["type"]],["signature"]]],[11,"new","","Constructs unwind info object.",25,[[["targetisa"],["context"]],["self"]]],[11,"is_empty","","Retuns true is no unwind info data.",25,[[["self"]],["bool"]]],[11,"len","","Returns size of serilized unwind info.",25,[[["self"]],["usize"]]],[11,"serialize","","Serializes data into byte array.",25,[[["vec"],["self"]]]],[11,"new","","Creates a compilation artifact from a contiguous function…",31,[[["compiledfunction"],["definedfuncindex"],["primarymap",["definedfuncindex","compiledfunction"]]],["self"]]],[11,"from_buffer","","Allocates the compilation result with the given function…",31,[[["vec",["u8"]],["u8"]],["self"]]],[11,"get","","Gets the bytes of a single function",31,[[["definedfuncindex"],["self"]],["compiledfunction"]]],[11,"len","","Gets the number of functions defined.",31,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether there are no functions defined.",31,[[["self"]],["bool"]]],[11,"get_jt_offsets","","Gets functions jump table offsets.",31,[[["self"]],[["definedfuncindex"],["jumptableoffsets"],["primarymap",["definedfuncindex","jumptableoffsets"]]]]],[11,"get_memory32_grow_index","","Returns an index for wasm's `memory.grow` builtin function.",32,[[],["self"]]],[11,"get_imported_memory32_grow_index","","Returns an index for wasm's imported `memory.grow` builtin…",32,[[],["self"]]],[11,"get_memory32_size_index","","Returns an index for wasm's `memory.size` builtin function.",32,[[],["self"]]],[11,"get_imported_memory32_size_index","","Returns an index for wasm's imported `memory.size` builtin…",32,[[],["self"]]],[11,"get_table_copy_index","","Returns an index for wasm's `table.copy` when both tables…",32,[[],["self"]]],[11,"get_table_init_index","","Returns an index for wasm's `table.init`.",32,[[],["self"]]],[11,"get_elem_drop_index","","Returns an index for wasm's `elem.drop`.",32,[[],["self"]]],[11,"get_defined_memory_copy_index","","Returns an index for wasm's `memory.copy` for locally…",32,[[],["self"]]],[11,"get_imported_memory_copy_index","","Returns an index for wasm's `memory.copy` for imported…",32,[[],["self"]]],[11,"get_memory_fill_index","","Returns an index for wasm's `memory.fill` for locally…",32,[[],["self"]]],[11,"get_imported_memory_fill_index","","Returns an index for wasm's `memory.fill` for imported…",32,[[],["self"]]],[11,"get_memory_init_index","","Returns an index for wasm's `memory.init` instruction.",32,[[],["self"]]],[11,"get_data_drop_index","","Returns an index for wasm's `data.drop` instruction.",32,[[],["self"]]],[11,"builtin_functions_total_number","","Returns the total number of builtin functions.",32,[[],["u32"]]],[11,"index","","Return the index as an u32 number.",32,[[["self"]],["u32"]]],[11,"for_memory","","Decide on an implementation style for the given `Memory`.",28,[[["memory"],["tunables"]]]],[11,"for_memory","","Draw up a plan for implementing a `Memory`.",12,[[["memory"],["tunables"]],["self"]]],[11,"for_table","","Decide on an implementation style for the given `Table`.",30,[[["table"],["tunables"]],["self"]]],[11,"for_table","","Draw up a plan for implementing a `Table`.",16,[[["table"],["tunables"]],["self"]]],[11,"new","","Allocates the module data structures.",13,[[],["self"]]],[11,"get_passive_element","","Get the given passive element, if it exists.",13,[[["elemindex"],["self"]],["option"]]],[11,"func_index","","Convert a `DefinedFuncIndex` into a `FuncIndex`.",14,[[["definedfuncindex"],["self"]],["funcindex"]]],[11,"defined_func_index","","Convert a `FuncIndex` into a `DefinedFuncIndex`. Returns…",14,[[["self"],["funcindex"]],[["definedfuncindex"],["option",["definedfuncindex"]]]]],[11,"is_imported_function","","Test whether the given function index is for an imported…",14,[[["self"],["funcindex"]],["bool"]]],[11,"table_index","","Convert a `DefinedTableIndex` into a `TableIndex`.",14,[[["self"],["definedtableindex"]],["tableindex"]]],[11,"defined_table_index","","Convert a `TableIndex` into a `DefinedTableIndex`. Returns…",14,[[["self"],["tableindex"]],[["option",["definedtableindex"]],["definedtableindex"]]]],[11,"is_imported_table","","Test whether the given table index is for an imported table.",14,[[["self"],["tableindex"]],["bool"]]],[11,"memory_index","","Convert a `DefinedMemoryIndex` into a `MemoryIndex`.",14,[[["definedmemoryindex"],["self"]],["memoryindex"]]],[11,"defined_memory_index","","Convert a `MemoryIndex` into a `DefinedMemoryIndex`.…",14,[[["self"],["memoryindex"]],[["definedmemoryindex"],["option",["definedmemoryindex"]]]]],[11,"is_imported_memory","","Test whether the given memory index is for an imported…",14,[[["self"],["memoryindex"]],["bool"]]],[11,"global_index","","Convert a `DefinedGlobalIndex` into a `GlobalIndex`.",14,[[["self"],["definedglobalindex"]],["globalindex"]]],[11,"defined_global_index","","Convert a `GlobalIndex` into a `DefinedGlobalIndex`.…",14,[[["globalindex"],["self"]],[["definedglobalindex"],["option",["definedglobalindex"]]]]],[11,"is_imported_global","","Test whether the given global index is for an imported…",14,[[["globalindex"],["self"]],["bool"]]],[11,"func_env","","Return a new `FuncEnvironment` for translating a function.",20,[[["self"]],["funcenvironment"]]],[11,"new","","Allocates the environment data structures.",33,[[["targetfrontendconfig"],["tunables"]],["self"]]],[11,"translate","","Translate a wasm module using this environment. This…",33,[[],[["moduletranslation"],["wasmresult",["moduletranslation"]]]]],[11,"new","","Return a new `VMOffsets` instance, for a given pointer size.",22,[[["modulelocal"],["u8"]],["self"]]],[11,"vmfunction_import_body","","The offset of the `body` field.",22,[[["self"]],["u8"]]],[11,"vmfunction_import_vmctx","","The offset of the `vmctx` field.",22,[[["self"]],["u8"]]],[11,"size_of_vmfunction_import","","Return the size of `VMFunctionImport`.",22,[[["self"]],["u8"]]],[11,"size_of_vmfunction_body_ptr","","The size of the `current_elements` field.",22,[[["self"]],["u8"]]],[11,"vmtable_import_from","","The offset of the `from` field.",22,[[["self"]],["u8"]]],[11,"vmtable_import_vmctx","","The offset of the `vmctx` field.",22,[[["self"]],["u8"]]],[11,"size_of_vmtable_import","","Return the size of `VMTableImport`.",22,[[["self"]],["u8"]]],[11,"vmtable_definition_base","","The offset of the `base` field.",22,[[["self"]],["u8"]]],[11,"vmtable_definition_current_elements","","The offset of the `current_elements` field.",22,[[["self"]],["u8"]]],[11,"size_of_vmtable_definition_current_elements","","The size of the `current_elements` field.",22,[[["self"]],["u8"]]],[11,"size_of_vmtable_definition","","Return the size of `VMTableDefinition`.",22,[[["self"]],["u8"]]],[11,"type_of_vmtable_definition_current_elements","","The type of the `current_elements` field.",22,[[["self"]],["type"]]],[11,"vmmemory_import_from","","The offset of the `from` field.",22,[[["self"]],["u8"]]],[11,"vmmemory_import_vmctx","","The offset of the `vmctx` field.",22,[[["self"]],["u8"]]],[11,"size_of_vmmemory_import","","Return the size of `VMMemoryImport`.",22,[[["self"]],["u8"]]],[11,"vmmemory_definition_base","","The offset of the `base` field.",22,[[["self"]],["u8"]]],[11,"vmmemory_definition_current_length","","The offset of the `current_length` field.",22,[[["self"]],["u8"]]],[11,"size_of_vmmemory_definition_current_length","","The size of the `current_length` field.",22,[[["self"]],["u8"]]],[11,"size_of_vmmemory_definition","","Return the size of `VMMemoryDefinition`.",22,[[["self"]],["u8"]]],[11,"type_of_vmmemory_definition_current_length","","The type of the `current_length` field.",22,[[["self"]],["type"]]],[11,"vmglobal_import_from","","The offset of the `from` field.",22,[[["self"]],["u8"]]],[11,"size_of_vmglobal_import","","Return the size of `VMGlobalImport`.",22,[[["self"]],["u8"]]],[11,"size_of_vmglobal_definition","","Return the size of `VMGlobalDefinition`; this is the size…",22,[[["self"]],["u8"]]],[11,"size_of_vmshared_signature_index","","Return the size of `VMSharedSignatureIndex`.",22,[[["self"]],["u8"]]],[11,"vmcaller_checked_anyfunc_func_ptr","","The offset of the `func_ptr` field.",22,[[["self"]],["u8"]]],[11,"vmcaller_checked_anyfunc_type_index","","The offset of the `type_index` field.",22,[[["self"]],["u8"]]],[11,"vmcaller_checked_anyfunc_vmctx","","The offset of the `vmctx` field.",22,[[["self"]],["u8"]]],[11,"size_of_vmcaller_checked_anyfunc","","Return the size of `VMCallerCheckedAnyfunc`.",22,[[["self"]],["u8"]]],[11,"vmctx_signature_ids_begin","","The offset of the `signature_ids` array.",22,[[["self"]],["u32"]]],[11,"vmctx_imported_functions_begin","","The offset of the `tables` array.",22,[[["self"]],["u32"]]],[11,"vmctx_imported_tables_begin","","The offset of the `tables` array.",22,[[["self"]],["u32"]]],[11,"vmctx_imported_memories_begin","","The offset of the `memories` array.",22,[[["self"]],["u32"]]],[11,"vmctx_imported_globals_begin","","The offset of the `globals` array.",22,[[["self"]],["u32"]]],[11,"vmctx_tables_begin","","The offset of the `tables` array.",22,[[["self"]],["u32"]]],[11,"vmctx_memories_begin","","The offset of the `memories` array.",22,[[["self"]],["u32"]]],[11,"vmctx_globals_begin","","The offset of the `globals` array.",22,[[["self"]],["u32"]]],[11,"vmctx_builtin_functions_begin","","The offset of the builtin functions array.",22,[[["self"]],["u32"]]],[11,"size_of_vmctx","","Return the size of the `VMContext` allocation.",22,[[["self"]],["u32"]]],[11,"vmctx_vmshared_signature_id","","Return the offset to `VMSharedSignatureId` index `index`.",22,[[["signatureindex"],["self"]],["u32"]]],[11,"vmctx_vmfunction_import","","Return the offset to `VMFunctionImport` index `index`.",22,[[["self"],["funcindex"]],["u32"]]],[11,"vmctx_vmtable_import","","Return the offset to `VMTableImport` index `index`.",22,[[["self"],["tableindex"]],["u32"]]],[11,"vmctx_vmmemory_import","","Return the offset to `VMMemoryImport` index `index`.",22,[[["self"],["memoryindex"]],["u32"]]],[11,"vmctx_vmglobal_import","","Return the offset to `VMGlobalImport` index `index`.",22,[[["globalindex"],["self"]],["u32"]]],[11,"vmctx_vmtable_definition","","Return the offset to `VMTableDefinition` index `index`.",22,[[["self"],["definedtableindex"]],["u32"]]],[11,"vmctx_vmmemory_definition","","Return the offset to `VMMemoryDefinition` index `index`.",22,[[["definedmemoryindex"],["self"]],["u32"]]],[11,"vmctx_vmglobal_definition","","Return the offset to the `VMGlobalDefinition` index `index`.",22,[[["self"],["definedglobalindex"]],["u32"]]],[11,"vmctx_vmfunction_import_body","","Return the offset to the `body` field in `*const…",22,[[["self"],["funcindex"]],["u32"]]],[11,"vmctx_vmfunction_import_vmctx","","Return the offset to the `vmctx` field in `*const…",22,[[["self"],["funcindex"]],["u32"]]],[11,"vmctx_vmtable_import_from","","Return the offset to the `from` field in `VMTableImport`…",22,[[["self"],["tableindex"]],["u32"]]],[11,"vmctx_vmtable_definition_base","","Return the offset to the `base` field in…",22,[[["self"],["definedtableindex"]],["u32"]]],[11,"vmctx_vmtable_definition_current_elements","","Return the offset to the `current_elements` field in…",22,[[["self"],["definedtableindex"]],["u32"]]],[11,"vmctx_vmmemory_import_from","","Return the offset to the `from` field in `VMMemoryImport`…",22,[[["self"],["memoryindex"]],["u32"]]],[11,"vmctx_vmmemory_import_vmctx","","Return the offset to the `vmctx` field in `VMMemoryImport`…",22,[[["self"],["memoryindex"]],["u32"]]],[11,"vmctx_vmmemory_definition_base","","Return the offset to the `base` field in…",22,[[["definedmemoryindex"],["self"]],["u32"]]],[11,"vmctx_vmmemory_definition_current_length","","Return the offset to the `current_length` field in…",22,[[["definedmemoryindex"],["self"]],["u32"]]],[11,"vmctx_vmglobal_import_from","","Return the offset to the `from` field in `VMGlobalImport`…",22,[[["globalindex"],["self"]],["u32"]]],[11,"vmctx_builtin_function","","Return the offset to builtin function in…",22,[[["builtinfunctionindex"],["self"]],["u32"]]],[11,"new","","Constructs `TargetSharedSignatureIndex`.",34,[[["u32"]],["self"]]],[11,"index","","Returns index value.",34,[[],["u32"]]],[11,"worker_event_queue_size","","Returns `$setting`.",35,[[["self"]],["u64"]]],[11,"baseline_compression_level","","Returns `$setting`.",35,[[["self"]],["i32"]]],[11,"optimized_compression_level","","Returns `$setting`.",35,[[["self"]],["i32"]]],[11,"optimized_compression_usage_counter_threshold","","Returns `$setting`.",35,[[["self"]],["u64"]]],[11,"cleanup_interval","","Returns `$setting`.",35,[[["self"]],["duration"]]],[11,"optimizing_compression_task_timeout","","Returns `$setting`.",35,[[["self"]],["duration"]]],[11,"allowed_clock_drift_for_files_from_future","","Returns `$setting`.",35,[[["self"]],["duration"]]],[11,"file_count_soft_limit","","Returns `$setting`.",35,[[["self"]],["u64"]]],[11,"files_total_size_soft_limit","","Returns `$setting`.",35,[[["self"]],["u64"]]],[11,"file_count_limit_percent_if_deleting","","Returns `$setting`.",35,[[["self"]],["u8"]]],[11,"files_total_size_limit_percent_if_deleting","","Returns `$setting`.",35,[[["self"]],["u8"]]],[11,"enabled","","Returns true if and only if the cache is enabled.",35,[[["self"]],["bool"]]],[11,"directory","","Returns path to the cache directory.",35,[[["self"]],["pathbuf"]]],[11,"new_cache_disabled","","Creates a new set of configuration which represents a…",35,[[],["self"]]],[11,"from_file","","Parses cache configuration from the file specified",35,[[["option",["path"]],["path"]],["result"]]],[11,"cache_hits","","Returns the number of cache hits seen so far",35,[[["self"]],["usize"]]],[11,"cache_misses","","Returns the number of cache misses seen so far",35,[[["self"]],["usize"]]],[0,"cranelift","","Support for compiling with Cranelift.",null,null],[3,"RelocSink","wasmtime_environ::cranelift","Implementation of a relocation sink that just saves all…",null,null],[12,"func_relocs","","Relocations recorded for the function.",36,null],[3,"Cranelift","","A compiler that compiles a WebAssembly module with…",null,null],[11,"new","","Return a new `RelocSink` instance.",36,[[["funcindex"]],["self"]]],[0,"ir","wasmtime_environ","",null,null],[0,"types","wasmtime_environ::ir","Common types for the Cranelift code generator.",null,null],[3,"Type","wasmtime_environ::ir::types","The type of an SSA value.",null,null],[17,"INVALID","","Not a valid type. Can't be loaded or stored. Can't be part…",null,null],[17,"IFLAGS","","CPU flags representing the result of an integer…",null,null],[17,"FFLAGS","","CPU flags representing the result of a floating point…",null,null],[17,"B1","","A boolean type with 1 bits.",null,null],[17,"B8","","A boolean type with 8 bits.",null,null],[17,"B16","","A boolean type with 16 bits.",null,null],[17,"B32","","A boolean type with 32 bits.",null,null],[17,"B64","","A boolean type with 64 bits.",null,null],[17,"B128","","A boolean type with 128 bits.",null,null],[17,"I8","","An integer type with 8 bits. WARNING: arithmetic on 8bit…",null,null],[17,"I16","","An integer type with 16 bits. WARNING: arithmetic on 16bit…",null,null],[17,"I32","","An integer type with 32 bits.",null,null],[17,"I64","","An integer type with 64 bits.",null,null],[17,"I128","","An integer type with 128 bits.",null,null],[17,"F32","","A 32-bit floating point type represented in the IEEE…",null,null],[17,"F64","","A 64-bit floating point type represented in the IEEE…",null,null],[17,"R32","","An opaque reference type with 32 bits.",null,null],[17,"R64","","An opaque reference type with 64 bits.",null,null],[17,"B8X8","","A SIMD vector with 8 lanes containing a `b8` each.",null,null],[17,"B16X4","","A SIMD vector with 4 lanes containing a `b16` each.",null,null],[17,"B32X2","","A SIMD vector with 2 lanes containing a `b32` each.",null,null],[17,"I8X8","","A SIMD vector with 8 lanes containing a `i8` each.",null,null],[17,"I16X4","","A SIMD vector with 4 lanes containing a `i16` each.",null,null],[17,"I32X2","","A SIMD vector with 2 lanes containing a `i32` each.",null,null],[17,"F32X2","","A SIMD vector with 2 lanes containing a `f32` each.",null,null],[17,"B8X16","","A SIMD vector with 16 lanes containing a `b8` each.",null,null],[17,"B16X8","","A SIMD vector with 8 lanes containing a `b16` each.",null,null],[17,"B32X4","","A SIMD vector with 4 lanes containing a `b32` each.",null,null],[17,"B64X2","","A SIMD vector with 2 lanes containing a `b64` each.",null,null],[17,"I8X16","","A SIMD vector with 16 lanes containing a `i8` each.",null,null],[17,"I16X8","","A SIMD vector with 8 lanes containing a `i16` each.",null,null],[17,"I32X4","","A SIMD vector with 4 lanes containing a `i32` each.",null,null],[17,"I64X2","","A SIMD vector with 2 lanes containing a `i64` each.",null,null],[17,"F32X4","","A SIMD vector with 4 lanes containing a `f32` each.",null,null],[17,"F64X2","","A SIMD vector with 2 lanes containing a `f64` each.",null,null],[17,"B8X32","","A SIMD vector with 32 lanes containing a `b8` each.",null,null],[17,"B16X16","","A SIMD vector with 16 lanes containing a `b16` each.",null,null],[17,"B32X8","","A SIMD vector with 8 lanes containing a `b32` each.",null,null],[17,"B64X4","","A SIMD vector with 4 lanes containing a `b64` each.",null,null],[17,"B128X2","","A SIMD vector with 2 lanes containing a `b128` each.",null,null],[17,"I8X32","","A SIMD vector with 32 lanes containing a `i8` each.",null,null],[17,"I16X16","","A SIMD vector with 16 lanes containing a `i16` each.",null,null],[17,"I32X8","","A SIMD vector with 8 lanes containing a `i32` each.",null,null],[17,"I64X4","","A SIMD vector with 4 lanes containing a `i64` each.",null,null],[17,"I128X2","","A SIMD vector with 2 lanes containing a `i128` each.",null,null],[17,"F32X8","","A SIMD vector with 8 lanes containing a `f32` each.",null,null],[17,"F64X4","","A SIMD vector with 4 lanes containing a `f64` each.",null,null],[17,"B8X64","","A SIMD vector with 64 lanes containing a `b8` each.",null,null],[17,"B16X32","","A SIMD vector with 32 lanes containing a `b16` each.",null,null],[17,"B32X16","","A SIMD vector with 16 lanes containing a `b32` each.",null,null],[17,"B64X8","","A SIMD vector with 8 lanes containing a `b64` each.",null,null],[17,"B128X4","","A SIMD vector with 4 lanes containing a `b128` each.",null,null],[17,"I8X64","","A SIMD vector with 64 lanes containing a `i8` each.",null,null],[17,"I16X32","","A SIMD vector with 32 lanes containing a `i16` each.",null,null],[17,"I32X16","","A SIMD vector with 16 lanes containing a `i32` each.",null,null],[17,"I64X8","","A SIMD vector with 8 lanes containing a `i64` each.",null,null],[17,"I128X4","","A SIMD vector with 4 lanes containing a `i128` each.",null,null],[17,"F32X16","","A SIMD vector with 16 lanes containing a `f32` each.",null,null],[17,"F64X8","","A SIMD vector with 8 lanes containing a `f64` each.",null,null],[3,"AbiParam","wasmtime_environ::ir","Function parameter or return value descriptor.",null,null],[12,"value_type","","Type of the argument value.",37,null],[12,"purpose","","Special purpose of argument, or `Normal`.",37,null],[12,"extension","","Method for extending argument to a full register.",37,null],[12,"location","","ABI-specific location of this argument, or `Unassigned`…",37,null],[4,"ArgumentPurpose","","The special purpose of a function argument.",null,null],[13,"Normal","","A normal user program value passed to or from a function.",38,null],[13,"StructReturn","","Struct return pointer.",38,null],[13,"Link","","The link register.",38,null],[13,"FramePointer","","The frame pointer.",38,null],[13,"CalleeSaved","","A callee-saved register.",38,null],[13,"VMContext","","A VM context pointer.",38,null],[13,"SignatureId","","A signature identifier.",38,null],[13,"StackLimit","","A stack limit pointer.",38,null],[3,"Signature","","Function signature.",null,null],[12,"params","","The arguments passed to the function.",39,null],[12,"returns","","Values returned from the function.",39,null],[12,"call_conv","","Calling convention.",39,null],[3,"SourceLoc","","A source location.",null,null],[3,"StackSlots","","Stack frame manager.",null,null],[12,"layout_info","","Layout information computed from `layout_stack`.",40,null],[4,"TrapCode","","A trap code describing the reason for a trap.",null,null],[13,"StackOverflow","","The current stack space was exhausted.",41,null],[13,"HeapOutOfBounds","","A `heap_addr` instruction detected an out-of-bounds error.",41,null],[13,"TableOutOfBounds","","A `table_addr` instruction detected an out-of-bounds error.",41,null],[13,"OutOfBounds","","Other bounds checking error.",41,null],[13,"IndirectCallToNull","","Indirect call to a null table entry.",41,null],[13,"BadSignature","","Signature mismatch on indirect call.",41,null],[13,"IntegerOverflow","","An integer arithmetic operation caused an overflow.",41,null],[13,"IntegerDivisionByZero","","An integer division by zero.",41,null],[13,"BadConversionToInteger","","Failed float-to-int conversion.",41,null],[13,"UnreachableCodeReached","","Code that was supposed to have been unreachable was reached.",41,null],[13,"Interrupt","","Execution has potentially run too long and may be…",41,null],[13,"User","","A user-defined trap code.",41,null],[3,"Type","","The type of an SSA value.",null,null],[3,"ValueLabel","","Marked with a label value.",null,null],[4,"ValueLoc","","Value location.",null,null],[13,"Unassigned","","This value has not been assigned to a location yet.",42,null],[13,"Reg","","Value is assigned to a register.",42,null],[13,"Stack","","Value is assigned to a stack slot.",42,null],[6,"ValueLabelsRanges","","Resulting map of Value labels and their ranges/locations.",null,null],[0,"settings","wasmtime_environ","",null,null],[5,"builder","wasmtime_environ::settings","Create a `settings::Builder` for the shared settings group.",null,[[],["builder"]]],[3,"Builder","","Collect settings values based on a template.",null,null],[8,"Configurable","","A string-based configurator for settings groups.",null,null],[10,"set","","Set the string value of any setting by name.",43,[[["str"],["self"]],[["result",["seterror"]],["seterror"]]]],[10,"enable","","Enable a boolean setting or apply a preset.",43,[[["str"],["self"]],[["result",["seterror"]],["seterror"]]]],[3,"Flags","","Flags group `shared`.",null,null],[0,"isa","wasmtime_environ","",null,null],[4,"CallConv","wasmtime_environ::isa","Calling convention identifiers.",null,null],[13,"Fast","","Best performance, not ABI-stable",44,null],[13,"Cold","","Smallest caller code size, not ABI-stable",44,null],[13,"SystemV","","System V-style convention used on many platforms",44,null],[13,"WindowsFastcall","","Windows \"fastcall\" convention, also used for x64 and ARM",44,null],[13,"BaldrdashSystemV","","SpiderMonkey WebAssembly convention on systems using…",44,null],[13,"BaldrdashWindows","","SpiderMonkey WebAssembly convention on Windows",44,null],[13,"Probestack","","Specialized convention for the probestack function",44,null],[6,"RegUnit","","Register units are the smallest units of register…",null,null],[3,"TargetFrontendConfig","","This struct provides information that a frontend may need…",null,null],[12,"default_call_conv","","The default calling convention of the target.",45,null],[12,"pointer_width","","The pointer width of the target.",45,null],[8,"TargetIsa","","Methods that are specialized to a target ISA. Implies a…",null,null],[10,"name","","Get the name of this ISA.",46,[[["self"]],["str"]]],[10,"triple","","Get the target triple that was used to make this trait…",46,[[["self"]],["triple"]]],[10,"flags","","Get the ISA-independent flags that were used to make this…",46,[[["self"]],["flags"]]],[11,"default_call_conv","","Get the default calling convention of this target.",46,[[["self"]],["callconv"]]],[11,"pointer_type","","Get the pointer type of this ISA.",46,[[["self"]],["type"]]],[11,"pointer_width","","Get the width of pointers on this ISA.",46,[[["self"]],["pointerwidth"]]],[11,"pointer_bits","","Get the width of pointers on this ISA, in units of bits.",46,[[["self"]],["u8"]]],[11,"pointer_bytes","","Get the width of pointers on this ISA, in units of bytes.",46,[[["self"]],["u8"]]],[11,"frontend_config","","Get the information needed by frontends producing…",46,[[["self"]],["targetfrontendconfig"]]],[11,"uses_cpu_flags","","Does the CPU implement scalar comparisons using a CPU…",46,[[["self"]],["bool"]]],[11,"uses_complex_addresses","","Does the CPU implement multi-register addressing?",46,[[["self"]],["bool"]]],[10,"register_info","","Get a data structure describing the registers in this ISA.",46,[[["self"]],["reginfo"]]],[10,"legal_encodings","","Returns an iterator over legal encodings for the…",46,[[["function"],["instructiondata"],["type"],["self"]],["encodings"]]],[11,"encode","","Encode an instruction after determining it is legal.",46,[[["function"],["type"],["instructiondata"],["self"]],[["result",["encoding"]],["encoding"]]]],[10,"encoding_info","","Get a data structure describing the instruction encodings…",46,[[["self"]],["encinfo"]]],[10,"legalize_signature","","Legalize a function signature.",46,[[["cow"],["self"],["bool"]]]],[10,"regclass_for_abi_type","","Get the register class that should be used to represent an…",46,[[["self"],["type"]],["regclassdata"]]],[10,"allocatable_registers","","Get the set of allocatable registers that can be used when…",46,[[["function"],["self"]],["registerset"]]],[11,"prologue_epilogue","","Compute the stack layout and insert prologue and epilogue…",46,[[["function"],["self"]],[["result",["codegenerror"]],["codegenerror"]]]],[10,"emit_inst","","Emit binary machine code for a single instruction into the…",46,[[["function"],["inst"],["codesink"],["self"],["regdiversions"]]]],[10,"emit_function_to_memory","","Emit a whole function into memory.",46,[[["function"],["self"],["memorycodesink"]]]],[10,"unsigned_add_overflow_condition","","IntCC condition for Unsigned Addition Overflow (Carry).",46,[[["self"]],["intcc"]]],[10,"unsigned_sub_overflow_condition","","IntCC condition for Unsigned Subtraction Overflow…",46,[[["self"]],["intcc"]]],[11,"emit_unwind_info","","Emit unwind information for the given function.",46,[[["function"],["frameunwindsink"],["self"],["frameunwindkind"]]]],[0,"entity","wasmtime_environ","",null,null],[0,"packed_option","wasmtime_environ::entity","Compact representation of `Option<T>` for types with a…",null,null],[8,"ReservedValue","wasmtime_environ::entity::packed_option","Types that have a reserved value which can't be created…",null,null],[10,"reserved_value","","Create an instance of the reserved value.",47,[[],["self"]]],[3,"PackedOption","","Packed representation of `Option<T>`.",null,null],[3,"BoxedSlice","wasmtime_environ::entity","A slice mapping `K -> V` allocating dense entity references.",null,null],[8,"EntityRef","","A type wrapping a small integer index should implement…",null,null],[10,"new","","Create a new entity reference from a small integer. This…",48,[[["usize"]],["self"]]],[10,"index","","Get the index that was used to create this entity reference.",48,[[],["usize"]]],[3,"PrimaryMap","","A primary mapping `K -> V` allocating dense entity…",null,null],[0,"wasm","wasmtime_environ","",null,null],[5,"get_vmctx_value_label","wasmtime_environ::wasm","Special VMContext value label. It is tracked as…",null,[[],["valuelabel"]]],[3,"DataIndex","","Index type of a passive data segment inside the…",null,null],[3,"DefinedFuncIndex","","Index type of a defined function inside the WebAssembly…",null,null],[3,"DefinedGlobalIndex","","Index type of a defined global inside the WebAssembly…",null,null],[3,"DefinedMemoryIndex","","Index type of a defined memory inside the WebAssembly…",null,null],[3,"DefinedTableIndex","","Index type of a defined table inside the WebAssembly module.",null,null],[3,"ElemIndex","","Index type of a passive element segment inside the…",null,null],[3,"FuncIndex","","Index type of a function (imported or defined) inside the…",null,null],[3,"Global","","WebAssembly global.",null,null],[12,"ty","","The type of the value stored in the global.",49,null],[12,"mutability","","A flag indicating whether the value may change at runtime.",49,null],[12,"initializer","","The source of the initial value.",49,null],[3,"GlobalIndex","","Index type of a global variable (imported or defined)…",null,null],[4,"GlobalInit","","Globals are initialized via the `const` operators or by…",null,null],[13,"I32Const","","An `i32.const`.",50,null],[13,"I64Const","","An `i64.const`.",50,null],[13,"F32Const","","An `f32.const`.",50,null],[13,"F64Const","","An `f64.const`.",50,null],[13,"V128Const","","A `vconst`.",50,null],[13,"GetGlobal","","A `global.get` of another global.",50,null],[13,"RefNullConst","","A `ref.null`.",50,null],[13,"RefFunc","","A `ref.func <index>`.",50,null],[13,"Import","","< The global is imported from, and thus initialized by, a…",50,null],[3,"Memory","","WebAssembly linear memory.",null,null],[12,"minimum","","The minimum number of pages in the memory.",51,null],[12,"maximum","","The maximum number of pages in the memory.",51,null],[12,"shared","","Whether the memory may be shared between multiple threads.",51,null],[3,"MemoryIndex","","Index type of a linear memory (imported or defined) inside…",null,null],[3,"SignatureIndex","","Index type of a signature (imported or defined) inside the…",null,null],[3,"Table","","WebAssembly table.",null,null],[12,"ty","","The type of data stored in elements of the table.",52,null],[12,"minimum","","The minimum number of elements in the table.",52,null],[12,"maximum","","The maximum number of elements in the table.",52,null],[4,"TableElementType","","WebAssembly table element. Can be a function or a scalar…",null,null],[13,"Val","","A scalar type.",53,null],[13,"Func","","A function.",53,null],[3,"TableIndex","","Index type of a table (imported or defined) inside the…",null,null],[6,"ModuleAddressMap","wasmtime_environ","Module functions addresses mappings.",null,null],[6,"ValueLabelsRanges","","Value ranges for functions.",null,null],[6,"Relocations","","Relocations to apply to function bodies.",null,null],[6,"Traps","","Information about traps associated with the functions…",null,null],[6,"FrameLayouts","","Functions frame layouts.",null,null],[17,"WASM_PAGE_SIZE","","WebAssembly page sizes are defined to be 64KiB.",null,null],[17,"WASM_MAX_PAGES","","The number of pages we can have before we run out of byte…",null,null],[17,"VERSION","","Version number of this crate.",null,null],[8,"Compiler","","An implementation of a compiler from parsed WebAssembly…",null,null],[10,"compile_module","","Compile a parsed module with the given `TargetIsa`.",54,[[["targetisa"],["cacheconfig"],["primarymap",["definedfuncindex","functionbodydata"]],["bool"],["moduletranslationstate"],["definedfuncindex"],["module"],["functionbodydata"]],[["compileerror"],["result",["compileerror"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"equivalent","","",0,[[["k"],["self"]],["bool"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"equivalent","","",4,[[["k"],["self"]],["bool"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"equivalent","","",5,[[["k"],["self"]],["bool"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"equivalent","","",31,[[["k"],["self"]],["bool"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"equivalent","","",7,[[["k"],["self"]],["bool"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"equivalent","","",8,[[["k"],["self"]],["bool"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"equivalent","","",9,[[["k"],["self"]],["bool"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"equivalent","","",10,[[["k"],["self"]],["bool"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"equivalent","","",11,[[["k"],["self"]],["bool"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"equivalent","","",25,[[["k"],["self"]],["bool"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"equivalent","","",26,[[["k"],["self"]],["bool"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"equivalent","","",27,[[["k"],["self"]],["bool"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","wasmtime_environ::ir","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,[[["self"],["t"]]]],[11,"to_string","","",55,[[["self"]],["string"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"equivalent","","",55,[[["k"],["self"]],["bool"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"to_string","","",37,[[["self"]],["string"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"equivalent","","",37,[[["k"],["self"]],["bool"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"to_string","","",38,[[["self"]],["string"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"equivalent","","",38,[[["k"],["self"]],["bool"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"equivalent","","",39,[[["k"],["self"]],["bool"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"to_string","","",56,[[["self"]],["string"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"equivalent","","",56,[[["k"],["self"]],["bool"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"equivalent","","",40,[[["k"],["self"]],["bool"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"equivalent","","",41,[[["k"],["self"]],["bool"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"to_string","","",57,[[["self"]],["string"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"key","","",57,[[["self"]],["t"]]],[11,"equivalent","","",57,[[["k"],["self"]],["bool"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"equivalent","","",42,[[["k"],["self"]],["bool"]]],[11,"from","wasmtime_environ::settings","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,[[["self"],["t"]]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"to_string","","",59,[[["self"]],["string"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"from","wasmtime_environ::isa","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"to_string","","",44,[[["self"]],["string"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"equivalent","","",44,[[["k"],["self"]],["bool"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","wasmtime_environ::entity::packed_option","",60,[[],["t"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"equivalent","","",60,[[["k"],["self"]],["bool"]]],[11,"from","wasmtime_environ::entity","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,[[["self"],["t"]]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"equivalent","","",62,[[["k"],["self"]],["bool"]]],[11,"from","wasmtime_environ::wasm","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,[[["self"],["t"]]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"key","","",63,[[["self"]],["t"]]],[11,"equivalent","","",63,[[["k"],["self"]],["bool"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,[[["self"],["t"]]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"key","","",64,[[["self"]],["t"]]],[11,"equivalent","","",64,[[["k"],["self"]],["bool"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"key","","",65,[[["self"]],["t"]]],[11,"equivalent","","",65,[[["k"],["self"]],["bool"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"key","","",66,[[["self"]],["t"]]],[11,"equivalent","","",66,[[["k"],["self"]],["bool"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"key","","",67,[[["self"]],["t"]]],[11,"equivalent","","",67,[[["k"],["self"]],["bool"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"key","","",68,[[["self"]],["t"]]],[11,"equivalent","","",68,[[["k"],["self"]],["bool"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"key","","",69,[[["self"]],["t"]]],[11,"equivalent","","",69,[[["k"],["self"]],["bool"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"key","","",70,[[["self"]],["t"]]],[11,"equivalent","","",70,[[["k"],["self"]],["bool"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"key","","",71,[[["self"]],["t"]]],[11,"equivalent","","",71,[[["k"],["self"]],["bool"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"key","","",72,[[["self"]],["t"]]],[11,"equivalent","","",72,[[["k"],["self"]],["bool"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"key","","",73,[[["self"]],["t"]]],[11,"equivalent","","",73,[[["k"],["self"]],["bool"]]],[11,"from","wasmtime_environ::cranelift","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"fmt","wasmtime_environ::ir","",39,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",57,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",37,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",41,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","wasmtime_environ::settings","",59,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","wasmtime_environ::isa","",44,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","wasmtime_environ::ir","",55,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",56,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",38,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"deserialize","","",56,[[["__d"]],[["result",["sourceloc"]],["sourceloc"]]]],[11,"deserialize","","",40,[[["__d"]],[["result",["stackslots"]],["stackslots"]]]],[11,"deserialize","wasmtime_environ","",0,[[["__d"]],[["result",["framelayoutchange"]],["framelayoutchange"]]]],[11,"deserialize","wasmtime_environ::isa","",44,[[["__d"]],[["result",["callconv"]],["callconv"]]]],[11,"deserialize","wasmtime_environ::ir","",41,[[["__d"]],[["trapcode"],["result",["trapcode"]]]]],[11,"deserialize","","",42,[[["__d"]],[["result",["valueloc"]],["valueloc"]]]],[11,"deserialize","","",57,[[["__d"]],[["valuelabel"],["result",["valuelabel"]]]]],[11,"new","","",57,[[["usize"]],["valuelabel"]]],[11,"index","","",57,[[],["usize"]]],[11,"index","","",40,[[["stackslot"],["self"]],["stackslotdata"]]],[11,"eq","","",39,[[["self"],["signature"]],["bool"]]],[11,"ne","","",39,[[["self"],["signature"]],["bool"]]],[11,"eq","","",56,[[["sourceloc"],["self"]],["bool"]]],[11,"ne","","",56,[[["sourceloc"],["self"]],["bool"]]],[11,"eq","wasmtime_environ::isa","",44,[[["callconv"],["self"]],["bool"]]],[11,"eq","wasmtime_environ","",0,[[["self"],["framelayoutchange"]],["bool"]]],[11,"ne","","",0,[[["self"],["framelayoutchange"]],["bool"]]],[11,"eq","wasmtime_environ::ir","",42,[[["valueloc"],["self"]],["bool"]]],[11,"ne","","",42,[[["valueloc"],["self"]],["bool"]]],[11,"eq","","",57,[[["valuelabel"],["self"]],["bool"]]],[11,"ne","","",57,[[["valuelabel"],["self"]],["bool"]]],[11,"eq","","",40,[[["self"],["stackslots"]],["bool"]]],[11,"ne","","",40,[[["self"],["stackslots"]],["bool"]]],[11,"eq","","",55,[[["self"],["type"]],["bool"]]],[11,"ne","","",55,[[["self"],["type"]],["bool"]]],[11,"eq","","",37,[[["self"],["abiparam"]],["bool"]]],[11,"ne","","",37,[[["self"],["abiparam"]],["bool"]]],[11,"eq","","",41,[[["trapcode"],["self"]],["bool"]]],[11,"ne","","",41,[[["trapcode"],["self"]],["bool"]]],[11,"eq","","",38,[[["argumentpurpose"],["self"]],["bool"]]],[11,"default","","",42,[[],["valueloc"]]],[11,"default","","",56,[[],["sourceloc"]]],[11,"default","","",55,[[],["type"]]],[11,"hash","","",41,[[["self"],["__h"]]]],[11,"hash","wasmtime_environ","",0,[[["self"],["__h"]]]],[11,"hash","wasmtime_environ::ir","",57,[[["self"],["__h"]]]],[11,"hash","","",38,[[["self"],["__h"]]]],[11,"hash","","",55,[[["self"],["__h"]]]],[11,"hash","wasmtime_environ::isa","",44,[[["self"],["__h"]]]],[11,"hash","wasmtime_environ::ir","",37,[[["self"],["__h"]]]],[11,"hash","","",39,[[["self"],["__h"]]]],[11,"index_mut","","",40,[[["self"],["stackslot"]],["stackslotdata"]]],[11,"enable","wasmtime_environ::settings","",58,[[["str"],["self"]],[["result",["seterror"]],["seterror"]]]],[11,"set","","",58,[[["str"],["self"]],[["result",["seterror"]],["seterror"]]]],[11,"from_str","wasmtime_environ::ir","",41,[[["str"]],[["trapcode"],["result",["trapcode"]]]]],[11,"from_str","","",38,[[["str"]],[["result",["argumentpurpose"]],["argumentpurpose"]]]],[11,"from_str","wasmtime_environ::isa","",44,[[["str"]],[["result",["callconv"]],["callconv"]]]],[11,"fmt","wasmtime_environ::ir","",41,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",56,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",38,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",57,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",37,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",39,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",42,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",40,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","wasmtime_environ","",0,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","wasmtime_environ::isa","",44,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","wasmtime_environ::ir","",55,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"clone","","",40,[[["self"]],["stackslots"]]],[11,"clone","","",57,[[["self"]],["valuelabel"]]],[11,"clone","","",38,[[["self"]],["argumentpurpose"]]],[11,"clone","wasmtime_environ::isa","",45,[[["self"]],["targetfrontendconfig"]]],[11,"clone","wasmtime_environ::ir","",37,[[["self"]],["abiparam"]]],[11,"clone","wasmtime_environ","",0,[[["self"]],["framelayoutchange"]]],[11,"clone","wasmtime_environ::ir","",42,[[["self"]],["valueloc"]]],[11,"clone","wasmtime_environ::settings","",58,[[["self"]],["builder"]]],[11,"clone","","",59,[[["self"]],["flags"]]],[11,"clone","wasmtime_environ::ir","",41,[[["self"]],["trapcode"]]],[11,"clone","","",55,[[["self"]],["type"]]],[11,"clone","","",39,[[["self"]],["signature"]]],[11,"clone","","",56,[[["self"]],["sourceloc"]]],[11,"clone","wasmtime_environ::isa","",44,[[["self"]],["callconv"]]],[11,"reserved_value","wasmtime_environ::ir","",57,[[],["valuelabel"]]],[11,"serialize","","",42,[[["self"],["__s"]],["result"]]],[11,"serialize","","",57,[[["self"],["__s"]],["result"]]],[11,"serialize","","",56,[[["self"],["__s"]],["result"]]],[11,"serialize","","",40,[[["self"],["__s"]],["result"]]],[11,"serialize","","",41,[[["self"],["__s"]],["result"]]],[11,"serialize","wasmtime_environ","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","wasmtime_environ::isa","",44,[[["self"],["__s"]],["result"]]],[11,"partial_cmp","wasmtime_environ::entity::packed_option","",60,[[["packedoption"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",60,[[["packedoption"],["self"]],["bool"]]],[11,"le","","",60,[[["packedoption"],["self"]],["bool"]]],[11,"gt","","",60,[[["packedoption"],["self"]],["bool"]]],[11,"ge","","",60,[[["packedoption"],["self"]],["bool"]]],[11,"clone","wasmtime_environ::entity","",61,[[["self"]],["boxedslice"]]],[11,"clone","wasmtime_environ::entity::packed_option","",60,[[["self"]],["packedoption"]]],[11,"clone","wasmtime_environ::entity","",62,[[["self"]],["primarymap"]]],[11,"serialize","","",62,[[["self"],["__s"]],["result"]]],[11,"fmt","","",62,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",61,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","wasmtime_environ::entity::packed_option","",60,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"from","","Convert an option into its packed equivalent.",60,[[["option"]],["packedoption"]]],[11,"from","","Convert `t` into a packed `Some(x)`.",60,[[["t"]],["packedoption"]]],[11,"into","","",60,[[],["option"]]],[11,"index","wasmtime_environ::entity","",61,[[["self"],["k"]],["v"]]],[11,"index","","",62,[[["self"],["k"]],["v"]]],[11,"default","wasmtime_environ::entity::packed_option","Create a default packed option representing `None`.",60,[[],["packedoption"]]],[11,"eq","wasmtime_environ::entity","",62,[[["self"],["primarymap"]],["bool"]]],[11,"ne","","",62,[[["self"],["primarymap"]],["bool"]]],[11,"eq","wasmtime_environ::entity::packed_option","",60,[[["packedoption"],["self"]],["bool"]]],[11,"ne","","",60,[[["packedoption"],["self"]],["bool"]]],[11,"deserialize","wasmtime_environ::entity","",62,[[["__d"]],[["primarymap"],["result",["primarymap"]]]]],[11,"hash","wasmtime_environ::entity::packed_option","",60,[[["self"],["__h"]]]],[11,"hash","wasmtime_environ::entity","",62,[[["self"],["__h"]]]],[11,"index_mut","","",61,[[["self"],["k"]],["v"]]],[11,"index_mut","","",62,[[["self"],["k"]],["v"]]],[11,"from_iter","","",62,[[["t"]],["primarymap"]]],[11,"cmp","wasmtime_environ::entity::packed_option","",60,[[["packedoption"],["self"]],["ordering"]]],[11,"reserved_value","wasmtime_environ::wasm","",66,[[],["definedmemoryindex"]]],[11,"reserved_value","","",71,[[],["memoryindex"]]],[11,"reserved_value","","",70,[[],["globalindex"]]],[11,"reserved_value","","",64,[[],["definedfuncindex"]]],[11,"reserved_value","","",67,[[],["definedtableindex"]]],[11,"reserved_value","","",68,[[],["elemindex"]]],[11,"reserved_value","","",63,[[],["dataindex"]]],[11,"reserved_value","","",73,[[],["tableindex"]]],[11,"reserved_value","","",72,[[],["signatureindex"]]],[11,"reserved_value","","",69,[[],["funcindex"]]],[11,"reserved_value","","",65,[[],["definedglobalindex"]]],[11,"partial_cmp","","",65,[[["definedglobalindex"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",65,[[["definedglobalindex"],["self"]],["bool"]]],[11,"le","","",65,[[["definedglobalindex"],["self"]],["bool"]]],[11,"gt","","",65,[[["definedglobalindex"],["self"]],["bool"]]],[11,"ge","","",65,[[["definedglobalindex"],["self"]],["bool"]]],[11,"partial_cmp","","",72,[[["self"],["signatureindex"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",72,[[["self"],["signatureindex"]],["bool"]]],[11,"le","","",72,[[["self"],["signatureindex"]],["bool"]]],[11,"gt","","",72,[[["self"],["signatureindex"]],["bool"]]],[11,"ge","","",72,[[["self"],["signatureindex"]],["bool"]]],[11,"partial_cmp","","",70,[[["self"],["globalindex"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",70,[[["self"],["globalindex"]],["bool"]]],[11,"le","","",70,[[["self"],["globalindex"]],["bool"]]],[11,"gt","","",70,[[["self"],["globalindex"]],["bool"]]],[11,"ge","","",70,[[["self"],["globalindex"]],["bool"]]],[11,"partial_cmp","","",71,[[["memoryindex"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",71,[[["memoryindex"],["self"]],["bool"]]],[11,"le","","",71,[[["memoryindex"],["self"]],["bool"]]],[11,"gt","","",71,[[["memoryindex"],["self"]],["bool"]]],[11,"ge","","",71,[[["memoryindex"],["self"]],["bool"]]],[11,"partial_cmp","","",63,[[["dataindex"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",63,[[["dataindex"],["self"]],["bool"]]],[11,"le","","",63,[[["dataindex"],["self"]],["bool"]]],[11,"gt","","",63,[[["dataindex"],["self"]],["bool"]]],[11,"ge","","",63,[[["dataindex"],["self"]],["bool"]]],[11,"partial_cmp","","",69,[[["self"],["funcindex"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",69,[[["self"],["funcindex"]],["bool"]]],[11,"le","","",69,[[["self"],["funcindex"]],["bool"]]],[11,"gt","","",69,[[["self"],["funcindex"]],["bool"]]],[11,"ge","","",69,[[["self"],["funcindex"]],["bool"]]],[11,"partial_cmp","","",68,[[["elemindex"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",68,[[["elemindex"],["self"]],["bool"]]],[11,"le","","",68,[[["elemindex"],["self"]],["bool"]]],[11,"gt","","",68,[[["elemindex"],["self"]],["bool"]]],[11,"ge","","",68,[[["elemindex"],["self"]],["bool"]]],[11,"partial_cmp","","",66,[[["self"],["definedmemoryindex"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",66,[[["self"],["definedmemoryindex"]],["bool"]]],[11,"le","","",66,[[["self"],["definedmemoryindex"]],["bool"]]],[11,"gt","","",66,[[["self"],["definedmemoryindex"]],["bool"]]],[11,"ge","","",66,[[["self"],["definedmemoryindex"]],["bool"]]],[11,"partial_cmp","","",64,[[["self"],["definedfuncindex"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",64,[[["self"],["definedfuncindex"]],["bool"]]],[11,"le","","",64,[[["self"],["definedfuncindex"]],["bool"]]],[11,"gt","","",64,[[["self"],["definedfuncindex"]],["bool"]]],[11,"ge","","",64,[[["self"],["definedfuncindex"]],["bool"]]],[11,"partial_cmp","","",73,[[["self"],["tableindex"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",73,[[["self"],["tableindex"]],["bool"]]],[11,"le","","",73,[[["self"],["tableindex"]],["bool"]]],[11,"gt","","",73,[[["self"],["tableindex"]],["bool"]]],[11,"ge","","",73,[[["self"],["tableindex"]],["bool"]]],[11,"partial_cmp","","",67,[[["self"],["definedtableindex"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",67,[[["self"],["definedtableindex"]],["bool"]]],[11,"le","","",67,[[["self"],["definedtableindex"]],["bool"]]],[11,"gt","","",67,[[["self"],["definedtableindex"]],["bool"]]],[11,"ge","","",67,[[["self"],["definedtableindex"]],["bool"]]],[11,"new","","",64,[[["usize"]],["definedfuncindex"]]],[11,"index","","",64,[[],["usize"]]],[11,"new","","",66,[[["usize"]],["definedmemoryindex"]]],[11,"index","","",66,[[],["usize"]]],[11,"new","","",65,[[["usize"]],["definedglobalindex"]]],[11,"index","","",65,[[],["usize"]]],[11,"new","","",68,[[["usize"]],["elemindex"]]],[11,"index","","",68,[[],["usize"]]],[11,"new","","",73,[[["usize"]],["tableindex"]]],[11,"index","","",73,[[],["usize"]]],[11,"new","","",70,[[["usize"]],["globalindex"]]],[11,"index","","",70,[[],["usize"]]],[11,"new","","",71,[[["usize"]],["memoryindex"]]],[11,"index","","",71,[[],["usize"]]],[11,"new","","",67,[[["usize"]],["definedtableindex"]]],[11,"index","","",67,[[],["usize"]]],[11,"new","","",72,[[["usize"]],["signatureindex"]]],[11,"index","","",72,[[],["usize"]]],[11,"new","","",63,[[["usize"]],["dataindex"]]],[11,"index","","",63,[[],["usize"]]],[11,"new","","",69,[[["usize"]],["funcindex"]]],[11,"index","","",69,[[],["usize"]]],[11,"fmt","","",70,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",64,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",51,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",69,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",50,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",73,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",67,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",71,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",68,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",53,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",49,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",72,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",66,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",52,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",63,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",65,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"deserialize","","",69,[[["__d"]],[["funcindex"],["result",["funcindex"]]]]],[11,"serialize","","",69,[[["self"],["__s"]],["result"]]],[11,"eq","","",66,[[["self"],["definedmemoryindex"]],["bool"]]],[11,"ne","","",66,[[["self"],["definedmemoryindex"]],["bool"]]],[11,"eq","","",63,[[["dataindex"],["self"]],["bool"]]],[11,"ne","","",63,[[["dataindex"],["self"]],["bool"]]],[11,"eq","","",73,[[["self"],["tableindex"]],["bool"]]],[11,"ne","","",73,[[["self"],["tableindex"]],["bool"]]],[11,"eq","","",68,[[["elemindex"],["self"]],["bool"]]],[11,"ne","","",68,[[["elemindex"],["self"]],["bool"]]],[11,"eq","","",64,[[["self"],["definedfuncindex"]],["bool"]]],[11,"ne","","",64,[[["self"],["definedfuncindex"]],["bool"]]],[11,"eq","","",67,[[["self"],["definedtableindex"]],["bool"]]],[11,"ne","","",67,[[["self"],["definedtableindex"]],["bool"]]],[11,"eq","","",70,[[["self"],["globalindex"]],["bool"]]],[11,"ne","","",70,[[["self"],["globalindex"]],["bool"]]],[11,"eq","","",72,[[["self"],["signatureindex"]],["bool"]]],[11,"ne","","",72,[[["self"],["signatureindex"]],["bool"]]],[11,"eq","","",65,[[["definedglobalindex"],["self"]],["bool"]]],[11,"ne","","",65,[[["definedglobalindex"],["self"]],["bool"]]],[11,"eq","","",69,[[["self"],["funcindex"]],["bool"]]],[11,"ne","","",69,[[["self"],["funcindex"]],["bool"]]],[11,"eq","","",71,[[["memoryindex"],["self"]],["bool"]]],[11,"ne","","",71,[[["memoryindex"],["self"]],["bool"]]],[11,"hash","","",73,[[["self"],["__h"]]]],[11,"hash","","",70,[[["self"],["__h"]]]],[11,"hash","","",53,[[["self"],["__h"]]]],[11,"hash","","",51,[[["self"],["__h"]]]],[11,"hash","","",72,[[["self"],["__h"]]]],[11,"hash","","",69,[[["self"],["__h"]]]],[11,"hash","","",67,[[["self"],["__h"]]]],[11,"hash","","",49,[[["self"],["__h"]]]],[11,"hash","","",66,[[["self"],["__h"]]]],[11,"hash","","",52,[[["self"],["__h"]]]],[11,"hash","","",63,[[["self"],["__h"]]]],[11,"hash","","",65,[[["self"],["__h"]]]],[11,"hash","","",50,[[["self"],["__h"]]]],[11,"hash","","",64,[[["self"],["__h"]]]],[11,"hash","","",71,[[["self"],["__h"]]]],[11,"hash","","",68,[[["self"],["__h"]]]],[11,"clone","","",71,[[["self"]],["memoryindex"]]],[11,"clone","","",66,[[["self"]],["definedmemoryindex"]]],[11,"clone","","",63,[[["self"]],["dataindex"]]],[11,"clone","","",50,[[["self"]],["globalinit"]]],[11,"clone","","",52,[[["self"]],["table"]]],[11,"clone","","",53,[[["self"]],["tableelementtype"]]],[11,"clone","","",65,[[["self"]],["definedglobalindex"]]],[11,"clone","","",69,[[["self"]],["funcindex"]]],[11,"clone","","",64,[[["self"]],["definedfuncindex"]]],[11,"clone","","",67,[[["self"]],["definedtableindex"]]],[11,"clone","","",49,[[["self"]],["global"]]],[11,"clone","","",70,[[["self"]],["globalindex"]]],[11,"clone","","",72,[[["self"]],["signatureindex"]]],[11,"clone","","",73,[[["self"]],["tableindex"]]],[11,"clone","","",68,[[["self"]],["elemindex"]]],[11,"clone","","",51,[[["self"]],["memory"]]],[11,"cmp","","",70,[[["self"],["globalindex"]],["ordering"]]],[11,"cmp","","",73,[[["self"],["tableindex"]],["ordering"]]],[11,"cmp","","",67,[[["self"],["definedtableindex"]],["ordering"]]],[11,"cmp","","",68,[[["elemindex"],["self"]],["ordering"]]],[11,"cmp","","",72,[[["self"],["signatureindex"]],["ordering"]]],[11,"cmp","","",65,[[["definedglobalindex"],["self"]],["ordering"]]],[11,"cmp","","",71,[[["memoryindex"],["self"]],["ordering"]]],[11,"cmp","","",63,[[["dataindex"],["self"]],["ordering"]]],[11,"cmp","","",66,[[["self"],["definedmemoryindex"]],["ordering"]]],[11,"cmp","","",64,[[["self"],["definedfuncindex"]],["ordering"]]],[11,"cmp","","",69,[[["self"],["funcindex"]],["ordering"]]],[11,"compile_module","wasmtime_environ::cranelift","Compile the module using Cranelift, producing a…",74,[[["targetisa"],["module"],["cacheconfig"],["bool"],["moduletranslationstate"],["definedfuncindex"],["primarymap",["definedfuncindex","functionbodydata"]],["functionbodydata"]],[["compileerror"],["result",["compileerror"]]]]],[11,"from","wasmtime_environ","",24,[[["wasmerror"]],["self"]]],[11,"clone","","",5,[[["self"]],["instructionaddressmap"]]],[11,"clone","","",4,[[["self"]],["functionaddressmap"]]],[11,"clone","","",23,[[["self"]],["modulememoryoffset"]]],[11,"clone","","",6,[[["self"]],["modulevmctxinfo"]]],[11,"clone","","",8,[[["self"]],["compiledfunctionunwindinforeloc"]]],[11,"clone","","",25,[[["self"]],["compiledfunctionunwindinfo"]]],[11,"clone","","",7,[[["self"]],["compiledfunction"]]],[11,"clone","","",9,[[["self"]],["relocation"]]],[11,"clone","","",26,[[["self"]],["relocationtarget"]]],[11,"clone","","",32,[[["self"]],["builtinfunctionindex"]]],[11,"clone","","",15,[[["self"]],["tableelements"]]],[11,"clone","","",27,[[["self"]],["export"]]],[11,"clone","","",28,[[["self"]],["memorystyle"]]],[11,"clone","","",12,[[["self"]],["memoryplan"]]],[11,"clone","","",30,[[["self"]],["tablestyle"]]],[11,"clone","","",16,[[["self"]],["tableplan"]]],[11,"clone","","",18,[[["self"]],["datainitializerlocation"]]],[11,"clone","","",21,[[["self"]],["tunables"]]],[11,"clone","","",34,[[["self"]],["targetsharedsignatureindex"]]],[11,"clone","","",35,[[["self"]],["cacheconfig"]]],[11,"default","","",21,[[],["self"]]],[11,"cmp","","",27,[[["export"],["self"]],["ordering"]]],[11,"eq","","",5,[[["instructionaddressmap"],["self"]],["bool"]]],[11,"ne","","",5,[[["instructionaddressmap"],["self"]],["bool"]]],[11,"eq","","",4,[[["functionaddressmap"],["self"]],["bool"]]],[11,"ne","","",4,[[["functionaddressmap"],["self"]],["bool"]]],[11,"eq","","",8,[[["compiledfunctionunwindinforeloc"],["self"]],["bool"]]],[11,"ne","","",8,[[["compiledfunctionunwindinforeloc"],["self"]],["bool"]]],[11,"eq","","",25,[[["self"],["compiledfunctionunwindinfo"]],["bool"]]],[11,"ne","","",25,[[["self"],["compiledfunctionunwindinfo"]],["bool"]]],[11,"eq","","",7,[[["compiledfunction"],["self"]],["bool"]]],[11,"ne","","",7,[[["compiledfunction"],["self"]],["bool"]]],[11,"eq","","",31,[[["self"],["compilation"]],["bool"]]],[11,"ne","","",31,[[["self"],["compilation"]],["bool"]]],[11,"eq","","",9,[[["self"],["relocation"]],["bool"]]],[11,"ne","","",9,[[["self"],["relocation"]],["bool"]]],[11,"eq","","",26,[[["self"],["relocationtarget"]],["bool"]]],[11,"ne","","",26,[[["self"],["relocationtarget"]],["bool"]]],[11,"eq","","",10,[[["trapinformation"],["self"]],["bool"]]],[11,"ne","","",10,[[["trapinformation"],["self"]],["bool"]]],[11,"eq","","",11,[[["framelayout"],["self"]],["bool"]]],[11,"ne","","",11,[[["framelayout"],["self"]],["bool"]]],[11,"eq","","",27,[[["export"],["self"]],["bool"]]],[11,"ne","","",27,[[["export"],["self"]],["bool"]]],[11,"partial_cmp","","",27,[[["export"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",27,[[["export"],["self"]],["bool"]]],[11,"le","","",27,[[["export"],["self"]],["bool"]]],[11,"gt","","",27,[[["export"],["self"]],["bool"]]],[11,"ge","","",27,[[["export"],["self"]],["bool"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"hash","","",15,[[["self"],["__h"]]]],[11,"hash","","",27,[[["self"],["__h"]]]],[11,"hash","","",28,[[["self"],["__h"]]]],[11,"hash","","",12,[[["self"],["__h"]]]],[11,"hash","","",30,[[["self"],["__h"]]]],[11,"hash","","",16,[[["self"],["__h"]]]],[11,"hash","","",14,[[["self"],["__h"]]]],[11,"hash","","",19,[[["self"],["__h"]]]],[11,"source","","",24,[[["self"]],[["option",["error"]],["error"]]]],[11,"reloc_block","wasmtime_environ::cranelift","",36,[[["codeoffset"],["self"],["reloc"]]]],[11,"reloc_external","","",36,[[["externalname"],["codeoffset"],["addend"],["self"],["reloc"]]]],[11,"reloc_constant","","",36,[[["codeoffset"],["self"],["reloc"],["constantoffset"]]]],[11,"reloc_jt","","",36,[[["codeoffset"],["jumptable"],["self"],["reloc"]]]],[11,"deserialize","wasmtime_environ","",5,[[["__d"]],["result"]]],[11,"deserialize","","",4,[[["__d"]],["result"]]],[11,"deserialize","","",8,[[["__d"]],["result"]]],[11,"deserialize","","",25,[[["__d"]],["result"]]],[11,"deserialize","","",7,[[["__d"]],["result"]]],[11,"deserialize","","",31,[[["__d"]],["result"]]],[11,"deserialize","","",9,[[["__d"]],["result"]]],[11,"deserialize","","",26,[[["__d"]],["result"]]],[11,"deserialize","","",10,[[["__d"]],["result"]]],[11,"deserialize","","",11,[[["__d"]],["result"]]],[11,"deserialize","","",35,[[["__d"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",8,[[["self"],["__s"]],["result"]]],[11,"serialize","","",25,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","","",31,[[["self"],["__s"]],["result"]]],[11,"serialize","","",9,[[["self"],["__s"]],["result"]]],[11,"serialize","","",26,[[["self"],["__s"]],["result"]]],[11,"serialize","","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","","",11,[[["self"],["__s"]],["result"]]],[11,"reserve_signatures","","",33,[[["self"],["u32"]],["wasmresult"]]],[11,"declare_signature","","",33,[[["self"],["signature"]],["wasmresult"]]],[11,"declare_func_import","","",33,[[["signatureindex"],["str"],["self"]],["wasmresult"]]],[11,"declare_table_import","","",33,[[["str"],["table"],["self"]],["wasmresult"]]],[11,"declare_memory_import","","",33,[[["str"],["self"],["memory"]],["wasmresult"]]],[11,"declare_global_import","","",33,[[["str"],["self"],["global"]],["wasmresult"]]],[11,"finish_imports","","",33,[[["self"]],["wasmresult"]]],[11,"reserve_func_types","","",33,[[["self"],["u32"]],["wasmresult"]]],[11,"declare_func_type","","",33,[[["signatureindex"],["self"]],["wasmresult"]]],[11,"reserve_tables","","",33,[[["self"],["u32"]],["wasmresult"]]],[11,"declare_table","","",33,[[["self"],["table"]],["wasmresult"]]],[11,"reserve_memories","","",33,[[["self"],["u32"]],["wasmresult"]]],[11,"declare_memory","","",33,[[["self"],["memory"]],["wasmresult"]]],[11,"reserve_globals","","",33,[[["self"],["u32"]],["wasmresult"]]],[11,"declare_global","","",33,[[["self"],["global"]],["wasmresult"]]],[11,"reserve_exports","","",33,[[["self"],["u32"]],["wasmresult"]]],[11,"declare_func_export","","",33,[[["str"],["self"],["funcindex"]],["wasmresult"]]],[11,"declare_table_export","","",33,[[["str"],["self"],["tableindex"]],["wasmresult"]]],[11,"declare_memory_export","","",33,[[["str"],["self"],["memoryindex"]],["wasmresult"]]],[11,"declare_global_export","","",33,[[["str"],["self"],["globalindex"]],["wasmresult"]]],[11,"declare_start_func","","",33,[[["self"],["funcindex"]],["wasmresult"]]],[11,"reserve_table_elements","","",33,[[["self"],["u32"]],["wasmresult"]]],[11,"declare_table_elements","","",33,[[["box"],["tableindex"],["usize"],["option",["globalindex"]],["self"],["globalindex"]],["wasmresult"]]],[11,"declare_passive_element","","",33,[[["box"],["self"],["elemindex"]],["wasmresult"]]],[11,"define_function_body","","",33,[[["moduletranslationstate"],["usize"],["self"]],["wasmresult"]]],[11,"reserve_data_initializers","","",33,[[["self"],["u32"]],["wasmresult"]]],[11,"declare_data_initialization","","",33,[[["memoryindex"],["usize"],["option",["globalindex"]],["self"],["globalindex"]],["wasmresult"]]],[11,"reserve_passive_data","","",33,[[["self"],["u32"]],["wasmresult"]]],[11,"declare_passive_data","","",33,[[["self"],["dataindex"]],["wasmresult"]]],[11,"declare_func_name","","",33,[[["str"],["self"],["funcindex"]],["wasmresult"]]],[11,"target_config","","",33,[[["self"]],["targetfrontendconfig"]]],[11,"lane_type","wasmtime_environ::ir","Get the lane type of this SIMD vector type.",55,[[],["type"]]],[11,"lane_of","","The type transformation that returns the lane type of a…",55,[[],["type"]]],[11,"log2_lane_bits","","Get log_2 of the number of bits in a lane.",55,[[],["u8"]]],[11,"lane_bits","","Get the number of bits in a lane.",55,[[],["u8"]]],[11,"int","","Get an integer type with the requested number of bits.",55,[[["u16"]],[["option",["type"]],["type"]]]],[11,"as_bool_pedantic","","Get a type with the same number of lanes as this type, but…",55,[[],["type"]]],[11,"as_bool","","Get a type with the same number of lanes as this type, but…",55,[[],["type"]]],[11,"half_width","","Get a type with the same number of lanes as this type, but…",55,[[],[["option",["type"]],["type"]]]],[11,"double_width","","Get a type with the same number of lanes as this type, but…",55,[[],[["option",["type"]],["type"]]]],[11,"is_invalid","","Is this the INVALID type?",55,[[],["bool"]]],[11,"is_special","","Is this a special type?",55,[[],["bool"]]],[11,"is_lane","","Is this a lane type?",55,[[],["bool"]]],[11,"is_vector","","Is this a SIMD vector type?",55,[[],["bool"]]],[11,"is_bool","","Is this a scalar boolean type?",55,[[],["bool"]]],[11,"is_int","","Is this a scalar integer type?",55,[[],["bool"]]],[11,"is_float","","Is this a scalar floating point type?",55,[[],["bool"]]],[11,"is_flags","","Is this a CPU flags type?",55,[[],["bool"]]],[11,"is_ref","","Is this a ref type?",55,[[],["bool"]]],[11,"log2_lane_count","","Get log_2 of the number of lanes in this SIMD vector type.",55,[[],["u8"]]],[11,"lane_count","","Get the number of lanes in this SIMD vector type.",55,[[],["u16"]]],[11,"bits","","Get the total number of bits used to represent this type.",55,[[],["u16"]]],[11,"bytes","","Get the number of bytes used to store this type in memory.",55,[[],["u32"]]],[11,"by","","Get a SIMD vector type with `n` times more lanes than this…",55,[[["u16"]],[["option",["type"]],["type"]]]],[11,"half_vector","","Get a SIMD vector with half the number of lanes.",55,[[],[["option",["type"]],["type"]]]],[11,"index","","Index of this type, for use with hash tables etc.",55,[[],["usize"]]],[11,"wider_or_equal","","True iff:",55,[[["type"]],["bool"]]],[11,"triple_pointer_type","","Return the pointer type for the given target triple.",55,[[["triple"]],["type"]]],[11,"new","","Create a parameter with default flags.",37,[[["type"]],["abiparam"]]],[11,"special","","Create a special-purpose parameter that is not (yet) bound…",37,[[["type"],["argumentpurpose"]],["abiparam"]]],[11,"special_reg","","Create a parameter for a special-purpose register.",37,[[["u16"],["type"],["argumentpurpose"]],["abiparam"]]],[11,"uext","","Convert `self` to a parameter with the `uext` flag set.",37,[[],["abiparam"]]],[11,"sext","","Convert `self` to a parameter type with the `sext` flag set.",37,[[],["abiparam"]]],[11,"display","","Return an object that can display `self` with correct…",37,[[["self"],["r"]],["displayabiparam"]]],[11,"new","","Create a new blank signature.",39,[[["callconv"]],["signature"]]],[11,"clear","","Clear the signature so it is identical to a fresh one…",39,[[["self"],["callconv"]]]],[11,"display","","Return an object that can display `self` with correct…",39,[[["self"],["r"]],["displaysignature"]]],[11,"special_param_index","","Find the index of a presumed unique special-purpose…",39,[[["self"],["argumentpurpose"]],[["usize"],["option",["usize"]]]]],[11,"special_return_index","","Find the index of a presumed unique special-purpose…",39,[[["self"],["argumentpurpose"]],[["usize"],["option",["usize"]]]]],[11,"uses_special_param","","Does this signature have a parameter whose…",39,[[["self"],["argumentpurpose"]],["bool"]]],[11,"uses_special_return","","Does this signature have a return whose `ArgumentPurpose`…",39,[[["self"],["argumentpurpose"]],["bool"]]],[11,"num_special_params","","How many special parameters does this function have?",39,[[["self"]],["usize"]]],[11,"num_special_returns","","How many special returns does this function have?",39,[[["self"]],["usize"]]],[11,"uses_struct_return_param","","Does this signature take an struct return pointer parameter?",39,[[["self"]],["bool"]]],[11,"is_multi_return","","Does this return more than one normal value? (Pre-struct…",39,[[["self"]],["bool"]]],[11,"new","","Create a new source location with the given bits.",56,[[["u32"]],["sourceloc"]]],[11,"is_default","","Is this the default source location?",56,[[],["bool"]]],[11,"bits","","Read the bits of this source location.",56,[[],["u32"]]],[11,"new","","Create an empty stack slot manager.",40,[[],["stackslots"]]],[11,"clear","","Clear out everything.",40,[[["self"]]]],[11,"push","","Allocate a new stack slot.",40,[[["self"],["stackslotdata"]],["stackslot"]]],[11,"is_valid","","Check if `ss` is a valid stack slot reference.",40,[[["stackslot"],["self"]],["bool"]]],[11,"iter","","Get an iterator over all the stack slot keys.",40,[[["self"]],[["iter",["stackslot","stackslotdata"]],["stackslot"],["stackslotdata"]]]],[11,"iter_mut","","Get an iterator over all the stack slot keys, mutable…",40,[[["self"]],[["itermut",["stackslot","stackslotdata"]],["stackslot"],["stackslotdata"]]]],[11,"values","","Get an iterator over all the stack slot records.",40,[[["self"]],[["stackslotdata"],["iter",["stackslotdata"]]]]],[11,"values_mut","","Get an iterator over all the stack slot records, mutable…",40,[[["self"]],[["itermut",["stackslotdata"]],["stackslotdata"]]]],[11,"keys","","Get an iterator over all the stack slot keys.",40,[[["self"]],[["stackslot"],["keys",["stackslot"]]]]],[11,"next_key","","Get a reference to the next stack slot that would be…",40,[[["self"]],["stackslot"]]],[11,"make_spill_slot","","Create a new spill slot for spilling values of type `ty`.",40,[[["self"],["type"]],["stackslot"]]],[11,"make_incoming_arg","","Create a stack slot representing an incoming function…",40,[[["self"],["type"],["i32"]],["stackslot"]]],[11,"get_outgoing_arg","","Get a stack slot representing an outgoing argument.",40,[[["self"],["type"],["i32"]],["stackslot"]]],[11,"get_emergency_slot","","Get an emergency spill slot that can be used to store a…",40,[[["self"],["type"]],["stackslot"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",57,[[["u32"]],["valuelabel"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",57,[[],["u32"]]],[11,"is_assigned","","Is this an assigned location? (That is, not `Unassigned`).",42,[[],["bool"]]],[11,"unwrap_reg","","Get the register unit of this location, or panic.",42,[[],["u16"]]],[11,"unwrap_stack","","Get the stack slot of this location, or panic.",42,[[],["stackslot"]]],[11,"display","","Return an object that can display this value location,…",42,[[["r"]],["displayvalueloc"]]],[11,"new","wasmtime_environ::settings","Create a new builder with defaults and names from the…",58,[[["template"]],["builder"]]],[11,"state_for","","Extract contents of builder once everything is configured.",58,[[["str"]],["box"]]],[11,"new","","Create flags shared settings group.",59,[[["builder"]],["flags"]]],[11,"predicate_view","","Get a view of the boolean predicates.",59,[[["self"]],["predicateview"]]],[11,"opt_level","","Optimization level:",59,[[["self"]],["optlevel"]]],[11,"tls_model","","Defines the model used to perform TLS accesses.",59,[[["self"]],["tlsmodel"]]],[11,"libcall_call_conv","","Defines the calling convention to use for LibCalls call…",59,[[["self"]],["libcallcallconv"]]],[11,"baldrdash_prologue_words","","Number of pointer-sized words pushed by the baldrdash…",59,[[["self"]],["u8"]]],[11,"probestack_size_log2","","The log2 of the size of the stack guard region.",59,[[["self"]],["u8"]]],[11,"enable_verifier","","Run the Cranelift IR verifier at strategic times during…",59,[[["self"]],["bool"]]],[11,"is_pic","","Enable Position-Independent Code generation",59,[[["self"]],["bool"]]],[11,"use_colocated_libcalls","","Use colocated libcalls.",59,[[["self"]],["bool"]]],[11,"avoid_div_traps","","Generate explicit checks around native division…",59,[[["self"]],["bool"]]],[11,"enable_float","","Enable the use of floating-point instructions",59,[[["self"]],["bool"]]],[11,"enable_nan_canonicalization","","Enable NaN canonicalization",59,[[["self"]],["bool"]]],[11,"enable_pinned_reg","","Enable the use of the pinned register.",59,[[["self"]],["bool"]]],[11,"use_pinned_reg_as_heap_base","","Use the pinned register as the heap base.",59,[[["self"]],["bool"]]],[11,"enable_simd","","Enable the use of SIMD instructions.",59,[[["self"]],["bool"]]],[11,"enable_atomics","","Enable the use of atomic instructions",59,[[["self"]],["bool"]]],[11,"enable_safepoints","","Enable safepoint instruction insertions.",59,[[["self"]],["bool"]]],[11,"emit_all_ones_funcaddrs","","Emit not-yet-relocated function addresses as all-ones bit…",59,[[["self"]],["bool"]]],[11,"enable_probestack","","Enable the use of stack probes, for calling conventions…",59,[[["self"]],["bool"]]],[11,"probestack_func_adjusts_sp","","Set this to true of the stack probe function modifies the…",59,[[["self"]],["bool"]]],[11,"enable_jump_tables","","Enable the use of jump tables in generated machine code.",59,[[["self"]],["bool"]]],[11,"triple_default","wasmtime_environ::isa","Return the default calling convention for the given target…",44,[[["triple"]],["callconv"]]],[11,"for_libcall","","Returns the calling convention used for libcalls for the…",44,[[["targetisa"]],["callconv"]]],[11,"extends_windows_fastcall","","Is the calling convention extending the Windows Fastcall…",44,[[],["bool"]]],[11,"extends_baldrdash","","Is the calling convention extending the Baldrdash ABI?",44,[[],["bool"]]],[11,"pointer_type","","Get the pointer type of this target.",45,[[],["type"]]],[11,"pointer_bits","","Get the width of pointers on this target, in units of bits.",45,[[],["u8"]]],[11,"pointer_bytes","","Get the width of pointers on this target, in units of bytes.",45,[[],["u8"]]],[11,"default_call_conv","","Get the default calling convention of this target.",46,[[["self"]],["callconv"]]],[11,"pointer_type","","Get the pointer type of this ISA.",46,[[["self"]],["type"]]],[11,"pointer_width","","Get the width of pointers on this ISA.",46,[[["self"]],["pointerwidth"]]],[11,"pointer_bits","","Get the width of pointers on this ISA, in units of bits.",46,[[["self"]],["u8"]]],[11,"pointer_bytes","","Get the width of pointers on this ISA, in units of bytes.",46,[[["self"]],["u8"]]],[11,"frontend_config","","Get the information needed by frontends producing…",46,[[["self"]],["targetfrontendconfig"]]],[11,"uses_cpu_flags","","Does the CPU implement scalar comparisons using a CPU…",46,[[["self"]],["bool"]]],[11,"uses_complex_addresses","","Does the CPU implement multi-register addressing?",46,[[["self"]],["bool"]]],[11,"encode","","Encode an instruction after determining it is legal.",46,[[["function"],["type"],["instructiondata"],["self"]],[["result",["encoding"]],["encoding"]]]],[11,"prologue_epilogue","","Compute the stack layout and insert prologue and epilogue…",46,[[["function"],["self"]],[["result",["codegenerror"]],["codegenerror"]]]],[11,"emit_unwind_info","","Emit unwind information for the given function.",46,[[["function"],["frameunwindsink"],["self"],["frameunwindkind"]]]],[11,"is_none","wasmtime_environ::entity::packed_option","Returns `true` if the packed option is a `None` value.",60,[[["self"]],["bool"]]],[11,"is_some","","Returns `true` if the packed option is a `Some` value.",60,[[["self"]],["bool"]]],[11,"expand","","Expand the packed option into a normal `Option`.",60,[[],["option"]]],[11,"map","","Maps a `PackedOption<T>` to `Option<U>` by applying a…",60,[[["f"]],["option"]]],[11,"unwrap","","Unwrap a packed `Some` value or panic.",60,[[],["t"]]],[11,"expect","","Unwrap a packed `Some` value or panic.",60,[[["str"]],["t"]]],[11,"take","","Takes the value out of the packed option, leaving a `None`…",60,[[["self"]],["option"]]],[11,"from_raw","wasmtime_environ::entity","Create a new slice from a raw pointer. A safer way to…",61,[[],["boxedslice"]]],[11,"is_valid","","Check if `k` is a valid key in the map.",61,[[["self"],["k"]],["bool"]]],[11,"get","","Get the element at `k` if it exists.",61,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_mut","","Get the element at `k` if it exists, mutable version.",61,[[["self"],["k"]],[["option"],["v"]]]],[11,"is_empty","","Is this map completely empty?",61,[[["self"]],["bool"]]],[11,"len","","Get the total number of entity references created.",61,[[["self"]],["usize"]]],[11,"keys","","Iterate over all the keys in this map.",61,[[["self"]],["keys"]]],[11,"values","","Iterate over all the values in this map.",61,[[["self"]],["iter"]]],[11,"values_mut","","Iterate over all the values in this map, mutable edition.",61,[[["self"]],["itermut"]]],[11,"iter","","Iterate over all the keys and values in this map.",61,[[["self"]],["iter"]]],[11,"iter_mut","","Iterate over all the keys and values in this map, mutable…",61,[[["self"]],["itermut"]]],[11,"last","","Returns the last element that was inserted in the map.",61,[[["self"]],[["v"],["option"]]]],[11,"new","","Create a new empty map.",62,[[],["primarymap"]]],[11,"with_capacity","","Create a new empty map with the given capacity.",62,[[["usize"]],["primarymap"]]],[11,"is_valid","","Check if `k` is a valid key in the map.",62,[[["self"],["k"]],["bool"]]],[11,"get","","Get the element at `k` if it exists.",62,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_mut","","Get the element at `k` if it exists, mutable version.",62,[[["self"],["k"]],[["option"],["v"]]]],[11,"is_empty","","Is this map completely empty?",62,[[["self"]],["bool"]]],[11,"len","","Get the total number of entity references created.",62,[[["self"]],["usize"]]],[11,"keys","","Iterate over all the keys in this map.",62,[[["self"]],["keys"]]],[11,"values","","Iterate over all the values in this map.",62,[[["self"]],["iter"]]],[11,"values_mut","","Iterate over all the values in this map, mutable edition.",62,[[["self"]],["itermut"]]],[11,"iter","","Iterate over all the keys and values in this map.",62,[[["self"]],["iter"]]],[11,"iter_mut","","Iterate over all the keys and values in this map, mutable…",62,[[["self"]],["itermut"]]],[11,"clear","","Remove all entries from this map.",62,[[["self"]]]],[11,"next_key","","Get the key that will be assigned to the next pushed value.",62,[[["self"]],["k"]]],[11,"push","","Append `v` to the mapping, assigning a new key which is…",62,[[["self"],["v"]],["k"]]],[11,"last","","Returns the last element that was inserted in the map.",62,[[["self"]],[["v"],["option"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",62,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",62,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the `PrimaryMap` as much as…",62,[[["self"]]]],[11,"into_boxed_slice","","Consumes this `PrimaryMap` and produces a `BoxedSlice`.",62,[[],["boxedslice"]]],[11,"from_u32","wasmtime_environ::wasm","Return the underlying index value as a `u32`.",63,[[["u32"]],["dataindex"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",63,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",64,[[["u32"]],["definedfuncindex"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",64,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",65,[[["u32"]],["definedglobalindex"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",65,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",66,[[["u32"]],["definedmemoryindex"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",66,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",67,[[["u32"]],["definedtableindex"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",67,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",68,[[["u32"]],["elemindex"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",68,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",69,[[["u32"]],["funcindex"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",69,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",70,[[["u32"]],["globalindex"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",70,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",71,[[["u32"]],["memoryindex"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",71,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",72,[[["u32"]],["signatureindex"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",72,[[],["u32"]]],[11,"from_u32","","Return the underlying index value as a `u32`.",73,[[["u32"]],["tableindex"]]],[11,"as_u32","","Return the underlying index value as a `u32`.",73,[[],["u32"]]]],"p":[[4,"FrameLayoutChange"],[13,"CallFrameAddressAt"],[13,"RegAt"],[13,"ReturnAddressAt"],[3,"FunctionAddressMap"],[3,"InstructionAddressMap"],[3,"ModuleVmctxInfo"],[3,"CompiledFunction"],[3,"CompiledFunctionUnwindInfoReloc"],[3,"Relocation"],[3,"TrapInformation"],[3,"FrameLayout"],[3,"MemoryPlan"],[3,"Module"],[3,"ModuleLocal"],[3,"TableElements"],[3,"TablePlan"],[3,"DataInitializer"],[3,"DataInitializerLocation"],[3,"FunctionBodyData"],[3,"ModuleTranslation"],[3,"Tunables"],[3,"VMOffsets"],[4,"ModuleMemoryOffset"],[4,"CompileError"],[4,"CompiledFunctionUnwindInfo"],[4,"RelocationTarget"],[4,"Export"],[4,"MemoryStyle"],[13,"Static"],[4,"TableStyle"],[3,"Compilation"],[3,"BuiltinFunctionIndex"],[3,"ModuleEnvironment"],[3,"TargetSharedSignatureIndex"],[3,"CacheConfig"],[3,"RelocSink"],[3,"AbiParam"],[4,"ArgumentPurpose"],[3,"Signature"],[3,"StackSlots"],[4,"TrapCode"],[4,"ValueLoc"],[8,"Configurable"],[4,"CallConv"],[3,"TargetFrontendConfig"],[8,"TargetIsa"],[8,"ReservedValue"],[8,"EntityRef"],[3,"Global"],[4,"GlobalInit"],[3,"Memory"],[3,"Table"],[4,"TableElementType"],[8,"Compiler"],[3,"Type"],[3,"SourceLoc"],[3,"ValueLabel"],[3,"Builder"],[3,"Flags"],[3,"PackedOption"],[3,"BoxedSlice"],[3,"PrimaryMap"],[3,"DataIndex"],[3,"DefinedFuncIndex"],[3,"DefinedGlobalIndex"],[3,"DefinedMemoryIndex"],[3,"DefinedTableIndex"],[3,"ElemIndex"],[3,"FuncIndex"],[3,"GlobalIndex"],[3,"MemoryIndex"],[3,"SignatureIndex"],[3,"TableIndex"],[3,"Cranelift"]]};
searchIndex["wasmtime_fuzzing"] = {"doc":"Fuzzing infrastructure for Wasmtime.","i":[[0,"generators","wasmtime_fuzzing","Test case generators.",null,null],[3,"WasmOptTtf","wasmtime_fuzzing::generators","A Wasm test case generator that is powered by Binaryen's…",null,null],[12,"wasm","","The raw, encoded Wasm bytes.",0,null],[3,"DifferentialConfig","","A description of configuration options that we should do…",null,null],[0,"api","","Generating sequences of Wasmtime API calls.",null,null],[3,"ApiCalls","wasmtime_fuzzing::generators::api","A sequence of API calls.",null,null],[12,"calls","","The API calls.",1,null],[4,"ApiCall","","A call to one of Wasmtime's public APIs.",null,null],[13,"ConfigNew","","",2,null],[13,"ConfigDebugInfo","","",2,null],[13,"EngineNew","","",2,null],[13,"StoreNew","","",2,null],[13,"ModuleNew","","",2,null],[12,"id","wasmtime_fuzzing::generators::api::ApiCall","",3,null],[12,"wasm","","",3,null],[13,"ModuleDrop","wasmtime_fuzzing::generators::api","",2,null],[12,"id","wasmtime_fuzzing::generators::api::ApiCall","",4,null],[13,"InstanceNew","wasmtime_fuzzing::generators::api","",2,null],[12,"id","wasmtime_fuzzing::generators::api::ApiCall","",5,null],[12,"module","","",5,null],[13,"InstanceDrop","wasmtime_fuzzing::generators::api","",2,null],[12,"id","wasmtime_fuzzing::generators::api::ApiCall","",6,null],[13,"CallExportedFunc","wasmtime_fuzzing::generators::api","",2,null],[12,"instance","wasmtime_fuzzing::generators::api::ApiCall","",7,null],[12,"nth","","",7,null],[11,"to_wasmtime_config","wasmtime_fuzzing::generators","Convert this differential fuzzing config into a…",8,[[["self"]],[["result",["config"]],["config"]]]],[0,"oracles","wasmtime_fuzzing","Oracles.",null,null],[5,"instantiate","wasmtime_fuzzing::oracles","Instantiate the Wasm buffer, and implicitly fail if we…",null,[[["strategy"]]]],[5,"instantiate_with_config","","Instantiate the Wasm buffer, and implicitly fail if we…",null,[[["config"]]]],[5,"compile","","Compile the Wasm buffer, and implicitly fail if we have an…",null,[[["strategy"]]]],[5,"differential_execution","","Instantiate the given Wasm module with each `Config` and…",null,[[["wasmoptttf"]]]],[5,"make_api_calls","","Invoke the given API calls.",null,[[["apicalls"]]]],[0,"dummy","","Dummy implementations of things that a Wasm module can…",null,null],[3,"DummyFunc","wasmtime_fuzzing::oracles::dummy","A function that doesn't do anything but return the default…",null,null],[5,"dummy_imports","","Create a set of dummy functions/globals/etc for the given…",null,[[["store"]],[["vec",["extern"]],["trap"],["result",["vec","trap"]]]]],[5,"dummy_value","","Construct a dummy value for the given value type.",null,[[["valtype"]],[["result",["val","trap"]],["val"],["trap"]]]],[5,"dummy_values","","Construct a sequence of dummy values for the given types.",null,[[],[["vec",["val"]],["trap"],["result",["vec","trap"]]]]],[5,"dummy_global","","Construct a dummy global for the given global type.",null,[[["store"],["globaltype"]],[["result",["global","trap"]],["trap"],["global"]]]],[5,"dummy_table","","Construct a dummy table for the given table type.",null,[[["store"],["tabletype"]],[["result",["table","trap"]],["table"],["trap"]]]],[5,"dummy_memory","","Construct a dummy memory for the given memory type.",null,[[["store"],["memorytype"]],["memory"]]],[11,"new","","Construct a new dummy `Func`.",9,[[["store"],["functype"]],["func"]]],[11,"from","wasmtime_fuzzing::generators","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"equivalent","","",8,[[["k"],["self"]],["bool"]]],[11,"from","wasmtime_fuzzing::generators::api","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","wasmtime_fuzzing::oracles::dummy","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"clone","wasmtime_fuzzing::generators::api","",2,[[["self"]],["apicall"]]],[11,"clone","wasmtime_fuzzing::generators","",0,[[["self"]],["wasmoptttf"]]],[11,"clone","","",8,[[["self"]],["differentialconfig"]]],[11,"eq","","",8,[[["differentialconfig"],["self"]],["bool"]]],[11,"ne","","",8,[[["differentialconfig"],["self"]],["bool"]]],[11,"fmt","wasmtime_fuzzing::generators::api","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasmtime_fuzzing::generators","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasmtime_fuzzing::oracles::dummy","",9,[[["formatter"],["self"]],["result"]]],[11,"hash","wasmtime_fuzzing::generators","",8,[[["self"],["__h"]]]],[11,"arbitrary","wasmtime_fuzzing::generators::api","",2,[[["unstructured"]],["result"]]],[11,"arbitrary_take_rest","","",2,[[["unstructured"]],["result"]]],[11,"size_hint","","",2,[[["usize"]]]],[11,"shrink","","",2,[[["self"]],[["iterator"],["box",["iterator"]]]]],[11,"arbitrary","","",1,[[["unstructured"]],["result"]]],[11,"size_hint","","",1,[[["usize"]]]],[11,"arbitrary","wasmtime_fuzzing::generators","",0,[[["unstructured"]],["result"]]],[11,"arbitrary_take_rest","","",0,[[["unstructured"]],["result"]]],[11,"size_hint","","",0,[[["usize"]]]],[11,"arbitrary","","",8,[[["unstructured"]],["result"]]],[11,"arbitrary_take_rest","","",8,[[["unstructured"]],["result"]]],[11,"size_hint","","",8,[[["usize"]]]],[11,"shrink","","",8,[[["self"]],[["iterator"],["box",["iterator"]]]]],[11,"call","wasmtime_fuzzing::oracles::dummy","",9,[[["self"]],[["result",["trap"]],["trap"]]]]],"p":[[3,"WasmOptTtf"],[3,"ApiCalls"],[4,"ApiCall"],[13,"ModuleNew"],[13,"ModuleDrop"],[13,"InstanceNew"],[13,"InstanceDrop"],[13,"CallExportedFunc"],[3,"DifferentialConfig"],[3,"DummyFunc"]]};
searchIndex["wasmtime_interface_types"] = {"doc":"A small crate to handle WebAssembly interface types in…","i":[[3,"ModuleData","wasmtime_interface_types","A data structure intended to hold a parsed representation…",null,null],[3,"ExportBinding","","Representation of a binding of an exported function.",null,null],[4,"Value","","The set of all possible WebAssembly Interface Types",null,null],[13,"String","","",0,null],[13,"I32","","",0,null],[13,"U32","","",0,null],[13,"I64","","",0,null],[13,"U64","","",0,null],[13,"F32","","",0,null],[13,"F64","","",0,null],[11,"new","","Parses a raw binary wasm file, extracting information…",1,[[],[["result",["moduledata"]],["moduledata"]]]],[11,"find_wasi_module_name","","Detects if WASI support is needed: returns module name…",1,[[["self"]],[["string"],["option",["string"]]]]],[11,"invoke_export","","Invokes wasmtime function with a `&[Value]` list. `Value`…",1,[[["str"],["instance"],["self"]],[["result",["vec"]],["vec",["value"]]]]],[11,"binding_for_export","","Returns an appropriate binding for the `name` export in…",1,[[["str"],["self"],["instancehandle"]],[["exportbinding"],["result",["exportbinding"]]]]],[11,"param_bindings","","Returns the list of binding expressions used to create the…",2,[[["self"]],[["result",["vec"]],["vec",["incomingbindingexpression"]]]]],[11,"param_types","","Returns the list of scalar types used for this binding",2,[[["self"]],[["result",["vec"]],["vec",["webidlscalartype"]]]]],[11,"result_bindings","","Returns the list of binding expressions used to extract…",2,[[["self"]],[["vec",["outgoingbindingexpression"]],["result",["vec"]]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",0,[[["string"]],["value"]]],[11,"from","","",0,[[["i32"]],["value"]]],[11,"from","","",0,[[["u32"]],["value"]]],[11,"from","","",0,[[["i64"]],["value"]]],[11,"from","","",0,[[["u64"]],["value"]]],[11,"from","","",0,[[["f32"]],["value"]]],[11,"from","","",0,[[["f64"]],["value"]]],[11,"from","","",0,[[["str"]],["value"]]],[11,"clone","","",0,[[["self"]],["value"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[4,"Value"],[3,"ModuleData"],[3,"ExportBinding"]]};
searchIndex["wasmtime_jit"] = {"doc":"JIT-style runtime for WebAssembly using Cranelift.","i":[[3,"CodeMemory","wasmtime_jit","Memory manager for executable code.",null,null],[3,"Compiler","","A WebAssembly code JIT compiler.",null,null],[3,"CompiledModule","","A compiled wasm module, ready to be instantiated.",null,null],[3,"NullResolver","","`Resolver` implementation that always resolves to `None`.",null,null],[4,"CompilationStrategy","","Select which kind of compilation to use.",null,null],[13,"Auto","","Let Wasmtime pick the strategy.",0,null],[13,"Cranelift","","Compile all functions with Cranelift.",0,null],[4,"SetupError","","An error condition while setting up a wasm instance, be it…",null,null],[13,"Validate","","The module did not pass validation.",1,null],[13,"Compile","","A wasm translation error occured.",1,null],[13,"Instantiate","","Some runtime resource was unavailable or insufficient, or…",1,null],[13,"DebugInfo","","Debug information generation error occured.",1,null],[5,"instantiate","","Create a new wasm instance by compiling the wasm module in…",null,[[["arc"],["option",["arc"]],["compiler"],["resolver"],["bool"]],[["result",["instancehandle","setuperror"]],["instancehandle"],["setuperror"]]]],[5,"link_module","","Links a module that has been compiled with…",null,[[["module"],["primarymap"],["primarymap"],["relocations"]]]],[5,"target_tunables","","Return a `Tunables` instance tuned for the given target…",null,[[["triple"]],["tunables"]]],[11,"new","","Create a new `CodeMemory` instance.",2,[[],["self"]]],[11,"allocate_for_function","","Allocate a continuous memory block for a single compiled…",2,[[["self"],["compiledfunction"]],[["string"],["result",["string"]]]]],[11,"allocate_for_compilation","","Allocate a continuous memory block for a compilation.",2,[[["compilation"],["self"]],[["box"],["string"],["result",["box","string"]]]]],[11,"publish","","Make all allocated memory executable.",2,[[["self"]]]],[11,"profiler_module_load","","Calls the module_load for a given ProfilerAgent. Includes…",2,[[["str"],["box"],["option"],["self"]]]],[11,"new","","Construct a new `Compiler`.",3,[[["targetisa"],["cacheconfig"],["box",["targetisa"]],["compilationstrategy"]],["self"]]],[11,"frontend_config","","Return the target's frontend configuration settings.",3,[[["self"]],["targetfrontendconfig"]]],[11,"tunables","","Return the tunables in use by this engine.",3,[[["self"]],["tunables"]]],[11,"get_published_trampoline","","Create and publish a trampoline for invoking a function.",3,[[["signature"],["self"],["usize"]],[["result",["setuperror"]],["setuperror"]]]],[11,"signatures","","Shared signature registry.",3,[[["self"]],["signatureregistry"]]],[11,"trap_registry","","Shared registration of trap information",3,[[["self"]],["trapregistry"]]],[11,"new","","Compile a data buffer into a `CompiledModule`, which may…",4,[[["option",["arc"]],["arc"],["compiler"],["bool"]],[["result",["setuperror"]],["setuperror"]]]],[11,"from_parts","","Construct a `CompiledModule` from component parts.",4,[[["gdbjitimageregistration"],["module"],["definedfuncindex"],["box"],["signatureindex"],["vmsharedsignatureindex"],["boxedslice",["definedfuncindex"]],["boxedslice",["signatureindex","vmsharedsignatureindex"]],["option",["gdbjitimageregistration"]],["trapregistration"]],["self"]]],[11,"instantiate","","Crate an `Instance` from this `CompiledModule`.",4,[[["resolver"],["self"],["bool"]],[["result",["instancehandle","instantiationerror"]],["instancehandle"],["instantiationerror"]]]],[11,"module","","Return a reference-counting pointer to a module.",4,[[["self"]],["arc"]]],[11,"module_ref","","Return a reference to a module.",4,[[["self"]],["module"]]],[11,"finished_functions","","Returns the map of all finished JIT functions compiled for…",4,[[["self"]],["boxedslice"]]],[0,"native","","",null,null],[5,"lookup","wasmtime_jit::native","Look for an ISA for the given `triple`. Return a builder…",null,[[["triple"]],[["builder"],["lookuperror"],["result",["builder","lookuperror"]]]]],[5,"builder","","",null,[[],["builder"]]],[5,"call_conv","","",null,[[],["callconv"]]],[0,"trampoline","wasmtime_jit","",null,null],[5,"pretty_error","wasmtime_jit::trampoline","Pretty-print a Cranelift error.",null,[[["function"],["targetisa"],["option",["targetisa"]],["codegenerror"]],["string"]]],[3,"Context","","Persistent data structures and compilation pipeline.",null,null],[12,"func","","The function we're compiling.",5,null],[12,"cfg","","The control flow graph of `func`.",5,null],[12,"domtree","","Dominator tree for `func`.",5,null],[12,"regalloc","","Register allocation context.",5,null],[12,"loop_analysis","","Loop analysis of `func`.",5,null],[12,"redundant_reload_remover","","Redundant-reload remover context.",5,null],[3,"FunctionBuilder","","Temporary object used to build a single Cranelift IR…",null,null],[12,"func","","The function currently being built. This field is public…",6,null],[3,"FunctionBuilderContext","","Structure used for translating a series of functions into…",null,null],[0,"ir","","",null,null],[4,"ExternalName","wasmtime_jit::trampoline::ir","The name of an external is either a reference to a…",null,null],[13,"User","","A name in a user-defined symbol table. Cranelift does not…",7,null],[12,"namespace","wasmtime_jit::trampoline::ir::ExternalName","Arbitrary.",8,null],[12,"index","","Arbitrary.",8,null],[13,"TestCase","wasmtime_jit::trampoline::ir","A test case function name of up to a hardcoded amount of…",7,null],[12,"length","wasmtime_jit::trampoline::ir::ExternalName","How many of the bytes in `ascii` are valid?",9,null],[12,"ascii","","Ascii bytes of the name.",9,null],[13,"LibCall","wasmtime_jit::trampoline::ir","A well-known runtime library function.",7,null],[3,"Function","","A function.",null,null],[12,"name","","Name of this function. Mostly used by `.clif` files.",10,null],[12,"signature","","Signature of this function.",10,null],[12,"old_signature","","The old signature of this function, before the most recent…",10,null],[12,"stack_slots","","Stack slots allocated in this function.",10,null],[12,"global_values","","Global values referenced.",10,null],[12,"heaps","","Heaps referenced.",10,null],[12,"tables","","Tables referenced.",10,null],[12,"jump_tables","","Jump tables used in this function.",10,null],[12,"dfg","","Data flow graph containing the primary definition of all…",10,null],[12,"layout","","Layout of blocks and instructions in the function body.",10,null],[12,"encodings","","Encoding recipe and bits for the legal instructions.…",10,null],[12,"locations","","Location assigned to every value.",10,null],[12,"entry_diversions","","Non-default locations assigned to value at the entry of…",10,null],[12,"offsets","","Code offsets of the block headers.",10,null],[12,"jt_offsets","","Code offsets of Jump Table headers.",10,null],[12,"srclocs","","Source locations.",10,null],[12,"prologue_end","","Instruction that marks the end (inclusive) of the…",10,null],[12,"frame_layout","","Frame layout for the instructions.",10,null],[8,"InstBuilder","","Convenience methods for building instructions.",null,null],[11,"jump","","Jump.",11,[[["block"]],["inst"]]],[11,"fallthrough","","Fall through to the next block.",11,[[["block"]],["inst"]]],[11,"brz","","Branch when zero.",11,[[["value"],["block"]],["inst"]]],[11,"brnz","","Branch when non-zero.",11,[[["value"],["block"]],["inst"]]],[11,"br_icmp","","Compare scalar integers and branch.",11,[[["t1"],["value"],["block"]],["inst"]]],[11,"brif","","Branch when condition is true in integer CPU flags.",11,[[["t1"],["value"],["block"]],["inst"]]],[11,"brff","","Branch when condition is true in floating point CPU flags.",11,[[["t1"],["value"],["block"]],["inst"]]],[11,"br_table","","Indirect branch via jump table.",11,[[["jumptable"],["value"],["block"]],["inst"]]],[11,"jump_table_entry","","Get an entry from a jump table.",11,[[["jumptable"],["value"],["t1"]],["value"]]],[11,"jump_table_base","","Get the absolute base address of a jump table.",11,[[["jumptable"],["type"]],["value"]]],[11,"indirect_jump_table_br","","Branch indirectly via a jump table entry.",11,[[["jumptable"],["value"]],["inst"]]],[11,"debugtrap","","Encodes an assembly debug trap.",11,[[],["inst"]]],[11,"trap","","Terminate execution unconditionally.",11,[[["t1"]],["inst"]]],[11,"trapz","","Trap when zero.",11,[[["value"],["t1"]],["inst"]]],[11,"resumable_trap","","A resumable trap.",11,[[["t1"]],["inst"]]],[11,"trapnz","","Trap when non-zero.",11,[[["value"],["t1"]],["inst"]]],[11,"trapif","","Trap when condition is true in integer CPU flags.",11,[[["t2"],["t1"],["value"]],["inst"]]],[11,"trapff","","Trap when condition is true in floating point CPU flags.",11,[[["t2"],["t1"],["value"]],["inst"]]],[11,"return_","","Return from the function.",11,[[],["inst"]]],[11,"fallthrough_return","","Return from the function by fallthrough.",11,[[],["inst"]]],[11,"call","","Direct function call.",11,[[["funcref"]],["inst"]]],[11,"call_indirect","","Indirect function call.",11,[[["sigref"],["value"]],["inst"]]],[11,"func_addr","","Get the address of a function.",11,[[["funcref"],["type"]],["value"]]],[11,"splat","","Vector splat.",11,[[["value"],["type"]],["value"]]],[11,"swizzle","","Vector swizzle.",11,[[["value"],["type"]],["value"]]],[11,"insertlane","","Insert `y` as lane `Idx` in x.",11,[[["value"],["t1"]],["value"]]],[11,"extractlane","","Extract lane `Idx` from `x`.",11,[[["value"],["t1"]],["value"]]],[11,"imin","","Signed integer minimum.",11,[[["value"]],["value"]]],[11,"umin","","Unsigned integer minimum.",11,[[["value"]],["value"]]],[11,"imax","","Signed integer maximum.",11,[[["value"]],["value"]]],[11,"umax","","Unsigned integer maximum.",11,[[["value"]],["value"]]],[11,"avg_round","","Unsigned average with rounding: `a := (x + y + 1) // 2`",11,[[["value"]],["value"]]],[11,"load","","Load from memory at `p + Offset`.",11,[[["t1"],["type"],["value"],["t2"]],["value"]]],[11,"load_complex","","Load from memory at `sum(args) + Offset`.",11,[[["t1"],["type"],["t2"]],["value"]]],[11,"store","","Store `x` to memory at `p + Offset`.",11,[[["t2"],["t1"],["value"]],["inst"]]],[11,"store_complex","","Store `x` to memory at `sum(args) + Offset`.",11,[[["t1"],["value"],["t2"]],["inst"]]],[11,"uload8","","Load 8 bits from memory at `p + Offset` and zero-extend.",11,[[["t1"],["type"],["value"],["t2"]],["value"]]],[11,"uload8_complex","","Load 8 bits from memory at `sum(args) + Offset` and…",11,[[["t1"],["type"],["t2"]],["value"]]],[11,"sload8","","Load 8 bits from memory at `p + Offset` and sign-extend.",11,[[["t1"],["type"],["value"],["t2"]],["value"]]],[11,"sload8_complex","","Load 8 bits from memory at `sum(args) + Offset` and…",11,[[["t1"],["type"],["t2"]],["value"]]],[11,"istore8","","Store the low 8 bits of `x` to memory at `p + Offset`.",11,[[["t2"],["t1"],["value"]],["inst"]]],[11,"istore8_complex","","Store the low 8 bits of `x` to memory at `sum(args) +…",11,[[["t1"],["value"],["t2"]],["inst"]]],[11,"uload16","","Load 16 bits from memory at `p + Offset` and zero-extend.",11,[[["t1"],["type"],["value"],["t2"]],["value"]]],[11,"uload16_complex","","Load 16 bits from memory at `sum(args) + Offset` and…",11,[[["t1"],["type"],["t2"]],["value"]]],[11,"sload16","","Load 16 bits from memory at `p + Offset` and sign-extend.",11,[[["t1"],["type"],["value"],["t2"]],["value"]]],[11,"sload16_complex","","Load 16 bits from memory at `sum(args) + Offset` and…",11,[[["t1"],["type"],["t2"]],["value"]]],[11,"istore16","","Store the low 16 bits of `x` to memory at `p + Offset`.",11,[[["t2"],["t1"],["value"]],["inst"]]],[11,"istore16_complex","","Store the low 16 bits of `x` to memory at `sum(args) +…",11,[[["t1"],["value"],["t2"]],["inst"]]],[11,"uload32","","Load 32 bits from memory at `p + Offset` and zero-extend.",11,[[["t2"],["t1"],["value"]],["value"]]],[11,"uload32_complex","","Load 32 bits from memory at `sum(args) + Offset` and…",11,[[["t2"],["t1"]],["value"]]],[11,"sload32","","Load 32 bits from memory at `p + Offset` and sign-extend.",11,[[["t2"],["t1"],["value"]],["value"]]],[11,"sload32_complex","","Load 32 bits from memory at `sum(args) + Offset` and…",11,[[["t2"],["t1"]],["value"]]],[11,"istore32","","Store the low 32 bits of `x` to memory at `p + Offset`.",11,[[["t2"],["t1"],["value"]],["inst"]]],[11,"istore32_complex","","Store the low 32 bits of `x` to memory at `sum(args) +…",11,[[["t1"],["value"],["t2"]],["inst"]]],[11,"stack_load","","Load a value from a stack slot at the constant offset.",11,[[["t1"],["type"],["stackslot"]],["value"]]],[11,"stack_store","","Store a value to a stack slot at a constant offset.",11,[[["value"],["stackslot"],["t1"]],["inst"]]],[11,"stack_addr","","Get the address of a stack slot.",11,[[["t1"],["type"],["stackslot"]],["value"]]],[11,"global_value","","Compute the value of global GV.",11,[[["type"],["globalvalue"]],["value"]]],[11,"symbol_value","","Compute the value of global GV, which is a symbolic value.",11,[[["type"],["globalvalue"]],["value"]]],[11,"tls_value","","Compute the value of global GV, which is a TLS (thread…",11,[[["type"],["globalvalue"]],["value"]]],[11,"heap_addr","","Bounds check and compute absolute address of heap memory.",11,[[["heap"],["type"],["value"],["t1"]],["value"]]],[11,"get_pinned_reg","","Gets the content of the pinned register, when it's enabled.",11,[[["type"]],["value"]]],[11,"set_pinned_reg","","Sets the content of the pinned register, when it's enabled.",11,[[["value"]],["inst"]]],[11,"table_addr","","Bounds check and compute absolute address of a table entry.",11,[[["table"],["type"],["value"],["t1"]],["value"]]],[11,"iconst","","Integer constant.",11,[[["t1"],["type"]],["value"]]],[11,"f32const","","Floating point constant.",11,[[["t1"]],["value"]]],[11,"f64const","","Floating point constant.",11,[[["t1"]],["value"]]],[11,"bconst","","Boolean constant.",11,[[["t1"],["type"]],["value"]]],[11,"vconst","","SIMD vector constant.",11,[[["t1"],["type"]],["value"]]],[11,"shuffle","","SIMD vector shuffle.",11,[[["value"],["t1"]],["value"]]],[11,"null","","Null constant value for reference types.",11,[[["type"]],["value"]]],[11,"nop","","Just a dummy instruction.",11,[[],["inst"]]],[11,"select","","Conditional select.",11,[[["value"]],["value"]]],[11,"selectif","","Conditional select, dependent on integer condition codes.",11,[[["t1"],["type"],["value"]],["value"]]],[11,"bitselect","","Conditional select of bits.",11,[[["value"]],["value"]]],[11,"copy","","Register-register copy.",11,[[["value"]],["value"]]],[11,"spill","","Spill a register value to a stack slot.",11,[[["value"]],["value"]]],[11,"fill","","Load a register value from a stack slot.",11,[[["value"]],["value"]]],[11,"fill_nop","","This is identical to `fill`, except it has no encoding,…",11,[[["value"]],["value"]]],[11,"regmove","","Temporarily divert `x` from `src` to `dst`.",11,[[["t2"],["value"],["t1"]],["inst"]]],[11,"copy_special","","Copies the contents of ''src'' register to ''dst'' register.",11,[[["t2"],["t1"]],["inst"]]],[11,"copy_to_ssa","","Copies the contents of ''src'' register to ''a'' SSA name.",11,[[["t1"],["type"]],["value"]]],[11,"copy_nop","","Stack-slot-to-the-same-stack-slot copy, which is…",11,[[["value"]],["value"]]],[11,"adjust_sp_down","","Subtracts `delta` offset value from the stack pointer…",11,[[["value"]],["inst"]]],[11,"adjust_sp_up_imm","","Adds `Offset` immediate offset value to the stack pointer…",11,[[["t1"]],["inst"]]],[11,"adjust_sp_down_imm","","Subtracts `Offset` immediate offset value from the stack…",11,[[["t1"]],["inst"]]],[11,"ifcmp_sp","","Compare `addr` with the stack pointer and set the CPU flags.",11,[[["value"]],["value"]]],[11,"regspill","","Temporarily divert `x` from `src` to `SS`.",11,[[["value"],["t1"],["stackslot"]],["inst"]]],[11,"regfill","","Temporarily divert `x` from `SS` to `dst`.",11,[[["value"],["stackslot"],["t1"]],["inst"]]],[11,"safepoint","","This instruction will provide live reference values at a…",11,[[],["inst"]]],[11,"vsplit","","Split a vector into two halves.",11,[[["value"]]]],[11,"vconcat","","Vector concatenation.",11,[[["value"]],["value"]]],[11,"vselect","","Vector lane select.",11,[[["value"]],["value"]]],[11,"vany_true","","Reduce a vector to a scalar boolean.",11,[[["value"]],["value"]]],[11,"vall_true","","Reduce a vector to a scalar boolean.",11,[[["value"]],["value"]]],[11,"icmp","","Integer comparison.",11,[[["t1"],["value"]],["value"]]],[11,"icmp_imm","","Compare scalar integer to a constant.",11,[[["t2"],["t1"],["value"]],["value"]]],[11,"ifcmp","","Compare scalar integers and return flags.",11,[[["value"]],["value"]]],[11,"ifcmp_imm","","Compare scalar integer to a constant and return flags.",11,[[["value"],["t1"]],["value"]]],[11,"iadd","","Wrapping integer addition: `a := x + y \\pmod{2^B}`.",11,[[["value"]],["value"]]],[11,"uadd_sat","","Add with unsigned saturation.",11,[[["value"]],["value"]]],[11,"sadd_sat","","Add with signed saturation.",11,[[["value"]],["value"]]],[11,"isub","","Wrapping integer subtraction: `a := x - y \\pmod{2^B}`.",11,[[["value"]],["value"]]],[11,"usub_sat","","Subtract with unsigned saturation.",11,[[["value"]],["value"]]],[11,"ssub_sat","","Subtract with signed saturation.",11,[[["value"]],["value"]]],[11,"ineg","","Integer negation: `a := -x \\pmod{2^B}`.",11,[[["value"]],["value"]]],[11,"imul","","Wrapping integer multiplication: `a := x y \\pmod{2^B}`.",11,[[["value"]],["value"]]],[11,"umulhi","","Unsigned integer multiplication, producing the high half…",11,[[["value"]],["value"]]],[11,"smulhi","","Signed integer multiplication, producing the high half of…",11,[[["value"]],["value"]]],[11,"udiv","","Unsigned integer division: `a := \\lfloor {x \\over y}…",11,[[["value"]],["value"]]],[11,"sdiv","","Signed integer division rounded toward zero: `a :=…",11,[[["value"]],["value"]]],[11,"urem","","Unsigned integer remainder.",11,[[["value"]],["value"]]],[11,"srem","","Signed integer remainder. The result has the sign of the…",11,[[["value"]],["value"]]],[11,"iadd_imm","","Add immediate integer.",11,[[["value"],["t1"]],["value"]]],[11,"imul_imm","","Integer multiplication by immediate constant.",11,[[["value"],["t1"]],["value"]]],[11,"udiv_imm","","Unsigned integer division by an immediate constant.",11,[[["value"],["t1"]],["value"]]],[11,"sdiv_imm","","Signed integer division by an immediate constant.",11,[[["value"],["t1"]],["value"]]],[11,"urem_imm","","Unsigned integer remainder with immediate divisor.",11,[[["value"],["t1"]],["value"]]],[11,"srem_imm","","Signed integer remainder with immediate divisor.",11,[[["value"],["t1"]],["value"]]],[11,"irsub_imm","","Immediate reverse wrapping subtraction: `a := Y - x…",11,[[["value"],["t1"]],["value"]]],[11,"iadd_cin","","Add integers with carry in.",11,[[["value"]],["value"]]],[11,"iadd_ifcin","","Add integers with carry in.",11,[[["value"]],["value"]]],[11,"iadd_cout","","Add integers with carry out.",11,[[["value"]]]],[11,"iadd_ifcout","","Add integers with carry out.",11,[[["value"]]]],[11,"iadd_carry","","Add integers with carry in and out.",11,[[["value"]]]],[11,"iadd_ifcarry","","Add integers with carry in and out.",11,[[["value"]]]],[11,"isub_bin","","Subtract integers with borrow in.",11,[[["value"]],["value"]]],[11,"isub_ifbin","","Subtract integers with borrow in.",11,[[["value"]],["value"]]],[11,"isub_bout","","Subtract integers with borrow out.",11,[[["value"]]]],[11,"isub_ifbout","","Subtract integers with borrow out.",11,[[["value"]]]],[11,"isub_borrow","","Subtract integers with borrow in and out.",11,[[["value"]]]],[11,"isub_ifborrow","","Subtract integers with borrow in and out.",11,[[["value"]]]],[11,"band","","Bitwise and.",11,[[["value"]],["value"]]],[11,"bor","","Bitwise or.",11,[[["value"]],["value"]]],[11,"bxor","","Bitwise xor.",11,[[["value"]],["value"]]],[11,"bnot","","Bitwise not.",11,[[["value"]],["value"]]],[11,"band_not","","Bitwise and not.",11,[[["value"]],["value"]]],[11,"bor_not","","Bitwise or not.",11,[[["value"]],["value"]]],[11,"bxor_not","","Bitwise xor not.",11,[[["value"]],["value"]]],[11,"band_imm","","Bitwise and with immediate.",11,[[["value"],["t1"]],["value"]]],[11,"bor_imm","","Bitwise or with immediate.",11,[[["value"],["t1"]],["value"]]],[11,"bxor_imm","","Bitwise xor with immediate.",11,[[["value"],["t1"]],["value"]]],[11,"rotl","","Rotate left.",11,[[["value"]],["value"]]],[11,"rotr","","Rotate right.",11,[[["value"]],["value"]]],[11,"rotl_imm","","Rotate left by immediate.",11,[[["value"],["t1"]],["value"]]],[11,"rotr_imm","","Rotate right by immediate.",11,[[["value"],["t1"]],["value"]]],[11,"ishl","","Integer shift left. Shift the bits in `x` towards the MSB…",11,[[["value"]],["value"]]],[11,"ushr","","Unsigned shift right. Shift bits in `x` towards the LSB by…",11,[[["value"]],["value"]]],[11,"sshr","","Signed shift right. Shift bits in `x` towards the LSB by…",11,[[["value"]],["value"]]],[11,"ishl_imm","","Integer shift left by immediate.",11,[[["value"],["t1"]],["value"]]],[11,"ushr_imm","","Unsigned shift right by immediate.",11,[[["value"],["t1"]],["value"]]],[11,"sshr_imm","","Signed shift right by immediate.",11,[[["value"],["t1"]],["value"]]],[11,"bitrev","","Reverse the bits of a integer.",11,[[["value"]],["value"]]],[11,"clz","","Count leading zero bits.",11,[[["value"]],["value"]]],[11,"cls","","Count leading sign bits.",11,[[["value"]],["value"]]],[11,"ctz","","Count trailing zeros.",11,[[["value"]],["value"]]],[11,"popcnt","","Population count",11,[[["value"]],["value"]]],[11,"fcmp","","Floating point comparison.",11,[[["t1"],["value"]],["value"]]],[11,"ffcmp","","Floating point comparison returning flags.",11,[[["value"]],["value"]]],[11,"fadd","","Floating point addition.",11,[[["value"]],["value"]]],[11,"fsub","","Floating point subtraction.",11,[[["value"]],["value"]]],[11,"fmul","","Floating point multiplication.",11,[[["value"]],["value"]]],[11,"fdiv","","Floating point division.",11,[[["value"]],["value"]]],[11,"sqrt","","Floating point square root.",11,[[["value"]],["value"]]],[11,"fma","","Floating point fused multiply-and-add.",11,[[["value"]],["value"]]],[11,"fneg","","Floating point negation.",11,[[["value"]],["value"]]],[11,"fabs","","Floating point absolute value.",11,[[["value"]],["value"]]],[11,"fcopysign","","Floating point copy sign.",11,[[["value"]],["value"]]],[11,"fmin","","Floating point minimum, propagating NaNs.",11,[[["value"]],["value"]]],[11,"fmax","","Floating point maximum, propagating NaNs.",11,[[["value"]],["value"]]],[11,"ceil","","Round floating point round to integral, towards positive…",11,[[["value"]],["value"]]],[11,"floor","","Round floating point round to integral, towards negative…",11,[[["value"]],["value"]]],[11,"trunc","","Round floating point round to integral, towards zero.",11,[[["value"]],["value"]]],[11,"nearest","","Round floating point round to integral, towards nearest…",11,[[["value"]],["value"]]],[11,"is_null","","Reference verification.",11,[[["value"]],["value"]]],[11,"is_invalid","","Reference verification.",11,[[["value"]],["value"]]],[11,"trueif","","Test integer CPU flags for a specific condition.",11,[[["t1"],["value"]],["value"]]],[11,"trueff","","Test floating point CPU flags for a specific condition.",11,[[["t1"],["value"]],["value"]]],[11,"bitcast","","Reinterpret the bits in `x` as a different type.",11,[[["value"],["type"]],["value"]]],[11,"raw_bitcast","","Cast the bits in `x` as a different type of the same bit…",11,[[["value"],["type"]],["value"]]],[11,"scalar_to_vector","","Scalar To Vector -- move a value out of a scalar register…",11,[[["value"],["type"]],["value"]]],[11,"breduce","","Convert `x` to a smaller boolean type in the…",11,[[["value"],["type"]],["value"]]],[11,"bextend","","Convert `x` to a larger boolean type in the…",11,[[["value"],["type"]],["value"]]],[11,"bint","","Convert `x` to an integer.",11,[[["value"],["type"]],["value"]]],[11,"bmask","","Convert `x` to an integer mask.",11,[[["value"],["type"]],["value"]]],[11,"ireduce","","Convert `x` to a smaller integer type by dropping high bits.",11,[[["value"],["type"]],["value"]]],[11,"uextend","","Convert `x` to a larger integer type by zero-extending.",11,[[["value"],["type"]],["value"]]],[11,"sextend","","Convert `x` to a larger integer type by sign-extending.",11,[[["value"],["type"]],["value"]]],[11,"fpromote","","Convert `x` to a larger floating point format.",11,[[["value"],["type"]],["value"]]],[11,"fdemote","","Convert `x` to a smaller floating point format.",11,[[["value"],["type"]],["value"]]],[11,"fcvt_to_uint","","Convert floating point to unsigned integer.",11,[[["value"],["type"]],["value"]]],[11,"fcvt_to_uint_sat","","Convert floating point to unsigned integer as fcvt_to_uint…",11,[[["value"],["type"]],["value"]]],[11,"fcvt_to_sint","","Convert floating point to signed integer.",11,[[["value"],["type"]],["value"]]],[11,"fcvt_to_sint_sat","","Convert floating point to signed integer as fcvt_to_sint…",11,[[["value"],["type"]],["value"]]],[11,"fcvt_from_uint","","Convert unsigned integer to floating point.",11,[[["value"],["type"]],["value"]]],[11,"fcvt_from_sint","","Convert signed integer to floating point.",11,[[["value"],["type"]],["value"]]],[11,"isplit","","Split an integer into low and high parts.",11,[[["value"]]]],[11,"iconcat","","Concatenate low and high bits to form a larger integer type.",11,[[["value"]],["value"]]],[11,"x86_udivmodx","","Extended unsigned division.",11,[[["value"]]]],[11,"x86_sdivmodx","","Extended signed division.",11,[[["value"]]]],[11,"x86_umulx","","Unsigned integer multiplication, producing a double-length…",11,[[["value"]]]],[11,"x86_smulx","","Signed integer multiplication, producing a double-length…",11,[[["value"]]]],[11,"x86_cvtt2si","","Convert with truncation floating point to signed integer.",11,[[["value"],["type"]],["value"]]],[11,"x86_fmin","","Floating point minimum with x86 semantics.",11,[[["value"]],["value"]]],[11,"x86_fmax","","Floating point maximum with x86 semantics.",11,[[["value"]],["value"]]],[11,"x86_push","","Pushes a value onto the stack.",11,[[["value"]],["inst"]]],[11,"x86_pop","","Pops a value from the stack.",11,[[["type"]],["value"]]],[11,"x86_bsr","","Bit Scan Reverse -- returns the bit-index of the most…",11,[[["value"]]]],[11,"x86_bsf","","Bit Scan Forwards -- returns the bit-index of the least…",11,[[["value"]]]],[11,"x86_pshufd","","Packed Shuffle Doublewords -- copies data from either…",11,[[["value"],["t1"]],["value"]]],[11,"x86_pshufb","","Packed Shuffle Bytes -- re-orders data in an extended…",11,[[["value"]],["value"]]],[11,"x86_pextr","","Extract lane `Idx` from `x`. The lane index, `Idx`, is an…",11,[[["value"],["t1"]],["value"]]],[11,"x86_pinsr","","Insert `y` into `x` at lane `Idx`. The lane index, `Idx`,…",11,[[["value"],["t1"]],["value"]]],[11,"x86_insertps","","Insert a lane of `y` into `x` at using `Idx` to encode…",11,[[["value"],["t1"]],["value"]]],[11,"x86_movsd","","Move the low 64 bits of the float vector `y` to the low 64…",11,[[["value"]],["value"]]],[11,"x86_movlhps","","Move the low 64 bits of the float vector `y` to the high…",11,[[["value"]],["value"]]],[11,"x86_psll","","Shift Packed Data Left Logical -- This implements the…",11,[[["value"]],["value"]]],[11,"x86_psrl","","Shift Packed Data Right Logical -- This implements the…",11,[[["value"]],["value"]]],[11,"x86_psra","","Shift Packed Data Right Arithmetic -- This implements the…",11,[[["value"]],["value"]]],[11,"x86_ptest","","Logical Compare -- PTEST will set the ZF flag if all bits…",11,[[["value"]],["value"]]],[11,"x86_pmaxs","","Maximum of Packed Signed Integers -- Compare signed…",11,[[["value"]],["value"]]],[11,"x86_pmaxu","","Maximum of Packed Unsigned Integers -- Compare unsigned…",11,[[["value"]],["value"]]],[11,"x86_pmins","","Minimum of Packed Signed Integers -- Compare signed…",11,[[["value"]],["value"]]],[11,"x86_pminu","","Minimum of Packed Unsigned Integers -- Compare unsigned…",11,[[["value"]],["value"]]],[11,"x86_elf_tls_get_addr","","Elf tls get addr -- This implements the GD TLS model for…",11,[[["globalvalue"]],["value"]]],[11,"x86_macho_tls_get_addr","","Mach-O tls get addr -- This implements TLS access for…",11,[[["globalvalue"]],["value"]]],[11,"Binary","","Binary(imms=(), vals=2)",11,[[["value"],["type"],["opcode"]]]],[11,"BinaryImm","","BinaryImm(imms=(imm: ir::immediates::Imm64), vals=1)",11,[[["value"],["type"],["opcode"],["imm64"]]]],[11,"Branch","","Branch(imms=(destination: ir::Block), vals=1)",11,[[["value"],["type"],["block"],["opcode"],["entitylist",["value"]]]]],[11,"BranchFloat","","BranchFloat(imms=(cond: ir::condcodes::FloatCC,…",11,[[["value"],["type"],["block"],["opcode"],["floatcc"],["entitylist",["value"]]]]],[11,"BranchIcmp","","BranchIcmp(imms=(cond: ir::condcodes::IntCC, destination:…",11,[[["value"],["type"],["intcc"],["opcode"],["block"],["entitylist",["value"]]]]],[11,"BranchInt","","BranchInt(imms=(cond: ir::condcodes::IntCC, destination:…",11,[[["value"],["type"],["intcc"],["opcode"],["block"],["entitylist",["value"]]]]],[11,"BranchTable","","BranchTable(imms=(destination: ir::Block, table:…",11,[[["jumptable"],["value"],["type"],["block"],["opcode"]]]],[11,"BranchTableBase","","BranchTableBase(imms=(table: ir::JumpTable), vals=0)",11,[[["opcode"],["jumptable"],["type"]]]],[11,"BranchTableEntry","","BranchTableEntry(imms=(imm: ir::immediates::Uimm8, table:…",11,[[["jumptable"],["value"],["type"],["opcode"],["u8"]]]],[11,"Call","","Call(imms=(func_ref: ir::FuncRef), vals=0)",11,[[["value"],["type"],["opcode"],["funcref"],["entitylist",["value"]]]]],[11,"CallIndirect","","CallIndirect(imms=(sig_ref: ir::SigRef), vals=1)",11,[[["sigref"],["value"],["type"],["opcode"],["entitylist",["value"]]]]],[11,"CondTrap","","CondTrap(imms=(code: ir::TrapCode), vals=1)",11,[[["value"],["type"],["trapcode"],["opcode"]]]],[11,"CopySpecial","","CopySpecial(imms=(src: isa::RegUnit, dst: isa::RegUnit),…",11,[[["type"],["opcode"],["u16"]]]],[11,"CopyToSsa","","CopyToSsa(imms=(src: isa::RegUnit), vals=0)",11,[[["opcode"],["u16"],["type"]]]],[11,"ExtractLane","","ExtractLane(imms=(lane: ir::immediates::Uimm8), vals=1)",11,[[["value"],["type"],["opcode"],["u8"]]]],[11,"FloatCompare","","FloatCompare(imms=(cond: ir::condcodes::FloatCC), vals=2)",11,[[["value"],["type"],["opcode"],["floatcc"]]]],[11,"FloatCond","","FloatCond(imms=(cond: ir::condcodes::FloatCC), vals=1)",11,[[["value"],["type"],["opcode"],["floatcc"]]]],[11,"FloatCondTrap","","FloatCondTrap(imms=(cond: ir::condcodes::FloatCC, code:…",11,[[["value"],["type"],["trapcode"],["opcode"],["floatcc"]]]],[11,"FuncAddr","","FuncAddr(imms=(func_ref: ir::FuncRef), vals=0)",11,[[["opcode"],["funcref"],["type"]]]],[11,"HeapAddr","","HeapAddr(imms=(heap: ir::Heap, imm:…",11,[[["heap"],["type"],["value"],["opcode"],["uimm32"]]]],[11,"IndirectJump","","IndirectJump(imms=(table: ir::JumpTable), vals=1)",11,[[["jumptable"],["value"],["type"],["opcode"]]]],[11,"InsertLane","","InsertLane(imms=(lane: ir::immediates::Uimm8), vals=2)",11,[[["value"],["type"],["opcode"],["u8"]]]],[11,"IntCompare","","IntCompare(imms=(cond: ir::condcodes::IntCC), vals=2)",11,[[["value"],["type"],["intcc"],["opcode"]]]],[11,"IntCompareImm","","IntCompareImm(imms=(cond: ir::condcodes::IntCC, imm:…",11,[[["value"],["type"],["intcc"],["opcode"],["imm64"]]]],[11,"IntCond","","IntCond(imms=(cond: ir::condcodes::IntCC), vals=1)",11,[[["value"],["type"],["intcc"],["opcode"]]]],[11,"IntCondTrap","","IntCondTrap(imms=(cond: ir::condcodes::IntCC, code:…",11,[[["value"],["type"],["intcc"],["opcode"],["trapcode"]]]],[11,"IntSelect","","IntSelect(imms=(cond: ir::condcodes::IntCC), vals=3)",11,[[["value"],["type"],["intcc"],["opcode"]]]],[11,"Jump","","Jump(imms=(destination: ir::Block), vals=0)",11,[[["value"],["type"],["block"],["opcode"],["entitylist",["value"]]]]],[11,"Load","","Load(imms=(flags: ir::MemFlags, offset:…",11,[[["value"],["type"],["memflags"],["opcode"],["offset32"]]]],[11,"LoadComplex","","LoadComplex(imms=(flags: ir::MemFlags, offset:…",11,[[["value"],["type"],["memflags"],["opcode"],["offset32"],["entitylist",["value"]]]]],[11,"MultiAry","","MultiAry(imms=(), vals=0)",11,[[["value"],["type"],["opcode"],["entitylist",["value"]]]]],[11,"NullAry","","NullAry(imms=(), vals=0)",11,[[["opcode"],["type"]]]],[11,"RegFill","","RegFill(imms=(src: ir::StackSlot, dst: isa::RegUnit),…",11,[[["value"],["type"],["stackslot"],["opcode"],["u16"]]]],[11,"RegMove","","RegMove(imms=(src: isa::RegUnit, dst: isa::RegUnit), vals=1)",11,[[["value"],["type"],["opcode"],["u16"]]]],[11,"RegSpill","","RegSpill(imms=(src: isa::RegUnit, dst: ir::StackSlot),…",11,[[["value"],["type"],["stackslot"],["opcode"],["u16"]]]],[11,"Shuffle","","Shuffle(imms=(mask: ir::Immediate), vals=2)",11,[[["value"],["type"],["opcode"],["immediate"]]]],[11,"StackLoad","","StackLoad(imms=(stack_slot: ir::StackSlot, offset:…",11,[[["type"],["stackslot"],["opcode"],["offset32"]]]],[11,"StackStore","","StackStore(imms=(stack_slot: ir::StackSlot, offset:…",11,[[["value"],["type"],["stackslot"],["opcode"],["offset32"]]]],[11,"Store","","Store(imms=(flags: ir::MemFlags, offset:…",11,[[["value"],["type"],["memflags"],["opcode"],["offset32"]]]],[11,"StoreComplex","","StoreComplex(imms=(flags: ir::MemFlags, offset:…",11,[[["value"],["type"],["memflags"],["opcode"],["offset32"],["entitylist",["value"]]]]],[11,"TableAddr","","TableAddr(imms=(table: ir::Table, offset:…",11,[[["table"],["type"],["value"],["opcode"],["offset32"]]]],[11,"Ternary","","Ternary(imms=(), vals=3)",11,[[["value"],["type"],["opcode"]]]],[11,"Trap","","Trap(imms=(code: ir::TrapCode), vals=0)",11,[[["opcode"],["type"],["trapcode"]]]],[11,"Unary","","Unary(imms=(), vals=1)",11,[[["opcode"],["value"],["type"]]]],[11,"UnaryBool","","UnaryBool(imms=(imm: bool), vals=0)",11,[[["opcode"],["type"],["bool"]]]],[11,"UnaryConst","","UnaryConst(imms=(constant_handle: ir::Constant), vals=0)",11,[[["opcode"],["constant"],["type"]]]],[11,"UnaryGlobalValue","","UnaryGlobalValue(imms=(global_value: ir::GlobalValue),…",11,[[["opcode"],["type"],["globalvalue"]]]],[11,"UnaryIeee32","","UnaryIeee32(imms=(imm: ir::immediates::Ieee32), vals=0)",11,[[["opcode"],["type"],["ieee32"]]]],[11,"UnaryIeee64","","UnaryIeee64(imms=(imm: ir::immediates::Ieee64), vals=0)",11,[[["opcode"],["ieee64"],["type"]]]],[11,"UnaryImm","","UnaryImm(imms=(imm: ir::immediates::Imm64), vals=0)",11,[[["opcode"],["type"],["imm64"]]]],[3,"MemFlags","","Flags for memory operations like load/store.",null,null],[3,"StackSlotData","","Contents of a stack slot.",null,null],[12,"kind","","The kind of stack slot.",12,null],[12,"size","","Size of stack slot in bytes.",12,null],[12,"offset","","Offset of stack slot relative to the stack pointer in the…",12,null],[4,"StackSlotKind","","The kind of a stack slot.",null,null],[13,"SpillSlot","","A spill slot. This is a stack slot created by the register…",13,null],[13,"ExplicitSlot","","An explicit stack slot. This is a chunk of stack memory…",13,null],[13,"IncomingArg","","An incoming function argument.",13,null],[13,"OutgoingArg","","An outgoing function argument.",13,null],[13,"StructReturnSlot","","Space allocated in the caller's frame for the callee's…",13,null],[13,"EmergencySlot","","An emergency spill slot.",13,null],[0,"binemit","wasmtime_jit::trampoline","",null,null],[3,"NullTrapSink","wasmtime_jit::trampoline::binemit","A `TrapSink` implementation that does nothing, which is…",null,null],[6,"CodeOffset","","Offset in bytes from the beginning of the function.",null,null],[3,"NullStackmapSink","","Placeholder StackmapSink that does nothing.",null,null],[8,"TrapSink","","A trait for receiving trap codes and offsets.",null,null],[10,"trap","","Add trap information for a specific offset.",14,[[["u32"],["sourceloc"],["trapcode"],["self"]]]],[3,"TrampolineRelocSink","","We don't expect trampoline compilation to produce any…",null,null],[17,"VERSION","wasmtime_jit","Version number of this crate.",null,null],[8,"Resolver","","Import resolver connects imports with available exported…",null,null],[10,"resolve","","Resolves an import a WebAssembly module to an export it's…",15,[[["str"],["u32"],["self"]],[["option",["export"]],["export"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","wasmtime_jit::trampoline","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","wasmtime_jit::trampoline::ir","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"equivalent","","",7,[[["k"],["self"]],["bool"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"equivalent","","",18,[[["k"],["self"]],["bool"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"equivalent","","",12,[[["k"],["self"]],["bool"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"equivalent","","",13,[[["k"],["self"]],["bool"]]],[11,"from","wasmtime_jit::trampoline::binemit","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"fmt","wasmtime_jit::trampoline::ir","",7,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",12,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",18,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",10,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",13,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"deserialize","","",13,[[["__d"]],[["stackslotkind"],["result",["stackslotkind"]]]]],[11,"deserialize","","",12,[[["__d"]],[["stackslotdata"],["result",["stackslotdata"]]]]],[11,"eq","","",13,[[["self"],["stackslotkind"]],["bool"]]],[11,"eq","","",7,[[["externalname"],["self"]],["bool"]]],[11,"ne","","",7,[[["externalname"],["self"]],["bool"]]],[11,"eq","","",18,[[["self"],["memflags"]],["bool"]]],[11,"ne","","",18,[[["self"],["memflags"]],["bool"]]],[11,"eq","","",12,[[["self"],["stackslotdata"]],["bool"]]],[11,"ne","","",12,[[["self"],["stackslotdata"]],["bool"]]],[11,"default","","",7,[[],["externalname"]]],[11,"hash","","",18,[[["self"],["__h"]]]],[11,"from_str","","",13,[[["str"]],[["result",["stackslotkind"]],["stackslotkind"]]]],[11,"from_str","","",7,[[["str"]],[["externalname"],["result",["externalname"]]]]],[11,"trap","wasmtime_jit::trampoline::binemit","",19,[[["u32"],["sourceloc"],["trapcode"],["self"]]]],[11,"fmt","wasmtime_jit::trampoline::ir","",7,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",12,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",10,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",13,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",18,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"add_stackmap","wasmtime_jit::trampoline::binemit","",20,[[["self"],["u32"],["stackmap"]]]],[11,"clone","wasmtime_jit::trampoline::ir","",10,[[["self"]],["function"]]],[11,"clone","","",13,[[["self"]],["stackslotkind"]]],[11,"clone","","",18,[[["self"]],["memflags"]]],[11,"clone","","",12,[[["self"]],["stackslotdata"]]],[11,"clone","","",7,[[["self"]],["externalname"]]],[11,"serialize","","",13,[[["self"],["__s"]],["result"]]],[11,"serialize","","",12,[[["self"],["__s"]],["result"]]],[11,"resolve","wasmtime_jit","",16,[[["str"],["u32"],["self"]],[["option",["export"]],["export"]]]],[11,"from","","",1,[[["compileerror"]],["self"]]],[11,"from","","",1,[[["instantiationerror"]],["self"]]],[11,"from","","",1,[[["error"]],["self"]]],[11,"clone","","",0,[[["self"]],["compilationstrategy"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"source","","",1,[[["self"]],[["option",["error"]],["error"]]]],[11,"reloc_block","wasmtime_jit::trampoline::binemit","",21,[[["reloc"],["codeoffset"],["self"]]]],[11,"reloc_external","","",21,[[["reloc"],["codeoffset"],["addend"],["externalname"],["self"]]]],[11,"reloc_constant","","",21,[[["reloc"],["codeoffset"],["self"],["constantoffset"]]]],[11,"reloc_jt","","",21,[[["reloc"],["jumptable"],["codeoffset"],["self"]]]],[11,"new","wasmtime_jit::trampoline","Allocate a new compilation context.",5,[[],["context"]]],[11,"for_function","","Allocate a new compilation context with an existing…",5,[[["function"]],["context"]]],[11,"clear","","Clear all data structures in this context.",5,[[["self"]]]],[11,"compile_and_emit","","Compile the function, and emit machine code into a…",5,[[["vec"],["trapsink"],["targetisa"],["relocsink"],["self"],["stackmapsink"]],[["result",["codeinfo","codegenerror"]],["codeinfo"],["codegenerror"]]]],[11,"compile","","Compile the function.",5,[[["self"],["targetisa"]],[["result",["codeinfo","codegenerror"]],["codeinfo"],["codegenerror"]]]],[11,"emit_to_memory","","Emit machine code directly into raw memory.",5,[[["trapsink"],["targetisa"],["relocsink"],["self"],["stackmapsink"]],["codeinfo"]]],[11,"emit_unwind_info","","Emit unwind information.",5,[[["frameunwindsink"],["targetisa"],["frameunwindkind"],["self"]]]],[11,"verify","","Run the verifier on the function.",5,[[["foi"],["self"]],[["result",["verifiererrors"]],["verifiererrors"]]]],[11,"verify_if","","Run the verifier only if the `enable_verifier` setting is…",5,[[["foi"],["self"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"verify_locations","","Run the locations verifier on the function.",5,[[["self"],["targetisa"]],[["result",["verifiererrors"]],["verifiererrors"]]]],[11,"verify_locations_if","","Run the locations verifier only if the `enable_verifier`…",5,[[["self"],["targetisa"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"dce","","Perform dead-code elimination on the function.",5,[[["foi"],["self"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"preopt","","Perform pre-legalization rewrites on the function.",5,[[["self"],["targetisa"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"canonicalize_nans","","Perform NaN canonicalizing rewrites on the function.",5,[[["self"],["targetisa"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"legalize","","Run the legalizer for `isa` on the function.",5,[[["self"],["targetisa"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"postopt","","Perform post-legalization rewrites on the function.",5,[[["self"],["targetisa"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"compute_cfg","","Compute the control flow graph.",5,[[["self"]]]],[11,"compute_domtree","","Compute dominator tree.",5,[[["self"]]]],[11,"compute_loop_analysis","","Compute the loop analysis.",5,[[["self"]]]],[11,"flowgraph","","Compute the control flow graph and dominator tree.",5,[[["self"]]]],[11,"simple_gvn","","Perform simple GVN on the function.",5,[[["foi"],["self"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"licm","","Perform LICM on the function.",5,[[["self"],["targetisa"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"eliminate_unreachable_code","","Perform unreachable code elimination.",5,[[["foi"],["self"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"regalloc","","Run the register allocator.",5,[[["self"],["targetisa"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"prologue_epilogue","","Insert prologue and epilogues after computing the stack…",5,[[["self"],["targetisa"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"redundant_reload_remover","","Do redundant-reload removal after allocation of both…",5,[[["self"],["targetisa"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"shrink_instructions","","Run the instruction shrinking pass.",5,[[["self"],["targetisa"]],[["codegenerror"],["result",["codegenerror"]]]]],[11,"relax_branches","","Run the branch relaxation pass and return information…",5,[[["self"],["targetisa"]],[["result",["codeinfo","codegenerror"]],["codeinfo"],["codegenerror"]]]],[11,"build_value_labels_ranges","","Builds ranges and location for specified value labels.",5,[[["self"],["targetisa"]],[["hashmap",["valuelabel","vec","randomstate"]],["result",["hashmap","codegenerror"]],["codegenerror"]]]],[11,"new","","Creates a new FunctionBuilder structure that will operate…",6,[[["function"],["functionbuildercontext"]],["functionbuilder"]]],[11,"set_srcloc","","Set the source location that should be assigned to all new…",6,[[["self"],["sourceloc"]]]],[11,"create_block","","Creates a new `Block` and returns its reference.",6,[[["self"]],["block"]]],[11,"switch_to_block","","After the call to this function, new instructions will be…",6,[[["self"],["block"]]]],[11,"seal_block","","Declares that all the predecessors of this block are known.",6,[[["self"],["block"]]]],[11,"seal_all_blocks","","Effectively calls seal_block on all blocks in the function.",6,[[["self"]]]],[11,"declare_var","","In order to use a variable in a `use_var`, you need to…",6,[[["variable"],["self"],["type"]]]],[11,"use_var","","Returns the Cranelift IR value corresponding to the…",6,[[["variable"],["self"]],["value"]]],[11,"def_var","","Register a new definition of a user variable. The type of…",6,[[["variable"],["self"],["value"]]]],[11,"set_val_label","","Set label for Value",6,[[["self"],["value"],["valuelabel"]]]],[11,"create_jump_table","","Creates a jump table in the function, to be used by…",6,[[["self"],["jumptabledata"]],["jumptable"]]],[11,"create_stack_slot","","Creates a stack slot in the function, to be used by…",6,[[["self"],["stackslotdata"]],["stackslot"]]],[11,"import_signature","","Adds a signature which can later be used to declare an…",6,[[["self"],["signature"]],["sigref"]]],[11,"import_function","","Declare an external function import.",6,[[["self"],["extfuncdata"]],["funcref"]]],[11,"create_global_value","","Declares a global value accessible to the function.",6,[[["self"],["globalvaluedata"]],["globalvalue"]]],[11,"create_heap","","Declares a heap accessible to the function.",6,[[["self"],["heapdata"]],["heap"]]],[11,"ins","","Returns an object with the `InstBuilder` trait that allows…",6,[[["self"]],["funcinstbuilder"]]],[11,"ensure_inserted_block","","Make sure that the current block is inserted in the layout.",6,[[["self"]]]],[11,"cursor","","Returns a `FuncCursor` pointed at the current position…",6,[[["self"]],["funccursor"]]],[11,"append_block_params_for_function_params","","Append parameters to the given `Block` corresponding to…",6,[[["self"],["block"]]]],[11,"append_block_params_for_function_returns","","Append parameters to the given `Block` corresponding to…",6,[[["self"],["block"]]]],[11,"finalize","","Declare that translation of the current function is…",6,[[["self"]]]],[11,"block_params","","Retrieves all the parameters for a `Block` currently…",6,[[["self"],["block"]]]],[11,"signature","","Retrieves the signature with reference `sigref` previously…",6,[[["sigref"],["self"]],[["option",["signature"]],["signature"]]]],[11,"append_block_param","","Creates a parameter for a specific `Block` by appending it…",6,[[["self"],["block"],["type"]],["value"]]],[11,"inst_results","","Returns the result values of an instruction.",6,[[["self"],["inst"]]]],[11,"change_jump_destination","","Changes the destination of a jump instruction after…",6,[[["self"],["inst"],["block"]]]],[11,"is_unreachable","","Returns `true` if and only if the current `Block` is…",6,[[["self"]],["bool"]]],[11,"is_pristine","","Returns `true` if and only if no instructions have been…",6,[[["self"]],["bool"]]],[11,"is_filled","","Returns `true` if and only if a terminator instruction has…",6,[[["self"]],["bool"]]],[11,"display","","Returns a displayable object for the function as it is.",6,[[["self"],["i"]],["displayfunction"]]],[11,"call_memcpy","","Calls libc.memcpy",6,[[["targetfrontendconfig"],["value"],["self"]]]],[11,"emit_small_memory_copy","","Optimised memcpy or memmove for small copies.",6,[[["targetfrontendconfig"],["value"],["bool"],["self"],["u64"],["u8"]]]],[11,"call_memset","","Calls libc.memset",6,[[["targetfrontendconfig"],["value"],["self"]]]],[11,"emit_small_memset","","Calls libc.memset",6,[[["targetfrontendconfig"],["value"],["self"],["u64"],["u8"]]]],[11,"call_memmove","","Calls libc.memmove",6,[[["targetfrontendconfig"],["value"],["self"]]]],[11,"new","","Creates a FunctionBuilderContext structure. The structure…",17,[[],["functionbuildercontext"]]],[11,"testcase","wasmtime_jit::trampoline::ir","Creates a new external name from a sequence of bytes.…",7,[[["t"]],["externalname"]]],[11,"user","","Create a new external name from user-provided integer…",7,[[["u32"]],["externalname"]]],[11,"with_name_signature","","Create a function with the given name and signature.",10,[[["externalname"],["signature"]],["function"]]],[11,"clear","","Clear all data structures in this function.",10,[[["self"]]]],[11,"new","","Create a new empty, anonymous function with a Fast calling…",10,[[],["function"]]],[11,"create_jump_table","","Creates a jump table in the function, to be used by…",10,[[["self"],["jumptabledata"]],["jumptable"]]],[11,"create_stack_slot","","Creates a stack slot in the function, to be used by…",10,[[["self"],["stackslotdata"]],["stackslot"]]],[11,"import_signature","","Adds a signature which can later be used to declare an…",10,[[["self"],["signature"]],["sigref"]]],[11,"import_function","","Declare an external function import.",10,[[["self"],["extfuncdata"]],["funcref"]]],[11,"create_global_value","","Declares a global value accessible to the function.",10,[[["self"],["globalvaluedata"]],["globalvalue"]]],[11,"create_heap","","Declares a heap accessible to the function.",10,[[["self"],["heapdata"]],["heap"]]],[11,"create_table","","Declares a table accessible to the function.",10,[[["tabledata"],["self"]],["table"]]],[11,"display","","Return an object that can display this function with…",10,[[["i"],["self"]],["displayfunction"]]],[11,"display_with","","Return an object that can display this function with…",10,[[["self"],["displayfunctionannotations"]],["displayfunction"]]],[11,"special_param","","Find a presumed unique special-purpose function parameter…",10,[[["self"],["argumentpurpose"]],[["value"],["option",["value"]]]]],[11,"inst_offsets","","Get an iterator over the instructions in `block`,…",10,[[["encinfo"],["self"],["block"]],["instoffsetiter"]]],[11,"update_encoding","","Wrapper around `encode` which assigns `inst` the resulting…",10,[[["self"],["inst"],["targetisa"]],["result"]]],[11,"encode","","Wrapper around `TargetIsa::encode` for encoding an…",10,[[["targetisa"],["self"],["inst"]],[["result",["encoding"]],["encoding"]]]],[11,"collect_debug_info","","Starts collection of debug information.",10,[[["self"]]]],[11,"collect_frame_layout_info","","Starts collection of frame layout information.",10,[[["self"]]]],[11,"change_branch_destination","","Changes the destination of a jump or branch instruction.…",10,[[["self"],["inst"],["block"]]]],[11,"is_block_basic","","Checks that the specified block can be encoded as a basic…",10,[[["self"],["block"]],["result"]]],[11,"is_leaf","","Returns true if the function is function that doesn't call…",10,[[["self"]],["bool"]]],[11,"new","","Create a new empty set of flags.",18,[[],["memflags"]]],[11,"trusted","","Create a set of flags representing an access from a…",18,[[],["memflags"]]],[11,"set_by_name","","Set a flag bit by name.",18,[[["str"],["self"]],["bool"]]],[11,"notrap","","Test if the `notrap` flag is set.",18,[[],["bool"]]],[11,"set_notrap","","Set the `notrap` flag.",18,[[["self"]]]],[11,"aligned","","Test if the `aligned` flag is set.",18,[[],["bool"]]],[11,"set_aligned","","Set the `aligned` flag.",18,[[["self"]]]],[11,"readonly","","Test if the `readonly` flag is set.",18,[[],["bool"]]],[11,"set_readonly","","Set the `readonly` flag.",18,[[["self"]]]],[11,"new","","Create a stack slot with the specified byte size.",12,[[["u32"],["stackslotkind"]],["stackslotdata"]]],[11,"alignment","","Get the alignment in bytes of this stack slot given the…",12,[[["u32"],["self"]],["u32"]]]],"p":[[4,"CompilationStrategy"],[4,"SetupError"],[3,"CodeMemory"],[3,"Compiler"],[3,"CompiledModule"],[3,"Context"],[3,"FunctionBuilder"],[4,"ExternalName"],[13,"User"],[13,"TestCase"],[3,"Function"],[8,"InstBuilder"],[3,"StackSlotData"],[4,"StackSlotKind"],[8,"TrapSink"],[8,"Resolver"],[3,"NullResolver"],[3,"FunctionBuilderContext"],[3,"MemFlags"],[3,"NullTrapSink"],[3,"NullStackmapSink"],[3,"TrampolineRelocSink"]]};
searchIndex["wasmtime_obj"] = {"doc":"Object-file writing library using the wasmtime environment.","i":[[5,"emit_module","wasmtime_obj","Emits a module that has been emitted with the…",null,[[["artifact"],["compilation"],["targetfrontendconfig"],["module"],["relocations"]],["result"]]],[17,"VERSION","","Version number of this crate.",null,null]],"p":[]};
searchIndex["wasmtime_profiling"] = {"doc":"","i":[[3,"NullProfilerAgent","wasmtime_profiling","Default agent for unsupported profiling build.",null,null],[4,"ProfilingStrategy","","Select which profiling technique to use",null,null],[13,"NullProfiler","","No profiler support",0,null],[13,"JitDumpProfiler","","Collect profile for jitdump file format",0,null],[6,"JitDumpAgent","","",null,null],[8,"ProfilingAgent","","Common interface for profiling tools.",null,null],[10,"module_load","","Notify the profiler of a new module loaded into memory",1,[[["str"],["usize"],["option"],["self"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"module_load","","",2,[[["str"],["usize"],["option"],["self"]]]],[11,"clone","","",0,[[["self"]],["profilingstrategy"]]],[11,"clone","","",2,[[["self"]],["nullprofileragent"]]],[11,"default","","",2,[[],["nullprofileragent"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]]],"p":[[4,"ProfilingStrategy"],[8,"ProfilingAgent"],[3,"NullProfilerAgent"]]};
searchIndex["wasmtime_runtime"] = {"doc":"Runtime library support for Wasmtime.","i":[[3,"Imports","wasmtime_runtime","Resolved import pointers.",null,null],[12,"dependencies","","The set of instances that the imports depend on.",0,null],[12,"functions","","Resolved addresses for imported functions.",0,null],[12,"tables","","Resolved addresses for imported tables.",0,null],[12,"memories","","Resolved addresses for imported memories.",0,null],[12,"globals","","Resolved addresses for imported globals.",0,null],[3,"InstanceHandle","","A handle holding an `Instance` of a WebAssembly module.",null,null],[3,"LinkError","","An link error while instantiating a module.",null,null],[12,"0","","",1,null],[3,"GdbJitImageRegistration","","Registeration for JIT image",null,null],[3,"Mmap","","A simple struct consisting of a page-aligned pointer to…",null,null],[3,"SignatureRegistry","","WebAssembly requires that the caller and callee signatures…",null,null],[3,"Table","","A table instance.",null,null],[3,"TrapDescription","","Description of a trap.",null,null],[12,"source_loc","","Location of the trap in source binary module.",2,null],[12,"trap_code","","Code of the trap.",2,null],[3,"TrapRegistration","","RAII structure returned from `TrapRegistry::register_trap`…",null,null],[3,"TrapRegistry","","The registry maintains descriptions of traps in currently…",null,null],[3,"VMCallerCheckedAnyfunc","","The VM caller-checked \"anyfunc\" record, for caller-side…",null,null],[12,"func_ptr","","Function body.",3,null],[12,"type_index","","Function signature id.",3,null],[12,"vmctx","","Function `VMContext`.",3,null],[3,"VMContext","","The VM \"context\", which is pointed to by the `vmctx` arg…",null,null],[3,"VMFunctionBody","","A placeholder byte-sized type which is just used to…",null,null],[3,"VMFunctionImport","","An imported function.",null,null],[12,"body","","A pointer to the imported function body.",4,null],[12,"vmctx","","A pointer to the `VMContext` that owns the function.",4,null],[3,"VMGlobalDefinition","","The storage for a WebAssembly global defined within the…",null,null],[3,"VMGlobalImport","","The fields compiled code needs to access to utilize a…",null,null],[12,"from","","A pointer to the imported global variable description.",5,null],[3,"VMInvokeArgument","","The storage for a WebAssembly invocation argument",null,null],[3,"VMMemoryDefinition","","The fields compiled code needs to access to utilize a…",null,null],[12,"base","","The start address.",6,null],[12,"current_length","","The current logical size of this linear memory in bytes.",6,null],[3,"VMMemoryImport","","The fields compiled code needs to access to utilize a…",null,null],[12,"from","","A pointer to the imported memory description.",7,null],[12,"vmctx","","A pointer to the `VMContext` that owns the memory…",7,null],[3,"VMSharedSignatureIndex","","An index into the shared signature registry, usable for…",null,null],[3,"VMTableDefinition","","The fields compiled code needs to access to utilize a…",null,null],[12,"base","","Pointer to the table data.",8,null],[12,"current_elements","","The current number of elements in the table.",8,null],[3,"VMTableImport","","The fields compiled code needs to access to utilize a…",null,null],[12,"from","","A pointer to the imported table description.",9,null],[12,"vmctx","","A pointer to the `VMContext` that owns the table…",9,null],[4,"Export","","The value of an export passed from one instance to another.",null,null],[13,"Function","","A function export value.",10,null],[12,"address","wasmtime_runtime::Export","The address of the native-code function.",11,null],[12,"vmctx","","Pointer to the containing `VMContext`.",11,null],[12,"signature","","The function signature declaration, used for compatibilty…",11,null],[13,"Table","wasmtime_runtime","A table export value.",10,null],[12,"definition","wasmtime_runtime::Export","The address of the table descriptor.",12,null],[12,"vmctx","","Pointer to the containing `VMContext`.",12,null],[12,"table","","The table declaration, used for compatibilty checking.",12,null],[13,"Memory","wasmtime_runtime","A memory export value.",10,null],[12,"definition","wasmtime_runtime::Export","The address of the memory descriptor.",13,null],[12,"vmctx","","Pointer to the containing `VMContext`.",13,null],[12,"memory","","The memory declaration, used for compatibilty checking.",13,null],[13,"Global","wasmtime_runtime","A global export value.",10,null],[12,"definition","wasmtime_runtime::Export","The address of the global storage.",14,null],[12,"vmctx","","Pointer to the containing `VMContext`.",14,null],[12,"global","","The global declaration, used for compatibilty checking.",14,null],[4,"InstantiationError","wasmtime_runtime","An error while instantiating a module.",null,null],[13,"Resource","","Insufficient resources available for execution.",15,null],[13,"Link","","A wasm link error occured.",15,null],[13,"Trap","","A trap ocurred during instantiation, after linking.",15,null],[13,"StartTrap","","A compilation error occured.",15,null],[4,"Trap","","Stores trace message with backtrace.",null,null],[13,"User","","A user-raised trap through `raise_user_trap`.",16,null],[13,"Wasm","","A wasm-originating trap from wasm code itself.",16,null],[12,"desc","wasmtime_runtime::Trap","What sort of trap happened, as well as where in the…",17,null],[12,"backtrace","","Native stack backtrace at the time the trap occurred",17,null],[5,"resume_panic","wasmtime_runtime","Carries a Rust panic across wasm code and resumes the…",null,[[["box",["any"]],["any"]]]],[5,"catch_traps","","Catches any wasm traps that happen within the execution of…",null,[[["f"]],[["result",["trap"]],["trap"]]]],[5,"raise_lib_trap","","Raises a trap from inside library code immediately.",null,[[["trap"]]]],[5,"raise_user_trap","","Raises a user-defined trap immediately.",null,[[["error"],["box",["error"]]]]],[5,"wasmtime_call_trampoline","","Call the wasm function pointed to by `callee`.",null,[[],[["result",["trap"]],["trap"]]]],[11,"function","","Construct a function export value.",10,[[["signature"]],["self"]]],[11,"table","","Construct a table export value.",10,[[["tableplan"]],["self"]]],[11,"memory","","Construct a memory export value.",10,[[["memoryplan"]],["self"]]],[11,"global","","Construct a global export value.",10,[[["global"]],["self"]]],[11,"new","","Construct a new `Imports` instance.",0,[[["primarymap",["funcindex","vmfunctionimport"]],["vmfunctionimport"],["funcindex"],["vmtableimport"],["hashset",["instancehandle"]],["primarymap",["tableindex","vmtableimport"]],["memoryindex"],["vmglobalimport"],["vmmemoryimport"],["primarymap",["globalindex","vmglobalimport"]],["globalindex"],["primarymap",["memoryindex","vmmemoryimport"]],["tableindex"],["instancehandle"]],["self"]]],[11,"none","","Construct a new `Imports` instance with no imports.",0,[[],["self"]]],[11,"set_signal_handler","","Set a custom signal handler",18,[[["self"],["h"]]]],[11,"new","","Create a new `InstanceHandle` pointing at a new `Instance`.",18,[[["module"],["option",["rc"]],["box",["any"]],["imports"],["vmsharedsignatureindex"],["rc",["gdbjitimageregistration"]],["boxedslice",["definedfuncindex"]],["arc",["module"]],["signatureindex"],["bool"],["boxedslice",["signatureindex","vmsharedsignatureindex"]],["definedfuncindex"],["any"],["trapregistration"]],[["instantiationerror"],["result",["instantiationerror"]]]]],[11,"from_vmctx","","Create a new `InstanceHandle` pointing at the instance…",18,[[],["self"]]],[11,"vmctx","","Return a reference to the vmctx used by compiled wasm code.",18,[[["self"]],["vmcontext"]]],[11,"vmctx_ptr","","Return a raw pointer to the vmctx used by compiled wasm…",18,[[["self"]]]],[11,"module","","Return a reference-counting pointer to a module.",18,[[["self"]],["arc"]]],[11,"module_ref","","Return a reference to a module.",18,[[["self"]],["module"]]],[11,"lookup","","Lookup an export with the given name.",18,[[["str"],["self"]],[["option",["export"]],["export"]]]],[11,"lookup_by_declaration","","Lookup an export with the given export declaration.",18,[[["self"],["export"]],["export"]]],[11,"exports","","Return an iterator over the exports of this instance.",18,[[["self"]],[["string"],["export"],["iter",["string","export"]]]]],[11,"host_state","","Return a reference to the custom state attached to this…",18,[[["self"]],["any"]]],[11,"memory_index","","Return the memory index for the given `VMMemoryDefinition`…",18,[[["vmmemorydefinition"],["self"]],["definedmemoryindex"]]],[11,"memory_grow","","Grow memory in this instance by the specified amount of…",18,[[["u32"],["self"],["definedmemoryindex"]],[["u32"],["option",["u32"]]]]],[11,"table_index","","Return the table index for the given `VMTableDefinition`…",18,[[["vmtabledefinition"],["self"]],["definedtableindex"]]],[11,"table_grow","","Grow table in this instance by the specified amount of…",18,[[["definedtableindex"],["u32"],["self"]],[["u32"],["option",["u32"]]]]],[11,"table_get","","Get table element reference.",18,[[["definedtableindex"],["u32"],["self"]],[["vmcallercheckedanyfunc"],["option",["vmcallercheckedanyfunc"]]]]],[11,"table_set","","Set table element reference.",18,[[["u32"],["vmcallercheckedanyfunc"],["definedtableindex"],["self"]],["result"]]],[11,"get_defined_table","","Get a table defined locally within this module.",18,[[["definedtableindex"],["self"]],["table"]]],[11,"register","","Registers JIT image using __jit_debug_register_code",19,[[["vec",["u8"]],["u8"]],["self"]]],[11,"file","","JIT image used in registration",19,[[["self"]]]],[11,"new","","Construct a new empty instance of `Mmap`.",20,[[],["self"]]],[11,"with_at_least","","Create a new `Mmap` pointing to at least `size` bytes of…",20,[[["usize"]],[["result",["string"]],["string"]]]],[11,"accessible_reserved","","Create a new `Mmap` pointing to `accessible_size` bytes of…",20,[[["usize"]],[["result",["string"]],["string"]]]],[11,"make_accessible","","Make the memory starting at `start` and extending for…",20,[[["self"],["usize"]],[["result",["string"]],["string"]]]],[11,"as_slice","","Return the allocated memory as a slice of u8.",20,[[["self"]]]],[11,"as_mut_slice","","Return the allocated memory as a mutable slice of u8.",20,[[["self"]]]],[11,"as_ptr","","Return the allocated memory as a pointer to u8.",20,[[["self"]]]],[11,"as_mut_ptr","","Return the allocated memory as a mutable pointer to u8.",20,[[["self"]]]],[11,"len","","Return the length of the allocated memory.",20,[[["self"]],["usize"]]],[11,"is_empty","","Return whether any memory has been allocated.",20,[[["self"]],["bool"]]],[11,"new","","Create a new `SignatureRegistry`.",21,[[],["self"]]],[11,"register","","Register a signature and return its unique index.",21,[[["signature"],["self"]],["vmsharedsignatureindex"]]],[11,"lookup","","Looks up a shared signature index within this registry.",21,[[["vmsharedsignatureindex"],["self"]],[["signature"],["option",["signature"]]]]],[11,"new","","Create a new table instance with specified minimum and…",22,[[["tableplan"]],["self"]]],[11,"size","","Returns the number of allocated elements.",22,[[["self"]],["u32"]]],[11,"grow","","Grow table by the specified amount of elements.",22,[[["u32"],["self"]],[["u32"],["option",["u32"]]]]],[11,"get","","Get reference to the specified element.",22,[[["u32"],["self"]],[["vmcallercheckedanyfunc"],["option",["vmcallercheckedanyfunc"]]]]],[11,"set","","Set reference to the specified element.",22,[[["u32"],["self"],["vmcallercheckedanyfunc"]],["result"]]],[11,"copy","","Copy `len` elements from `src_table[src_index..]` into…",22,[[["u32"],["self"],["sourceloc"]],[["result",["trap"]],["trap"]]]],[11,"vmtable","","Return a `VMTableDefinition` for exposing the table to…",22,[[["self"]],["vmtabledefinition"]]],[11,"register_traps","","Registers a list of traps.",23,[[["self"]],["trapregistration"]]],[11,"get_trap","","Gets a trap description at given address.",24,[[["self"],["usize"]],[["option",["trapdescription"]],["trapdescription"]]]],[11,"wasm","","Construct a new Wasm trap with the given source location…",16,[[["trapcode"],["sourceloc"]],["self"]]],[11,"new","","Construct a `VMGlobalDefinition`.",25,[[],["self"]]],[11,"as_i32","","Return a reference to the value as an i32.",25,[[["self"]],["i32"]]],[11,"as_i32_mut","","Return a mutable reference to the value as an i32.",25,[[["self"]],["i32"]]],[11,"as_u32","","Return a reference to the value as a u32.",25,[[["self"]],["u32"]]],[11,"as_u32_mut","","Return a mutable reference to the value as an u32.",25,[[["self"]],["u32"]]],[11,"as_i64","","Return a reference to the value as an i64.",25,[[["self"]],["i64"]]],[11,"as_i64_mut","","Return a mutable reference to the value as an i64.",25,[[["self"]],["i64"]]],[11,"as_u64","","Return a reference to the value as an u64.",25,[[["self"]],["u64"]]],[11,"as_u64_mut","","Return a mutable reference to the value as an u64.",25,[[["self"]],["u64"]]],[11,"as_f32","","Return a reference to the value as an f32.",25,[[["self"]],["f32"]]],[11,"as_f32_mut","","Return a mutable reference to the value as an f32.",25,[[["self"]],["f32"]]],[11,"as_f32_bits","","Return a reference to the value as f32 bits.",25,[[["self"]],["u32"]]],[11,"as_f32_bits_mut","","Return a mutable reference to the value as f32 bits.",25,[[["self"]],["u32"]]],[11,"as_f64","","Return a reference to the value as an f64.",25,[[["self"]],["f64"]]],[11,"as_f64_mut","","Return a mutable reference to the value as an f64.",25,[[["self"]],["f64"]]],[11,"as_f64_bits","","Return a reference to the value as f64 bits.",25,[[["self"]],["u64"]]],[11,"as_f64_bits_mut","","Return a mutable reference to the value as f64 bits.",25,[[["self"]],["u64"]]],[11,"as_u128","","Return a reference to the value as an u128.",25,[[["self"]],["u128"]]],[11,"as_u128_mut","","Return a mutable reference to the value as an u128.",25,[[["self"]],["u128"]]],[11,"as_u128_bits","","Return a reference to the value as u128 bits.",25,[[["self"]]]],[11,"as_u128_bits_mut","","Return a mutable reference to the value as u128 bits.",25,[[["self"]]]],[11,"new","","Create a new `VMSharedSignatureIndex`.",26,[[["u32"]],["self"]]],[11,"new","","Create a new invocation argument filled with zeroes",27,[[],["self"]]],[11,"host_state","","Return a reference to the host state associated with this…",28,[[["self"]],["any"]]],[0,"libcalls","","Runtime library calls.",null,null],[5,"wasmtime_f32_ceil","wasmtime_runtime::libcalls","Implementation of f32.ceil",null,[[["f32"]],["f32"]]],[5,"wasmtime_f32_floor","","Implementation of f32.floor",null,[[["f32"]],["f32"]]],[5,"wasmtime_f32_trunc","","Implementation of f32.trunc",null,[[["f32"]],["f32"]]],[5,"wasmtime_f32_nearest","","Implementation of f32.nearest",null,[[["f32"]],["f32"]]],[5,"wasmtime_f64_ceil","","Implementation of f64.ceil",null,[[["f64"]],["f64"]]],[5,"wasmtime_f64_floor","","Implementation of f64.floor",null,[[["f64"]],["f64"]]],[5,"wasmtime_f64_trunc","","Implementation of f64.trunc",null,[[["f64"]],["f64"]]],[5,"wasmtime_f64_nearest","","Implementation of f64.nearest",null,[[["f64"]],["f64"]]],[5,"wasmtime_memory32_grow","","Implementation of memory.grow for locally-defined 32-bit…",null,[[["u32"]],["u32"]]],[5,"wasmtime_imported_memory32_grow","","Implementation of memory.grow for imported 32-bit memories.",null,[[["u32"]],["u32"]]],[5,"wasmtime_memory32_size","","Implementation of memory.size for locally-defined 32-bit…",null,[[["u32"]],["u32"]]],[5,"wasmtime_imported_memory32_size","","Implementation of memory.size for imported 32-bit memories.",null,[[["u32"]],["u32"]]],[5,"wasmtime_table_copy","","Implementation of `table.copy`.",null,[[["u32"]]]],[5,"wasmtime_table_init","","Implementation of `table.init`.",null,[[["u32"]]]],[5,"wasmtime_elem_drop","","Implementation of `elem.drop`.",null,[[["u32"]]]],[5,"wasmtime_defined_memory_copy","","Implementation of `memory.copy` for locally defined…",null,[[["u32"]]]],[5,"wasmtime_imported_memory_copy","","Implementation of `memory.copy` for imported memories.",null,[[["u32"]]]],[5,"wasmtime_memory_fill","","Implementation of `memory.fill` for locally defined…",null,[[["u32"]]]],[5,"wasmtime_imported_memory_fill","","Implementation of `memory.fill` for imported memories.",null,[[["u32"]]]],[5,"wasmtime_memory_init","","Implementation of `memory.init`.",null,[[["u32"]]]],[5,"wasmtime_data_drop","","Implementation of `data.drop`.",null,[[["u32"]]]],[17,"VERSION","wasmtime_runtime","Version number of this crate.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"equivalent","","",18,[[["k"],["self"]],["bool"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"equivalent","","",26,[[["k"],["self"]],["bool"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"drop","","",18,[[["self"]]]],[11,"drop","","",19,[[["self"]]]],[11,"drop","","",20,[[["self"]]]],[11,"drop","","",24,[[["self"]]]],[11,"from","","",15,[[["linkerror"]],["self"]]],[11,"clone","","",10,[[["self"]],["export"]]],[11,"clone","","",0,[[["self"]],["imports"]]],[11,"clone","","",18,[[["self"]],["self"]]],[11,"clone","","",24,[[["self"]],["trapregistration"]]],[11,"clone","","",2,[[["self"]],["trapdescription"]]],[11,"clone","","",4,[[["self"]],["vmfunctionimport"]]],[11,"clone","","",9,[[["self"]],["vmtableimport"]]],[11,"clone","","",7,[[["self"]],["vmmemoryimport"]]],[11,"clone","","",5,[[["self"]],["vmglobalimport"]]],[11,"clone","","",6,[[["self"]],["vmmemorydefinition"]]],[11,"clone","","",8,[[["self"]],["vmtabledefinition"]]],[11,"clone","","",25,[[["self"]],["vmglobaldefinition"]]],[11,"clone","","",26,[[["self"]],["vmsharedsignatureindex"]]],[11,"clone","","",3,[[["self"]],["vmcallercheckedanyfunc"]]],[11,"clone","","",27,[[["self"]],["vminvokeargument"]]],[11,"default","","",23,[[],["trapregistry"]]],[11,"default","","",26,[[],["self"]]],[11,"default","","",3,[[],["self"]]],[11,"eq","","",18,[[["self"],["instancehandle"]],["bool"]]],[11,"ne","","",18,[[["self"],["instancehandle"]],["bool"]]],[11,"eq","","",2,[[["self"],["trapdescription"]],["bool"]]],[11,"ne","","",2,[[["self"],["trapdescription"]],["bool"]]],[11,"eq","","",26,[[["vmsharedsignatureindex"],["self"]],["bool"]]],[11,"ne","","",26,[[["vmsharedsignatureindex"],["self"]],["bool"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"hash","","",18,[[["self"],["__h"]]]],[11,"hash","","",26,[[["self"],["__h"]]]],[11,"source","","",15,[[["self"]],[["option",["error"]],["error"]]]]],"p":[[3,"Imports"],[3,"LinkError"],[3,"TrapDescription"],[3,"VMCallerCheckedAnyfunc"],[3,"VMFunctionImport"],[3,"VMGlobalImport"],[3,"VMMemoryDefinition"],[3,"VMMemoryImport"],[3,"VMTableDefinition"],[3,"VMTableImport"],[4,"Export"],[13,"Function"],[13,"Table"],[13,"Memory"],[13,"Global"],[4,"InstantiationError"],[4,"Trap"],[13,"Wasm"],[3,"InstanceHandle"],[3,"GdbJitImageRegistration"],[3,"Mmap"],[3,"SignatureRegistry"],[3,"Table"],[3,"TrapRegistry"],[3,"TrapRegistration"],[3,"VMGlobalDefinition"],[3,"VMSharedSignatureIndex"],[3,"VMInvokeArgument"],[3,"VMContext"],[3,"VMFunctionBody"]]};
searchIndex["wasmtime_rust"] = {"doc":"","i":[[23,"wasmtime","wasmtime_rust","",null,null]],"p":[]};
searchIndex["wasmtime_rust_macro"] = {"doc":"","i":[[23,"wasmtime","wasmtime_rust_macro","",null,null]],"p":[]};
searchIndex["wasmtime_wasi"] = {"doc":"","i":[[3,"WasiCtx","wasmtime_wasi","",null,null],[3,"WasiCtxBuilder","","A builder allowing customizable construction of `WasiCtx`…",null,null],[3,"Wasi","","An instantiated instance of the wasi exports.",null,null],[12,"args_get","","",0,null],[12,"args_sizes_get","","",0,null],[12,"environ_get","","",0,null],[12,"environ_sizes_get","","",0,null],[12,"clock_res_get","","",0,null],[12,"clock_time_get","","",0,null],[12,"fd_advise","","",0,null],[12,"fd_allocate","","",0,null],[12,"fd_close","","",0,null],[12,"fd_datasync","","",0,null],[12,"fd_fdstat_get","","",0,null],[12,"fd_fdstat_set_flags","","",0,null],[12,"fd_fdstat_set_rights","","",0,null],[12,"fd_filestat_get","","",0,null],[12,"fd_filestat_set_size","","",0,null],[12,"fd_filestat_set_times","","",0,null],[12,"fd_pread","","",0,null],[12,"fd_prestat_get","","",0,null],[12,"fd_prestat_dir_name","","",0,null],[12,"fd_pwrite","","",0,null],[12,"fd_read","","",0,null],[12,"fd_readdir","","",0,null],[12,"fd_renumber","","",0,null],[12,"fd_seek","","",0,null],[12,"fd_sync","","",0,null],[12,"fd_tell","","",0,null],[12,"fd_write","","",0,null],[12,"path_create_directory","","",0,null],[12,"path_filestat_get","","",0,null],[12,"path_filestat_set_times","","",0,null],[12,"path_link","","",0,null],[12,"path_open","","",0,null],[12,"path_readlink","","",0,null],[12,"path_remove_directory","","",0,null],[12,"path_rename","","",0,null],[12,"path_symlink","","",0,null],[12,"path_unlink_file","","",0,null],[12,"poll_oneoff","","",0,null],[12,"proc_exit","","",0,null],[12,"proc_raise","","",0,null],[12,"sched_yield","","",0,null],[12,"random_get","","",0,null],[12,"sock_recv","","",0,null],[12,"sock_send","","",0,null],[12,"sock_shutdown","","",0,null],[5,"is_wasi_module","","",null,[[["str"]],["bool"]]],[0,"old","","",null,null],[0,"snapshot_0","wasmtime_wasi::old","",null,null],[3,"Wasi","wasmtime_wasi::old::snapshot_0","An instantiated instance of the wasi exports.",null,null],[12,"args_get","","",1,null],[12,"args_sizes_get","","",1,null],[12,"environ_get","","",1,null],[12,"environ_sizes_get","","",1,null],[12,"clock_res_get","","",1,null],[12,"clock_time_get","","",1,null],[12,"fd_advise","","",1,null],[12,"fd_allocate","","",1,null],[12,"fd_close","","",1,null],[12,"fd_datasync","","",1,null],[12,"fd_fdstat_get","","",1,null],[12,"fd_fdstat_set_flags","","",1,null],[12,"fd_fdstat_set_rights","","",1,null],[12,"fd_filestat_get","","",1,null],[12,"fd_filestat_set_size","","",1,null],[12,"fd_filestat_set_times","","",1,null],[12,"fd_pread","","",1,null],[12,"fd_prestat_get","","",1,null],[12,"fd_prestat_dir_name","","",1,null],[12,"fd_pwrite","","",1,null],[12,"fd_read","","",1,null],[12,"fd_readdir","","",1,null],[12,"fd_renumber","","",1,null],[12,"fd_seek","","",1,null],[12,"fd_sync","","",1,null],[12,"fd_tell","","",1,null],[12,"fd_write","","",1,null],[12,"path_create_directory","","",1,null],[12,"path_filestat_get","","",1,null],[12,"path_filestat_set_times","","",1,null],[12,"path_link","","",1,null],[12,"path_open","","",1,null],[12,"path_readlink","","",1,null],[12,"path_remove_directory","","",1,null],[12,"path_rename","","",1,null],[12,"path_symlink","","",1,null],[12,"path_unlink_file","","",1,null],[12,"poll_oneoff","","",1,null],[12,"proc_exit","","",1,null],[12,"proc_raise","","",1,null],[12,"sched_yield","","",1,null],[12,"random_get","","",1,null],[12,"sock_recv","","",1,null],[12,"sock_send","","",1,null],[12,"sock_shutdown","","",1,null],[5,"is_wasi_module","","",null,[[["str"]],["bool"]]],[11,"new","","Creates a new [`Wasi`] instance.",1,[[["store"],["wasictx"]],["wasi"]]],[11,"get_export","","Looks up a field called `name` in this structure,…",1,[[["str"],["self"]],[["func"],["option",["func"]]]]],[11,"new","wasmtime_wasi","Creates a new [`Wasi`] instance.",0,[[["store"],["wasictx"]],["wasi"]]],[11,"get_export","","Looks up a field called `name` in this structure,…",0,[[["str"],["self"]],[["func"],["option",["func"]]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","wasmtime_wasi::old::snapshot_0","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","wasmtime_wasi","",2,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"new","","Make a new `WasiCtx` with some default settings.",2,[[],[["result",["wasictx","wasictxbuildererror"]],["wasictx"],["wasictxbuildererror"]]]],[11,"new","","Builder for a new `WasiCtx`.",3,[[],["wasictxbuilder"]]],[11,"args","","Add arguments to the command-line arguments list.",3,[[["self"]],["wasictxbuilder"]]],[11,"arg","","Add an argument to the command-line arguments list.",3,[[["self"],["s"]],["wasictxbuilder"]]],[11,"inherit_args","","Inherit the command-line arguments from the host process.",3,[[["self"]],["wasictxbuilder"]]],[11,"inherit_stdin","","Inherit stdin from the host process.",3,[[["self"]],["wasictxbuilder"]]],[11,"inherit_stdout","","Inherit stdout from the host process.",3,[[["self"]],["wasictxbuilder"]]],[11,"inherit_stderr","","Inherit stdout from the host process.",3,[[["self"]],["wasictxbuilder"]]],[11,"inherit_stdio","","Inherit the stdin, stdout, and stderr streams from the…",3,[[["self"]],["wasictxbuilder"]]],[11,"inherit_env","","Inherit the environment variables from the host process.",3,[[["self"]],["wasictxbuilder"]]],[11,"env","","Add an entry to the environment.",3,[[["self"],["s"]],["wasictxbuilder"]]],[11,"envs","","Add entries to the environment.",3,[[["self"]],["wasictxbuilder"]]],[11,"stdin","","Provide a File to use as stdin",3,[[["file"],["self"]],["wasictxbuilder"]]],[11,"stdout","","Provide a File to use as stdout",3,[[["file"],["self"]],["wasictxbuilder"]]],[11,"stderr","","Provide a File to use as stderr",3,[[["file"],["self"]],["wasictxbuilder"]]],[11,"preopened_dir","","Add a preopened directory.",3,[[["file"],["self"],["p"]],["wasictxbuilder"]]],[11,"preopened_virt","","Add a preopened virtual directory.",3,[[["self"],["virtualdirentry"],["p"]],["wasictxbuilder"]]],[11,"build","","Build a `WasiCtx`, consuming this `WasiCtxBuilder`.",3,[[["self"]],[["result",["wasictx","wasictxbuildererror"]],["wasictx"],["wasictxbuildererror"]]]]],"p":[[3,"Wasi"],[3,"Wasi"],[3,"WasiCtx"],[3,"WasiCtxBuilder"]]};
searchIndex["wasmtime_wast"] = {"doc":"Implementation of the WAST text format for wasmtime.","i":[[3,"WastContext","wasmtime_wast","The wast test script language allows modules to be defined…",null,null],[5,"instantiate_spectest","","Return an instance implementing the \"spectest\" interface…",null,[[["store"]],[["hashmap",["str","extern"]],["str"],["extern"]]]],[11,"new","","Construct a new instance of `WastContext`.",0,[[["store"]],["self"]]],[11,"register_spectest","","Register \"spectest\" which is used by the spec testsuite.",0,[[["self"]],["result"]]],[11,"run_buffer","","Run a wast script from a byte buffer.",0,[[["str"],["self"]],["result"]]],[11,"run_file","","Run a wast script from a file.",0,[[["self"],["path"]],["result"]]],[17,"VERSION","","Version number of this crate.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]]],"p":[[3,"WastContext"]]};
searchIndex["wig"] = {"doc":"","i":[[14,"witx_host_types","wig","",null,null],[14,"witx_wasi_types","","",null,null],[14,"witx_wasi32_types","","",null,null],[14,"define_wasi_struct","","A single-use macro in the `wasmtime-wasi` crate.",null,null],[14,"define_hostcalls","","",null,null]],"p":[]};
searchIndex["wiggle"] = {"doc":"","i":[[14,"from_witx","wiggle","",null,null]],"p":[]};
searchIndex["wiggle_generate"] = {"doc":"","i":[[3,"Names","wiggle_generate","",null,null],[5,"define_func","","",null,[[["interfacefunc"],["names"]],["tokenstream"]]],[5,"define_module_trait","","",null,[[["names"],["module"]],["tokenstream"]]],[5,"define_datatype","","",null,[[["names"],["namedtype"]],["tokenstream"]]],[5,"generate","","",null,[[["document"],["config"]],["tokenstream"]]],[0,"config","","",null,null],[3,"Config","wiggle_generate::config","",null,null],[12,"witx","","",0,null],[12,"ctx","","",0,null],[3,"WitxConf","","",null,null],[12,"paths","","",1,null],[3,"CtxConf","","",null,null],[12,"name","","",2,null],[4,"ConfigField","","",null,null],[13,"Witx","","",3,null],[13,"Ctx","","",3,null],[11,"parse_pair","","",3,[[["str"],["parsestream"],["span"]],["result"]]],[11,"build","","",0,[[["span"]],["result"]]],[11,"make_paths_relative_to","","",1,[[["self"],["asref",["path"]],["path"]]]],[11,"new","wiggle_generate","",4,[[["config"]],["names"]]],[11,"ctx_type","","",4,[[["self"]],["ident"]]],[11,"type_","","",4,[[["self"],["id"]],["tokenstream"]]],[11,"builtin_type","","",4,[[["builtintype"],["self"],["tokenstream"]],["tokenstream"]]],[11,"atom_type","","",4,[[["atomtype"],["self"]],["tokenstream"]]],[11,"type_ref","","",4,[[["typeref"],["self"],["tokenstream"]],["tokenstream"]]],[11,"enum_variant","","",4,[[["self"],["id"]],["ident"]]],[11,"flag_member","","",4,[[["self"],["id"]],["ident"]]],[11,"int_member","","",4,[[["self"],["id"]],["ident"]]],[11,"struct_member","","",4,[[["self"],["id"]],["ident"]]],[11,"module","","",4,[[["self"],["id"]],["ident"]]],[11,"trait_name","","",4,[[["self"],["id"]],["ident"]]],[11,"func","","",4,[[["self"],["id"]],["ident"]]],[11,"func_param","","",4,[[["self"],["id"]],["ident"]]],[11,"func_core_arg","","",4,[[["self"],["coreparamtype"]],["ident"]]],[11,"func_ptr_binding","","For when you need a {name}_ptr binding for passing a value…",4,[[["self"],["id"]],["ident"]]],[11,"func_len_binding","","For when you need a {name}_len binding for passing an array:",4,[[["self"],["id"]],["ident"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"debug","","",4,[[["formatter"]],[["error"],["result",["error"]]]]],[11,"from","wiggle_generate::config","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"debug","","",0,[[["formatter"]],[["error"],["result",["error"]]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"debug","","",1,[[["formatter"]],[["error"],["result",["error"]]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"debug","","",2,[[["formatter"]],[["error"],["result",["error"]]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"debug","","",3,[[["formatter"]],[["error"],["result",["error"]]]]],[11,"clone","","",0,[[["self"]],["config"]]],[11,"clone","","",3,[[["self"]],["configfield"]]],[11,"clone","","",1,[[["self"]],["witxconf"]]],[11,"clone","","",2,[[["self"]],["ctxconf"]]],[11,"clone","wiggle_generate","",4,[[["self"]],["names"]]],[11,"fmt","wiggle_generate::config","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","wiggle_generate","",4,[[["formatter"],["self"]],["result"]]],[11,"parse","wiggle_generate::config","",3,[[["parsestream"]],["result"]]],[11,"parse","","",0,[[["parsestream"]],["result"]]],[11,"parse","","",1,[[["parsestream"]],["result"]]],[11,"parse","","",2,[[["parsestream"]],["result"]]]],"p":[[3,"Config"],[3,"WitxConf"],[3,"CtxConf"],[4,"ConfigField"],[3,"Names"]]};
searchIndex["wiggle_runtime"] = {"doc":"","i":[[3,"GuestBorrows","wiggle_runtime","",null,null],[3,"Region","","Represents a contiguous region in memory.",null,null],[12,"start","","",0,null],[12,"len","","",0,null],[3,"GuestPtr","","A guest pointer into host memory.",null,null],[4,"GuestError","","",null,null],[13,"InvalidFlagValue","","",1,null],[13,"InvalidEnumValue","","",1,null],[13,"PtrOverflow","","",1,null],[13,"PtrOutOfBounds","","",1,null],[13,"PtrNotAligned","","",1,null],[13,"PtrBorrowed","","",1,null],[13,"InFunc","","",1,null],[12,"funcname","wiggle_runtime::GuestError","",2,null],[12,"location","","",2,null],[12,"err","","",2,null],[13,"InDataField","wiggle_runtime","",1,null],[12,"typename","wiggle_runtime::GuestError","",3,null],[12,"field","","",3,null],[12,"err","","",3,null],[13,"InvalidUtf8","wiggle_runtime","",1,null],[13,"TryFromIntError","","",1,null],[11,"new","","",4,[[],["self"]]],[11,"borrow_pointee","","Borrow the region of memory pointed to by a `GuestPtr`.…",4,[[["self"],["guestptr"]],[["guesterror"],["result",["guesterror"]]]]],[11,"borrow_slice","","Borrow the slice of memory pointed to by a…",4,[[["self"],["guestptr"]],[["guesterror"],["result",["guesterror"]]]]],[11,"borrow_str","","Borrow the slice of memory pointed to by a…",4,[[["guestptr"],["self"]],[["guesterror"],["result",["guesterror"]]]]],[11,"new","","",0,[[["u32"]],["self"]]],[11,"overlaps","","Checks if this `Region` overlaps with `rhs` `Region`.",0,[[["self"],["region"]],["bool"]]],[11,"extend","","",0,[[["u32"],["self"]],["self"]]],[8,"GuestErrorType","","",null,null],[16,"Context","","",5,null],[10,"success","","",5,[[],["self"]]],[10,"from_error","","",5,[[["guesterror"]],["self"]]],[8,"GuestType","","A trait for types that are intended to be pointees in…",null,null],[10,"guest_size","","Returns the size, in bytes, of this type in the guest…",6,[[],["u32"]]],[10,"guest_align","","Returns the required alignment of this type, in bytes, for…",6,[[],["usize"]]],[10,"read","","Reads this value from the provided `ptr`.",6,[[["guestptr"]],[["guesterror"],["result",["guesterror"]]]]],[10,"write","","Writes a value to `ptr` after verifying that `ptr` is…",6,[[["guestptr"]],[["guesterror"],["result",["guesterror"]]]]],[8,"GuestTypeTransparent","","A trait for `GuestType`s that have the same representation…",null,null],[10,"validate","","Checks that the memory at `ptr` is a valid representation…",7,[[],[["guesterror"],["result",["guesterror"]]]]],[8,"GuestMemory","","A trait which abstracts how to get at the region of host…",null,null],[10,"base","","Returns the base allocation of this guest memory, located…",8,[[["self"]]]],[11,"validate_size_align","","Validates a guest-relative pointer given various…",8,[[["u32"],["usize"],["self"]],[["guesterror"],["result",["guesterror"]]]]],[11,"ptr","","Convenience method for creating a `GuestPtr` at a…",8,[[["self"]],[["sized"],["guestptr"]]]],[8,"Pointee","","Types that can be pointed to by `GuestPtr<T>`.",null,null],[11,"new","","Creates a new `GuestPtr` from the given `mem` and…",9,[[["guestmemory"]],["guestptr"]]],[11,"offset","","Returns the offset of this pointer in guest memory.",9,[[["self"]]]],[11,"mem","","Returns the guest memory that this pointer is coming from.",9,[[["self"]],["guestmemory"]]],[11,"cast","","Casts this `GuestPtr` type to a different type.",9,[[["self"]],["guestptr"]]],[11,"read","","Safely read a value from this pointer.",9,[[["self"]],[["guesterror"],["result",["guesterror"]]]]],[11,"write","","Safely write a value to this pointer.",9,[[["self"],["t"]],[["guesterror"],["result",["guesterror"]]]]],[11,"add","","Performs pointer arithmetic on this pointer, moving the…",9,[[["u32"],["self"]],[["result",["guestptr","guesterror"]],["guestptr"],["guesterror"]]]],[11,"as_array","","Returns a `GuestPtr` for an array of `T`s using this…",9,[[["u32"],["self"]],["guestptr"]]],[11,"offset_base","","For slices, specifically returns the relative pointer to…",9,[[["self"]],["u32"]]],[11,"len","","For slices, returns the length of the slice, in units.",9,[[["self"]],["u32"]]],[11,"iter","","Returns an iterator over interior pointers.",9,[[["self"]]]],[11,"as_raw","","Attempts to read a raw `*mut [T]` pointer from this…",9,[[["guestborrows"],["self"]],[["guesterror"],["result",["guesterror"]]]]],[11,"as_ptr","","Returns a `GuestPtr` pointing to the base of the array for…",9,[[["self"]],["guestptr"]]],[11,"offset_base","","For strings, returns the relative pointer to the base of…",9,[[["self"]],["u32"]]],[11,"len","","Returns the length, in bytes, of th estring.",9,[[["self"]],["u32"]]],[11,"as_bytes","","Returns a raw pointer for the underlying slice of bytes…",9,[[["self"]],["guestptr"]]],[11,"as_raw","","Attempts to read a raw `*mut str` pointer from this…",9,[[["guestborrows"],["self"]],[["guesterror"],["result",["guesterror"]]]]],[11,"debug","","",4,[[["formatter"]],[["error"],["result",["error"]]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"debug","","",0,[[["formatter"]],[["error"],["result",["error"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"debug","","",9,[[["formatter"]],[["error"],["result",["error"]]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"debug","","",1,[[["formatter"]],[["error"],["result",["error"]]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"guest_size","","",9,[[],["u32"]]],[11,"guest_align","","",9,[[],["usize"]]],[11,"read","","",9,[[["guestptr"]],[["guesterror"],["result",["guesterror"]]]]],[11,"write","","",9,[[["guestptr"]],[["guesterror"],["result",["guesterror"]]]]],[11,"from","","",1,[[["utf8error"]],["self"]]],[11,"from","","",1,[[["tryfrominterror"]],["self"]]],[11,"clone","","",0,[[["self"]],["region"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"eq","","",1,[[["self"],["guesterror"]],["bool"]]],[11,"ne","","",1,[[["self"],["guesterror"]],["bool"]]],[11,"eq","","",0,[[["region"],["self"]],["bool"]]],[11,"ne","","",0,[[["region"],["self"]],["bool"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"source","","",1,[[["self"]],[["option",["error"]],["error"]]]]],"p":[[3,"Region"],[4,"GuestError"],[13,"InFunc"],[13,"InDataField"],[3,"GuestBorrows"],[8,"GuestErrorType"],[8,"GuestType"],[8,"GuestTypeTransparent"],[8,"GuestMemory"],[3,"GuestPtr"]]};
searchIndex["wiggle_test"] = {"doc":"","i":[[3,"MemAreas","wiggle_test","",null,null],[3,"HostMemory","","",null,null],[3,"MemArea","","",null,null],[12,"ptr","","",0,null],[12,"len","","",0,null],[3,"WasiCtx","","",null,null],[12,"guest_errors","","",1,null],[11,"new","","",2,[[],["self"]]],[11,"insert","","",2,[[["self"],["memarea"]]]],[11,"iter","","",2,[[["self"]]]],[11,"new","","",3,[[],["self"]]],[11,"mem_area_strat","","",3,[[["u32"]],[["boxedstrategy",["memarea"]],["memarea"]]]],[11,"invert","","Takes a sorted list or memareas, and gives a sorted list…",3,[[["memareas"]],["memareas"]]],[11,"byte_slice_strat","","",3,[[["u32"],["memareas"]],[["boxedstrategy",["memarea"]],["memarea"]]]],[11,"overlapping","","",0,[[["self"]],["bool"]]],[11,"non_overlapping_set","","",0,[[["m"]],["bool"]]],[11,"new","","",1,[[],["self"]]],[14,"impl_errno","","",null,null],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"debug","","",2,[[["formatter"]],[["error"],["result",["error"]]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"debug","","",3,[[["formatter"]],[["error"],["result",["error"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"debug","","",0,[[["formatter"]],[["error"],["result",["error"]]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"debug","","",1,[[["formatter"]],[["error"],["result",["error"]]]]],[11,"from","","",2,[[["r"]],["memareas"]]],[11,"into","","",2,[[],[["memarea"],["vec",["memarea"]]]]],[11,"clone","","",2,[[["self"]],["memareas"]]],[11,"clone","","",0,[[["self"]],["memarea"]]],[11,"cmp","","",0,[[["self"],["memarea"]],["ordering"]]],[11,"eq","","",0,[[["self"],["memarea"]],["bool"]]],[11,"ne","","",0,[[["self"],["memarea"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["memarea"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["self"],["memarea"]],["bool"]]],[11,"le","","",0,[[["self"],["memarea"]],["bool"]]],[11,"gt","","",0,[[["self"],["memarea"]],["bool"]]],[11,"ge","","",0,[[["self"],["memarea"]],["bool"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"base","","",3,[[["self"]]]]],"p":[[3,"MemArea"],[3,"WasiCtx"],[3,"MemAreas"],[3,"HostMemory"]]};
searchIndex["winx"] = {"doc":"","i":[],"p":[]};
searchIndex["witx"] = {"doc":"","i":[[3,"Document","witx","",null,null],[3,"EnumDatatype","","",null,null],[12,"repr","","",0,null],[12,"variants","","",0,null],[3,"EnumVariant","","",null,null],[12,"name","","",1,null],[12,"docs","","",1,null],[3,"FlagsDatatype","","",null,null],[12,"repr","","",2,null],[12,"flags","","",2,null],[3,"FlagsMember","","",null,null],[12,"name","","",3,null],[12,"docs","","",3,null],[3,"HandleDatatype","","",null,null],[12,"supertypes","","",4,null],[3,"Id","","",null,null],[3,"IntConst","","",null,null],[12,"name","","",5,null],[12,"value","","",5,null],[12,"docs","","",5,null],[3,"IntDatatype","","",null,null],[12,"repr","","",6,null],[12,"consts","","",6,null],[3,"InterfaceFunc","","",null,null],[12,"name","","",7,null],[12,"params","","",7,null],[12,"results","","",7,null],[12,"noreturn","","",7,null],[12,"docs","","",7,null],[3,"InterfaceFuncParam","","",null,null],[12,"name","","",8,null],[12,"tref","","",8,null],[12,"position","","",8,null],[12,"docs","","",8,null],[3,"Module","","",null,null],[12,"name","","",9,null],[12,"docs","","",9,null],[3,"ModuleImport","","",null,null],[12,"name","","",10,null],[12,"variant","","",10,null],[12,"docs","","",10,null],[3,"NamedType","","",null,null],[12,"name","","",11,null],[12,"tref","","",11,null],[12,"docs","","",11,null],[3,"StructDatatype","","",null,null],[12,"members","","",12,null],[3,"StructMember","","",null,null],[12,"name","","",13,null],[12,"tref","","",13,null],[12,"docs","","",13,null],[3,"UnionDatatype","","",null,null],[12,"tag","","",14,null],[12,"variants","","",14,null],[3,"UnionVariant","","",null,null],[12,"name","","",15,null],[12,"tref","","",15,null],[12,"docs","","",15,null],[3,"CoreFuncType","","Describes the WebAssembly signature of a function",null,null],[12,"args","","",16,null],[12,"ret","","",16,null],[3,"CoreParamType","","A parameter in the WebAssembly type of a function.",null,null],[12,"param","","The interface function parameter to which this",17,null],[12,"signifies","","The relationship of the WebAssembly parameter to the…",17,null],[3,"Filesystem","","",null,null],[3,"MockFs","","",null,null],[3,"SizeAlign","","",null,null],[12,"size","","",18,null],[12,"align","","",18,null],[3,"StructMemberLayout","","",null,null],[12,"member","","",19,null],[12,"offset","","",19,null],[3,"UnionLayout","","",null,null],[12,"tag_size","","",20,null],[12,"tag_align","","",20,null],[12,"contents_offset","","",20,null],[12,"contents_size","","",20,null],[12,"contents_align","","",20,null],[3,"Location","","Location in the source text",null,null],[12,"path","","",21,null],[12,"line","","",21,null],[12,"column","","",21,null],[4,"BuiltinType","","",null,null],[13,"String","","",22,null],[13,"Char8","","",22,null],[13,"USize","","",22,null],[13,"U8","","",22,null],[13,"U16","","",22,null],[13,"U32","","",22,null],[13,"U64","","",22,null],[13,"S8","","",22,null],[13,"S16","","",22,null],[13,"S32","","",22,null],[13,"S64","","",22,null],[13,"F32","","",22,null],[13,"F64","","",22,null],[4,"Definition","","",null,null],[13,"Typename","","",23,null],[13,"Module","","",23,null],[4,"Entry","","",null,null],[13,"Typename","","",24,null],[13,"Module","","",24,null],[4,"IntRepr","","",null,null],[13,"U8","","",25,null],[13,"U16","","",25,null],[13,"U32","","",25,null],[13,"U64","","",25,null],[4,"InterfaceFuncParamPosition","","",null,null],[13,"Param","","",26,null],[13,"Result","","",26,null],[4,"ModuleDefinition","","",null,null],[13,"Import","","",27,null],[13,"Func","","",27,null],[4,"ModuleEntry","","",null,null],[13,"Import","","",28,null],[13,"Func","","",28,null],[4,"ModuleImportVariant","","",null,null],[13,"Memory","","",29,null],[4,"Type","","",null,null],[13,"Enum","","",30,null],[13,"Int","","",30,null],[13,"Flags","","",30,null],[13,"Struct","","",30,null],[13,"Union","","",30,null],[13,"Handle","","",30,null],[13,"Array","","",30,null],[13,"Pointer","","",30,null],[13,"ConstPointer","","",30,null],[13,"Builtin","","",30,null],[4,"TypeRef","","",null,null],[13,"Name","","",31,null],[13,"Value","","",31,null],[4,"AtomType","","Enumerates the types permitted for function arguments in…",null,null],[13,"I32","","",32,null],[13,"I64","","",32,null],[13,"F32","","",32,null],[13,"F64","","",32,null],[4,"CoreParamSignifies","","Enumerates the sort of relationship an WebAssembly…",null,null],[13,"Value","","Core type represents the value using an AtomType",33,null],[13,"PointerTo","","Core type represents a pointer into linear memory",33,null],[13,"LengthOf","","Core type represents a length of a region of linear memory",33,null],[4,"TypePassedBy","","Enumerates the strategies which may be used to pass a…",null,null],[13,"Value","","Pass by value specifies the AtomType used to represent…",34,null],[13,"Pointer","","Pass by a pointer into linear memory",34,null],[13,"PointerLengthPair","","Pass by a pointer and length pair, into linear memory",34,null],[4,"DeclSyntax","","",null,null],[13,"Typename","","",35,null],[13,"Module","","",35,null],[4,"SExpr","","",null,null],[13,"Vec","","",36,null],[13,"Word","","",36,null],[13,"Ident","","",36,null],[13,"Quote","","",36,null],[13,"Annot","","Short for Annotation",36,null],[13,"Docs","","Doc comment",36,null],[4,"RepEquality","","",null,null],[13,"Eq","","",37,null],[13,"Superset","","",37,null],[13,"NotEq","","",37,null],[4,"ValidationError","","",null,null],[13,"UnknownName","","",38,null],[12,"name","witx::ValidationError","",39,null],[12,"location","","",39,null],[13,"NameAlreadyExists","witx","",38,null],[12,"name","witx::ValidationError","",40,null],[12,"at_location","","",40,null],[12,"previous_location","","",40,null],[13,"WrongKindName","witx","",38,null],[12,"name","witx::ValidationError","",41,null],[12,"location","","",41,null],[12,"expected","","",41,null],[12,"got","","",41,null],[13,"Recursive","witx","",38,null],[12,"name","witx::ValidationError","",42,null],[12,"location","","",42,null],[13,"InvalidRepr","witx","",38,null],[12,"repr","witx::ValidationError","",43,null],[12,"location","","",43,null],[13,"InvalidFirstResultType","witx","",38,null],[12,"location","witx::ValidationError","",44,null],[13,"AnonymousStructure","witx","",38,null],[12,"location","witx::ValidationError","",45,null],[13,"InvalidUnionField","witx","",38,null],[12,"name","witx::ValidationError","",46,null],[12,"reason","","",46,null],[12,"location","","",46,null],[4,"WitxError","witx","",null,null],[13,"Io","","",47,null],[13,"Parse","","",47,null],[13,"Validation","","",47,null],[5,"load","","Load a witx document from the filesystem",null,[[],[["witxerror"],["result",["document","witxerror"]],["document"]]]],[5,"parse","","Parse a witx document from a str. `(use ...)` directives…",null,[[["str"]],[["witxerror"],["result",["document","witxerror"]],["document"]]]],[11,"new","","",48,[[["str"],["asref",["str"]]],["self"]]],[11,"as_str","","",48,[[["self"]],["str"]]],[11,"typename","","",49,[[["id"],["self"]],[["option",["rc"]],["rc",["namedtype"]]]]],[11,"typenames","","",49,[[["self"]]]],[11,"module","","",49,[[["id"],["self"]],[["option",["rc"]],["rc",["module"]]]]],[11,"modules","","",49,[[["self"]]]],[11,"kind","","",24,[[["self"]],["str"]]],[11,"type_","","",31,[[["self"]],[["rc",["type"]],["type"]]]],[11,"type_","","",11,[[["self"]],[["rc",["type"]],["type"]]]],[11,"kind","","",30,[[["self"]],["str"]]],[11,"import","","",9,[[["id"],["self"]],[["rc",["moduleimport"]],["option",["rc"]]]]],[11,"imports","","",9,[[["self"]]]],[11,"func","","",9,[[["id"],["self"]],[["rc",["interfacefunc"]],["option",["rc"]]]]],[11,"funcs","","",9,[[["self"]]]],[11,"passed_by","","Determine the simplest strategy by which a type may be…",30,[[["self"]],["typepassedby"]]],[11,"repr","","Representation of the WebAssembly parameter. This is the…",17,[[["self"]],["atomtype"]]],[11,"repr","","Representation of the WebAssembly parameter.",33,[[["self"]],["atomtype"]]],[11,"pass_by_value","","Gives the WebAssembly type that corresponds to passing…",8,[[["self"]],[["coreparamtype"],["option",["coreparamtype"]]]]],[11,"pass_by_reference","","Gives the WebAssembly types that correspond to passing…",8,[[["self"]],[["vec",["coreparamtype"]],["coreparamtype"]]]],[11,"core_type","","Get the WebAssembly type signature for this interface…",7,[[["self"]],["corefunctype"]]],[11,"type_name","","",22,[[["self"]],["str"]]],[11,"type_name","","",31,[[["self"]],["string"]]],[11,"new","","",50,[[],["self"]]],[11,"member_layout","","",12,[[["self"]],[["vec",["structmemberlayout"]],["structmemberlayout"]]]],[11,"union_layout","","",14,[[["self"]],["unionlayout"]]],[0,"phases","","Paths to witx documents for various proposal phases",null,null],[5,"docs_path","witx::phases","",null,[[],["pathbuf"]]],[5,"snapshot","","",null,[[],[["result",["vec"]],["vec",["pathbuf"]]]]],[5,"ephemeral","","",null,[[],[["result",["vec"]],["vec",["pathbuf"]]]]],[0,"old","","",null,null],[5,"snapshot_0","witx::phases::old","",null,[[],[["result",["vec"]],["vec",["pathbuf"]]]]],[0,"polyfill","witx","Calculate required polyfill between interfaces",null,null],[3,"Polyfill","witx::polyfill","",null,null],[12,"modules","","",51,null],[3,"ModulePolyfill","","",null,null],[12,"new","","",52,null],[12,"old","","",52,null],[12,"funcs","","",52,null],[3,"FuncPolyfill","","",null,null],[12,"new","","",53,null],[12,"old","","",53,null],[12,"mapped_params","","",53,null],[12,"unknown_params","","",53,null],[12,"mapped_results","","",53,null],[12,"unknown_results","","",53,null],[3,"ParamPolyfill","","",null,null],[12,"new","","",54,null],[12,"old","","",54,null],[12,"type_polyfill","","",54,null],[4,"PolyfillError","","",null,null],[13,"ModuleNotPresent","","",55,null],[12,"name","witx::polyfill::PolyfillError","",56,null],[13,"FuncNotPresent","witx::polyfill","",55,null],[12,"module","witx::polyfill::PolyfillError","",57,null],[12,"name","","",57,null],[4,"ParamUnknown","witx::polyfill","",null,null],[13,"Old","","",58,null],[13,"New","","",58,null],[4,"TypePolyfill","","",null,null],[13,"NewToOld","","",59,null],[13,"OldToNew","","",59,null],[11,"new","","",51,[[["hashmap"],["document"]],[["result",["polyfillerror"]],["polyfillerror"]]]],[11,"type_polyfills","","",51,[[["self"]],[["typepolyfill"],["hashset",["typepolyfill"]]]]],[11,"new","","",52,[[["module"],["rc",["module"]]],[["result",["polyfillerror"]],["polyfillerror"]]]],[11,"type_polyfills","","",52,[[["self"]],[["typepolyfill"],["hashset",["typepolyfill"]]]]],[11,"new","","",53,[[["interfacefunc"],["rc",["interfacefunc"]]],["funcpolyfill"]]],[11,"full_compat","","",53,[[["self"]],["bool"]]],[11,"type_polyfills","","",53,[[["self"]],[["typepolyfill"],["hashset",["typepolyfill"]]]]],[11,"param","","",54,[[["interfacefuncparam"]],["self"]]],[11,"result","","",54,[[["interfacefuncparam"]],["self"]]],[11,"full_compat","","",54,[[["self"]],["bool"]]],[11,"repeq","","",54,[[["self"]],["repequality"]]],[11,"which","","",58,[[["self"]],["str"]]],[11,"param","","",58,[[["self"]],["interfacefuncparam"]]],[11,"repeq","","",59,[[["self"]],["repequality"]]],[11,"word","witx","",36,[[["str"]],["sexpr"]]],[11,"ident","","",36,[[["str"]],["sexpr"]]],[11,"quote","","",36,[[["str"]],["sexpr"]]],[11,"annot","","",36,[[["str"]],["sexpr"]]],[11,"docs","","",36,[[["str"],["sexpr"]],["sexpr"]]],[11,"to_sexpr","","",48,[[["self"]],["sexpr"]]],[11,"to_sexpr","","",22,[[["self"]],["sexpr"]]],[11,"to_sexpr","","",11,[[["self"]],["sexpr"]]],[11,"to_sexpr","","",31,[[["self"]],["sexpr"]]],[11,"to_sexpr","","",30,[[["self"]],["sexpr"]]],[11,"to_sexpr","","",0,[[["self"]],["sexpr"]]],[11,"to_sexpr","","",2,[[["self"]],["sexpr"]]],[11,"to_sexpr","","",12,[[["self"]],["sexpr"]]],[11,"to_sexpr","","",14,[[["self"]],["sexpr"]]],[11,"to_sexpr","","",4,[[["self"]],["sexpr"]]],[11,"to_sexpr","","",25,[[["self"]],["sexpr"]]],[11,"to_sexpr","","",9,[[["self"]],["sexpr"]]],[11,"to_sexpr","","",10,[[["self"]],["sexpr"]]],[11,"to_sexpr","","",7,[[["self"]],["sexpr"]]],[11,"join","","",37,[[["self"]],["self"]]],[11,"report_with","","",38,[[["witxio"],["self"]],["string"]]],[11,"report","","",38,[[["self"]],["string"]]],[8,"Documentation","","Enables generating Markdown formatted content.",null,null],[10,"to_md","","",60,[[["self"]],["string"]]],[8,"WitxIo","","",null,null],[10,"fgets","","Read the entire file into a String. Used to resolve `use`…",61,[[["path"],["self"]],[["result",["string","witxerror"]],["witxerror"],["string"]]]],[10,"fget_line","","Read a line of a file into a String. Used for error…",61,[[["path"],["self"],["usize"]],[["result",["string","witxerror"]],["witxerror"],["string"]]]],[10,"canonicalize","","Return the canonical (non-symlinked) path of a file. Used…",61,[[["path"],["self"]],[["witxerror"],["pathbuf"],["result",["pathbuf","witxerror"]]]]],[8,"Layout","","",null,null],[10,"mem_size_align","","",62,[[["self"]],["sizealign"]]],[11,"mem_size","","",62,[[["self"]],["usize"]]],[11,"mem_align","","",62,[[["self"]],["usize"]]],[8,"Representable","","",null,null],[10,"representable","","",63,[[["self"]],["repequality"]]],[11,"report_with","","",47,[[["witxio"],["self"]],["string"]]],[11,"report","","",47,[[["self"]],["string"]]],[11,"highlight_source_with","","",21,[[["witxio"],["self"]],["string"]]],[11,"highlight_source","","",21,[[["self"]],["string"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"to_string","","",36,[[["self"]],["string"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_string","","",38,[[["self"]],["string"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_string","","",47,[[["self"]],["string"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","witx::polyfill","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"to_string","","",55,[[["self"]],["string"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,[[["self"],["t"]]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"to_md","","",51,[[["self"]],["string"]]],[11,"to_md","","",52,[[["self"]],["string"]]],[11,"to_md","","",53,[[["self"]],["string"]]],[11,"to_md","","",54,[[["self"]],["string"]]],[11,"to_md","","",59,[[["self"]],["string"]]],[11,"to_md","witx","",49,[[["self"]],["string"]]],[11,"fgets","","",64,[[["path"],["self"]],[["result",["string","witxerror"]],["witxerror"],["string"]]]],[11,"fget_line","","",64,[[["path"],["self"],["usize"]],[["result",["string","witxerror"]],["witxerror"],["string"]]]],[11,"canonicalize","","",64,[[["path"],["self"]],[["witxerror"],["pathbuf"],["result",["pathbuf","witxerror"]]]]],[11,"fgets","","",50,[[["path"],["self"]],[["result",["string","witxerror"]],["witxerror"],["string"]]]],[11,"fget_line","","",50,[[["path"],["self"],["usize"]],[["result",["string","witxerror"]],["witxerror"],["string"]]]],[11,"canonicalize","","",50,[[["path"],["self"]],[["witxerror"],["pathbuf"],["result",["pathbuf","witxerror"]]]]],[11,"mem_size_align","","",31,[[["self"]],["sizealign"]]],[11,"mem_size_align","","",11,[[["self"]],["sizealign"]]],[11,"mem_size_align","","",30,[[["self"]],["sizealign"]]],[11,"mem_size_align","","",25,[[["self"]],["sizealign"]]],[11,"mem_size_align","","",12,[[["self"]],["sizealign"]]],[11,"mem_size_align","","",20,[[["self"]],["sizealign"]]],[11,"mem_size_align","","",14,[[["self"]],["sizealign"]]],[11,"mem_size_align","","",4,[[["self"]],["sizealign"]]],[11,"mem_size_align","","",22,[[["self"]],["sizealign"]]],[11,"representable","","",22,[[["self"]],["repequality"]]],[11,"representable","","",25,[[["self"]],["repequality"]]],[11,"representable","","",0,[[["self"]],["repequality"]]],[11,"representable","","",2,[[["self"]],["repequality"]]],[11,"representable","","",4,[[["self"]],["repequality"]]],[11,"representable","","",12,[[["self"]],["repequality"]]],[11,"representable","","",14,[[["self"]],["repequality"]]],[11,"representable","","",31,[[["self"]],["repequality"]]],[11,"representable","","",11,[[["self"]],["repequality"]]],[11,"representable","","",30,[[["self"]],["repequality"]]],[11,"from","","",32,[[["intrepr"]],["atomtype"]]],[11,"from","","",47,[[["error"]],["self"]]],[11,"from","","",47,[[["validationerror"]],["self"]]],[11,"clone","","",48,[[["self"]],["id"]]],[11,"clone","","",49,[[["self"]],["document"]]],[11,"clone","","",23,[[["self"]],["definition"]]],[11,"clone","","",24,[[["self"]],["entry"]]],[11,"clone","","",31,[[["self"]],["typeref"]]],[11,"clone","","",11,[[["self"]],["namedtype"]]],[11,"clone","","",30,[[["self"]],["type"]]],[11,"clone","","",22,[[["self"]],["builtintype"]]],[11,"clone","","",25,[[["self"]],["intrepr"]]],[11,"clone","","",0,[[["self"]],["enumdatatype"]]],[11,"clone","","",1,[[["self"]],["enumvariant"]]],[11,"clone","","",6,[[["self"]],["intdatatype"]]],[11,"clone","","",5,[[["self"]],["intconst"]]],[11,"clone","","",2,[[["self"]],["flagsdatatype"]]],[11,"clone","","",3,[[["self"]],["flagsmember"]]],[11,"clone","","",12,[[["self"]],["structdatatype"]]],[11,"clone","","",13,[[["self"]],["structmember"]]],[11,"clone","","",14,[[["self"]],["uniondatatype"]]],[11,"clone","","",15,[[["self"]],["unionvariant"]]],[11,"clone","","",4,[[["self"]],["handledatatype"]]],[11,"clone","","",9,[[["self"]],["module"]]],[11,"clone","","",27,[[["self"]],["moduledefinition"]]],[11,"clone","","",28,[[["self"]],["moduleentry"]]],[11,"clone","","",10,[[["self"]],["moduleimport"]]],[11,"clone","","",29,[[["self"]],["moduleimportvariant"]]],[11,"clone","","",7,[[["self"]],["interfacefunc"]]],[11,"clone","","",8,[[["self"]],["interfacefuncparam"]]],[11,"clone","","",26,[[["self"]],["interfacefuncparamposition"]]],[11,"clone","","",32,[[["self"]],["atomtype"]]],[11,"clone","","",34,[[["self"]],["typepassedby"]]],[11,"clone","","",17,[[["self"]],["coreparamtype"]]],[11,"clone","","",33,[[["self"]],["coreparamsignifies"]]],[11,"clone","","",16,[[["self"]],["corefunctype"]]],[11,"clone","","",18,[[["self"]],["sizealign"]]],[11,"clone","","",20,[[["self"]],["unionlayout"]]],[11,"clone","","",35,[[["self"]],["declsyntax"]]],[11,"clone","witx::polyfill","",51,[[["self"]],["polyfill"]]],[11,"clone","","",52,[[["self"]],["modulepolyfill"]]],[11,"clone","","",53,[[["self"]],["funcpolyfill"]]],[11,"clone","","",54,[[["self"]],["parampolyfill"]]],[11,"clone","","",58,[[["self"]],["paramunknown"]]],[11,"clone","","",59,[[["self"]],["typepolyfill"]]],[11,"clone","witx","",36,[[["self"]],["sexpr"]]],[11,"clone","","",37,[[["self"]],["repequality"]]],[11,"clone","","",21,[[["self"]],["location"]]],[11,"cmp","","",18,[[["sizealign"],["self"]],["ordering"]]],[11,"eq","","",48,[[["id"],["self"]],["bool"]]],[11,"ne","","",48,[[["id"],["self"]],["bool"]]],[11,"eq","","",49,[[["self"],["document"]],["bool"]]],[11,"eq","","",23,[[["definition"],["self"]],["bool"]]],[11,"ne","","",23,[[["definition"],["self"]],["bool"]]],[11,"eq","","",24,[[["entry"],["self"]],["bool"]]],[11,"eq","","",31,[[["typeref"],["self"]],["bool"]]],[11,"ne","","",31,[[["typeref"],["self"]],["bool"]]],[11,"eq","","",11,[[["namedtype"],["self"]],["bool"]]],[11,"ne","","",11,[[["namedtype"],["self"]],["bool"]]],[11,"eq","","",30,[[["self"],["type"]],["bool"]]],[11,"ne","","",30,[[["self"],["type"]],["bool"]]],[11,"eq","","",22,[[["builtintype"],["self"]],["bool"]]],[11,"eq","","",25,[[["self"],["intrepr"]],["bool"]]],[11,"eq","","",0,[[["self"],["enumdatatype"]],["bool"]]],[11,"ne","","",0,[[["self"],["enumdatatype"]],["bool"]]],[11,"eq","","",1,[[["enumvariant"],["self"]],["bool"]]],[11,"ne","","",1,[[["enumvariant"],["self"]],["bool"]]],[11,"eq","","",6,[[["intdatatype"],["self"]],["bool"]]],[11,"ne","","",6,[[["intdatatype"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["intconst"]],["bool"]]],[11,"ne","","",5,[[["self"],["intconst"]],["bool"]]],[11,"eq","","",2,[[["flagsdatatype"],["self"]],["bool"]]],[11,"ne","","",2,[[["flagsdatatype"],["self"]],["bool"]]],[11,"eq","","",3,[[["flagsmember"],["self"]],["bool"]]],[11,"ne","","",3,[[["flagsmember"],["self"]],["bool"]]],[11,"eq","","",12,[[["structdatatype"],["self"]],["bool"]]],[11,"ne","","",12,[[["structdatatype"],["self"]],["bool"]]],[11,"eq","","",13,[[["structmember"],["self"]],["bool"]]],[11,"ne","","",13,[[["structmember"],["self"]],["bool"]]],[11,"eq","","",14,[[["uniondatatype"],["self"]],["bool"]]],[11,"ne","","",14,[[["uniondatatype"],["self"]],["bool"]]],[11,"eq","","",15,[[["unionvariant"],["self"]],["bool"]]],[11,"ne","","",15,[[["unionvariant"],["self"]],["bool"]]],[11,"eq","","",4,[[["handledatatype"],["self"]],["bool"]]],[11,"ne","","",4,[[["handledatatype"],["self"]],["bool"]]],[11,"eq","","",9,[[["self"],["module"]],["bool"]]],[11,"eq","","",27,[[["moduledefinition"],["self"]],["bool"]]],[11,"ne","","",27,[[["moduledefinition"],["self"]],["bool"]]],[11,"eq","","",28,[[["moduleentry"],["self"]],["bool"]]],[11,"eq","","",10,[[["moduleimport"],["self"]],["bool"]]],[11,"ne","","",10,[[["moduleimport"],["self"]],["bool"]]],[11,"eq","","",29,[[["moduleimportvariant"],["self"]],["bool"]]],[11,"eq","","",7,[[["interfacefunc"],["self"]],["bool"]]],[11,"ne","","",7,[[["interfacefunc"],["self"]],["bool"]]],[11,"eq","","",8,[[["interfacefuncparam"],["self"]],["bool"]]],[11,"ne","","",8,[[["interfacefuncparam"],["self"]],["bool"]]],[11,"eq","","",26,[[["interfacefuncparamposition"],["self"]],["bool"]]],[11,"ne","","",26,[[["interfacefuncparamposition"],["self"]],["bool"]]],[11,"eq","","",32,[[["atomtype"],["self"]],["bool"]]],[11,"eq","","",34,[[["typepassedby"],["self"]],["bool"]]],[11,"ne","","",34,[[["typepassedby"],["self"]],["bool"]]],[11,"eq","","",17,[[["coreparamtype"],["self"]],["bool"]]],[11,"ne","","",17,[[["coreparamtype"],["self"]],["bool"]]],[11,"eq","","",33,[[["self"],["coreparamsignifies"]],["bool"]]],[11,"ne","","",33,[[["self"],["coreparamsignifies"]],["bool"]]],[11,"eq","","",16,[[["corefunctype"],["self"]],["bool"]]],[11,"ne","","",16,[[["corefunctype"],["self"]],["bool"]]],[11,"eq","","",18,[[["sizealign"],["self"]],["bool"]]],[11,"ne","","",18,[[["sizealign"],["self"]],["bool"]]],[11,"eq","","",20,[[["unionlayout"],["self"]],["bool"]]],[11,"ne","","",20,[[["unionlayout"],["self"]],["bool"]]],[11,"eq","","",35,[[["declsyntax"],["self"]],["bool"]]],[11,"ne","","",35,[[["declsyntax"],["self"]],["bool"]]],[11,"eq","witx::polyfill","",51,[[["self"],["polyfill"]],["bool"]]],[11,"ne","","",51,[[["self"],["polyfill"]],["bool"]]],[11,"eq","","",52,[[["self"],["modulepolyfill"]],["bool"]]],[11,"ne","","",52,[[["self"],["modulepolyfill"]],["bool"]]],[11,"eq","","",53,[[["self"],["funcpolyfill"]],["bool"]]],[11,"ne","","",53,[[["self"],["funcpolyfill"]],["bool"]]],[11,"eq","","",54,[[["self"],["parampolyfill"]],["bool"]]],[11,"ne","","",54,[[["self"],["parampolyfill"]],["bool"]]],[11,"eq","","",58,[[["paramunknown"],["self"]],["bool"]]],[11,"ne","","",58,[[["paramunknown"],["self"]],["bool"]]],[11,"eq","","",59,[[["self"],["typepolyfill"]],["bool"]]],[11,"ne","","",59,[[["self"],["typepolyfill"]],["bool"]]],[11,"eq","witx","",36,[[["self"],["sexpr"]],["bool"]]],[11,"ne","","",36,[[["self"],["sexpr"]],["bool"]]],[11,"eq","","",37,[[["repequality"],["self"]],["bool"]]],[11,"eq","","",21,[[["self"],["location"]],["bool"]]],[11,"ne","","",21,[[["self"],["location"]],["bool"]]],[11,"partial_cmp","","",18,[[["sizealign"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",18,[[["sizealign"],["self"]],["bool"]]],[11,"le","","",18,[[["sizealign"],["self"]],["bool"]]],[11,"gt","","",18,[[["sizealign"],["self"]],["bool"]]],[11,"ge","","",18,[[["sizealign"],["self"]],["bool"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","witx::polyfill","",55,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",51,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",52,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",54,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",58,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",59,[[["formatter"],["self"]],["result"]]],[11,"fmt","witx","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","witx::polyfill","",55,[[["formatter"],["self"]],["result"]]],[11,"fmt","witx","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",47,[[["formatter"],["self"]],["result"]]],[11,"hash","","",48,[[["self"],["__h"]]]],[11,"hash","","",49,[[["self"],["h"]]]],[11,"hash","","",23,[[["self"],["__h"]]]],[11,"hash","","",31,[[["self"],["__h"]]]],[11,"hash","","",11,[[["self"],["__h"]]]],[11,"hash","","",30,[[["self"],["__h"]]]],[11,"hash","","",22,[[["self"],["__h"]]]],[11,"hash","","",25,[[["self"],["__h"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","","",12,[[["self"],["__h"]]]],[11,"hash","","",13,[[["self"],["__h"]]]],[11,"hash","","",14,[[["self"],["__h"]]]],[11,"hash","","",15,[[["self"],["__h"]]]],[11,"hash","","",4,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"hash","","",27,[[["self"],["__h"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","","",29,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","","",26,[[["self"],["__h"]]]],[11,"hash","","",18,[[["self"],["__h"]]]],[11,"hash","witx::polyfill","",51,[[["self"],["__h"]]]],[11,"hash","","",52,[[["self"],["__h"]]]],[11,"hash","","",53,[[["self"],["__h"]]]],[11,"hash","","",54,[[["self"],["__h"]]]],[11,"hash","","",58,[[["self"],["__h"]]]],[11,"hash","","",59,[[["self"],["__h"]]]],[11,"source","witx","",47,[[["self"]],[["option",["error"]],["error"]]]],[11,"parse","","",22,[[["parser"]],["result"]]],[11,"parse","","",35,[[["parser"]],["result"]]],[11,"peek","","",22,[[["cursor"]],["bool"]]],[11,"display","","",22,[[],["str"]]],[11,"mem_size","","",62,[[["self"]],["usize"]]],[11,"mem_align","","",62,[[["self"]],["usize"]]]],"p":[[3,"EnumDatatype"],[3,"EnumVariant"],[3,"FlagsDatatype"],[3,"FlagsMember"],[3,"HandleDatatype"],[3,"IntConst"],[3,"IntDatatype"],[3,"InterfaceFunc"],[3,"InterfaceFuncParam"],[3,"Module"],[3,"ModuleImport"],[3,"NamedType"],[3,"StructDatatype"],[3,"StructMember"],[3,"UnionDatatype"],[3,"UnionVariant"],[3,"CoreFuncType"],[3,"CoreParamType"],[3,"SizeAlign"],[3,"StructMemberLayout"],[3,"UnionLayout"],[3,"Location"],[4,"BuiltinType"],[4,"Definition"],[4,"Entry"],[4,"IntRepr"],[4,"InterfaceFuncParamPosition"],[4,"ModuleDefinition"],[4,"ModuleEntry"],[4,"ModuleImportVariant"],[4,"Type"],[4,"TypeRef"],[4,"AtomType"],[4,"CoreParamSignifies"],[4,"TypePassedBy"],[4,"DeclSyntax"],[4,"SExpr"],[4,"RepEquality"],[4,"ValidationError"],[13,"UnknownName"],[13,"NameAlreadyExists"],[13,"WrongKindName"],[13,"Recursive"],[13,"InvalidRepr"],[13,"InvalidFirstResultType"],[13,"AnonymousStructure"],[13,"InvalidUnionField"],[4,"WitxError"],[3,"Id"],[3,"Document"],[3,"MockFs"],[3,"Polyfill"],[3,"ModulePolyfill"],[3,"FuncPolyfill"],[3,"ParamPolyfill"],[4,"PolyfillError"],[13,"ModuleNotPresent"],[13,"FuncNotPresent"],[4,"ParamUnknown"],[4,"TypePolyfill"],[8,"Documentation"],[8,"WitxIo"],[8,"Layout"],[8,"Representable"],[3,"Filesystem"]]};
searchIndex["yanix"] = {"doc":"`yanix` stands for Yet Another Nix crate, and, well, it is…","i":[[0,"clock","yanix","",null,null],[4,"ClockId","yanix::clock","",null,null],[13,"Realtime","","",0,null],[13,"Monotonic","","",0,null],[13,"ProcessCPUTime","","",0,null],[13,"ThreadCPUTime","","",0,null],[5,"clock_getres","","",null,[[["clockid"]],[["timespec"],["result",["timespec"]]]]],[5,"clock_gettime","","",null,[[["clockid"]],[["timespec"],["result",["timespec"]]]]],[11,"as_raw","","",0,[[["self"]],["clockid_t"]]],[0,"dir","yanix","",null,null],[3,"Dir","yanix::dir","",null,null],[3,"Entry","","",null,null],[3,"SeekLoc","","",null,null],[3,"DirIter","","",null,null],[8,"EntryExt","","",null,null],[10,"ino","","",1,[[["self"]],["u64"]]],[10,"seek_loc","","",1,[[["self"]],[["seekloc"],["result",["seekloc"]]]]],[11,"from","","Takes the ownership of the passed-in descriptor-based…",2,[[["intorawfd"]],["result"]]],[11,"seek","","Set the position of the directory stream, see `seekdir(3)`.",2,[[["self"],["seekloc"]]]],[11,"rewind","","Reset directory stream, see `rewinddir(3)`.",2,[[["self"]]]],[11,"tell","","Get the current position in the directory stream.",2,[[["self"]],["seekloc"]]],[11,"file_name","","Returns the file name of this directory entry.",3,[[["self"]],["cstr"]]],[11,"file_type","","Returns the type of this directory entry.",3,[[["self"]],["filetype"]]],[11,"to_raw","","",4,[[["self"]],["i64"]]],[11,"from_raw","","",4,[[["i64"]],["result"]]],[11,"new","","",5,[[["t"]],["self"]]],[0,"fcntl","yanix","",null,null],[5,"dup_fd","yanix::fcntl","",null,[[["rawfd"],["bool"]],[["rawfd"],["result",["rawfd"]]]]],[5,"get_fd_flags","","",null,[[["rawfd"]],[["result",["fdflag"]],["fdflag"]]]],[5,"set_fd_flags","","",null,[[["rawfd"],["fdflag"]],["result"]]],[5,"get_status_flags","","",null,[[["rawfd"]],[["result",["oflag"]],["oflag"]]]],[5,"set_status_flags","","",null,[[["rawfd"],["oflag"]],["result"]]],[0,"file","yanix","",null,null],[3,"FdFlag","yanix::file","",null,null],[3,"AtFlag","","",null,null],[3,"Mode","","",null,null],[3,"OFlag","","",null,null],[4,"FileType","","",null,null],[13,"CharacterDevice","","",6,null],[13,"Directory","","",6,null],[13,"BlockDevice","","",6,null],[13,"RegularFile","","",6,null],[13,"Symlink","","",6,null],[13,"Fifo","","",6,null],[13,"Socket","","",6,null],[13,"Unknown","","",6,null],[5,"isatty","","",null,[[["rawfd"]],[["bool"],["result",["bool"]]]]],[5,"openat","","",null,[[["mode"],["oflag"],["asref",["osstr"]],["rawfd"],["osstr"]],[["rawfd"],["result",["rawfd"]]]]],[5,"readlinkat","","",null,[[["asref",["osstr"]],["rawfd"],["osstr"]],[["osstring"],["result",["osstring"]]]]],[5,"mkdirat","","",null,[[["mode"],["asref",["osstr"]],["rawfd"],["osstr"]],["result"]]],[5,"linkat","","",null,[[["atflag"],["asref",["osstr"]],["rawfd"],["osstr"]],["result"]]],[5,"unlinkat","","",null,[[["atflag"],["asref",["osstr"]],["rawfd"],["osstr"]],["result"]]],[5,"renameat","","",null,[[["asref",["osstr"]],["rawfd"],["osstr"]],["result"]]],[5,"symlinkat","","",null,[[["asref",["osstr"]],["rawfd"],["osstr"]],["result"]]],[5,"fstatat","","",null,[[["atflag"],["asref",["osstr"]],["rawfd"],["osstr"]],[["stat"],["result",["stat"]]]]],[5,"fstat","","",null,[[["rawfd"]],[["stat"],["result",["stat"]]]]],[5,"fionread","","`fionread()` function, equivalent to `ioctl(fd, FIONREAD,…",null,[[["rawfd"]],[["result",["u32"]],["u32"]]]],[5,"tell","","This function is unsafe because it operates on a raw file…",null,[[["rawfd"]],[["u64"],["result",["u64"]]]]],[18,"CLOEXEC","","",7,null],[11,"empty","","Returns an empty set of flags",7,[[],["fdflag"]]],[11,"all","","Returns the set containing all flags.",7,[[],["fdflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",7,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",7,[[["c_int"]],[["fdflag"],["option",["fdflag"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",7,[[["c_int"]],["fdflag"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",7,[[["c_int"]],["fdflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",7,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",7,[[["self"],["fdflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",7,[[["self"],["fdflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",7,[[["self"],["fdflag"]]]],[11,"remove","","Removes the specified flags in-place.",7,[[["self"],["fdflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",7,[[["self"],["fdflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",7,[[["bool"],["self"],["fdflag"]]]],[18,"REMOVEDIR","","",8,null],[18,"SYMLINK_FOLLOW","","",8,null],[18,"SYMLINK_NOFOLLOW","","",8,null],[11,"empty","","Returns an empty set of flags",8,[[],["atflag"]]],[11,"all","","Returns the set containing all flags.",8,[[],["atflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",8,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",8,[[["c_int"]],[["atflag"],["option",["atflag"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",8,[[["c_int"]],["atflag"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",8,[[["c_int"]],["atflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",8,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",8,[[["self"],["atflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",8,[[["self"],["atflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",8,[[["self"],["atflag"]]]],[11,"remove","","Removes the specified flags in-place.",8,[[["self"],["atflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",8,[[["self"],["atflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",8,[[["bool"],["self"],["atflag"]]]],[18,"IRWXU","","",9,null],[18,"IRUSR","","",9,null],[18,"IWUSR","","",9,null],[18,"IXUSR","","",9,null],[18,"IRWXG","","",9,null],[18,"IRGRP","","",9,null],[18,"IWGRP","","",9,null],[18,"IXGRP","","",9,null],[18,"IRWXO","","",9,null],[18,"IROTH","","",9,null],[18,"IWOTH","","",9,null],[18,"IXOTH","","",9,null],[18,"ISUID","","",9,null],[18,"ISGID","","",9,null],[18,"ISVTX","","",9,null],[11,"empty","","Returns an empty set of flags",9,[[],["mode"]]],[11,"all","","Returns the set containing all flags.",9,[[],["mode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",9,[[["self"]],["mode_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",9,[[["mode_t"]],[["mode"],["option",["mode"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",9,[[["mode_t"]],["mode"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",9,[[["mode_t"]],["mode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",9,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",9,[[["mode"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",9,[[["mode"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",9,[[["mode"],["self"]]]],[11,"remove","","Removes the specified flags in-place.",9,[[["mode"],["self"]]]],[11,"toggle","","Toggles the specified flags in-place.",9,[[["mode"],["self"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",9,[[["mode"],["self"],["bool"]]]],[18,"ACCMODE","","",10,null],[18,"APPEND","","",10,null],[18,"CREAT","","",10,null],[18,"DIRECTORY","","",10,null],[18,"DSYNC","","",10,null],[18,"EXCL","","",10,null],[18,"FSYNC","","",10,null],[18,"NOFOLLOW","","",10,null],[18,"NONBLOCK","","",10,null],[18,"RDONLY","","",10,null],[18,"WRONLY","","",10,null],[18,"RDWR","","",10,null],[18,"RSYNC","","",10,null],[18,"SYNC","","",10,null],[18,"TRUNC","","",10,null],[11,"empty","","Returns an empty set of flags",10,[[],["oflag"]]],[11,"all","","Returns the set containing all flags.",10,[[],["oflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",10,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",10,[[["c_int"]],[["option",["oflag"]],["oflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",10,[[["c_int"]],["oflag"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",10,[[["c_int"]],["oflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",10,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",10,[[["self"],["oflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",10,[[["self"],["oflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",10,[[["self"],["oflag"]]]],[11,"remove","","Removes the specified flags in-place.",10,[[["self"],["oflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",10,[[["self"],["oflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",10,[[["self"],["oflag"],["bool"]]]],[11,"from_stat_st_mode","","",6,[[["mode_t"]],["self"]]],[11,"from_dirent_d_type","","",6,[[["u8"]],["self"]]],[0,"filetime","yanix","This module consists of helper types and functions for…",null,null],[4,"FileTime","yanix::filetime","A wrapper `enum` around `filetime::FileTime` struct, but…",null,null],[13,"Now","","",11,null],[13,"Omit","","",11,null],[13,"FileTime","","",11,null],[5,"utimensat","","Wrapper for `utimensat` syscall, however, with an added…",null,[[["str"],["filetime"],["file"],["bool"]],["result"]]],[0,"poll","yanix","",null,null],[3,"PollFlags","yanix::poll","",null,null],[3,"PollFd","","",null,null],[5,"poll","","",null,[[["c_int"]],[["result",["usize"]],["usize"]]]],[18,"POLLIN","","",12,null],[18,"POLLPRI","","",12,null],[18,"POLLOUT","","",12,null],[18,"POLLRDNORM","","",12,null],[18,"POLLWRNORM","","",12,null],[18,"POLLRDBAND","","",12,null],[18,"POLLWRBAND","","",12,null],[18,"POLLERR","","",12,null],[18,"POLLHUP","","",12,null],[18,"POLLNVAL","","",12,null],[11,"empty","","Returns an empty set of flags",12,[[],["pollflags"]]],[11,"all","","Returns the set containing all flags.",12,[[],["pollflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",12,[[["self"]],["c_short"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",12,[[["c_short"]],[["pollflags"],["option",["pollflags"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",12,[[["c_short"]],["pollflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",12,[[["c_short"]],["pollflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",12,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",12,[[["pollflags"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",12,[[["pollflags"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",12,[[["pollflags"],["self"]]]],[11,"remove","","Removes the specified flags in-place.",12,[[["pollflags"],["self"]]]],[11,"toggle","","Toggles the specified flags in-place.",12,[[["pollflags"],["self"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",12,[[["pollflags"],["self"],["bool"]]]],[11,"new","","",13,[[["pollflags"],["rawfd"]],["self"]]],[11,"revents","","",13,[[],[["option",["pollflags"]],["pollflags"]]]],[0,"socket","yanix","",null,null],[4,"SockType","yanix::socket","",null,null],[13,"Stream","","",14,null],[13,"Datagram","","",14,null],[13,"SeqPacket","","",14,null],[13,"Raw","","",14,null],[13,"Rdm","","",14,null],[5,"get_socket_type","","",null,[[["rawfd"]],[["result",["socktype"]],["socktype"]]]],[0,"fadvise","yanix","",null,null],[4,"PosixFadviseAdvice","yanix::fadvise","",null,null],[13,"Normal","","",15,null],[13,"Sequential","","",15,null],[13,"Random","","",15,null],[13,"NoReuse","","",15,null],[13,"WillNeed","","",15,null],[13,"DontNeed","","",15,null],[5,"posix_fadvise","","",null,[[["off_t"],["rawfd"],["posixfadviseadvice"]],["result"]]],[11,"from","yanix::clock","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","yanix::dir","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"into_iter","","",5,[[],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","yanix::file","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","yanix::filetime","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","yanix::poll","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","yanix::socket","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","yanix::fadvise","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"ino","yanix::dir","",3,[[["self"]],["u64"]]],[11,"seek_loc","","",3,[[["self"]],[["seekloc"],["result",["seekloc"]]]]],[11,"drop","","",2,[[["self"]]]],[11,"extend","yanix::file","",7,[[["self"],["intoiterator"]]]],[11,"extend","","",8,[[["self"],["intoiterator"]]]],[11,"extend","","",9,[[["self"],["intoiterator"]]]],[11,"extend","","",10,[[["self"],["intoiterator"]]]],[11,"extend","yanix::poll","",12,[[["intoiterator"],["self"]]]],[11,"next","yanix::dir","",5,[[["self"]],["option"]]],[11,"clone","yanix::clock","",0,[[["self"]],["clockid"]]],[11,"clone","yanix::dir","",2,[[["self"]],["dir"]]],[11,"clone","","",3,[[["self"]],["entry"]]],[11,"clone","","",4,[[["self"]],["seekloc"]]],[11,"clone","yanix::file","",7,[[["self"]],["fdflag"]]],[11,"clone","","",8,[[["self"]],["atflag"]]],[11,"clone","","",9,[[["self"]],["mode"]]],[11,"clone","","",10,[[["self"]],["oflag"]]],[11,"clone","","",6,[[["self"]],["filetype"]]],[11,"clone","yanix::filetime","",11,[[["self"]],["filetime"]]],[11,"clone","yanix::poll","",12,[[["self"]],["pollflags"]]],[11,"clone","","",13,[[["self"]],["pollfd"]]],[11,"clone","yanix::socket","",14,[[["self"]],["socktype"]]],[11,"clone","yanix::fadvise","",15,[[["self"]],["posixfadviseadvice"]]],[11,"cmp","yanix::file","",7,[[["fdflag"],["self"]],["ordering"]]],[11,"cmp","","",8,[[["atflag"],["self"]],["ordering"]]],[11,"cmp","","",9,[[["mode"],["self"]],["ordering"]]],[11,"cmp","","",10,[[["self"],["oflag"]],["ordering"]]],[11,"cmp","yanix::poll","",12,[[["pollflags"],["self"]],["ordering"]]],[11,"eq","yanix::dir","",2,[[["self"],["dir"]],["bool"]]],[11,"ne","","",2,[[["self"],["dir"]],["bool"]]],[11,"eq","yanix::file","",7,[[["fdflag"],["self"]],["bool"]]],[11,"ne","","",7,[[["fdflag"],["self"]],["bool"]]],[11,"eq","","",8,[[["atflag"],["self"]],["bool"]]],[11,"ne","","",8,[[["atflag"],["self"]],["bool"]]],[11,"eq","","",9,[[["mode"],["self"]],["bool"]]],[11,"ne","","",9,[[["mode"],["self"]],["bool"]]],[11,"eq","","",10,[[["self"],["oflag"]],["bool"]]],[11,"ne","","",10,[[["self"],["oflag"]],["bool"]]],[11,"eq","","",6,[[["self"],["filetype"]],["bool"]]],[11,"eq","yanix::poll","",12,[[["pollflags"],["self"]],["bool"]]],[11,"ne","","",12,[[["pollflags"],["self"]],["bool"]]],[11,"eq","","",13,[[["pollfd"],["self"]],["bool"]]],[11,"ne","","",13,[[["pollfd"],["self"]],["bool"]]],[11,"partial_cmp","yanix::file","",7,[[["fdflag"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",7,[[["fdflag"],["self"]],["bool"]]],[11,"le","","",7,[[["fdflag"],["self"]],["bool"]]],[11,"gt","","",7,[[["fdflag"],["self"]],["bool"]]],[11,"ge","","",7,[[["fdflag"],["self"]],["bool"]]],[11,"partial_cmp","","",8,[[["atflag"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",8,[[["atflag"],["self"]],["bool"]]],[11,"le","","",8,[[["atflag"],["self"]],["bool"]]],[11,"gt","","",8,[[["atflag"],["self"]],["bool"]]],[11,"ge","","",8,[[["atflag"],["self"]],["bool"]]],[11,"partial_cmp","","",9,[[["mode"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",9,[[["mode"],["self"]],["bool"]]],[11,"le","","",9,[[["mode"],["self"]],["bool"]]],[11,"gt","","",9,[[["mode"],["self"]],["bool"]]],[11,"ge","","",9,[[["mode"],["self"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["oflag"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",10,[[["self"],["oflag"]],["bool"]]],[11,"le","","",10,[[["self"],["oflag"]],["bool"]]],[11,"gt","","",10,[[["self"],["oflag"]],["bool"]]],[11,"ge","","",10,[[["self"],["oflag"]],["bool"]]],[11,"partial_cmp","yanix::poll","",12,[[["pollflags"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",12,[[["pollflags"],["self"]],["bool"]]],[11,"le","","",12,[[["pollflags"],["self"]],["bool"]]],[11,"gt","","",12,[[["pollflags"],["self"]],["bool"]]],[11,"ge","","",12,[[["pollflags"],["self"]],["bool"]]],[11,"fmt","yanix::clock","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","yanix::dir","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","yanix::file","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","yanix::filetime","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","yanix::poll","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","yanix::socket","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","yanix::fadvise","",15,[[["formatter"],["self"]],["result"]]],[11,"sub","yanix::file","Returns the set difference of the two sets of flags.",7,[[["fdflag"]],["fdflag"]]],[11,"sub","","Returns the set difference of the two sets of flags.",8,[[["atflag"]],["atflag"]]],[11,"sub","","Returns the set difference of the two sets of flags.",9,[[["mode"]],["mode"]]],[11,"sub","","Returns the set difference of the two sets of flags.",10,[[["oflag"]],["oflag"]]],[11,"sub","yanix::poll","Returns the set difference of the two sets of flags.",12,[[["pollflags"]],["pollflags"]]],[11,"sub_assign","yanix::file","Disables all flags enabled in the set.",7,[[["self"],["fdflag"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",8,[[["self"],["atflag"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",9,[[["mode"],["self"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",10,[[["self"],["oflag"]]]],[11,"sub_assign","yanix::poll","Disables all flags enabled in the set.",12,[[["pollflags"],["self"]]]],[11,"not","yanix::file","Returns the complement of this set of flags.",7,[[],["fdflag"]]],[11,"not","","Returns the complement of this set of flags.",8,[[],["atflag"]]],[11,"not","","Returns the complement of this set of flags.",9,[[],["mode"]]],[11,"not","","Returns the complement of this set of flags.",10,[[],["oflag"]]],[11,"not","yanix::poll","Returns the complement of this set of flags.",12,[[],["pollflags"]]],[11,"bitand","yanix::file","Returns the intersection between the two sets of flags.",7,[[["fdflag"]],["fdflag"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",8,[[["atflag"]],["atflag"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",9,[[["mode"]],["mode"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",10,[[["oflag"]],["oflag"]]],[11,"bitand","yanix::poll","Returns the intersection between the two sets of flags.",12,[[["pollflags"]],["pollflags"]]],[11,"bitor","yanix::file","Returns the union of the two sets of flags.",7,[[["fdflag"]],["fdflag"]]],[11,"bitor","","Returns the union of the two sets of flags.",8,[[["atflag"]],["atflag"]]],[11,"bitor","","Returns the union of the two sets of flags.",9,[[["mode"]],["mode"]]],[11,"bitor","","Returns the union of the two sets of flags.",10,[[["oflag"]],["oflag"]]],[11,"bitor","yanix::poll","Returns the union of the two sets of flags.",12,[[["pollflags"]],["pollflags"]]],[11,"bitxor","yanix::file","Returns the left flags, but with all the right flags…",7,[[["fdflag"]],["fdflag"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",8,[[["atflag"]],["atflag"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",9,[[["mode"]],["mode"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",10,[[["oflag"]],["oflag"]]],[11,"bitxor","yanix::poll","Returns the left flags, but with all the right flags…",12,[[["pollflags"]],["pollflags"]]],[11,"bitand_assign","yanix::file","Disables all flags disabled in the set.",7,[[["self"],["fdflag"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",8,[[["self"],["atflag"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",9,[[["mode"],["self"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",10,[[["self"],["oflag"]]]],[11,"bitand_assign","yanix::poll","Disables all flags disabled in the set.",12,[[["pollflags"],["self"]]]],[11,"bitor_assign","yanix::file","Adds the set of flags.",7,[[["self"],["fdflag"]]]],[11,"bitor_assign","","Adds the set of flags.",8,[[["self"],["atflag"]]]],[11,"bitor_assign","","Adds the set of flags.",9,[[["mode"],["self"]]]],[11,"bitor_assign","","Adds the set of flags.",10,[[["self"],["oflag"]]]],[11,"bitor_assign","yanix::poll","Adds the set of flags.",12,[[["pollflags"],["self"]]]],[11,"bitxor_assign","yanix::file","Toggles the set of flags.",7,[[["self"],["fdflag"]]]],[11,"bitxor_assign","","Toggles the set of flags.",8,[[["self"],["atflag"]]]],[11,"bitxor_assign","","Toggles the set of flags.",9,[[["mode"],["self"]]]],[11,"bitxor_assign","","Toggles the set of flags.",10,[[["self"],["oflag"]]]],[11,"bitxor_assign","yanix::poll","Toggles the set of flags.",12,[[["pollflags"],["self"]]]],[11,"hash","yanix::dir","",2,[[["self"],["__h"]]]],[11,"hash","yanix::file","",7,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","yanix::poll","",12,[[["self"],["__h"]]]],[11,"hash","","",13,[[["self"],["__h"]]]],[11,"from_iter","yanix::file","",7,[[["intoiterator"]],["fdflag"]]],[11,"from_iter","","",8,[[["intoiterator"]],["atflag"]]],[11,"from_iter","","",9,[[["intoiterator"]],["mode"]]],[11,"from_iter","","",10,[[["intoiterator"]],["oflag"]]],[11,"from_iter","yanix::poll","",12,[[["intoiterator"]],["pollflags"]]],[11,"fmt","yanix::file","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","yanix::poll","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","yanix::file","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","yanix::poll","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","yanix::file","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","yanix::poll","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","yanix::file","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","yanix::poll","",12,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","yanix::dir","",2,[[["self"]],["rawfd"]]]],"p":[[4,"ClockId"],[8,"EntryExt"],[3,"Dir"],[3,"Entry"],[3,"SeekLoc"],[3,"DirIter"],[4,"FileType"],[3,"FdFlag"],[3,"AtFlag"],[3,"Mode"],[3,"OFlag"],[4,"FileTime"],[3,"PollFlags"],[3,"PollFd"],[4,"SockType"],[4,"PosixFadviseAdvice"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);